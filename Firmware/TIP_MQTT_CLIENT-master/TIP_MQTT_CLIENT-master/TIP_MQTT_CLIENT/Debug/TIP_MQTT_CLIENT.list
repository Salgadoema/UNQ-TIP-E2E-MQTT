
TIP_MQTT_CLIENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cc94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004304  0801ce44  0801ce44  0002ce44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021148  08021148  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08021148  08021148  00031148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021150  08021150  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021150  08021150  00031150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021154  08021154  00031154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08021158  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010290  200001f0  08021348  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010480  08021348  00040480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053fa3  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009862  00000000  00000000  000941c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002908  00000000  00000000  0009da28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002798  00000000  00000000  000a0330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039179  00000000  00000000  000a2ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00035dac  00000000  00000000  000dbc41  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105d49  00000000  00000000  001119ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00217736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b004  00000000  00000000  002177b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801ce2c 	.word	0x0801ce2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0801ce2c 	.word	0x0801ce2c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 fcc4 	bl	8001752 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f01a fe5e 	bl	801ba8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f01a fe30 	bl	801ba34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000004 	.word	0x20000004
 8000e04:	20008db4 	.word	0x20008db4

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20008db4 	.word	0x20008db4

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_Delay+0x40>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e033      	b.n	8000ee2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d109      	bne.n	8000e96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f019 fcd4 	bl	801a830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d118      	bne.n	8000ed4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eaa:	f023 0302 	bic.w	r3, r3, #2
 8000eae:	f043 0202 	orr.w	r2, r3, #2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 faa2 	bl	8001400 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	f043 0201 	orr.w	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed2:	e001      	b.n	8000ed8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d101      	bne.n	8000f06 <HAL_ADC_Start+0x1a>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e0a5      	b.n	8001052 <HAL_ADC_Start+0x166>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d018      	beq.n	8000f4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0201 	orr.w	r2, r2, #1
 8000f2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f2c:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <HAL_ADC_Start+0x174>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_ADC_Start+0x178>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9a      	lsrs	r2, r3, #18
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f40:	e002      	b.n	8000f48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d179      	bne.n	8001050 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f9a:	d106      	bne.n	8000faa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	f023 0206 	bic.w	r2, r3, #6
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_ADC_Start+0x17c>)
 8000fba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fc4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d12a      	bne.n	8001028 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a25      	ldr	r2, [pc, #148]	; (800106c <HAL_ADC_Start+0x180>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d015      	beq.n	8001008 <HAL_ADC_Start+0x11c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a23      	ldr	r2, [pc, #140]	; (8001070 <HAL_ADC_Start+0x184>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d105      	bne.n	8000ff2 <HAL_ADC_Start+0x106>
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_ADC_Start+0x17c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00a      	beq.n	8001008 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <HAL_ADC_Start+0x188>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d129      	bne.n	8001050 <HAL_ADC_Start+0x164>
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_ADC_Start+0x17c>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d823      	bhi.n	8001050 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d11c      	bne.n	8001050 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	e013      	b.n	8001050 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_ADC_Start+0x180>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10e      	bne.n	8001050 <HAL_ADC_Start+0x164>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d107      	bne.n	8001050 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800104e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000001c 	.word	0x2000001c
 8001064:	431bde83 	.word	0x431bde83
 8001068:	40012300 	.word	0x40012300
 800106c:	40012000 	.word	0x40012000
 8001070:	40012100 	.word	0x40012100
 8001074:	40012200 	.word	0x40012200

08001078 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001094:	d113      	bne.n	80010be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a4:	d10b      	bne.n	80010be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f043 0220 	orr.w	r2, r3, #32
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e05c      	b.n	8001178 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010be:	f7ff fea3 	bl	8000e08 <HAL_GetTick>
 80010c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010c4:	e01a      	b.n	80010fc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d016      	beq.n	80010fc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d007      	beq.n	80010e4 <HAL_ADC_PollForConversion+0x6c>
 80010d4:	f7ff fe98 	bl	8000e08 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d20b      	bcs.n	80010fc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f043 0204 	orr.w	r2, r3, #4
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e03d      	b.n	8001178 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b02      	cmp	r3, #2
 8001108:	d1dd      	bne.n	80010c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f06f 0212 	mvn.w	r2, #18
 8001112:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d123      	bne.n	8001176 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001132:	2b00      	cmp	r3, #0
 8001134:	d11f      	bne.n	8001176 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800114e:	2b00      	cmp	r3, #0
 8001150:	d111      	bne.n	8001176 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d105      	bne.n	8001176 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1c>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e113      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x244>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b09      	cmp	r3, #9
 80011c6:	d925      	bls.n	8001214 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68d9      	ldr	r1, [r3, #12]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	3b1e      	subs	r3, #30
 80011de:	2207      	movs	r2, #7
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43da      	mvns	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	400a      	ands	r2, r1
 80011ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68d9      	ldr	r1, [r3, #12]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	4603      	mov	r3, r0
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4403      	add	r3, r0
 8001206:	3b1e      	subs	r3, #30
 8001208:	409a      	lsls	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	e022      	b.n	800125a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6919      	ldr	r1, [r3, #16]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	2207      	movs	r2, #7
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	400a      	ands	r2, r1
 8001236:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6919      	ldr	r1, [r3, #16]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	4603      	mov	r3, r0
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4403      	add	r3, r0
 8001250:	409a      	lsls	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b06      	cmp	r3, #6
 8001260:	d824      	bhi.n	80012ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	3b05      	subs	r3, #5
 8001274:	221f      	movs	r2, #31
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	400a      	ands	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	3b05      	subs	r3, #5
 800129e:	fa00 f203 	lsl.w	r2, r0, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
 80012aa:	e04c      	b.n	8001346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d824      	bhi.n	80012fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b23      	subs	r3, #35	; 0x23
 80012c6:	221f      	movs	r2, #31
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43da      	mvns	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	400a      	ands	r2, r1
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	3b23      	subs	r3, #35	; 0x23
 80012f0:	fa00 f203 	lsl.w	r2, r0, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	631a      	str	r2, [r3, #48]	; 0x30
 80012fc:	e023      	b.n	8001346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	3b41      	subs	r3, #65	; 0x41
 8001310:	221f      	movs	r2, #31
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	400a      	ands	r2, r1
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	3b41      	subs	r3, #65	; 0x41
 800133a:	fa00 f203 	lsl.w	r2, r0, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_ADC_ConfigChannel+0x250>)
 8001348:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <HAL_ADC_ConfigChannel+0x254>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d10f      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1d8>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b12      	cmp	r3, #18
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_ADC_ConfigChannel+0x254>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12b      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x23a>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_ADC_ConfigChannel+0x258>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d003      	beq.n	8001390 <HAL_ADC_ConfigChannel+0x1f4>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b11      	cmp	r3, #17
 800138e:	d122      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_ADC_ConfigChannel+0x258>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d111      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_ADC_ConfigChannel+0x25c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_ADC_ConfigChannel+0x260>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9a      	lsrs	r2, r3, #18
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f9      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40012300 	.word	0x40012300
 80013f0:	40012000 	.word	0x40012000
 80013f4:	10000012 	.word	0x10000012
 80013f8:	2000001c 	.word	0x2000001c
 80013fc:	431bde83 	.word	0x431bde83

08001400 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001408:	4b79      	ldr	r3, [pc, #484]	; (80015f0 <ADC_Init+0x1f0>)
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	431a      	orrs	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	021a      	lsls	r2, r3, #8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6899      	ldr	r1, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <ADC_Init+0x1f4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d022      	beq.n	80014de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6899      	ldr	r1, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6899      	ldr	r1, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	e00f      	b.n	80014fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0202 	bic.w	r2, r2, #2
 800150c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6899      	ldr	r1, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e1b      	ldrb	r3, [r3, #24]
 8001518:	005a      	lsls	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01b      	beq.n	8001564 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800153a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800154a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6859      	ldr	r1, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	3b01      	subs	r3, #1
 8001558:	035a      	lsls	r2, r3, #13
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	e007      	b.n	8001574 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001572:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	3b01      	subs	r3, #1
 8001590:	051a      	lsls	r2, r3, #20
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6899      	ldr	r1, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015b6:	025a      	lsls	r2, r3, #9
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6899      	ldr	r1, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	029a      	lsls	r2, r3, #10
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40012300 	.word	0x40012300
 80015f4:	0f000001 	.word	0x0f000001

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <__NVIC_EnableIRQ+0x38>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
         );
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff4c 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177a:	f7ff ff61 	bl	8001640 <__NVIC_GetPriorityGrouping>
 800177e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	6978      	ldr	r0, [r7, #20]
 8001786:	f7ff ffb1 	bl	80016ec <NVIC_EncodePriority>
 800178a:	4602      	mov	r2, r0
 800178c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff80 	bl	8001698 <__NVIC_SetPriority>
}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff54 	bl	800165c <__NVIC_EnableIRQ>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80017cc:	4baa      	ldr	r3, [pc, #680]	; (8001a78 <HAL_ETH_Init+0x2bc>)
 80017ce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e185      	b.n	8001aee <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f019 f85e 	bl	801a8b8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	4b9e      	ldr	r3, [pc, #632]	; (8001a7c <HAL_ETH_Init+0x2c0>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	4a9d      	ldr	r2, [pc, #628]	; (8001a7c <HAL_ETH_Init+0x2c0>)
 8001806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180a:	6453      	str	r3, [r2, #68]	; 0x44
 800180c:	4b9b      	ldr	r3, [pc, #620]	; (8001a7c <HAL_ETH_Init+0x2c0>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001818:	4b99      	ldr	r3, [pc, #612]	; (8001a80 <HAL_ETH_Init+0x2c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a98      	ldr	r2, [pc, #608]	; (8001a80 <HAL_ETH_Init+0x2c4>)
 800181e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001822:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001824:	4b96      	ldr	r3, [pc, #600]	; (8001a80 <HAL_ETH_Init+0x2c4>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4994      	ldr	r1, [pc, #592]	; (8001a80 <HAL_ETH_Init+0x2c4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800184a:	f7ff fadd 	bl	8000e08 <HAL_GetTick>
 800184e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001850:	e011      	b.n	8001876 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001852:	f7ff fad9 	bl	8000e08 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001860:	d909      	bls.n	8001876 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e13b      	b.n	8001aee <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1e4      	bne.n	8001852 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f023 031c 	bic.w	r3, r3, #28
 8001896:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001898:	f002 ff44 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 800189c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4a78      	ldr	r2, [pc, #480]	; (8001a84 <HAL_ETH_Init+0x2c8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d908      	bls.n	80018b8 <HAL_ETH_Init+0xfc>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4a77      	ldr	r2, [pc, #476]	; (8001a88 <HAL_ETH_Init+0x2cc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d804      	bhi.n	80018b8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	e027      	b.n	8001908 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	4a73      	ldr	r2, [pc, #460]	; (8001a88 <HAL_ETH_Init+0x2cc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d908      	bls.n	80018d2 <HAL_ETH_Init+0x116>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	4a72      	ldr	r2, [pc, #456]	; (8001a8c <HAL_ETH_Init+0x2d0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d804      	bhi.n	80018d2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f043 030c 	orr.w	r3, r3, #12
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	e01a      	b.n	8001908 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4a6d      	ldr	r2, [pc, #436]	; (8001a8c <HAL_ETH_Init+0x2d0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d903      	bls.n	80018e2 <HAL_ETH_Init+0x126>
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4a6c      	ldr	r2, [pc, #432]	; (8001a90 <HAL_ETH_Init+0x2d4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d911      	bls.n	8001906 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <HAL_ETH_Init+0x2d4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d908      	bls.n	80018fc <HAL_ETH_Init+0x140>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4a69      	ldr	r2, [pc, #420]	; (8001a94 <HAL_ETH_Init+0x2d8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d804      	bhi.n	80018fc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e005      	b.n	8001908 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	e000      	b.n	8001908 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001906:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001910:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001914:	2100      	movs	r1, #0
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fc19 	bl	800214e <HAL_ETH_WritePHYRegister>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001926:	6939      	ldr	r1, [r7, #16]
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fdcf 	bl	80024cc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0d9      	b.n	8001aee <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800193a:	20ff      	movs	r0, #255	; 0xff
 800193c:	f7ff fa70 	bl	8000e20 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a7 	beq.w	8001a98 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800194a:	f7ff fa5d 	bl	8000e08 <HAL_GetTick>
 800194e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	461a      	mov	r2, r3
 8001956:	2101      	movs	r1, #1
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 fb90 	bl	800207e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800195e:	f7ff fa53 	bl	8000e08 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d90f      	bls.n	8001990 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001974:	6939      	ldr	r1, [r7, #16]
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fda8 	bl	80024cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0ae      	b.n	8001aee <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0da      	beq.n	8001950 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800199a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800199e:	2100      	movs	r1, #0
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fbd4 	bl	800214e <HAL_ETH_WritePHYRegister>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80019b0:	6939      	ldr	r1, [r7, #16]
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fd8a 	bl	80024cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80019c0:	2301      	movs	r3, #1
 80019c2:	e094      	b.n	8001aee <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80019c4:	f7ff fa20 	bl	8000e08 <HAL_GetTick>
 80019c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	461a      	mov	r2, r3
 80019d0:	2101      	movs	r1, #1
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fb53 	bl	800207e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80019d8:	f7ff fa16 	bl	8000e08 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d90f      	bls.n	8001a0a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80019ee:	6939      	ldr	r1, [r7, #16]
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fd6b 	bl	80024cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e071      	b.n	8001aee <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0da      	beq.n	80019ca <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	461a      	mov	r2, r3
 8001a1a:	211f      	movs	r1, #31
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 fb2e 	bl	800207e <HAL_ETH_ReadPHYRegister>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00b      	beq.n	8001a40 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a2c:	6939      	ldr	r1, [r7, #16]
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fd4c 	bl	80024cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e056      	b.n	8001aee <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	e002      	b.n	8001a5a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	e037      	b.n	8001adc <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e032      	b.n	8001adc <HAL_ETH_Init+0x320>
 8001a76:	bf00      	nop
 8001a78:	03938700 	.word	0x03938700
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40013800 	.word	0x40013800
 8001a84:	01312cff 	.word	0x01312cff
 8001a88:	02160ebf 	.word	0x02160ebf
 8001a8c:	039386ff 	.word	0x039386ff
 8001a90:	05f5e0ff 	.word	0x05f5e0ff
 8001a94:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	2100      	movs	r1, #0
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fb4c 	bl	800214e <HAL_ETH_WritePHYRegister>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ac0:	6939      	ldr	r1, [r7, #16]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fd02 	bl	80024cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e00c      	b.n	8001aee <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001ad4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ad8:	f7ff f9a2 	bl	8000e20 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001adc:	6939      	ldr	r1, [r7, #16]
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fcf4 	bl	80024cc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop

08001af8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_ETH_DMATxDescListInit+0x20>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e052      	b.n	8001bbe <HAL_ETH_DMATxDescListInit+0xc6>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e030      	b.n	8001b96 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	015b      	lsls	r3, r3, #5
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b44:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d208      	bcs.n	8001b8a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	015b      	lsls	r3, r3, #5
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	461a      	mov	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	e002      	b.n	8001b90 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d3ca      	bcc.n	8001b34 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba8:	3310      	adds	r3, #16
 8001baa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b087      	sub	sp, #28
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_ETH_DMARxDescListInit+0x20>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e056      	b.n	8001c98 <HAL_ETH_DMARxDescListInit+0xce>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e034      	b.n	8001c70 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	015b      	lsls	r3, r3, #5
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c16:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c1e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	461a      	mov	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d208      	bcs.n	8001c64 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	e002      	b.n	8001c6a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d3c6      	bcc.n	8001c06 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c82:	330c      	adds	r3, #12
 8001c84:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ETH_TransmitFrame+0x24>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e0cd      	b.n	8001e64 <HAL_ETH_TransmitFrame+0x1c0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0b8      	b.n	8001e64 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da09      	bge.n	8001d10 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2212      	movs	r2, #18
 8001d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0a9      	b.n	8001e64 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d915      	bls.n	8001d46 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <HAL_ETH_TransmitFrame+0x1cc>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_ETH_TransmitFrame+0x1cc>)
 8001d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d2e:	0a9b      	lsrs	r3, r3, #10
 8001d30:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e001      	b.n	8001d4a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001d46:	2301      	movs	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d11c      	bne.n	8001d8a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001d5e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001d6a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d7a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d88:	e04b      	b.n	8001e22 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e044      	b.n	8001e1a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d9e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001db4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001dbe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d116      	bne.n	8001df8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001dd8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <HAL_ETH_TransmitFrame+0x1d0>)
 8001dde:	fb02 f203 	mul.w	r2, r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001dea:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001df6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e06:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3301      	adds	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d3b6      	bcc.n	8001d90 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	3314      	adds	r3, #20
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00d      	beq.n	8001e52 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3e:	3314      	adds	r3, #20
 8001e40:	2204      	movs	r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	ac02b00b 	.word	0xac02b00b
 8001e74:	fffffa0c 	.word	0xfffffa0c

08001e78 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e074      	b.n	8001f7c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ea2:	e05a      	b.n	8001f5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed4:	e041      	b.n	8001f5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10b      	bne.n	8001efc <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28
 8001efa:	e02e      	b.n	8001f5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d103      	bne.n	8001f1e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f2a:	1f1a      	subs	r2, r3, #4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	461a      	mov	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e010      	b.n	8001f7c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db02      	blt.n	8001f6a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d99c      	bls.n	8001ea4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f98:	3314      	adds	r3, #20
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa0:	2b40      	cmp	r3, #64	; 0x40
 8001fa2:	d112      	bne.n	8001fca <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f018 fd55 	bl	801aa54 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fc8:	e01b      	b.n	8002002 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d111      	bne.n	8002002 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f839 	bl	8002056 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fec:	3314      	adds	r3, #20
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200a:	3314      	adds	r3, #20
 800200c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002010:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	3314      	adds	r3, #20
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002026:	d112      	bne.n	800204e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f81e 	bl	800206a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002036:	3314      	adds	r3, #20
 8002038:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800203c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	460b      	mov	r3, r1
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b82      	cmp	r3, #130	; 0x82
 800209e:	d101      	bne.n	80020a4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
 80020a2:	e050      	b.n	8002146 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2282      	movs	r2, #130	; 0x82
 80020a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 031c 	and.w	r3, r3, #28
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8a1b      	ldrh	r3, [r3, #16]
 80020c0:	02db      	lsls	r3, r3, #11
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f023 0302 	bic.w	r3, r3, #2
 80020de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80020f0:	f7fe fe8a 	bl	8000e08 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020f6:	e015      	b.n	8002124 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80020f8:	f7fe fe86 	bl	8000e08 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d309      	bcc.n	800211c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e014      	b.n	8002146 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e4      	bne.n	80020f8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	460b      	mov	r3, r1
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b42      	cmp	r3, #66	; 0x42
 800216e:	d101      	bne.n	8002174 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
 8002172:	e04e      	b.n	8002212 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2242      	movs	r2, #66	; 0x42
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 031c 	and.w	r3, r3, #28
 800218a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8a1b      	ldrh	r3, [r3, #16]
 8002190:	02db      	lsls	r3, r3, #11
 8002192:	b29b      	uxth	r3, r3
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800219a:	897b      	ldrh	r3, [r7, #10]
 800219c:	019b      	lsls	r3, r3, #6
 800219e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80021ca:	f7fe fe1d 	bl	8000e08 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021d0:	e015      	b.n	80021fe <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80021d2:	f7fe fe19 	bl	8000e08 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d309      	bcc.n	80021f6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e00d      	b.n	8002212 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e4      	bne.n	80021d2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_ETH_Start+0x16>
 800222c:	2302      	movs	r3, #2
 800222e:	e01f      	b.n	8002270 <HAL_ETH_Start+0x56>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fb45 	bl	80028d0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fb7c 	bl	8002944 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fc13 	bl	8002a78 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fbb0 	bl	80029b8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fbdd 	bl	8002a18 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_ETH_Stop+0x16>
 800228a:	2302      	movs	r3, #2
 800228c:	e01f      	b.n	80022ce <HAL_ETH_Stop+0x56>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fba2 	bl	80029e8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fbcf 	bl	8002a48 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fb67 	bl	800297e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fbe1 	bl	8002a78 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fb27 	bl	800290a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_ETH_ConfigMAC+0x1c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e0e4      	b.n	80024be <HAL_ETH_ConfigMAC+0x1e6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80b1 	beq.w	800246e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002324:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800232a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002330:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002336:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800233c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002342:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002348:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800234e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002354:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800235a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002360:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002366:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800237e:	2001      	movs	r0, #1
 8002380:	f7fe fd4e 	bl	8000e20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002394:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800239a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80023a0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80023a6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80023ac:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80023b2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80023be:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023c0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7fe fd28 	bl	8000e20 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023e0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023ea:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80023fa:	4013      	ands	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002408:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800240e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002414:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800241a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002420:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002438:	2001      	movs	r0, #1
 800243a:	f7fe fcf1 	bl	8000e20 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800245e:	2001      	movs	r0, #1
 8002460:	f7fe fcde 	bl	8000e20 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	61da      	str	r2, [r3, #28]
 800246c:	e01e      	b.n	80024ac <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800247c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7fe fcbe 	bl	8000e20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	ff20810f 	.word	0xff20810f

080024cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0b0      	sub	sp, #192	; 0xc0
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024e8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80024fa:	2300      	movs	r3, #0
 80024fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002516:	663b      	str	r3, [r7, #96]	; 0x60
 8002518:	e001      	b.n	800251e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800251e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002522:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002528:	2300      	movs	r3, #0
 800252a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002538:	2340      	movs	r3, #64	; 0x40
 800253a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a4:	4bac      	ldr	r3, [pc, #688]	; (8002858 <ETH_MACDMAConfig+0x38c>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80025ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80025ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80025b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80025b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80025b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80025b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80025be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80025c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80025c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80025c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80025cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80025ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80025d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80025d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80025d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80025d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80025d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80025dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80025de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80025e0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80025e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002600:	2001      	movs	r0, #1
 8002602:	f7fe fc0d 	bl	8000e20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800260e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002610:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002614:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002618:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800261a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800261e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002624:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800262a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800262c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002630:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002634:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800263c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800263e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800264a:	2001      	movs	r0, #1
 800264c:	f7fe fbe8 	bl	8000e20 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002658:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002662:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800266c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002678:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800267c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002680:	4013      	ands	r3, r2
 8002682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002686:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800268a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800268c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002690:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002696:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800269c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800269e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80026a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80026a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80026a8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7fe fba9 	bl	8000e20 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80026d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80026dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7fe fb94 	bl	8000e20 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002700:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800270a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002710:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002714:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002726:	2304      	movs	r3, #4
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800272a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002746:	2300      	movs	r3, #0
 8002748:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800274a:	2300      	movs	r3, #0
 800274c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002756:	3318      	adds	r3, #24
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800275e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002762:	4b3e      	ldr	r3, [pc, #248]	; (800285c <ETH_MACDMAConfig+0x390>)
 8002764:	4013      	ands	r3, r2
 8002766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800276a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800276c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800276e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002770:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002772:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002774:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002776:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002778:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800277a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800277c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800277e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002780:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002782:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002786:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800278a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800278c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	3318      	adds	r3, #24
 80027a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ae:	3318      	adds	r3, #24
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7fe fb32 	bl	8000e20 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c4:	3318      	adds	r3, #24
 80027c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80027d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80027d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80027da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80027dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80027de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80027e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80027e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002804:	2001      	movs	r0, #1
 8002806:	f7fe fb0b 	bl	8000e20 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002812:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002816:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10f      	bne.n	8002840 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002828:	331c      	adds	r3, #28
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283c:	331c      	adds	r3, #28
 800283e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	461a      	mov	r2, r3
 8002846:	2100      	movs	r1, #0
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f809 	bl	8002860 <ETH_MACAddressConfig>
}
 800284e:	bf00      	nop
 8002850:	37c0      	adds	r7, #192	; 0xc0
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	ff20810f 	.word	0xff20810f
 800285c:	f8de3f23 	.word	0xf8de3f23

08002860 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3305      	adds	r3, #5
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	3204      	adds	r2, #4
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <ETH_MACAddressConfig+0x68>)
 8002882:	4413      	add	r3, r2
 8002884:	461a      	mov	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3303      	adds	r3, #3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	061a      	lsls	r2, r3, #24
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3302      	adds	r3, #2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3301      	adds	r3, #1
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	4313      	orrs	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <ETH_MACAddressConfig+0x6c>)
 80028b2:	4413      	add	r3, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6013      	str	r3, [r2, #0]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40028040 	.word	0x40028040
 80028cc:	40028044 	.word	0x40028044

080028d0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0208 	orr.w	r2, r2, #8
 80028ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f000 f8e9 	bl	8002acc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0208 	bic.w	r2, r2, #8
 8002924:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800292e:	2001      	movs	r0, #1
 8002930:	f000 f8cc 	bl	8002acc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0204 	orr.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002968:	2001      	movs	r0, #1
 800296a:	f000 f8af 	bl	8002acc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	601a      	str	r2, [r3, #0]
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f000 f892 	bl	8002acc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c8:	3318      	adds	r3, #24
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d8:	3318      	adds	r3, #24
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f8:	3318      	adds	r3, #24
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a08:	3318      	adds	r3, #24
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a28:	3318      	adds	r3, #24
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0202 	orr.w	r2, r2, #2
 8002a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a38:	3318      	adds	r3, #24
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a58:	3318      	adds	r3, #24
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0202 	bic.w	r2, r2, #2
 8002a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a68:	3318      	adds	r3, #24
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a8c:	3318      	adds	r3, #24
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f000 f80c 	bl	8002acc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abe:	3318      	adds	r3, #24
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <ETH_Delay+0x34>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <ETH_Delay+0x38>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0a5b      	lsrs	r3, r3, #9
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002ae8:	bf00      	nop
  } 
  while (Delay --);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	60fa      	str	r2, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <ETH_Delay+0x1c>
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	2000001c 	.word	0x2000001c
 8002b04:	10624dd3 	.word	0x10624dd3

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e177      	b.n	8002e14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b24:	2201      	movs	r2, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	f040 8166 	bne.w	8002e0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d00b      	beq.n	8002b62 <HAL_GPIO_Init+0x5a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b56:	2b11      	cmp	r3, #17
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b12      	cmp	r3, #18
 8002b60:	d130      	bne.n	8002bc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 0201 	and.w	r2, r3, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0xfc>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b12      	cmp	r3, #18
 8002c02:	d123      	bne.n	8002c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	69b9      	ldr	r1, [r7, #24]
 8002c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0203 	and.w	r2, r3, #3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80c0 	beq.w	8002e0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a64      	ldr	r2, [pc, #400]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002caa:	4a60      	ldr	r2, [pc, #384]	; (8002e2c <HAL_GPIO_Init+0x324>)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a57      	ldr	r2, [pc, #348]	; (8002e30 <HAL_GPIO_Init+0x328>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d037      	beq.n	8002d46 <HAL_GPIO_Init+0x23e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_GPIO_Init+0x32c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d031      	beq.n	8002d42 <HAL_GPIO_Init+0x23a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a55      	ldr	r2, [pc, #340]	; (8002e38 <HAL_GPIO_Init+0x330>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02b      	beq.n	8002d3e <HAL_GPIO_Init+0x236>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a54      	ldr	r2, [pc, #336]	; (8002e3c <HAL_GPIO_Init+0x334>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d025      	beq.n	8002d3a <HAL_GPIO_Init+0x232>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a53      	ldr	r2, [pc, #332]	; (8002e40 <HAL_GPIO_Init+0x338>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01f      	beq.n	8002d36 <HAL_GPIO_Init+0x22e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_GPIO_Init+0x33c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d019      	beq.n	8002d32 <HAL_GPIO_Init+0x22a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a51      	ldr	r2, [pc, #324]	; (8002e48 <HAL_GPIO_Init+0x340>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_GPIO_Init+0x226>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a50      	ldr	r2, [pc, #320]	; (8002e4c <HAL_GPIO_Init+0x344>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00d      	beq.n	8002d2a <HAL_GPIO_Init+0x222>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4f      	ldr	r2, [pc, #316]	; (8002e50 <HAL_GPIO_Init+0x348>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <HAL_GPIO_Init+0x21e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4e      	ldr	r2, [pc, #312]	; (8002e54 <HAL_GPIO_Init+0x34c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_GPIO_Init+0x21a>
 8002d1e:	2309      	movs	r3, #9
 8002d20:	e012      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d22:	230a      	movs	r3, #10
 8002d24:	e010      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d26:	2308      	movs	r3, #8
 8002d28:	e00e      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d2a:	2307      	movs	r3, #7
 8002d2c:	e00c      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d2e:	2306      	movs	r3, #6
 8002d30:	e00a      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d32:	2305      	movs	r3, #5
 8002d34:	e008      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d36:	2304      	movs	r3, #4
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x240>
 8002d46:	2300      	movs	r3, #0
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f002 0203 	and.w	r2, r2, #3
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	4093      	lsls	r3, r2
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d58:	4934      	ldr	r1, [pc, #208]	; (8002e2c <HAL_GPIO_Init+0x324>)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <HAL_GPIO_Init+0x350>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <HAL_GPIO_Init+0x350>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_GPIO_Init+0x350>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db4:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <HAL_GPIO_Init+0x350>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_GPIO_Init+0x350>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dde:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_GPIO_Init+0x350>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <HAL_GPIO_Init+0x350>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e08:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_GPIO_Init+0x350>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	f67f ae84 	bls.w	8002b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3724      	adds	r7, #36	; 0x24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40013800 	.word	0x40013800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40020800 	.word	0x40020800
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40021400 	.word	0x40021400
 8002e48:	40021800 	.word	0x40021800
 8002e4c:	40021c00 	.word	0x40021c00
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40022400 	.word	0x40022400
 8002e58:	40013c00 	.word	0x40013c00

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d104      	bne.n	8002eb2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	041a      	lsls	r2, r3, #16
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e11f      	b.n	8003116 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f018 fc00 	bl	801b6f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	; 0x24
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f28:	f001 fc08 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 8002f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4a7b      	ldr	r2, [pc, #492]	; (8003120 <HAL_I2C_Init+0x25c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d807      	bhi.n	8002f48 <HAL_I2C_Init+0x84>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a7a      	ldr	r2, [pc, #488]	; (8003124 <HAL_I2C_Init+0x260>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e006      	b.n	8002f56 <HAL_I2C_Init+0x92>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a77      	ldr	r2, [pc, #476]	; (8003128 <HAL_I2C_Init+0x264>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	bf94      	ite	ls
 8002f50:	2301      	movls	r3, #1
 8002f52:	2300      	movhi	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0db      	b.n	8003116 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a72      	ldr	r2, [pc, #456]	; (800312c <HAL_I2C_Init+0x268>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0c9b      	lsrs	r3, r3, #18
 8002f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a64      	ldr	r2, [pc, #400]	; (8003120 <HAL_I2C_Init+0x25c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d802      	bhi.n	8002f98 <HAL_I2C_Init+0xd4>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3301      	adds	r3, #1
 8002f96:	e009      	b.n	8002fac <HAL_I2C_Init+0xe8>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	4a63      	ldr	r2, [pc, #396]	; (8003130 <HAL_I2C_Init+0x26c>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	3301      	adds	r3, #1
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4956      	ldr	r1, [pc, #344]	; (8003120 <HAL_I2C_Init+0x25c>)
 8002fc8:	428b      	cmp	r3, r1
 8002fca:	d80d      	bhi.n	8002fe8 <HAL_I2C_Init+0x124>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e59      	subs	r1, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	bf38      	it	cc
 8002fe4:	2304      	movcc	r3, #4
 8002fe6:	e04f      	b.n	8003088 <HAL_I2C_Init+0x1c4>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <HAL_I2C_Init+0x150>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e012      	b.n	800303a <HAL_I2C_Init+0x176>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x17e>
 800303e:	2301      	movs	r3, #1
 8003040:	e022      	b.n	8003088 <HAL_I2C_Init+0x1c4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <HAL_I2C_Init+0x1a4>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e58      	subs	r0, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	440b      	add	r3, r1
 8003058:	fbb0 f3f3 	udiv	r3, r0, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Init+0x1c4>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6809      	ldr	r1, [r1, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6911      	ldr	r1, [r2, #16]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	000186a0 	.word	0x000186a0
 8003124:	001e847f 	.word	0x001e847f
 8003128:	003d08ff 	.word	0x003d08ff
 800312c:	431bde83 	.word	0x431bde83
 8003130:	10624dd3 	.word	0x10624dd3

08003134 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	460b      	mov	r3, r1
 8003142:	817b      	strh	r3, [r7, #10]
 8003144:	4613      	mov	r3, r2
 8003146:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7fd fe5e 	bl	8000e08 <HAL_GetTick>
 800314c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b20      	cmp	r3, #32
 8003158:	f040 80e0 	bne.w	800331c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2319      	movs	r3, #25
 8003162:	2201      	movs	r2, #1
 8003164:	4970      	ldr	r1, [pc, #448]	; (8003328 <HAL_I2C_Master_Transmit+0x1f4>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fc56 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
 8003174:	e0d3      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_I2C_Master_Transmit+0x50>
 8003180:	2302      	movs	r3, #2
 8003182:	e0cc      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b01      	cmp	r3, #1
 8003198:	d007      	beq.n	80031aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2221      	movs	r2, #33	; 0x21
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2210      	movs	r2, #16
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	893a      	ldrh	r2, [r7, #8]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a50      	ldr	r2, [pc, #320]	; (800332c <HAL_I2C_Master_Transmit+0x1f8>)
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031ec:	8979      	ldrh	r1, [r7, #10]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fac2 	bl	800377c <I2C_MasterRequestWrite>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e08d      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003218:	e066      	b.n	80032e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fcd0 	bl	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b04      	cmp	r3, #4
 8003230:	d107      	bne.n	8003242 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06b      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b04      	cmp	r3, #4
 8003282:	d11b      	bne.n	80032bc <HAL_I2C_Master_Transmit+0x188>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d017      	beq.n	80032bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	6a39      	ldr	r1, [r7, #32]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fcc0 	bl	8003c46 <I2C_WaitOnBTFFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e01a      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d194      	bne.n	800321a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	00100002 	.word	0x00100002
 800332c:	ffff0000 	.word	0xffff0000

08003330 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	461a      	mov	r2, r3
 800333c:	460b      	mov	r3, r1
 800333e:	817b      	strh	r3, [r7, #10]
 8003340:	4613      	mov	r3, r2
 8003342:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7fd fd60 	bl	8000e08 <HAL_GetTick>
 8003348:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	f040 820b 	bne.w	800376e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2319      	movs	r3, #25
 800335e:	2201      	movs	r2, #1
 8003360:	497c      	ldr	r1, [pc, #496]	; (8003554 <HAL_I2C_Master_Receive+0x224>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fb58 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
 8003370:	e1fe      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_I2C_Master_Receive+0x50>
 800337c:	2302      	movs	r3, #2
 800337e:	e1f7      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b01      	cmp	r3, #1
 8003394:	d007      	beq.n	80033a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2222      	movs	r2, #34	; 0x22
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2210      	movs	r2, #16
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	893a      	ldrh	r2, [r7, #8]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a5c      	ldr	r2, [pc, #368]	; (8003558 <HAL_I2C_Master_Receive+0x228>)
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033e8:	8979      	ldrh	r1, [r7, #10]
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fa46 	bl	8003880 <I2C_MasterRequestRead>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e1b8      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	d113      	bne.n	800342e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	623b      	str	r3, [r7, #32]
 800341a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e18c      	b.n	8003748 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003432:	2b01      	cmp	r3, #1
 8003434:	d11b      	bne.n	800346e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e16c      	b.n	8003748 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	2b02      	cmp	r3, #2
 8003474:	d11b      	bne.n	80034ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003494:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	e14c      	b.n	8003748 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034d4:	e138      	b.n	8003748 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	2b03      	cmp	r3, #3
 80034dc:	f200 80f1 	bhi.w	80036c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d123      	bne.n	8003530 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fbeb 	bl	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e139      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800352e:	e10b      	b.n	8003748 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	2b02      	cmp	r3, #2
 8003536:	d14e      	bne.n	80035d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	2200      	movs	r2, #0
 8003540:	4906      	ldr	r1, [pc, #24]	; (800355c <HAL_I2C_Master_Receive+0x22c>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fa68 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e10e      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
 8003552:	bf00      	nop
 8003554:	00100002 	.word	0x00100002
 8003558:	ffff0000 	.word	0xffff0000
 800355c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035d4:	e0b8      	b.n	8003748 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	2200      	movs	r2, #0
 80035de:	4966      	ldr	r1, [pc, #408]	; (8003778 <HAL_I2C_Master_Receive+0x448>)
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fa19 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0bf      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	2200      	movs	r2, #0
 800363a:	494f      	ldr	r1, [pc, #316]	; (8003778 <HAL_I2C_Master_Receive+0x448>)
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f9eb 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e091      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c0:	e042      	b.n	8003748 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fafe 	bl	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e04c      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b04      	cmp	r3, #4
 8003714:	d118      	bne.n	8003748 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	f47f aec2 	bne.w	80034d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	3728      	adds	r7, #40	; 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	00010004 	.word	0x00010004

0800377c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	460b      	mov	r3, r1
 800378a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d006      	beq.n	80037a6 <I2C_MasterRequestWrite+0x2a>
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d003      	beq.n	80037a6 <I2C_MasterRequestWrite+0x2a>
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037a4:	d108      	bne.n	80037b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e00b      	b.n	80037d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	2b12      	cmp	r3, #18
 80037be:	d107      	bne.n	80037d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f91b 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e035      	b.n	800386e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380a:	d108      	bne.n	800381e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800380c:	897b      	ldrh	r3, [r7, #10]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800381a:	611a      	str	r2, [r3, #16]
 800381c:	e01b      	b.n	8003856 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800381e:	897b      	ldrh	r3, [r7, #10]
 8003820:	11db      	asrs	r3, r3, #7
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f003 0306 	and.w	r3, r3, #6
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f063 030f 	orn	r3, r3, #15
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	490f      	ldr	r1, [pc, #60]	; (8003878 <I2C_MasterRequestWrite+0xfc>)
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f942 	bl	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e010      	b.n	800386e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800384c:	897b      	ldrh	r3, [r7, #10]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4908      	ldr	r1, [pc, #32]	; (800387c <I2C_MasterRequestWrite+0x100>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f932 	bl	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	00010008 	.word	0x00010008
 800387c:	00010002 	.word	0x00010002

08003880 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d006      	beq.n	80038ba <I2C_MasterRequestRead+0x3a>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d003      	beq.n	80038ba <I2C_MasterRequestRead+0x3a>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038b8:	d108      	bne.n	80038cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e00b      	b.n	80038e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	2b11      	cmp	r3, #17
 80038d2:	d107      	bne.n	80038e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f891 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e078      	b.n	8003a08 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391e:	d108      	bne.n	8003932 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003920:	897b      	ldrh	r3, [r7, #10]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]
 8003930:	e05e      	b.n	80039f0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003932:	897b      	ldrh	r3, [r7, #10]
 8003934:	11db      	asrs	r3, r3, #7
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 0306 	and.w	r3, r3, #6
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f063 030f 	orn	r3, r3, #15
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4930      	ldr	r1, [pc, #192]	; (8003a10 <I2C_MasterRequestRead+0x190>)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f8b8 	bl	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e053      	b.n	8003a08 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003960:	897b      	ldrh	r3, [r7, #10]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4929      	ldr	r1, [pc, #164]	; (8003a14 <I2C_MasterRequestRead+0x194>)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f8a8 	bl	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e043      	b.n	8003a08 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f830 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e017      	b.n	8003a08 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039d8:	897b      	ldrh	r3, [r7, #10]
 80039da:	11db      	asrs	r3, r3, #7
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 0306 	and.w	r3, r3, #6
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f063 030e 	orn	r3, r3, #14
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4907      	ldr	r1, [pc, #28]	; (8003a14 <I2C_MasterRequestRead+0x194>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f865 	bl	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	00010008 	.word	0x00010008
 8003a14:	00010002 	.word	0x00010002

08003a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a28:	e025      	b.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d021      	beq.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fd f9e9 	bl	8000e08 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d116      	bne.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e023      	b.n	8003abe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10d      	bne.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf0c      	ite	eq
 8003a92:	2301      	moveq	r3, #1
 8003a94:	2300      	movne	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	e00c      	b.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d0b6      	beq.n	8003a2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad4:	e051      	b.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae4:	d123      	bne.n	8003b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003afe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f043 0204 	orr.w	r2, r3, #4
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e046      	b.n	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d021      	beq.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7fd f967 	bl	8000e08 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d116      	bne.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e020      	b.n	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10c      	bne.n	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e00b      	b.n	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d18d      	bne.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bd0:	e02d      	b.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f8ce 	bl	8003d74 <I2C_IsAcknowledgeFailed>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e02d      	b.n	8003c3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d021      	beq.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fd f90d 	bl	8000e08 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d116      	bne.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f043 0220 	orr.w	r2, r3, #32
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e007      	b.n	8003c3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c38:	2b80      	cmp	r3, #128	; 0x80
 8003c3a:	d1ca      	bne.n	8003bd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c52:	e02d      	b.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f88d 	bl	8003d74 <I2C_IsAcknowledgeFailed>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e02d      	b.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d021      	beq.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6c:	f7fd f8cc 	bl	8000e08 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e007      	b.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d1ca      	bne.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd4:	e042      	b.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d119      	bne.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0210 	mvn.w	r2, #16
 8003cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e029      	b.n	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d18:	f7fd f876 	bl	8000e08 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d302      	bcc.n	8003d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e007      	b.n	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d1b5      	bne.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8a:	d11b      	bne.n	8003dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0204 	orr.w	r2, r3, #4
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d129      	bne.n	8003e3c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0210 	bic.w	r2, r2, #16
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d12a      	bne.n	8003eba <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e84:	89fb      	ldrh	r3, [r7, #14]
 8003e86:	f023 030f 	bic.w	r3, r3, #15
 8003e8a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	89fb      	ldrh	r3, [r7, #14]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	89fa      	ldrh	r2, [r7, #14]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e25b      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d075      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee6:	4ba3      	ldr	r3, [pc, #652]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d00c      	beq.n	8003f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef2:	4ba0      	ldr	r3, [pc, #640]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d112      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efe:	4b9d      	ldr	r3, [pc, #628]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0a:	d10b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	4b99      	ldr	r3, [pc, #612]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05b      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x108>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d157      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e236      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCC_OscConfig+0x74>
 8003f2e:	4b91      	ldr	r3, [pc, #580]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a90      	ldr	r2, [pc, #576]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x98>
 8003f46:	4b8b      	ldr	r3, [pc, #556]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a8a      	ldr	r2, [pc, #552]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a87      	ldr	r2, [pc, #540]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f60:	4b84      	ldr	r3, [pc, #528]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a83      	ldr	r2, [pc, #524]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b81      	ldr	r3, [pc, #516]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a80      	ldr	r2, [pc, #512]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fc ff42 	bl	8000e08 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fc ff3e 	bl	8000e08 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1fb      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xc0>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fc ff2e 	bl	8000e08 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fc ff2a 	bl	8000e08 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1e7      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	4b6c      	ldr	r3, [pc, #432]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xe8>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fde:	4b65      	ldr	r3, [pc, #404]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b62      	ldr	r3, [pc, #392]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b5f      	ldr	r3, [pc, #380]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x152>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1bb      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b56      	ldr	r3, [pc, #344]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4952      	ldr	r1, [pc, #328]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e03a      	b.n	80040a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <HAL_RCC_OscConfig+0x2b0>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fc fee3 	bl	8000e08 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004046:	f7fc fedf 	bl	8000e08 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e19c      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	4b46      	ldr	r3, [pc, #280]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4940      	ldr	r1, [pc, #256]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <HAL_RCC_OscConfig+0x2b0>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fc fec2 	bl	8000e08 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004088:	f7fc febe 	bl	8000e08 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e17b      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d030      	beq.n	8004114 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ba:	4b30      	ldr	r3, [pc, #192]	; (800417c <HAL_RCC_OscConfig+0x2b4>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fc fea2 	bl	8000e08 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c8:	f7fc fe9e 	bl	8000e08 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e15b      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x200>
 80040e6:	e015      	b.n	8004114 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x2b4>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7fc fe8b 	bl	8000e08 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f6:	f7fc fe87 	bl	8000e08 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e144      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800410a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80a0 	beq.w	8004262 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004122:	2300      	movs	r3, #0
 8004124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_OscConfig+0x2b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d121      	bne.n	80041a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_RCC_OscConfig+0x2b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a07      	ldr	r2, [pc, #28]	; (8004180 <HAL_RCC_OscConfig+0x2b8>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416a:	f7fc fe4d 	bl	8000e08 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004170:	e011      	b.n	8004196 <HAL_RCC_OscConfig+0x2ce>
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	42470000 	.word	0x42470000
 800417c:	42470e80 	.word	0x42470e80
 8004180:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004184:	f7fc fe40 	bl	8000e08 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e0fd      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b81      	ldr	r3, [pc, #516]	; (800439c <HAL_RCC_OscConfig+0x4d4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d106      	bne.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
 80041aa:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6713      	str	r3, [r2, #112]	; 0x70
 80041b6:	e01c      	b.n	80041f2 <HAL_RCC_OscConfig+0x32a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d10c      	bne.n	80041da <HAL_RCC_OscConfig+0x312>
 80041c0:	4b77      	ldr	r3, [pc, #476]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	4a76      	ldr	r2, [pc, #472]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041c6:	f043 0304 	orr.w	r3, r3, #4
 80041ca:	6713      	str	r3, [r2, #112]	; 0x70
 80041cc:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	4a73      	ldr	r2, [pc, #460]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6713      	str	r3, [r2, #112]	; 0x70
 80041d8:	e00b      	b.n	80041f2 <HAL_RCC_OscConfig+0x32a>
 80041da:	4b71      	ldr	r3, [pc, #452]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a70      	ldr	r2, [pc, #448]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70
 80041e6:	4b6e      	ldr	r3, [pc, #440]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	4a6d      	ldr	r2, [pc, #436]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d015      	beq.n	8004226 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fa:	f7fc fe05 	bl	8000e08 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fc fe01 	bl	8000e08 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e0bc      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004218:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ee      	beq.n	8004202 <HAL_RCC_OscConfig+0x33a>
 8004224:	e014      	b.n	8004250 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004226:	f7fc fdef 	bl	8000e08 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422c:	e00a      	b.n	8004244 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fc fdeb 	bl	8000e08 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e0a6      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004244:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ee      	bne.n	800422e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d105      	bne.n	8004262 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004256:	4b52      	ldr	r3, [pc, #328]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	4a51      	ldr	r2, [pc, #324]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 800425c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8092 	beq.w	8004390 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800426c:	4b4c      	ldr	r3, [pc, #304]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d05c      	beq.n	8004332 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d141      	bne.n	8004304 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004280:	4b48      	ldr	r3, [pc, #288]	; (80043a4 <HAL_RCC_OscConfig+0x4dc>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fc fdbf 	bl	8000e08 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428e:	f7fc fdbb 	bl	8000e08 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e078      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a0:	4b3f      	ldr	r3, [pc, #252]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	019b      	lsls	r3, r3, #6
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	3b01      	subs	r3, #1
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	061b      	lsls	r3, r3, #24
 80042d0:	4933      	ldr	r1, [pc, #204]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d6:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <HAL_RCC_OscConfig+0x4dc>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fc fd94 	bl	8000e08 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fc fd90 	bl	8000e08 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e04d      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x41c>
 8004302:	e045      	b.n	8004390 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <HAL_RCC_OscConfig+0x4dc>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fc fd7d 	bl	8000e08 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004312:	f7fc fd79 	bl	8000e08 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e036      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004324:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x44a>
 8004330:	e02e      	b.n	8004390 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e029      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800433e:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <HAL_RCC_OscConfig+0x4d8>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	429a      	cmp	r2, r3
 8004350:	d11c      	bne.n	800438c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d115      	bne.n	800438c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004366:	4013      	ands	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800436c:	4293      	cmp	r3, r2
 800436e:	d10d      	bne.n	800438c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d106      	bne.n	800438c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40007000 	.word	0x40007000
 80043a0:	40023800 	.word	0x40023800
 80043a4:	42470060 	.word	0x42470060

080043a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0cc      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043bc:	4b68      	ldr	r3, [pc, #416]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d90c      	bls.n	80043e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d2:	4b63      	ldr	r3, [pc, #396]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0b8      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a58      	ldr	r2, [pc, #352]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004414:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a52      	ldr	r2, [pc, #328]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800441e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004420:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	494d      	ldr	r1, [pc, #308]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d044      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d119      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e07f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d003      	beq.n	8004466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004462:	2b03      	cmp	r3, #3
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e06f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e067      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4934      	ldr	r1, [pc, #208]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004498:	f7fc fcb6 	bl	8000e08 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fc fcb2 	bl	8000e08 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e04f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d20c      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e032      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044fc:	4b19      	ldr	r3, [pc, #100]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4916      	ldr	r1, [pc, #88]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	490e      	ldr	r1, [pc, #56]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800452e:	f000 f821 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8004532:	4601      	mov	r1, r0
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 8004540:	5cd3      	ldrb	r3, [r2, r3]
 8004542:	fa21 f303 	lsr.w	r3, r1, r3
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f017 fa9c 	bl	801ba8c <HAL_InitTick>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023c00 	.word	0x40023c00
 8004564:	40023800 	.word	0x40023800
 8004568:	08020f68 	.word	0x08020f68
 800456c:	2000001c 	.word	0x2000001c
 8004570:	20000000 	.word	0x20000000

08004574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	2300      	movs	r3, #0
 8004584:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800458a:	4b63      	ldr	r3, [pc, #396]	; (8004718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b04      	cmp	r3, #4
 8004594:	d007      	beq.n	80045a6 <HAL_RCC_GetSysClockFreq+0x32>
 8004596:	2b08      	cmp	r3, #8
 8004598:	d008      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x38>
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 80b4 	bne.w	8004708 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b5e      	ldr	r3, [pc, #376]	; (800471c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045a2:	60bb      	str	r3, [r7, #8]
       break;
 80045a4:	e0b3      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045a6:	4b5e      	ldr	r3, [pc, #376]	; (8004720 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80045a8:	60bb      	str	r3, [r7, #8]
      break;
 80045aa:	e0b0      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ac:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b6:	4b58      	ldr	r3, [pc, #352]	; (8004718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d04a      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c2:	4b55      	ldr	r3, [pc, #340]	; (8004718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	f04f 0400 	mov.w	r4, #0
 80045cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	ea03 0501 	and.w	r5, r3, r1
 80045d8:	ea04 0602 	and.w	r6, r4, r2
 80045dc:	4629      	mov	r1, r5
 80045de:	4632      	mov	r2, r6
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	0154      	lsls	r4, r2, #5
 80045ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045ee:	014b      	lsls	r3, r1, #5
 80045f0:	4619      	mov	r1, r3
 80045f2:	4622      	mov	r2, r4
 80045f4:	1b49      	subs	r1, r1, r5
 80045f6:	eb62 0206 	sbc.w	r2, r2, r6
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	f04f 0400 	mov.w	r4, #0
 8004602:	0194      	lsls	r4, r2, #6
 8004604:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004608:	018b      	lsls	r3, r1, #6
 800460a:	1a5b      	subs	r3, r3, r1
 800460c:	eb64 0402 	sbc.w	r4, r4, r2
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	00e2      	lsls	r2, r4, #3
 800461a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800461e:	00d9      	lsls	r1, r3, #3
 8004620:	460b      	mov	r3, r1
 8004622:	4614      	mov	r4, r2
 8004624:	195b      	adds	r3, r3, r5
 8004626:	eb44 0406 	adc.w	r4, r4, r6
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	0262      	lsls	r2, r4, #9
 8004634:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004638:	0259      	lsls	r1, r3, #9
 800463a:	460b      	mov	r3, r1
 800463c:	4614      	mov	r4, r2
 800463e:	4618      	mov	r0, r3
 8004640:	4621      	mov	r1, r4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	461a      	mov	r2, r3
 800464a:	4623      	mov	r3, r4
 800464c:	f7fc fa26 	bl	8000a9c <__aeabi_uldivmod>
 8004650:	4603      	mov	r3, r0
 8004652:	460c      	mov	r4, r1
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e049      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	099b      	lsrs	r3, r3, #6
 800465e:	f04f 0400 	mov.w	r4, #0
 8004662:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	ea03 0501 	and.w	r5, r3, r1
 800466e:	ea04 0602 	and.w	r6, r4, r2
 8004672:	4629      	mov	r1, r5
 8004674:	4632      	mov	r2, r6
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	f04f 0400 	mov.w	r4, #0
 800467e:	0154      	lsls	r4, r2, #5
 8004680:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004684:	014b      	lsls	r3, r1, #5
 8004686:	4619      	mov	r1, r3
 8004688:	4622      	mov	r2, r4
 800468a:	1b49      	subs	r1, r1, r5
 800468c:	eb62 0206 	sbc.w	r2, r2, r6
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	f04f 0400 	mov.w	r4, #0
 8004698:	0194      	lsls	r4, r2, #6
 800469a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800469e:	018b      	lsls	r3, r1, #6
 80046a0:	1a5b      	subs	r3, r3, r1
 80046a2:	eb64 0402 	sbc.w	r4, r4, r2
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	00e2      	lsls	r2, r4, #3
 80046b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046b4:	00d9      	lsls	r1, r3, #3
 80046b6:	460b      	mov	r3, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	195b      	adds	r3, r3, r5
 80046bc:	eb44 0406 	adc.w	r4, r4, r6
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	02a2      	lsls	r2, r4, #10
 80046ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046ce:	0299      	lsls	r1, r3, #10
 80046d0:	460b      	mov	r3, r1
 80046d2:	4614      	mov	r4, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	4621      	mov	r1, r4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f04f 0400 	mov.w	r4, #0
 80046de:	461a      	mov	r2, r3
 80046e0:	4623      	mov	r3, r4
 80046e2:	f7fc f9db 	bl	8000a9c <__aeabi_uldivmod>
 80046e6:	4603      	mov	r3, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	3301      	adds	r3, #1
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	60bb      	str	r3, [r7, #8]
      break;
 8004706:	e002      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800470a:	60bb      	str	r3, [r7, #8]
      break;
 800470c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470e:	68bb      	ldr	r3, [r7, #8]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004718:	40023800 	.word	0x40023800
 800471c:	00f42400 	.word	0x00f42400
 8004720:	007a1200 	.word	0x007a1200

08004724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <HAL_RCC_GetHCLKFreq+0x14>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	2000001c 	.word	0x2000001c

0800473c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004740:	f7ff fff0 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8004744:	4601      	mov	r1, r0
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4a03      	ldr	r2, [pc, #12]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40023800 	.word	0x40023800
 8004760:	08020f78 	.word	0x08020f78

08004764 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	220f      	movs	r2, #15
 8004772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 0203 	and.w	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <HAL_RCC_GetClockConfig+0x5c>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_RCC_GetClockConfig+0x60>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 020f 	and.w	r2, r3, #15
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40023c00 	.word	0x40023c00

080047c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e01d      	b.n	8004816 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f815 	bl	800481e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 f968 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b06      	cmp	r3, #6
 800485a:	d007      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d122      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d11b      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f06f 0202 	mvn.w	r2, #2
 80048a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f8ee 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 80048c2:	e005      	b.n	80048d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8e0 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f8f1 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d122      	bne.n	800492a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d11b      	bne.n	800492a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0204 	mvn.w	r2, #4
 80048fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8c4 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 8004916:	e005      	b.n	8004924 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f8b6 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8c7 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b08      	cmp	r3, #8
 8004936:	d122      	bne.n	800497e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b08      	cmp	r3, #8
 8004944:	d11b      	bne.n	800497e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f06f 0208 	mvn.w	r2, #8
 800494e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2204      	movs	r2, #4
 8004954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f89a 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 800496a:	e005      	b.n	8004978 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f88c 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f89d 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d122      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b10      	cmp	r3, #16
 8004998:	d11b      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0210 	mvn.w	r2, #16
 80049a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2208      	movs	r2, #8
 80049a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f870 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 80049be:	e005      	b.n	80049cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f862 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f873 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d10e      	bne.n	80049fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f06f 0201 	mvn.w	r2, #1
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f016 fff5 	bl	801b9e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a08:	2b80      	cmp	r3, #128	; 0x80
 8004a0a:	d10e      	bne.n	8004a2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d107      	bne.n	8004a2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f903 	bl	8004c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d10e      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d107      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f838 	bl	8004ac6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d10e      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d107      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0220 	mvn.w	r2, #32
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f8cd 	bl	8004c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a40      	ldr	r2, [pc, #256]	; (8004bf0 <TIM_Base_SetConfig+0x114>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d013      	beq.n	8004b1c <TIM_Base_SetConfig+0x40>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d00f      	beq.n	8004b1c <TIM_Base_SetConfig+0x40>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a3d      	ldr	r2, [pc, #244]	; (8004bf4 <TIM_Base_SetConfig+0x118>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <TIM_Base_SetConfig+0x40>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a3c      	ldr	r2, [pc, #240]	; (8004bf8 <TIM_Base_SetConfig+0x11c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_Base_SetConfig+0x40>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3b      	ldr	r2, [pc, #236]	; (8004bfc <TIM_Base_SetConfig+0x120>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_Base_SetConfig+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a3a      	ldr	r2, [pc, #232]	; (8004c00 <TIM_Base_SetConfig+0x124>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d108      	bne.n	8004b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2f      	ldr	r2, [pc, #188]	; (8004bf0 <TIM_Base_SetConfig+0x114>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02b      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3c:	d027      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a2c      	ldr	r2, [pc, #176]	; (8004bf4 <TIM_Base_SetConfig+0x118>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d023      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <TIM_Base_SetConfig+0x11c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01f      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <TIM_Base_SetConfig+0x120>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d01b      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a29      	ldr	r2, [pc, #164]	; (8004c00 <TIM_Base_SetConfig+0x124>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d017      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a28      	ldr	r2, [pc, #160]	; (8004c04 <TIM_Base_SetConfig+0x128>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <TIM_Base_SetConfig+0x12c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00f      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <TIM_Base_SetConfig+0x130>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00b      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a25      	ldr	r2, [pc, #148]	; (8004c10 <TIM_Base_SetConfig+0x134>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d007      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a24      	ldr	r2, [pc, #144]	; (8004c14 <TIM_Base_SetConfig+0x138>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d003      	beq.n	8004b8e <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a23      	ldr	r2, [pc, #140]	; (8004c18 <TIM_Base_SetConfig+0x13c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d108      	bne.n	8004ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a0a      	ldr	r2, [pc, #40]	; (8004bf0 <TIM_Base_SetConfig+0x114>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_Base_SetConfig+0xf8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <TIM_Base_SetConfig+0x124>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d103      	bne.n	8004bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	615a      	str	r2, [r3, #20]
}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00
 8004c00:	40010400 	.word	0x40010400
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40014400 	.word	0x40014400
 8004c0c:	40014800 	.word	0x40014800
 8004c10:	40001800 	.word	0x40001800
 8004c14:	40001c00 	.word	0x40001c00
 8004c18:	40002000 	.word	0x40002000

08004c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c56:	2b84      	cmp	r3, #132	; 0x84
 8004c58:	d005      	beq.n	8004c66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	3303      	adds	r3, #3
 8004c64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c66:	68fb      	ldr	r3, [r7, #12]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c7a:	f3ef 8305 	mrs	r3, IPSR
 8004c7e:	607b      	str	r3, [r7, #4]
  return(result);
 8004c80:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bf14      	ite	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	2300      	moveq	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c9c:	f001 fd10 	bl	80066c0 <vTaskStartScheduler>
  
  return osOK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004caa:	f7ff ffe3 	bl	8004c74 <inHandlerMode>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004cb4:	f001 fe1c 	bl	80068f0 <xTaskGetTickCountFromISR>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	e002      	b.n	8004cc2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004cbc:	f001 fe08 	bl	80068d0 <xTaskGetTickCount>
 8004cc0:	4603      	mov	r3, r0
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc8:	b089      	sub	sp, #36	; 0x24
 8004cca:	af04      	add	r7, sp, #16
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <osThreadCreate+0x54>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01c      	beq.n	8004d1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685c      	ldr	r4, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681d      	ldr	r5, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691e      	ldr	r6, [r3, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ffa6 	bl	8004c44 <makeFreeRtosPriority>
 8004cf8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d02:	9202      	str	r2, [sp, #8]
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	9100      	str	r1, [sp, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4632      	mov	r2, r6
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f001 fb0a 	bl	8006328 <xTaskCreateStatic>
 8004d14:	4603      	mov	r3, r0
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e01c      	b.n	8004d54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685c      	ldr	r4, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d26:	b29e      	uxth	r6, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff ff88 	bl	8004c44 <makeFreeRtosPriority>
 8004d34:	4602      	mov	r2, r0
 8004d36:	f107 030c 	add.w	r3, r7, #12
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	9200      	str	r2, [sp, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	4632      	mov	r2, r6
 8004d42:	4629      	mov	r1, r5
 8004d44:	4620      	mov	r0, r4
 8004d46:	f001 fb49 	bl	80063dc <xTaskCreate>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d54:	68fb      	ldr	r3, [r7, #12]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <osDelay+0x16>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	e000      	b.n	8004d76 <osDelay+0x18>
 8004d74:	2301      	movs	r3, #1
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 fc6e 	bl	8006658 <vTaskDelay>
  
  return osOK;
 8004d7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f000 fc80 	bl	80056a2 <xQueueCreateMutexStatic>
 8004da2:	4603      	mov	r3, r0
 8004da4:	e003      	b.n	8004dae <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004da6:	2001      	movs	r0, #1
 8004da8:	f000 fc63 	bl	8005672 <xQueueCreateMutex>
 8004dac:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <osMutexWait+0x18>
    return osErrorParameter;
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	e03a      	b.n	8004e46 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d103      	bne.n	8004de4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e009      	b.n	8004df8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d006      	beq.n	8004df8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <osMutexWait+0x40>
      ticks = 1;
 8004df4:	2301      	movs	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004df8:	f7ff ff3c 	bl	8004c74 <inHandlerMode>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d017      	beq.n	8004e32 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004e02:	f107 0308 	add.w	r3, r7, #8
 8004e06:	461a      	mov	r2, r3
 8004e08:	2100      	movs	r1, #0
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f001 f860 	bl	8005ed0 <xQueueReceiveFromISR>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d001      	beq.n	8004e1a <osMutexWait+0x62>
      return osErrorOS;
 8004e16:	23ff      	movs	r3, #255	; 0xff
 8004e18:	e015      	b.n	8004e46 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d011      	beq.n	8004e44 <osMutexWait+0x8c>
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <osMutexWait+0x98>)
 8004e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	e008      	b.n	8004e44 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 ff43 	bl	8005cc0 <xQueueSemaphoreTake>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d001      	beq.n	8004e44 <osMutexWait+0x8c>
    return osErrorOS;
 8004e40:	23ff      	movs	r3, #255	; 0xff
 8004e42:	e000      	b.n	8004e46 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004e64:	f7ff ff06 	bl	8004c74 <inHandlerMode>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004e6e:	f107 0308 	add.w	r3, r7, #8
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fdbd 	bl	80059f4 <xQueueGiveFromISR>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d001      	beq.n	8004e84 <osMutexRelease+0x30>
      return osErrorOS;
 8004e80:	23ff      	movs	r3, #255	; 0xff
 8004e82:	e017      	b.n	8004eb4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d013      	beq.n	8004eb2 <osMutexRelease+0x5e>
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <osMutexRelease+0x68>)
 8004e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	e00a      	b.n	8004eb2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fc18 	bl	80056d8 <xQueueGenericSend>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d001      	beq.n	8004eb2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004eae:	23ff      	movs	r3, #255	; 0xff
 8004eb0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d10b      	bne.n	8004ef0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	2303      	movs	r3, #3
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	f000 fad8 	bl	800549c <xQueueGenericCreateStatic>
 8004eec:	4603      	mov	r3, r0
 8004eee:	e016      	b.n	8004f1e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e014      	b.n	8004f1e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d110      	bne.n	8004f1c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004efa:	2203      	movs	r2, #3
 8004efc:	2100      	movs	r1, #0
 8004efe:	2001      	movs	r0, #1
 8004f00:	f000 fb3f 	bl	8005582 <xQueueGenericCreate>
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <osSemaphoreCreate+0x58>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2100      	movs	r1, #0
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fbe0 	bl	80056d8 <xQueueGenericSend>
      return sema;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	e000      	b.n	8004f1e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004f1c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	e03a      	b.n	8004fb6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d103      	bne.n	8004f54 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e009      	b.n	8004f68 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d006      	beq.n	8004f68 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <osSemaphoreWait+0x40>
      ticks = 1;
 8004f64:	2301      	movs	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004f68:	f7ff fe84 	bl	8004c74 <inHandlerMode>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d017      	beq.n	8004fa2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f72:	f107 0308 	add.w	r3, r7, #8
 8004f76:	461a      	mov	r2, r3
 8004f78:	2100      	movs	r1, #0
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 ffa8 	bl	8005ed0 <xQueueReceiveFromISR>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d001      	beq.n	8004f8a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004f86:	23ff      	movs	r3, #255	; 0xff
 8004f88:	e015      	b.n	8004fb6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d011      	beq.n	8004fb4 <osSemaphoreWait+0x8c>
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <osSemaphoreWait+0x98>)
 8004f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	e008      	b.n	8004fb4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fe8b 	bl	8005cc0 <xQueueSemaphoreTake>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d001      	beq.n	8004fb4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004fb0:	23ff      	movs	r3, #255	; 0xff
 8004fb2:	e000      	b.n	8004fb6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004fd4:	f7ff fe4e 	bl	8004c74 <inHandlerMode>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004fde:	f107 0308 	add.w	r3, r7, #8
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fd05 	bl	80059f4 <xQueueGiveFromISR>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d001      	beq.n	8004ff4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004ff0:	23ff      	movs	r3, #255	; 0xff
 8004ff2:	e017      	b.n	8005024 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d013      	beq.n	8005022 <osSemaphoreRelease+0x5e>
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	; (800502c <osSemaphoreRelease+0x68>)
 8004ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	e00a      	b.n	8005022 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800500c:	2300      	movs	r3, #0
 800500e:	2200      	movs	r2, #0
 8005010:	2100      	movs	r1, #0
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fb60 	bl	80056d8 <xQueueGenericSend>
 8005018:	4603      	mov	r3, r0
 800501a:	2b01      	cmp	r3, #1
 800501c:	d001      	beq.n	8005022 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800501e:	23ff      	movs	r3, #255	; 0xff
 8005020:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005022:	68fb      	ldr	r3, [r7, #12]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	e000ed04 	.word	0xe000ed04

08005030 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005038:	f7ff fe1c 	bl	8004c74 <inHandlerMode>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005042:	2382      	movs	r3, #130	; 0x82
 8005044:	e003      	b.n	800504e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fff9 	bl	800603e <vQueueDelete>

  return osOK; 
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005056:	b590      	push	{r4, r7, lr}
 8005058:	b085      	sub	sp, #20
 800505a:	af02      	add	r7, sp, #8
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d012      	beq.n	800508e <osMessageCreate+0x38>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00e      	beq.n	800508e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68dc      	ldr	r4, [r3, #12]
 8005080:	2300      	movs	r3, #0
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	4623      	mov	r3, r4
 8005086:	f000 fa09 	bl	800549c <xQueueGenericCreateStatic>
 800508a:	4603      	mov	r3, r0
 800508c:	e008      	b.n	80050a0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	4619      	mov	r1, r3
 800509a:	f000 fa72 	bl	8005582 <xQueueGenericCreate>
 800509e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd90      	pop	{r4, r7, pc}

080050a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80050b4:	2300      	movs	r3, #0
 80050b6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <osMessagePut+0x1e>
    ticks = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80050c6:	f7ff fdd5 	bl	8004c74 <inHandlerMode>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d018      	beq.n	8005102 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80050d0:	f107 0210 	add.w	r2, r7, #16
 80050d4:	f107 0108 	add.w	r1, r7, #8
 80050d8:	2300      	movs	r3, #0
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fbf6 	bl	80058cc <xQueueGenericSendFromISR>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d001      	beq.n	80050ea <osMessagePut+0x42>
      return osErrorOS;
 80050e6:	23ff      	movs	r3, #255	; 0xff
 80050e8:	e018      	b.n	800511c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d014      	beq.n	800511a <osMessagePut+0x72>
 80050f0:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <osMessagePut+0x7c>)
 80050f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	e00b      	b.n	800511a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005102:	f107 0108 	add.w	r1, r7, #8
 8005106:	2300      	movs	r3, #0
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fae4 	bl	80056d8 <xQueueGenericSend>
 8005110:	4603      	mov	r3, r0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d001      	beq.n	800511a <osMessagePut+0x72>
      return osErrorOS;
 8005116:	23ff      	movs	r3, #255	; 0xff
 8005118:	e000      	b.n	800511c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b08b      	sub	sp, #44	; 0x2c
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	617b      	str	r3, [r7, #20]
    return event;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	461c      	mov	r4, r3
 800514a:	f107 0314 	add.w	r3, r7, #20
 800514e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005156:	e054      	b.n	8005202 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005158:	2300      	movs	r3, #0
 800515a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d103      	bne.n	8005170 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005168:	f04f 33ff 	mov.w	r3, #4294967295
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
 800516e:	e009      	b.n	8005184 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <osMessageGet+0x5c>
      ticks = 1;
 8005180:	2301      	movs	r3, #1
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005184:	f7ff fd76 	bl	8004c74 <inHandlerMode>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01c      	beq.n	80051c8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800518e:	f107 0220 	add.w	r2, r7, #32
 8005192:	f107 0314 	add.w	r3, r7, #20
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	68b8      	ldr	r0, [r7, #8]
 800519c:	f000 fe98 	bl	8005ed0 <xQueueReceiveFromISR>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d102      	bne.n	80051ac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80051a6:	2310      	movs	r3, #16
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e001      	b.n	80051b0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01d      	beq.n	80051f2 <osMessageGet+0xca>
 80051b6:	4b15      	ldr	r3, [pc, #84]	; (800520c <osMessageGet+0xe4>)
 80051b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	e014      	b.n	80051f2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	3304      	adds	r3, #4
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	4619      	mov	r1, r3
 80051d2:	68b8      	ldr	r0, [r7, #8]
 80051d4:	f000 fc98 	bl	8005b08 <xQueueReceive>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d102      	bne.n	80051e4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80051de:	2310      	movs	r3, #16
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e006      	b.n	80051f2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <osMessageGet+0xc6>
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <osMessageGet+0xc8>
 80051ee:	2340      	movs	r3, #64	; 0x40
 80051f0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	461c      	mov	r4, r3
 80051f6:	f107 0314 	add.w	r3, r7, #20
 80051fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	372c      	adds	r7, #44	; 0x2c
 8005206:	46bd      	mov	sp, r7
 8005208:	bd90      	pop	{r4, r7, pc}
 800520a:	bf00      	nop
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005218:	f7ff fd2c 	bl	8004c74 <inHandlerMode>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 feee 	bl	8006004 <uxQueueMessagesWaitingFromISR>
 8005228:	4603      	mov	r3, r0
 800522a:	e003      	b.n	8005234 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fecc 	bl	8005fca <uxQueueMessagesWaiting>
 8005232:	4603      	mov	r3, r0
  }
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005244:	f7ff fd16 	bl	8004c74 <inHandlerMode>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <osMessageDelete+0x16>
    return osErrorISR;
 800524e:	2382      	movs	r3, #130	; 0x82
 8005250:	e003      	b.n	800525a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fef3 	bl	800603e <vQueueDelete>

  return osOK; 
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f103 0208 	add.w	r2, r3, #8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f103 0208 	add.w	r2, r3, #8
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f103 0208 	add.w	r2, r3, #8
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d103      	bne.n	8005324 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e00c      	b.n	800533e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3308      	adds	r3, #8
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e002      	b.n	8005332 <vListInsert+0x2e>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d2f6      	bcs.n	800532c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6892      	ldr	r2, [r2, #8]
 800538c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6852      	ldr	r2, [r2, #4]
 8005396:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d103      	bne.n	80053aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d109      	bne.n	80053f4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	e7fe      	b.n	80053f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80053f4:	f002 f8fa 	bl	80075ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005400:	68f9      	ldr	r1, [r7, #12]
 8005402:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	441a      	add	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	3b01      	subs	r3, #1
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800542a:	fb01 f303 	mul.w	r3, r1, r3
 800542e:	441a      	add	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	22ff      	movs	r2, #255	; 0xff
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d114      	bne.n	8005474 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01a      	beq.n	8005488 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3310      	adds	r3, #16
 8005456:	4618      	mov	r0, r3
 8005458:	f001 fbb8 	bl	8006bcc <xTaskRemoveFromEventList>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d012      	beq.n	8005488 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <xQueueGenericReset+0xcc>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	e009      	b.n	8005488 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3310      	adds	r3, #16
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fef2 	bl	8005262 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3324      	adds	r3, #36	; 0x24
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff feed 	bl	8005262 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005488:	f002 f8de 	bl	8007648 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800548c:	2301      	movs	r3, #1
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08e      	sub	sp, #56	; 0x38
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <xQueueGenericCreateStatic+0x28>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c2:	e7fe      	b.n	80054c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <xQueueGenericCreateStatic+0x42>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
 80054dc:	e7fe      	b.n	80054dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <xQueueGenericCreateStatic+0x4e>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <xQueueGenericCreateStatic+0x52>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueGenericCreateStatic+0x54>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <xQueueGenericCreateStatic+0x6c>
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	623b      	str	r3, [r7, #32]
 8005506:	e7fe      	b.n	8005506 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <xQueueGenericCreateStatic+0x78>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <xQueueGenericCreateStatic+0x7c>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <xQueueGenericCreateStatic+0x7e>
 8005518:	2300      	movs	r3, #0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <xQueueGenericCreateStatic+0x96>
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	e7fe      	b.n	8005530 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005532:	2348      	movs	r3, #72	; 0x48
 8005534:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b48      	cmp	r3, #72	; 0x48
 800553a:	d009      	beq.n	8005550 <xQueueGenericCreateStatic+0xb4>
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e7fe      	b.n	800554e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005550:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005564:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f844 	bl	8005600 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800557a:	4618      	mov	r0, r3
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005582:	b580      	push	{r7, lr}
 8005584:	b08a      	sub	sp, #40	; 0x28
 8005586:	af02      	add	r7, sp, #8
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <xQueueGenericCreate+0x28>
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e7fe      	b.n	80055a8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	e004      	b.n	80055c0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	3348      	adds	r3, #72	; 0x48
 80055c4:	4618      	mov	r0, r3
 80055c6:	f002 f92b 	bl	8007820 <pvPortMalloc>
 80055ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d011      	beq.n	80055f6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	3348      	adds	r3, #72	; 0x48
 80055da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055e4:	79fa      	ldrb	r2, [r7, #7]
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f805 	bl	8005600 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055f6:	69bb      	ldr	r3, [r7, #24]
	}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e002      	b.n	8005622 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800562e:	2101      	movs	r1, #1
 8005630:	69b8      	ldr	r0, [r7, #24]
 8005632:	f7ff fecb 	bl	80053cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00e      	beq.n	800566a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800565e:	2300      	movs	r3, #0
 8005660:	2200      	movs	r2, #0
 8005662:	2100      	movs	r1, #0
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f837 	bl	80056d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005672:	b580      	push	{r7, lr}
 8005674:	b086      	sub	sp, #24
 8005676:	af00      	add	r7, sp, #0
 8005678:	4603      	mov	r3, r0
 800567a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	461a      	mov	r2, r3
 8005688:	6939      	ldr	r1, [r7, #16]
 800568a:	6978      	ldr	r0, [r7, #20]
 800568c:	f7ff ff79 	bl	8005582 <xQueueGenericCreate>
 8005690:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff ffd3 	bl	800563e <prvInitialiseMutex>

		return xNewQueue;
 8005698:	68fb      	ldr	r3, [r7, #12]
	}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b088      	sub	sp, #32
 80056a6:	af02      	add	r7, sp, #8
 80056a8:	4603      	mov	r3, r0
 80056aa:	6039      	str	r1, [r7, #0]
 80056ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056ae:	2301      	movs	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2200      	movs	r2, #0
 80056be:	6939      	ldr	r1, [r7, #16]
 80056c0:	6978      	ldr	r0, [r7, #20]
 80056c2:	f7ff feeb 	bl	800549c <xQueueGenericCreateStatic>
 80056c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff ffb8 	bl	800563e <prvInitialiseMutex>

		return xNewQueue;
 80056ce:	68fb      	ldr	r3, [r7, #12]
	}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056e6:	2300      	movs	r3, #0
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <xQueueGenericSend+0x30>
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
 8005706:	e7fe      	b.n	8005706 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <xQueueGenericSend+0x3e>
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <xQueueGenericSend+0x42>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <xQueueGenericSend+0x44>
 800571a:	2300      	movs	r3, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <xQueueGenericSend+0x5c>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	e7fe      	b.n	8005732 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d103      	bne.n	8005742 <xQueueGenericSend+0x6a>
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <xQueueGenericSend+0x6e>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <xQueueGenericSend+0x70>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <xQueueGenericSend+0x88>
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	e7fe      	b.n	800575e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005760:	f001 fbea 	bl	8006f38 <xTaskGetSchedulerState>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <xQueueGenericSend+0x98>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <xQueueGenericSend+0x9c>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <xQueueGenericSend+0x9e>
 8005774:	2300      	movs	r3, #0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <xQueueGenericSend+0xb6>
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e7fe      	b.n	800578c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800578e:	f001 ff2d 	bl	80075ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <xQueueGenericSend+0xcc>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d129      	bne.n	80057f8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057aa:	f000 fc82 	bl	80060b2 <prvCopyDataToQueue>
 80057ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	3324      	adds	r3, #36	; 0x24
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 fa05 	bl	8006bcc <xTaskRemoveFromEventList>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d013      	beq.n	80057f0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057c8:	4b3f      	ldr	r3, [pc, #252]	; (80058c8 <xQueueGenericSend+0x1f0>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	e00a      	b.n	80057f0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057e0:	4b39      	ldr	r3, [pc, #228]	; (80058c8 <xQueueGenericSend+0x1f0>)
 80057e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057f0:	f001 ff2a 	bl	8007648 <vPortExitCritical>
				return pdPASS;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e063      	b.n	80058c0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057fe:	f001 ff23 	bl	8007648 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005802:	2300      	movs	r3, #0
 8005804:	e05c      	b.n	80058c0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800580c:	f107 0314 	add.w	r3, r7, #20
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fa3d 	bl	8006c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005816:	2301      	movs	r3, #1
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800581a:	f001 ff15 	bl	8007648 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800581e:	f000 ffad 	bl	800677c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005822:	f001 fee3 	bl	80075ec <vPortEnterCritical>
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800582c:	b25b      	sxtb	r3, r3
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d103      	bne.n	800583c <xQueueGenericSend+0x164>
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005842:	b25b      	sxtb	r3, r3
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d103      	bne.n	8005852 <xQueueGenericSend+0x17a>
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005852:	f001 fef9 	bl	8007648 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005856:	1d3a      	adds	r2, r7, #4
 8005858:	f107 0314 	add.w	r3, r7, #20
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f001 fa2c 	bl	8006cbc <xTaskCheckForTimeOut>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d124      	bne.n	80058b4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800586a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800586c:	f000 fd19 	bl	80062a2 <prvIsQueueFull>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d018      	beq.n	80058a8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	3310      	adds	r3, #16
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4611      	mov	r1, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f001 f980 	bl	8006b84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005886:	f000 fca4 	bl	80061d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800588a:	f000 ff85 	bl	8006798 <xTaskResumeAll>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	f47f af7c 	bne.w	800578e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <xQueueGenericSend+0x1f0>)
 8005898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	e772      	b.n	800578e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058aa:	f000 fc92 	bl	80061d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ae:	f000 ff73 	bl	8006798 <xTaskResumeAll>
 80058b2:	e76c      	b.n	800578e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b6:	f000 fc8c 	bl	80061d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ba:	f000 ff6d 	bl	8006798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3738      	adds	r7, #56	; 0x38
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08e      	sub	sp, #56	; 0x38
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d109      	bne.n	80058f8 <xQueueGenericSendFromISR+0x2c>
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	e7fe      	b.n	80058f6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d103      	bne.n	8005906 <xQueueGenericSendFromISR+0x3a>
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <xQueueGenericSendFromISR+0x3e>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <xQueueGenericSendFromISR+0x40>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <xQueueGenericSendFromISR+0x58>
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	e7fe      	b.n	8005922 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d103      	bne.n	8005932 <xQueueGenericSendFromISR+0x66>
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <xQueueGenericSendFromISR+0x6a>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <xQueueGenericSendFromISR+0x6c>
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <xQueueGenericSendFromISR+0x84>
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	e7fe      	b.n	800594e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005950:	f001 ff28 	bl	80077a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005954:	f3ef 8211 	mrs	r2, BASEPRI
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	61ba      	str	r2, [r7, #24]
 800596a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800596c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <xQueueGenericSendFromISR+0xb6>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d12c      	bne.n	80059dc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005992:	f000 fb8e 	bl	80060b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005996:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d112      	bne.n	80059c6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	3324      	adds	r3, #36	; 0x24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 f90d 	bl	8006bcc <xTaskRemoveFromEventList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e007      	b.n	80059d6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059ca:	3301      	adds	r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	b25a      	sxtb	r2, r3
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059d6:	2301      	movs	r3, #1
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80059da:	e001      	b.n	80059e0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	637b      	str	r3, [r7, #52]	; 0x34
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3738      	adds	r7, #56	; 0x38
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08e      	sub	sp, #56	; 0x38
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d109      	bne.n	8005a1c <xQueueGiveFromISR+0x28>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	e7fe      	b.n	8005a1a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d009      	beq.n	8005a38 <xQueueGiveFromISR+0x44>
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	e7fe      	b.n	8005a36 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d103      	bne.n	8005a48 <xQueueGiveFromISR+0x54>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <xQueueGiveFromISR+0x58>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <xQueueGiveFromISR+0x5a>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <xQueueGiveFromISR+0x72>
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e7fe      	b.n	8005a64 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a66:	f001 fe9d 	bl	80077a4 <vPortValidateInterruptPriority>
	__asm volatile
 8005a6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	617a      	str	r2, [r7, #20]
 8005a80:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a82:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d22b      	bcs.n	8005aee <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d112      	bne.n	8005ad8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	3324      	adds	r3, #36	; 0x24
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 f884 	bl	8006bcc <xTaskRemoveFromEventList>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00e      	beq.n	8005ae8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e007      	b.n	8005ae8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005adc:	3301      	adds	r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	b25a      	sxtb	r2, r3
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	637b      	str	r3, [r7, #52]	; 0x34
 8005aec:	e001      	b.n	8005af2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3738      	adds	r7, #56	; 0x38
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08c      	sub	sp, #48	; 0x30
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <xQueueReceive+0x2e>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	623b      	str	r3, [r7, #32]
 8005b34:	e7fe      	b.n	8005b34 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <xQueueReceive+0x3c>
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <xQueueReceive+0x40>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <xQueueReceive+0x42>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d109      	bne.n	8005b62 <xQueueReceive+0x5a>
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	e7fe      	b.n	8005b60 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b62:	f001 f9e9 	bl	8006f38 <xTaskGetSchedulerState>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <xQueueReceive+0x6a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <xQueueReceive+0x6e>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueReceive+0x70>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <xQueueReceive+0x88>
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	e7fe      	b.n	8005b8e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b90:	f001 fd2c 	bl	80075ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01f      	beq.n	8005be0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba4:	f000 faef 	bl	8006186 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	1e5a      	subs	r2, r3, #1
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00f      	beq.n	8005bd8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	3310      	adds	r3, #16
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f805 	bl	8006bcc <xTaskRemoveFromEventList>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bc8:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <xQueueReceive+0x1b4>)
 8005bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bd8:	f001 fd36 	bl	8007648 <vPortExitCritical>
				return pdPASS;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e069      	b.n	8005cb4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005be6:	f001 fd2f 	bl	8007648 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e062      	b.n	8005cb4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bf4:	f107 0310 	add.w	r3, r7, #16
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 f849 	bl	8006c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c02:	f001 fd21 	bl	8007648 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c06:	f000 fdb9 	bl	800677c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c0a:	f001 fcef 	bl	80075ec <vPortEnterCritical>
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d103      	bne.n	8005c24 <xQueueReceive+0x11c>
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c2a:	b25b      	sxtb	r3, r3
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d103      	bne.n	8005c3a <xQueueReceive+0x132>
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c3a:	f001 fd05 	bl	8007648 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c3e:	1d3a      	adds	r2, r7, #4
 8005c40:	f107 0310 	add.w	r3, r7, #16
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 f838 	bl	8006cbc <xTaskCheckForTimeOut>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d123      	bne.n	8005c9a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c54:	f000 fb0f 	bl	8006276 <prvIsQueueEmpty>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d017      	beq.n	8005c8e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	3324      	adds	r3, #36	; 0x24
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4611      	mov	r1, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 ff8c 	bl	8006b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c6e:	f000 fab0 	bl	80061d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c72:	f000 fd91 	bl	8006798 <xTaskResumeAll>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d189      	bne.n	8005b90 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005c7c:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <xQueueReceive+0x1b4>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	e780      	b.n	8005b90 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c90:	f000 fa9f 	bl	80061d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c94:	f000 fd80 	bl	8006798 <xTaskResumeAll>
 8005c98:	e77a      	b.n	8005b90 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9c:	f000 fa99 	bl	80061d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ca0:	f000 fd7a 	bl	8006798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca6:	f000 fae6 	bl	8006276 <prvIsQueueEmpty>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f43f af6f 	beq.w	8005b90 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3730      	adds	r7, #48	; 0x30
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08e      	sub	sp, #56	; 0x38
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <xQueueSemaphoreTake+0x30>
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	623b      	str	r3, [r7, #32]
 8005cee:	e7fe      	b.n	8005cee <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <xQueueSemaphoreTake+0x4c>
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e7fe      	b.n	8005d0a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d0c:	f001 f914 	bl	8006f38 <xTaskGetSchedulerState>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <xQueueSemaphoreTake+0x5c>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <xQueueSemaphoreTake+0x60>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <xQueueSemaphoreTake+0x62>
 8005d20:	2300      	movs	r3, #0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <xQueueSemaphoreTake+0x7a>
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	e7fe      	b.n	8005d38 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d3a:	f001 fc57 	bl	80075ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d024      	beq.n	8005d94 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	1e5a      	subs	r2, r3, #1
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d104      	bne.n	8005d64 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005d5a:	f001 faa7 	bl	80072ac <pvTaskIncrementMutexHeldCount>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00f      	beq.n	8005d8c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	3310      	adds	r3, #16
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 ff2b 	bl	8006bcc <xTaskRemoveFromEventList>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d7c:	4b53      	ldr	r3, [pc, #332]	; (8005ecc <xQueueSemaphoreTake+0x20c>)
 8005d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d8c:	f001 fc5c 	bl	8007648 <vPortExitCritical>
				return pdPASS;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e096      	b.n	8005ec2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d110      	bne.n	8005dbc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d009      	beq.n	8005db4 <xQueueSemaphoreTake+0xf4>
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	e7fe      	b.n	8005db2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005db4:	f001 fc48 	bl	8007648 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e082      	b.n	8005ec2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc2:	f107 030c 	add.w	r3, r7, #12
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 ff62 	bl	8006c90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd0:	f001 fc3a 	bl	8007648 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd4:	f000 fcd2 	bl	800677c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dd8:	f001 fc08 	bl	80075ec <vPortEnterCritical>
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de2:	b25b      	sxtb	r3, r3
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d103      	bne.n	8005df2 <xQueueSemaphoreTake+0x132>
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d103      	bne.n	8005e08 <xQueueSemaphoreTake+0x148>
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e08:	f001 fc1e 	bl	8007648 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0c:	463a      	mov	r2, r7
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 ff51 	bl	8006cbc <xTaskCheckForTimeOut>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d132      	bne.n	8005e86 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e22:	f000 fa28 	bl	8006276 <prvIsQueueEmpty>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d026      	beq.n	8005e7a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005e34:	f001 fbda 	bl	80075ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 f899 	bl	8006f74 <xTaskPriorityInherit>
 8005e42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e44:	f001 fc00 	bl	8007648 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	3324      	adds	r3, #36	; 0x24
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	4611      	mov	r1, r2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fe97 	bl	8006b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e58:	f000 f9bb 	bl	80061d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e5c:	f000 fc9c 	bl	8006798 <xTaskResumeAll>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f47f af69 	bne.w	8005d3a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <xQueueSemaphoreTake+0x20c>)
 8005e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	e75f      	b.n	8005d3a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e7c:	f000 f9a9 	bl	80061d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e80:	f000 fc8a 	bl	8006798 <xTaskResumeAll>
 8005e84:	e759      	b.n	8005d3a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e88:	f000 f9a3 	bl	80061d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e8c:	f000 fc84 	bl	8006798 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e92:	f000 f9f0 	bl	8006276 <prvIsQueueEmpty>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f43f af4e 	beq.w	8005d3a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00d      	beq.n	8005ec0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005ea4:	f001 fba2 	bl	80075ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eaa:	f000 f8ea 	bl	8006082 <prvGetDisinheritPriorityAfterTimeout>
 8005eae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 f960 	bl	800717c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ebc:	f001 fbc4 	bl	8007648 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ec0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3738      	adds	r7, #56	; 0x38
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	e000ed04 	.word	0xe000ed04

08005ed0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08e      	sub	sp, #56	; 0x38
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <xQueueReceiveFromISR+0x2a>
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d103      	bne.n	8005f08 <xQueueReceiveFromISR+0x38>
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <xQueueReceiveFromISR+0x3c>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <xQueueReceiveFromISR+0x3e>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <xQueueReceiveFromISR+0x56>
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	e7fe      	b.n	8005f24 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f26:	f001 fc3d 	bl	80077a4 <vPortValidateInterruptPriority>
	__asm volatile
 8005f2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	61ba      	str	r2, [r7, #24]
 8005f40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d02f      	beq.n	8005fb2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f60:	f000 f911 	bl	8006186 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f74:	d112      	bne.n	8005f9c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d016      	beq.n	8005fac <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	3310      	adds	r3, #16
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fe22 	bl	8006bcc <xTaskRemoveFromEventList>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00e      	beq.n	8005fac <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00b      	beq.n	8005fac <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e007      	b.n	8005fac <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	b25a      	sxtb	r2, r3
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005fac:	2301      	movs	r3, #1
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb0:	e001      	b.n	8005fb6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3738      	adds	r7, #56	; 0x38
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	e7fe      	b.n	8005fea <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005fec:	f001 fafe 	bl	80075ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005ff6:	f001 fb27 	bl	8007648 <vPortExitCritical>

	return uxReturn;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <uxQueueMessagesWaitingFromISR+0x26>
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e7fe      	b.n	8006028 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006030:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <vQueueDelete+0x26>
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	e7fe      	b.n	8006062 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f935 	bl	80062d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f001 fc95 	bl	80079a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2b00      	cmp	r3, #0
 8006090:	d006      	beq.n	80060a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f1c3 0307 	rsb	r3, r3, #7
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e001      	b.n	80060a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80060a4:	68fb      	ldr	r3, [r7, #12]
	}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10d      	bne.n	80060ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d14d      	bne.n	8006174 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 ffc9 	bl	8007074 <xTaskPriorityDisinherit>
 80060e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	609a      	str	r2, [r3, #8]
 80060ea:	e043      	b.n	8006174 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d119      	bne.n	8006126 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6858      	ldr	r0, [r3, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	461a      	mov	r2, r3
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	f015 fea0 	bl	801be42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	441a      	add	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	429a      	cmp	r2, r3
 800611a:	d32b      	bcc.n	8006174 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	605a      	str	r2, [r3, #4]
 8006124:	e026      	b.n	8006174 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	68d8      	ldr	r0, [r3, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	461a      	mov	r2, r3
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	f015 fe86 	bl	801be42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	425b      	negs	r3, r3
 8006140:	441a      	add	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d207      	bcs.n	8006162 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	425b      	negs	r3, r3
 800615c:	441a      	add	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d105      	bne.n	8006174 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	3b01      	subs	r3, #1
 8006172:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	2b00      	cmp	r3, #0
 8006196:	d018      	beq.n	80061ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	441a      	add	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d303      	bcc.n	80061ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68d9      	ldr	r1, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	461a      	mov	r2, r3
 80061c4:	6838      	ldr	r0, [r7, #0]
 80061c6:	f015 fe3c 	bl	801be42 <memcpy>
	}
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061da:	f001 fa07 	bl	80075ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061e6:	e011      	b.n	800620c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d012      	beq.n	8006216 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3324      	adds	r3, #36	; 0x24
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fce9 	bl	8006bcc <xTaskRemoveFromEventList>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006200:	f000 fdbc 	bl	8006d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	3b01      	subs	r3, #1
 8006208:	b2db      	uxtb	r3, r3
 800620a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800620c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006210:	2b00      	cmp	r3, #0
 8006212:	dce9      	bgt.n	80061e8 <prvUnlockQueue+0x16>
 8006214:	e000      	b.n	8006218 <prvUnlockQueue+0x46>
					break;
 8006216:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	22ff      	movs	r2, #255	; 0xff
 800621c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006220:	f001 fa12 	bl	8007648 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006224:	f001 f9e2 	bl	80075ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800622e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006230:	e011      	b.n	8006256 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d012      	beq.n	8006260 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3310      	adds	r3, #16
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fcc4 	bl	8006bcc <xTaskRemoveFromEventList>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800624a:	f000 fd97 	bl	8006d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	3b01      	subs	r3, #1
 8006252:	b2db      	uxtb	r3, r3
 8006254:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800625a:	2b00      	cmp	r3, #0
 800625c:	dce9      	bgt.n	8006232 <prvUnlockQueue+0x60>
 800625e:	e000      	b.n	8006262 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006260:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800626a:	f001 f9ed 	bl	8007648 <vPortExitCritical>
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800627e:	f001 f9b5 	bl	80075ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800628a:	2301      	movs	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e001      	b.n	8006294 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006294:	f001 f9d8 	bl	8007648 <vPortExitCritical>

	return xReturn;
 8006298:	68fb      	ldr	r3, [r7, #12]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062aa:	f001 f99f 	bl	80075ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d102      	bne.n	80062c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062ba:	2301      	movs	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e001      	b.n	80062c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062c4:	f001 f9c0 	bl	8007648 <vPortExitCritical>

	return xReturn;
 80062c8:	68fb      	ldr	r3, [r7, #12]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e016      	b.n	8006310 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <vQueueUnregisterQueue+0x50>)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	4413      	add	r3, r2
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d10b      	bne.n	800630a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062f2:	4a0c      	ldr	r2, [pc, #48]	; (8006324 <vQueueUnregisterQueue+0x50>)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2100      	movs	r1, #0
 80062f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80062fc:	4a09      	ldr	r2, [pc, #36]	; (8006324 <vQueueUnregisterQueue+0x50>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	4413      	add	r3, r2
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]
				break;
 8006308:	e005      	b.n	8006316 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b07      	cmp	r3, #7
 8006314:	d9e5      	bls.n	80062e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20008db8 	.word	0x20008db8

08006328 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	; 0x38
 800632c:	af04      	add	r7, sp, #16
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <xTaskCreateStatic+0x28>
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	e7fe      	b.n	800634e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	2b00      	cmp	r3, #0
 8006354:	d109      	bne.n	800636a <xTaskCreateStatic+0x42>
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e7fe      	b.n	8006368 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800636a:	2354      	movs	r3, #84	; 0x54
 800636c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	2b54      	cmp	r3, #84	; 0x54
 8006372:	d009      	beq.n	8006388 <xTaskCreateStatic+0x60>
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e7fe      	b.n	8006386 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006388:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01e      	beq.n	80063ce <xTaskCreateStatic+0xa6>
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	2b00      	cmp	r3, #0
 8006394:	d01b      	beq.n	80063ce <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800639e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063a8:	2300      	movs	r3, #0
 80063aa:	9303      	str	r3, [sp, #12]
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	9302      	str	r3, [sp, #8]
 80063b0:	f107 0314 	add.w	r3, r7, #20
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f850 	bl	8006466 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063c8:	f000 f8dc 	bl	8006584 <prvAddNewTaskToReadyList>
 80063cc:	e001      	b.n	80063d2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063d2:	697b      	ldr	r3, [r7, #20]
	}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	; 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08c      	sub	sp, #48	; 0x30
 80063e0:	af04      	add	r7, sp, #16
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 fa15 	bl	8007820 <pvPortMalloc>
 80063f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063fe:	2054      	movs	r0, #84	; 0x54
 8006400:	f001 fa0e 	bl	8007820 <pvPortMalloc>
 8006404:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
 8006412:	e005      	b.n	8006420 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006414:	6978      	ldr	r0, [r7, #20]
 8006416:	f001 fac5 	bl	80079a4 <vPortFree>
 800641a:	e001      	b.n	8006420 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d017      	beq.n	8006456 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	2300      	movs	r3, #0
 8006432:	9303      	str	r3, [sp, #12]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	9302      	str	r3, [sp, #8]
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f80e 	bl	8006466 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800644a:	69f8      	ldr	r0, [r7, #28]
 800644c:	f000 f89a 	bl	8006584 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006450:	2301      	movs	r3, #1
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e002      	b.n	800645c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006456:	f04f 33ff 	mov.w	r3, #4294967295
 800645a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800645c:	69bb      	ldr	r3, [r7, #24]
	}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b088      	sub	sp, #32
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	461a      	mov	r2, r3
 800647e:	21a5      	movs	r1, #165	; 0xa5
 8006480:	f015 fcea 	bl	801be58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800648e:	3b01      	subs	r3, #1
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f023 0307 	bic.w	r3, r3, #7
 800649c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <prvInitialiseNewTask+0x56>
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	e7fe      	b.n	80064ba <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01f      	beq.n	8006502 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e012      	b.n	80064ee <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	7819      	ldrb	r1, [r3, #0]
 80064d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	3334      	adds	r3, #52	; 0x34
 80064d8:	460a      	mov	r2, r1
 80064da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d006      	beq.n	80064f6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	3301      	adds	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2b0f      	cmp	r3, #15
 80064f2:	d9e9      	bls.n	80064c8 <prvInitialiseNewTask+0x62>
 80064f4:	e000      	b.n	80064f8 <prvInitialiseNewTask+0x92>
			{
				break;
 80064f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006500:	e003      	b.n	800650a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	2b06      	cmp	r3, #6
 800650e:	d901      	bls.n	8006514 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006510:	2306      	movs	r3, #6
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006518:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	2200      	movs	r2, #0
 8006524:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	3304      	adds	r3, #4
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe feb9 	bl	80052a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	3318      	adds	r3, #24
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe feb4 	bl	80052a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006542:	f1c3 0207 	rsb	r2, r3, #7
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	2200      	movs	r2, #0
 8006554:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	68f9      	ldr	r1, [r7, #12]
 8006562:	69b8      	ldr	r0, [r7, #24]
 8006564:	f000 ff1c 	bl	80073a0 <pxPortInitialiseStack>
 8006568:	4602      	mov	r2, r0
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006578:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800657a:	bf00      	nop
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800658c:	f001 f82e 	bl	80075ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006590:	4b2a      	ldr	r3, [pc, #168]	; (800663c <prvAddNewTaskToReadyList+0xb8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	4a29      	ldr	r2, [pc, #164]	; (800663c <prvAddNewTaskToReadyList+0xb8>)
 8006598:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800659a:	4b29      	ldr	r3, [pc, #164]	; (8006640 <prvAddNewTaskToReadyList+0xbc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065a2:	4a27      	ldr	r2, [pc, #156]	; (8006640 <prvAddNewTaskToReadyList+0xbc>)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065a8:	4b24      	ldr	r3, [pc, #144]	; (800663c <prvAddNewTaskToReadyList+0xb8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d110      	bne.n	80065d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065b0:	f000 fc08 	bl	8006dc4 <prvInitialiseTaskLists>
 80065b4:	e00d      	b.n	80065d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065b6:	4b23      	ldr	r3, [pc, #140]	; (8006644 <prvAddNewTaskToReadyList+0xc0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d109      	bne.n	80065d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065be:	4b20      	ldr	r3, [pc, #128]	; (8006640 <prvAddNewTaskToReadyList+0xbc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d802      	bhi.n	80065d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065cc:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <prvAddNewTaskToReadyList+0xbc>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065d2:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <prvAddNewTaskToReadyList+0xc4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3301      	adds	r3, #1
 80065d8:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <prvAddNewTaskToReadyList+0xc4>)
 80065da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	2201      	movs	r2, #1
 80065e2:	409a      	lsls	r2, r3
 80065e4:	4b19      	ldr	r3, [pc, #100]	; (800664c <prvAddNewTaskToReadyList+0xc8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	4a18      	ldr	r2, [pc, #96]	; (800664c <prvAddNewTaskToReadyList+0xc8>)
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4a15      	ldr	r2, [pc, #84]	; (8006650 <prvAddNewTaskToReadyList+0xcc>)
 80065fc:	441a      	add	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7fe fe59 	bl	80052bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800660a:	f001 f81d 	bl	8007648 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800660e:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <prvAddNewTaskToReadyList+0xc0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00e      	beq.n	8006634 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <prvAddNewTaskToReadyList+0xbc>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	429a      	cmp	r2, r3
 8006622:	d207      	bcs.n	8006634 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <prvAddNewTaskToReadyList+0xd0>)
 8006626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	2000030c 	.word	0x2000030c
 8006640:	2000020c 	.word	0x2000020c
 8006644:	20000318 	.word	0x20000318
 8006648:	20000328 	.word	0x20000328
 800664c:	20000314 	.word	0x20000314
 8006650:	20000210 	.word	0x20000210
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d016      	beq.n	8006698 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <vTaskDelay+0x60>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <vTaskDelay+0x2e>
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	e7fe      	b.n	8006684 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006686:	f000 f879 	bl	800677c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800668a:	2100      	movs	r1, #0
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fe21 	bl	80072d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006692:	f000 f881 	bl	8006798 <xTaskResumeAll>
 8006696:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d107      	bne.n	80066ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800669e:	4b07      	ldr	r3, [pc, #28]	; (80066bc <vTaskDelay+0x64>)
 80066a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066ae:	bf00      	nop
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000334 	.word	0x20000334
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066ce:	463a      	mov	r2, r7
 80066d0:	1d39      	adds	r1, r7, #4
 80066d2:	f107 0308 	add.w	r3, r7, #8
 80066d6:	4618      	mov	r0, r3
 80066d8:	f014 fd3c 	bl	801b154 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	9202      	str	r2, [sp, #8]
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	2300      	movs	r3, #0
 80066ec:	460a      	mov	r2, r1
 80066ee:	491d      	ldr	r1, [pc, #116]	; (8006764 <vTaskStartScheduler+0xa4>)
 80066f0:	481d      	ldr	r0, [pc, #116]	; (8006768 <vTaskStartScheduler+0xa8>)
 80066f2:	f7ff fe19 	bl	8006328 <xTaskCreateStatic>
 80066f6:	4602      	mov	r2, r0
 80066f8:	4b1c      	ldr	r3, [pc, #112]	; (800676c <vTaskStartScheduler+0xac>)
 80066fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <vTaskStartScheduler+0xac>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006704:	2301      	movs	r3, #1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e001      	b.n	800670e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d115      	bne.n	8006740 <vTaskStartScheduler+0x80>
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006726:	4b12      	ldr	r3, [pc, #72]	; (8006770 <vTaskStartScheduler+0xb0>)
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800672e:	4b11      	ldr	r3, [pc, #68]	; (8006774 <vTaskStartScheduler+0xb4>)
 8006730:	2201      	movs	r2, #1
 8006732:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006734:	4b10      	ldr	r3, [pc, #64]	; (8006778 <vTaskStartScheduler+0xb8>)
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800673a:	f000 feb9 	bl	80074b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800673e:	e00d      	b.n	800675c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d109      	bne.n	800675c <vTaskStartScheduler+0x9c>
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	e7fe      	b.n	800675a <vTaskStartScheduler+0x9a>
}
 800675c:	bf00      	nop
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	0801ce44 	.word	0x0801ce44
 8006768:	08006d95 	.word	0x08006d95
 800676c:	20000330 	.word	0x20000330
 8006770:	2000032c 	.word	0x2000032c
 8006774:	20000318 	.word	0x20000318
 8006778:	20000310 	.word	0x20000310

0800677c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <vTaskSuspendAll+0x18>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	4a03      	ldr	r2, [pc, #12]	; (8006794 <vTaskSuspendAll+0x18>)
 8006788:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800678a:	bf00      	nop
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	20000334 	.word	0x20000334

08006798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067a6:	4b41      	ldr	r3, [pc, #260]	; (80068ac <xTaskResumeAll+0x114>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <xTaskResumeAll+0x2a>
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	e7fe      	b.n	80067c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067c2:	f000 ff13 	bl	80075ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067c6:	4b39      	ldr	r3, [pc, #228]	; (80068ac <xTaskResumeAll+0x114>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4a37      	ldr	r2, [pc, #220]	; (80068ac <xTaskResumeAll+0x114>)
 80067ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067d0:	4b36      	ldr	r3, [pc, #216]	; (80068ac <xTaskResumeAll+0x114>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d161      	bne.n	800689c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067d8:	4b35      	ldr	r3, [pc, #212]	; (80068b0 <xTaskResumeAll+0x118>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d05d      	beq.n	800689c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067e0:	e02e      	b.n	8006840 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e2:	4b34      	ldr	r3, [pc, #208]	; (80068b4 <xTaskResumeAll+0x11c>)
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3318      	adds	r3, #24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fdc1 	bl	8005376 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fdbc 	bl	8005376 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	2201      	movs	r2, #1
 8006804:	409a      	lsls	r2, r3
 8006806:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <xTaskResumeAll+0x120>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4313      	orrs	r3, r2
 800680c:	4a2a      	ldr	r2, [pc, #168]	; (80068b8 <xTaskResumeAll+0x120>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4a27      	ldr	r2, [pc, #156]	; (80068bc <xTaskResumeAll+0x124>)
 800681e:	441a      	add	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f7fe fd48 	bl	80052bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4b23      	ldr	r3, [pc, #140]	; (80068c0 <xTaskResumeAll+0x128>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800683a:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <xTaskResumeAll+0x12c>)
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006840:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <xTaskResumeAll+0x11c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1cc      	bne.n	80067e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800684e:	f000 fb53 	bl	8006ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <xTaskResumeAll+0x130>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d010      	beq.n	8006880 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800685e:	f000 f859 	bl	8006914 <xTaskIncrementTick>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006868:	4b16      	ldr	r3, [pc, #88]	; (80068c4 <xTaskResumeAll+0x12c>)
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3b01      	subs	r3, #1
 8006872:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f1      	bne.n	800685e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <xTaskResumeAll+0x130>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006880:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <xTaskResumeAll+0x12c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <xTaskResumeAll+0x134>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800689c:	f000 fed4 	bl	8007648 <vPortExitCritical>

	return xAlreadyYielded;
 80068a0:	68bb      	ldr	r3, [r7, #8]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000334 	.word	0x20000334
 80068b0:	2000030c 	.word	0x2000030c
 80068b4:	200002cc 	.word	0x200002cc
 80068b8:	20000314 	.word	0x20000314
 80068bc:	20000210 	.word	0x20000210
 80068c0:	2000020c 	.word	0x2000020c
 80068c4:	20000320 	.word	0x20000320
 80068c8:	2000031c 	.word	0x2000031c
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <xTaskGetTickCount+0x1c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068dc:	687b      	ldr	r3, [r7, #4]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000310 	.word	0x20000310

080068f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068f6:	f000 ff55 	bl	80077a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80068fa:	2300      	movs	r3, #0
 80068fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80068fe:	4b04      	ldr	r3, [pc, #16]	; (8006910 <xTaskGetTickCountFromISR+0x20>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006904:	683b      	ldr	r3, [r7, #0]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000310 	.word	0x20000310

08006914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800691e:	4b4e      	ldr	r3, [pc, #312]	; (8006a58 <xTaskIncrementTick+0x144>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f040 8087 	bne.w	8006a36 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006928:	4b4c      	ldr	r3, [pc, #304]	; (8006a5c <xTaskIncrementTick+0x148>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006930:	4a4a      	ldr	r2, [pc, #296]	; (8006a5c <xTaskIncrementTick+0x148>)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11f      	bne.n	800697c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800693c:	4b48      	ldr	r3, [pc, #288]	; (8006a60 <xTaskIncrementTick+0x14c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <xTaskIncrementTick+0x46>
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	e7fe      	b.n	8006958 <xTaskIncrementTick+0x44>
 800695a:	4b41      	ldr	r3, [pc, #260]	; (8006a60 <xTaskIncrementTick+0x14c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	4b40      	ldr	r3, [pc, #256]	; (8006a64 <xTaskIncrementTick+0x150>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a3e      	ldr	r2, [pc, #248]	; (8006a60 <xTaskIncrementTick+0x14c>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	4a3e      	ldr	r2, [pc, #248]	; (8006a64 <xTaskIncrementTick+0x150>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b3e      	ldr	r3, [pc, #248]	; (8006a68 <xTaskIncrementTick+0x154>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a3c      	ldr	r2, [pc, #240]	; (8006a68 <xTaskIncrementTick+0x154>)
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	f000 fabe 	bl	8006ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800697c:	4b3b      	ldr	r3, [pc, #236]	; (8006a6c <xTaskIncrementTick+0x158>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	429a      	cmp	r2, r3
 8006984:	d348      	bcc.n	8006a18 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006986:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <xTaskIncrementTick+0x14c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006990:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <xTaskIncrementTick+0x158>)
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	601a      	str	r2, [r3, #0]
					break;
 8006998:	e03e      	b.n	8006a18 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800699a:	4b31      	ldr	r3, [pc, #196]	; (8006a60 <xTaskIncrementTick+0x14c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d203      	bcs.n	80069ba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069b2:	4a2e      	ldr	r2, [pc, #184]	; (8006a6c <xTaskIncrementTick+0x158>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069b8:	e02e      	b.n	8006a18 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fcd9 	bl	8005376 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3318      	adds	r3, #24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe fcd0 	bl	8005376 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	2201      	movs	r2, #1
 80069dc:	409a      	lsls	r2, r3
 80069de:	4b24      	ldr	r3, [pc, #144]	; (8006a70 <xTaskIncrementTick+0x15c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <xTaskIncrementTick+0x15c>)
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <xTaskIncrementTick+0x160>)
 80069f6:	441a      	add	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4619      	mov	r1, r3
 80069fe:	4610      	mov	r0, r2
 8006a00:	f7fe fc5c 	bl	80052bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a08:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <xTaskIncrementTick+0x164>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d3b9      	bcc.n	8006986 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a16:	e7b6      	b.n	8006986 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a18:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <xTaskIncrementTick+0x164>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1e:	4915      	ldr	r1, [pc, #84]	; (8006a74 <xTaskIncrementTick+0x160>)
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d907      	bls.n	8006a40 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e004      	b.n	8006a40 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a36:	4b11      	ldr	r3, [pc, #68]	; (8006a7c <xTaskIncrementTick+0x168>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <xTaskIncrementTick+0x168>)
 8006a3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <xTaskIncrementTick+0x16c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a4c:	697b      	ldr	r3, [r7, #20]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000334 	.word	0x20000334
 8006a5c:	20000310 	.word	0x20000310
 8006a60:	200002c4 	.word	0x200002c4
 8006a64:	200002c8 	.word	0x200002c8
 8006a68:	20000324 	.word	0x20000324
 8006a6c:	2000032c 	.word	0x2000032c
 8006a70:	20000314 	.word	0x20000314
 8006a74:	20000210 	.word	0x20000210
 8006a78:	2000020c 	.word	0x2000020c
 8006a7c:	2000031c 	.word	0x2000031c
 8006a80:	20000320 	.word	0x20000320

08006a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a8a:	4b39      	ldr	r3, [pc, #228]	; (8006b70 <vTaskSwitchContext+0xec>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a92:	4b38      	ldr	r3, [pc, #224]	; (8006b74 <vTaskSwitchContext+0xf0>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a98:	e065      	b.n	8006b66 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8006a9a:	4b36      	ldr	r3, [pc, #216]	; (8006b74 <vTaskSwitchContext+0xf0>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006aa0:	4b35      	ldr	r3, [pc, #212]	; (8006b78 <vTaskSwitchContext+0xf4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d111      	bne.n	8006adc <vTaskSwitchContext+0x58>
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	3304      	adds	r3, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d10b      	bne.n	8006adc <vTaskSwitchContext+0x58>
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d105      	bne.n	8006adc <vTaskSwitchContext+0x58>
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	330c      	adds	r3, #12
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d008      	beq.n	8006aee <vTaskSwitchContext+0x6a>
 8006adc:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <vTaskSwitchContext+0xf4>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <vTaskSwitchContext+0xf4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3334      	adds	r3, #52	; 0x34
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	f014 fb21 	bl	801b130 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aee:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <vTaskSwitchContext+0xf8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	fab3 f383 	clz	r3, r3
 8006afa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	f1c3 031f 	rsb	r3, r3, #31
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	491e      	ldr	r1, [pc, #120]	; (8006b80 <vTaskSwitchContext+0xfc>)
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <vTaskSwitchContext+0xa8>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	607b      	str	r3, [r7, #4]
 8006b2a:	e7fe      	b.n	8006b2a <vTaskSwitchContext+0xa6>
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <vTaskSwitchContext+0xfc>)
 8006b38:	4413      	add	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d104      	bne.n	8006b5c <vTaskSwitchContext+0xd8>
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	605a      	str	r2, [r3, #4]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	4a05      	ldr	r2, [pc, #20]	; (8006b78 <vTaskSwitchContext+0xf4>)
 8006b64:	6013      	str	r3, [r2, #0]
}
 8006b66:	bf00      	nop
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000334 	.word	0x20000334
 8006b74:	20000320 	.word	0x20000320
 8006b78:	2000020c 	.word	0x2000020c
 8006b7c:	20000314 	.word	0x20000314
 8006b80:	20000210 	.word	0x20000210

08006b84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <vTaskPlaceOnEventList+0x24>
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	e7fe      	b.n	8006ba6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <vTaskPlaceOnEventList+0x44>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3318      	adds	r3, #24
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fe fba7 	bl	8005304 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	6838      	ldr	r0, [r7, #0]
 8006bba:	f000 fb8b 	bl	80072d4 <prvAddCurrentTaskToDelayedList>
}
 8006bbe:	bf00      	nop
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	2000020c 	.word	0x2000020c

08006bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d109      	bne.n	8006bf6 <xTaskRemoveFromEventList+0x2a>
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	e7fe      	b.n	8006bf4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	3318      	adds	r3, #24
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fe fbbb 	bl	8005376 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c00:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <xTaskRemoveFromEventList+0xac>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11c      	bne.n	8006c42 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fbb2 	bl	8005376 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	2201      	movs	r2, #1
 8006c18:	409a      	lsls	r2, r3
 8006c1a:	4b18      	ldr	r3, [pc, #96]	; (8006c7c <xTaskRemoveFromEventList+0xb0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	4a16      	ldr	r2, [pc, #88]	; (8006c7c <xTaskRemoveFromEventList+0xb0>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <xTaskRemoveFromEventList+0xb4>)
 8006c32:	441a      	add	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fe fb3e 	bl	80052bc <vListInsertEnd>
 8006c40:	e005      	b.n	8006c4e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3318      	adds	r3, #24
 8006c46:	4619      	mov	r1, r3
 8006c48:	480e      	ldr	r0, [pc, #56]	; (8006c84 <xTaskRemoveFromEventList+0xb8>)
 8006c4a:	f7fe fb37 	bl	80052bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <xTaskRemoveFromEventList+0xbc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d905      	bls.n	8006c68 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <xTaskRemoveFromEventList+0xc0>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e001      	b.n	8006c6c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c6c:	697b      	ldr	r3, [r7, #20]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000334 	.word	0x20000334
 8006c7c:	20000314 	.word	0x20000314
 8006c80:	20000210 	.word	0x20000210
 8006c84:	200002cc 	.word	0x200002cc
 8006c88:	2000020c 	.word	0x2000020c
 8006c8c:	20000320 	.word	0x20000320

08006c90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <vTaskInternalSetTimeOutState+0x24>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <vTaskInternalSetTimeOutState+0x28>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	605a      	str	r2, [r3, #4]
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	20000324 	.word	0x20000324
 8006cb8:	20000310 	.word	0x20000310

08006cbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <xTaskCheckForTimeOut+0x24>
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	e7fe      	b.n	8006cde <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <xTaskCheckForTimeOut+0x3e>
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e7fe      	b.n	8006cf8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006cfa:	f000 fc77 	bl	80075ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <xTaskCheckForTimeOut+0xb8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	d102      	bne.n	8006d1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	e023      	b.n	8006d66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <xTaskCheckForTimeOut+0xbc>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d007      	beq.n	8006d3a <xTaskCheckForTimeOut+0x7e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d302      	bcc.n	8006d3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d34:	2301      	movs	r3, #1
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e015      	b.n	8006d66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d20b      	bcs.n	8006d5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff ff9d 	bl	8006c90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	e004      	b.n	8006d66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d66:	f000 fc6f 	bl	8007648 <vPortExitCritical>

	return xReturn;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000310 	.word	0x20000310
 8006d78:	20000324 	.word	0x20000324

08006d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <vTaskMissedYield+0x14>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
}
 8006d86:	bf00      	nop
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20000320 	.word	0x20000320

08006d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d9c:	f000 f852 	bl	8006e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <prvIdleTask+0x28>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d9f9      	bls.n	8006d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006da8:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <prvIdleTask+0x2c>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006db8:	e7f0      	b.n	8006d9c <prvIdleTask+0x8>
 8006dba:	bf00      	nop
 8006dbc:	20000210 	.word	0x20000210
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dca:	2300      	movs	r3, #0
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	e00c      	b.n	8006dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <prvInitialiseTaskLists+0x60>)
 8006ddc:	4413      	add	r3, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fa3f 	bl	8005262 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3301      	adds	r3, #1
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	d9ef      	bls.n	8006dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006df0:	480d      	ldr	r0, [pc, #52]	; (8006e28 <prvInitialiseTaskLists+0x64>)
 8006df2:	f7fe fa36 	bl	8005262 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006df6:	480d      	ldr	r0, [pc, #52]	; (8006e2c <prvInitialiseTaskLists+0x68>)
 8006df8:	f7fe fa33 	bl	8005262 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dfc:	480c      	ldr	r0, [pc, #48]	; (8006e30 <prvInitialiseTaskLists+0x6c>)
 8006dfe:	f7fe fa30 	bl	8005262 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e02:	480c      	ldr	r0, [pc, #48]	; (8006e34 <prvInitialiseTaskLists+0x70>)
 8006e04:	f7fe fa2d 	bl	8005262 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e08:	480b      	ldr	r0, [pc, #44]	; (8006e38 <prvInitialiseTaskLists+0x74>)
 8006e0a:	f7fe fa2a 	bl	8005262 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <prvInitialiseTaskLists+0x78>)
 8006e10:	4a05      	ldr	r2, [pc, #20]	; (8006e28 <prvInitialiseTaskLists+0x64>)
 8006e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <prvInitialiseTaskLists+0x7c>)
 8006e16:	4a05      	ldr	r2, [pc, #20]	; (8006e2c <prvInitialiseTaskLists+0x68>)
 8006e18:	601a      	str	r2, [r3, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000210 	.word	0x20000210
 8006e28:	2000029c 	.word	0x2000029c
 8006e2c:	200002b0 	.word	0x200002b0
 8006e30:	200002cc 	.word	0x200002cc
 8006e34:	200002e0 	.word	0x200002e0
 8006e38:	200002f8 	.word	0x200002f8
 8006e3c:	200002c4 	.word	0x200002c4
 8006e40:	200002c8 	.word	0x200002c8

08006e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e4a:	e019      	b.n	8006e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e4c:	f000 fbce 	bl	80075ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e50:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <prvCheckTasksWaitingTermination+0x4c>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe fa8a 	bl	8005376 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e62:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <prvCheckTasksWaitingTermination+0x50>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	4a0a      	ldr	r2, [pc, #40]	; (8006e94 <prvCheckTasksWaitingTermination+0x50>)
 8006e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e6c:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <prvCheckTasksWaitingTermination+0x54>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <prvCheckTasksWaitingTermination+0x54>)
 8006e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e76:	f000 fbe7 	bl	8007648 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f80e 	bl	8006e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <prvCheckTasksWaitingTermination+0x54>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e1      	bne.n	8006e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	200002e0 	.word	0x200002e0
 8006e94:	2000030c 	.word	0x2000030c
 8006e98:	200002f4 	.word	0x200002f4

08006e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d108      	bne.n	8006ec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fd76 	bl	80079a4 <vPortFree>
				vPortFree( pxTCB );
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fd73 	bl	80079a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ebe:	e017      	b.n	8006ef0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d103      	bne.n	8006ed2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fd6a 	bl	80079a4 <vPortFree>
	}
 8006ed0:	e00e      	b.n	8006ef0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d009      	beq.n	8006ef0 <prvDeleteTCB+0x54>
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e7fe      	b.n	8006eee <prvDeleteTCB+0x52>
	}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <prvResetNextTaskUnblockTime+0x38>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <prvResetNextTaskUnblockTime+0x3c>)
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f10:	e008      	b.n	8006f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f12:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <prvResetNextTaskUnblockTime+0x38>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a04      	ldr	r2, [pc, #16]	; (8006f34 <prvResetNextTaskUnblockTime+0x3c>)
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	200002c4 	.word	0x200002c4
 8006f34:	2000032c 	.word	0x2000032c

08006f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <xTaskGetSchedulerState+0x34>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f46:	2301      	movs	r3, #1
 8006f48:	607b      	str	r3, [r7, #4]
 8006f4a:	e008      	b.n	8006f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <xTaskGetSchedulerState+0x38>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f54:	2302      	movs	r3, #2
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	e001      	b.n	8006f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f5e:	687b      	ldr	r3, [r7, #4]
	}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20000318 	.word	0x20000318
 8006f70:	20000334 	.word	0x20000334

08006f74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d069      	beq.n	800705e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4b36      	ldr	r3, [pc, #216]	; (8007068 <xTaskPriorityInherit+0xf4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d259      	bcs.n	800704c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	db06      	blt.n	8006fae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa0:	4b31      	ldr	r3, [pc, #196]	; (8007068 <xTaskPriorityInherit+0xf4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	f1c3 0207 	rsb	r2, r3, #7
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6959      	ldr	r1, [r3, #20]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4a2b      	ldr	r2, [pc, #172]	; (800706c <xTaskPriorityInherit+0xf8>)
 8006fc0:	4413      	add	r3, r2
 8006fc2:	4299      	cmp	r1, r3
 8006fc4:	d13a      	bne.n	800703c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe f9d3 	bl	8005376 <uxListRemove>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d115      	bne.n	8007002 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	4924      	ldr	r1, [pc, #144]	; (800706c <xTaskPriorityInherit+0xf8>)
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <xTaskPriorityInherit+0x8e>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff6:	43da      	mvns	r2, r3
 8006ff8:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <xTaskPriorityInherit+0xfc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <xTaskPriorityInherit+0xfc>)
 8007000:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007002:	4b19      	ldr	r3, [pc, #100]	; (8007068 <xTaskPriorityInherit+0xf4>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	2201      	movs	r2, #1
 8007012:	409a      	lsls	r2, r3
 8007014:	4b16      	ldr	r3, [pc, #88]	; (8007070 <xTaskPriorityInherit+0xfc>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4313      	orrs	r3, r2
 800701a:	4a15      	ldr	r2, [pc, #84]	; (8007070 <xTaskPriorityInherit+0xfc>)
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4a10      	ldr	r2, [pc, #64]	; (800706c <xTaskPriorityInherit+0xf8>)
 800702c:	441a      	add	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fe f941 	bl	80052bc <vListInsertEnd>
 800703a:	e004      	b.n	8007046 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800703c:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <xTaskPriorityInherit+0xf4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007046:	2301      	movs	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e008      	b.n	800705e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007050:	4b05      	ldr	r3, [pc, #20]	; (8007068 <xTaskPriorityInherit+0xf4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	429a      	cmp	r2, r3
 8007058:	d201      	bcs.n	800705e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800705a:	2301      	movs	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800705e:	68fb      	ldr	r3, [r7, #12]
	}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	2000020c 	.word	0x2000020c
 800706c:	20000210 	.word	0x20000210
 8007070:	20000314 	.word	0x20000314

08007074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d06c      	beq.n	8007164 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800708a:	4b39      	ldr	r3, [pc, #228]	; (8007170 <xTaskPriorityDisinherit+0xfc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	429a      	cmp	r2, r3
 8007092:	d009      	beq.n	80070a8 <xTaskPriorityDisinherit+0x34>
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e7fe      	b.n	80070a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <xTaskPriorityDisinherit+0x50>
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	e7fe      	b.n	80070c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c8:	1e5a      	subs	r2, r3, #1
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d044      	beq.n	8007164 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d140      	bne.n	8007164 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe f945 	bl	8005376 <uxListRemove>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d115      	bne.n	800711e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f6:	491f      	ldr	r1, [pc, #124]	; (8007174 <xTaskPriorityDisinherit+0x100>)
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <xTaskPriorityDisinherit+0xaa>
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	2201      	movs	r2, #1
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	43da      	mvns	r2, r3
 8007114:	4b18      	ldr	r3, [pc, #96]	; (8007178 <xTaskPriorityDisinherit+0x104>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4013      	ands	r3, r2
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <xTaskPriorityDisinherit+0x104>)
 800711c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	f1c3 0207 	rsb	r2, r3, #7
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	2201      	movs	r2, #1
 8007138:	409a      	lsls	r2, r3
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <xTaskPriorityDisinherit+0x104>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4313      	orrs	r3, r2
 8007140:	4a0d      	ldr	r2, [pc, #52]	; (8007178 <xTaskPriorityDisinherit+0x104>)
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4a08      	ldr	r2, [pc, #32]	; (8007174 <xTaskPriorityDisinherit+0x100>)
 8007152:	441a      	add	r2, r3
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7fe f8ae 	bl	80052bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007164:	697b      	ldr	r3, [r7, #20]
	}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000020c 	.word	0x2000020c
 8007174:	20000210 	.word	0x20000210
 8007178:	20000314 	.word	0x20000314

0800717c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800718a:	2301      	movs	r3, #1
 800718c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8081 	beq.w	8007298 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e7fe      	b.n	80071b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d902      	bls.n	80071c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	e002      	b.n	80071c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	69fa      	ldr	r2, [r7, #28]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d062      	beq.n	8007298 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d15d      	bne.n	8007298 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80071dc:	4b30      	ldr	r3, [pc, #192]	; (80072a0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d109      	bne.n	80071fa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	e7fe      	b.n	80071f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	db04      	blt.n	8007218 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	f1c3 0207 	rsb	r2, r3, #7
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	6959      	ldr	r1, [r3, #20]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007228:	4413      	add	r3, r2
 800722a:	4299      	cmp	r1, r3
 800722c:	d134      	bne.n	8007298 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	3304      	adds	r3, #4
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe f89f 	bl	8005376 <uxListRemove>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d115      	bne.n	800726a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007242:	4918      	ldr	r1, [pc, #96]	; (80072a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	2201      	movs	r2, #1
 800725a:	fa02 f303 	lsl.w	r3, r2, r3
 800725e:	43da      	mvns	r2, r3
 8007260:	4b11      	ldr	r3, [pc, #68]	; (80072a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4013      	ands	r3, r2
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007268:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	2201      	movs	r2, #1
 8007270:	409a      	lsls	r2, r3
 8007272:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4313      	orrs	r3, r2
 8007278:	4a0b      	ldr	r2, [pc, #44]	; (80072a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4a06      	ldr	r2, [pc, #24]	; (80072a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800728a:	441a      	add	r2, r3
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f7fe f812 	bl	80052bc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007298:	bf00      	nop
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	2000020c 	.word	0x2000020c
 80072a4:	20000210 	.word	0x20000210
 80072a8:	20000314 	.word	0x20000314

080072ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072b0:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072be:	3201      	adds	r2, #1
 80072c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80072c2:	4b03      	ldr	r3, [pc, #12]	; (80072d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80072c4:	681b      	ldr	r3, [r3, #0]
	}
 80072c6:	4618      	mov	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	2000020c 	.word	0x2000020c

080072d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072de:	4b29      	ldr	r3, [pc, #164]	; (8007384 <prvAddCurrentTaskToDelayedList+0xb0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072e4:	4b28      	ldr	r3, [pc, #160]	; (8007388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe f843 	bl	8005376 <uxListRemove>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10b      	bne.n	800730e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80072f6:	4b24      	ldr	r3, [pc, #144]	; (8007388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	2201      	movs	r2, #1
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	43da      	mvns	r2, r3
 8007304:	4b21      	ldr	r3, [pc, #132]	; (800738c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4013      	ands	r3, r2
 800730a:	4a20      	ldr	r2, [pc, #128]	; (800738c <prvAddCurrentTaskToDelayedList+0xb8>)
 800730c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007314:	d10a      	bne.n	800732c <prvAddCurrentTaskToDelayedList+0x58>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800731c:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3304      	adds	r3, #4
 8007322:	4619      	mov	r1, r3
 8007324:	481a      	ldr	r0, [pc, #104]	; (8007390 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007326:	f7fd ffc9 	bl	80052bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800732a:	e026      	b.n	800737a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4413      	add	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007334:	4b14      	ldr	r3, [pc, #80]	; (8007388 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	429a      	cmp	r2, r3
 8007342:	d209      	bcs.n	8007358 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007344:	4b13      	ldr	r3, [pc, #76]	; (8007394 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fd ffd7 	bl	8005304 <vListInsert>
}
 8007356:	e010      	b.n	800737a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007358:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <prvAddCurrentTaskToDelayedList+0xc4>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <prvAddCurrentTaskToDelayedList+0xb4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3304      	adds	r3, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7fd ffcd 	bl	8005304 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800736a:	4b0c      	ldr	r3, [pc, #48]	; (800739c <prvAddCurrentTaskToDelayedList+0xc8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	d202      	bcs.n	800737a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007374:	4a09      	ldr	r2, [pc, #36]	; (800739c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6013      	str	r3, [r2, #0]
}
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000310 	.word	0x20000310
 8007388:	2000020c 	.word	0x2000020c
 800738c:	20000314 	.word	0x20000314
 8007390:	200002f8 	.word	0x200002f8
 8007394:	200002c8 	.word	0x200002c8
 8007398:	200002c4 	.word	0x200002c4
 800739c:	2000032c 	.word	0x2000032c

080073a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3b04      	subs	r3, #4
 80073b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3b04      	subs	r3, #4
 80073be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f023 0201 	bic.w	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b04      	subs	r3, #4
 80073ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073d0:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <pxPortInitialiseStack+0x64>)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3b14      	subs	r3, #20
 80073da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3b04      	subs	r3, #4
 80073e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f06f 0202 	mvn.w	r2, #2
 80073ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3b20      	subs	r3, #32
 80073f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073f6:	68fb      	ldr	r3, [r7, #12]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	08007409 	.word	0x08007409

08007408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007412:	4b11      	ldr	r3, [pc, #68]	; (8007458 <prvTaskExitError+0x50>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d009      	beq.n	8007430 <prvTaskExitError+0x28>
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	e7fe      	b.n	800742e <prvTaskExitError+0x26>
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007442:	bf00      	nop
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0fc      	beq.n	8007444 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	20000008 	.word	0x20000008
 800745c:	00000000 	.word	0x00000000

08007460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <pxCurrentTCBConst2>)
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	6808      	ldr	r0, [r1, #0]
 8007466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	f380 8809 	msr	PSP, r0
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f04f 0000 	mov.w	r0, #0
 8007476:	f380 8811 	msr	BASEPRI, r0
 800747a:	4770      	bx	lr
 800747c:	f3af 8000 	nop.w

08007480 <pxCurrentTCBConst2>:
 8007480:	2000020c 	.word	0x2000020c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop

08007488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007488:	4808      	ldr	r0, [pc, #32]	; (80074ac <prvPortStartFirstTask+0x24>)
 800748a:	6800      	ldr	r0, [r0, #0]
 800748c:	6800      	ldr	r0, [r0, #0]
 800748e:	f380 8808 	msr	MSP, r0
 8007492:	f04f 0000 	mov.w	r0, #0
 8007496:	f380 8814 	msr	CONTROL, r0
 800749a:	b662      	cpsie	i
 800749c:	b661      	cpsie	f
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	df00      	svc	0
 80074a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074aa:	bf00      	nop
 80074ac:	e000ed08 	.word	0xe000ed08

080074b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074b6:	4b44      	ldr	r3, [pc, #272]	; (80075c8 <xPortStartScheduler+0x118>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a44      	ldr	r2, [pc, #272]	; (80075cc <xPortStartScheduler+0x11c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d109      	bne.n	80074d4 <xPortStartScheduler+0x24>
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	613b      	str	r3, [r7, #16]
 80074d2:	e7fe      	b.n	80074d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074d4:	4b3c      	ldr	r3, [pc, #240]	; (80075c8 <xPortStartScheduler+0x118>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a3d      	ldr	r2, [pc, #244]	; (80075d0 <xPortStartScheduler+0x120>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d109      	bne.n	80074f2 <xPortStartScheduler+0x42>
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e7fe      	b.n	80074f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074f2:	4b38      	ldr	r3, [pc, #224]	; (80075d4 <xPortStartScheduler+0x124>)
 80074f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	22ff      	movs	r2, #255	; 0xff
 8007502:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007514:	b2da      	uxtb	r2, r3
 8007516:	4b30      	ldr	r3, [pc, #192]	; (80075d8 <xPortStartScheduler+0x128>)
 8007518:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800751a:	4b30      	ldr	r3, [pc, #192]	; (80075dc <xPortStartScheduler+0x12c>)
 800751c:	2207      	movs	r2, #7
 800751e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007520:	e009      	b.n	8007536 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007522:	4b2e      	ldr	r3, [pc, #184]	; (80075dc <xPortStartScheduler+0x12c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3b01      	subs	r3, #1
 8007528:	4a2c      	ldr	r2, [pc, #176]	; (80075dc <xPortStartScheduler+0x12c>)
 800752a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	b2db      	uxtb	r3, r3
 8007534:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753e:	2b80      	cmp	r3, #128	; 0x80
 8007540:	d0ef      	beq.n	8007522 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007542:	4b26      	ldr	r3, [pc, #152]	; (80075dc <xPortStartScheduler+0x12c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1c3 0307 	rsb	r3, r3, #7
 800754a:	2b04      	cmp	r3, #4
 800754c:	d009      	beq.n	8007562 <xPortStartScheduler+0xb2>
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	e7fe      	b.n	8007560 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007562:	4b1e      	ldr	r3, [pc, #120]	; (80075dc <xPortStartScheduler+0x12c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	4a1c      	ldr	r2, [pc, #112]	; (80075dc <xPortStartScheduler+0x12c>)
 800756a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800756c:	4b1b      	ldr	r3, [pc, #108]	; (80075dc <xPortStartScheduler+0x12c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007574:	4a19      	ldr	r2, [pc, #100]	; (80075dc <xPortStartScheduler+0x12c>)
 8007576:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	b2da      	uxtb	r2, r3
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007580:	4b17      	ldr	r3, [pc, #92]	; (80075e0 <xPortStartScheduler+0x130>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a16      	ldr	r2, [pc, #88]	; (80075e0 <xPortStartScheduler+0x130>)
 8007586:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800758a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800758c:	4b14      	ldr	r3, [pc, #80]	; (80075e0 <xPortStartScheduler+0x130>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <xPortStartScheduler+0x130>)
 8007592:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007596:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007598:	f000 f8d6 	bl	8007748 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800759c:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <xPortStartScheduler+0x134>)
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075a2:	f000 f8f5 	bl	8007790 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075a6:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <xPortStartScheduler+0x138>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a0f      	ldr	r2, [pc, #60]	; (80075e8 <xPortStartScheduler+0x138>)
 80075ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075b2:	f7ff ff69 	bl	8007488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075b6:	f7ff fa65 	bl	8006a84 <vTaskSwitchContext>
	prvTaskExitError();
 80075ba:	f7ff ff25 	bl	8007408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	e000ed00 	.word	0xe000ed00
 80075cc:	410fc271 	.word	0x410fc271
 80075d0:	410fc270 	.word	0x410fc270
 80075d4:	e000e400 	.word	0xe000e400
 80075d8:	20000338 	.word	0x20000338
 80075dc:	2000033c 	.word	0x2000033c
 80075e0:	e000ed20 	.word	0xe000ed20
 80075e4:	20000008 	.word	0x20000008
 80075e8:	e000ef34 	.word	0xe000ef34

080075ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007604:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <vPortEnterCritical+0x54>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	4a0d      	ldr	r2, [pc, #52]	; (8007640 <vPortEnterCritical+0x54>)
 800760c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800760e:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <vPortEnterCritical+0x54>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d10e      	bne.n	8007634 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <vPortEnterCritical+0x58>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d009      	beq.n	8007634 <vPortEnterCritical+0x48>
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	603b      	str	r3, [r7, #0]
 8007632:	e7fe      	b.n	8007632 <vPortEnterCritical+0x46>
	}
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	20000008 	.word	0x20000008
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800764e:	4b11      	ldr	r3, [pc, #68]	; (8007694 <vPortExitCritical+0x4c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <vPortExitCritical+0x22>
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	607b      	str	r3, [r7, #4]
 8007668:	e7fe      	b.n	8007668 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800766a:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <vPortExitCritical+0x4c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3b01      	subs	r3, #1
 8007670:	4a08      	ldr	r2, [pc, #32]	; (8007694 <vPortExitCritical+0x4c>)
 8007672:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007674:	4b07      	ldr	r3, [pc, #28]	; (8007694 <vPortExitCritical+0x4c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d104      	bne.n	8007686 <vPortExitCritical+0x3e>
 800767c:	2300      	movs	r3, #0
 800767e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20000008 	.word	0x20000008
	...

080076a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076a0:	f3ef 8009 	mrs	r0, PSP
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4b15      	ldr	r3, [pc, #84]	; (8007700 <pxCurrentTCBConst>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	f01e 0f10 	tst.w	lr, #16
 80076b0:	bf08      	it	eq
 80076b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	6010      	str	r0, [r2, #0]
 80076bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076c4:	f380 8811 	msr	BASEPRI, r0
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f7ff f9d8 	bl	8006a84 <vTaskSwitchContext>
 80076d4:	f04f 0000 	mov.w	r0, #0
 80076d8:	f380 8811 	msr	BASEPRI, r0
 80076dc:	bc09      	pop	{r0, r3}
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	6808      	ldr	r0, [r1, #0]
 80076e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e6:	f01e 0f10 	tst.w	lr, #16
 80076ea:	bf08      	it	eq
 80076ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076f0:	f380 8809 	msr	PSP, r0
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w

08007700 <pxCurrentTCBConst>:
 8007700:	2000020c 	.word	0x2000020c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop

08007708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007720:	f7ff f8f8 	bl	8006914 <xTaskIncrementTick>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <SysTick_Handler+0x3c>)
 800772c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	2300      	movs	r3, #0
 8007734:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800774c:	4b0b      	ldr	r3, [pc, #44]	; (800777c <vPortSetupTimerInterrupt+0x34>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007752:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <vPortSetupTimerInterrupt+0x38>)
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <vPortSetupTimerInterrupt+0x3c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a0a      	ldr	r2, [pc, #40]	; (8007788 <vPortSetupTimerInterrupt+0x40>)
 800775e:	fba2 2303 	umull	r2, r3, r2, r3
 8007762:	099b      	lsrs	r3, r3, #6
 8007764:	4a09      	ldr	r2, [pc, #36]	; (800778c <vPortSetupTimerInterrupt+0x44>)
 8007766:	3b01      	subs	r3, #1
 8007768:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800776a:	4b04      	ldr	r3, [pc, #16]	; (800777c <vPortSetupTimerInterrupt+0x34>)
 800776c:	2207      	movs	r2, #7
 800776e:	601a      	str	r2, [r3, #0]
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	e000e010 	.word	0xe000e010
 8007780:	e000e018 	.word	0xe000e018
 8007784:	2000001c 	.word	0x2000001c
 8007788:	10624dd3 	.word	0x10624dd3
 800778c:	e000e014 	.word	0xe000e014

08007790 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007790:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077a0 <vPortEnableVFP+0x10>
 8007794:	6801      	ldr	r1, [r0, #0]
 8007796:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800779a:	6001      	str	r1, [r0, #0]
 800779c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800779e:	bf00      	nop
 80077a0:	e000ed88 	.word	0xe000ed88

080077a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077aa:	f3ef 8305 	mrs	r3, IPSR
 80077ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b0f      	cmp	r3, #15
 80077b4:	d913      	bls.n	80077de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077b6:	4a16      	ldr	r2, [pc, #88]	; (8007810 <vPortValidateInterruptPriority+0x6c>)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077c0:	4b14      	ldr	r3, [pc, #80]	; (8007814 <vPortValidateInterruptPriority+0x70>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	7afa      	ldrb	r2, [r7, #11]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d209      	bcs.n	80077de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	607b      	str	r3, [r7, #4]
 80077dc:	e7fe      	b.n	80077dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <vPortValidateInterruptPriority+0x74>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077e6:	4b0d      	ldr	r3, [pc, #52]	; (800781c <vPortValidateInterruptPriority+0x78>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d909      	bls.n	8007802 <vPortValidateInterruptPriority+0x5e>
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	e7fe      	b.n	8007800 <vPortValidateInterruptPriority+0x5c>
	}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	e000e3f0 	.word	0xe000e3f0
 8007814:	20000338 	.word	0x20000338
 8007818:	e000ed0c 	.word	0xe000ed0c
 800781c:	2000033c 	.word	0x2000033c

08007820 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007828:	2300      	movs	r3, #0
 800782a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800782c:	f7fe ffa6 	bl	800677c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007830:	4b57      	ldr	r3, [pc, #348]	; (8007990 <pvPortMalloc+0x170>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007838:	f000 f90c 	bl	8007a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800783c:	4b55      	ldr	r3, [pc, #340]	; (8007994 <pvPortMalloc+0x174>)
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4013      	ands	r3, r2
 8007844:	2b00      	cmp	r3, #0
 8007846:	f040 808c 	bne.w	8007962 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01c      	beq.n	800788a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007850:	2208      	movs	r2, #8
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	2b00      	cmp	r3, #0
 8007860:	d013      	beq.n	800788a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f023 0307 	bic.w	r3, r3, #7
 8007868:	3308      	adds	r3, #8
 800786a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <pvPortMalloc+0x6a>
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	e7fe      	b.n	8007888 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d068      	beq.n	8007962 <pvPortMalloc+0x142>
 8007890:	4b41      	ldr	r3, [pc, #260]	; (8007998 <pvPortMalloc+0x178>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	429a      	cmp	r2, r3
 8007898:	d863      	bhi.n	8007962 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800789a:	4b40      	ldr	r3, [pc, #256]	; (800799c <pvPortMalloc+0x17c>)
 800789c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800789e:	4b3f      	ldr	r3, [pc, #252]	; (800799c <pvPortMalloc+0x17c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078a4:	e004      	b.n	80078b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d903      	bls.n	80078c2 <pvPortMalloc+0xa2>
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f1      	bne.n	80078a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078c2:	4b33      	ldr	r3, [pc, #204]	; (8007990 <pvPortMalloc+0x170>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d04a      	beq.n	8007962 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2208      	movs	r2, #8
 80078d2:	4413      	add	r3, r2
 80078d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	1ad2      	subs	r2, r2, r3
 80078e6:	2308      	movs	r3, #8
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d91e      	bls.n	800792c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d009      	beq.n	8007914 <pvPortMalloc+0xf4>
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	e7fe      	b.n	8007912 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	1ad2      	subs	r2, r2, r3
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007926:	69b8      	ldr	r0, [r7, #24]
 8007928:	f000 f8f6 	bl	8007b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <pvPortMalloc+0x178>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	4a18      	ldr	r2, [pc, #96]	; (8007998 <pvPortMalloc+0x178>)
 8007938:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800793a:	4b17      	ldr	r3, [pc, #92]	; (8007998 <pvPortMalloc+0x178>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b18      	ldr	r3, [pc, #96]	; (80079a0 <pvPortMalloc+0x180>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	d203      	bcs.n	800794e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <pvPortMalloc+0x178>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <pvPortMalloc+0x180>)
 800794c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <pvPortMalloc+0x174>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	431a      	orrs	r2, r3
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007962:	f7fe ff19 	bl	8006798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <pvPortMalloc+0x164>
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	e7fe      	b.n	8007982 <pvPortMalloc+0x162>
	return pvReturn;
 8007984:	69fb      	ldr	r3, [r7, #28]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3728      	adds	r7, #40	; 0x28
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20008348 	.word	0x20008348
 8007994:	20008354 	.word	0x20008354
 8007998:	2000834c 	.word	0x2000834c
 800799c:	20008340 	.word	0x20008340
 80079a0:	20008350 	.word	0x20008350

080079a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d046      	beq.n	8007a44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079b6:	2308      	movs	r3, #8
 80079b8:	425b      	negs	r3, r3
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4413      	add	r3, r2
 80079be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4b20      	ldr	r3, [pc, #128]	; (8007a4c <vPortFree+0xa8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4013      	ands	r3, r2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <vPortFree+0x42>
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	e7fe      	b.n	80079e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <vPortFree+0x5e>
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	e7fe      	b.n	8007a00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <vPortFree+0xa8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d019      	beq.n	8007a44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d115      	bne.n	8007a44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <vPortFree+0xa8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	401a      	ands	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a28:	f7fe fea8 	bl	800677c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <vPortFree+0xac>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	4a06      	ldr	r2, [pc, #24]	; (8007a50 <vPortFree+0xac>)
 8007a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a3a:	6938      	ldr	r0, [r7, #16]
 8007a3c:	f000 f86c 	bl	8007b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a40:	f7fe feaa 	bl	8006798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a44:	bf00      	nop
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20008354 	.word	0x20008354
 8007a50:	2000834c 	.word	0x2000834c

08007a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a60:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <prvHeapInit+0xac>)
 8007a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00c      	beq.n	8007a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3307      	adds	r3, #7
 8007a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0307 	bic.w	r3, r3, #7
 8007a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	4a1f      	ldr	r2, [pc, #124]	; (8007b00 <prvHeapInit+0xac>)
 8007a84:	4413      	add	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a8c:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <prvHeapInit+0xb0>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a92:	4b1c      	ldr	r3, [pc, #112]	; (8007b04 <prvHeapInit+0xb0>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1a9b      	subs	r3, r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0307 	bic.w	r3, r3, #7
 8007aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a15      	ldr	r2, [pc, #84]	; (8007b08 <prvHeapInit+0xb4>)
 8007ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ab6:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <prvHeapInit+0xb4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2200      	movs	r2, #0
 8007abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007abe:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <prvHeapInit+0xb4>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <prvHeapInit+0xb4>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <prvHeapInit+0xb8>)
 8007ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <prvHeapInit+0xbc>)
 8007aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <prvHeapInit+0xc0>)
 8007aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007af2:	601a      	str	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20000340 	.word	0x20000340
 8007b04:	20008340 	.word	0x20008340
 8007b08:	20008348 	.word	0x20008348
 8007b0c:	20008350 	.word	0x20008350
 8007b10:	2000834c 	.word	0x2000834c
 8007b14:	20008354 	.word	0x20008354

08007b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b20:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <prvInsertBlockIntoFreeList+0xac>)
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e002      	b.n	8007b2c <prvInsertBlockIntoFreeList+0x14>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d8f7      	bhi.n	8007b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4413      	add	r3, r2
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d108      	bne.n	8007b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	441a      	add	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	441a      	add	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d118      	bne.n	8007ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b15      	ldr	r3, [pc, #84]	; (8007bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d00d      	beq.n	8007b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e008      	b.n	8007ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e003      	b.n	8007ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d002      	beq.n	8007bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20008340 	.word	0x20008340
 8007bc8:	20008348 	.word	0x20008348

08007bcc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f003 fc6b 	bl	800b4bc <tcpip_send_msg_wait_sem>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <netconn_apimsg+0x2e>
    return apimsg->err;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007bf8:	e001      	b.n	8007bfe <netconn_apimsg+0x32>
  }
  return err;
 8007bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08c      	sub	sp, #48	; 0x30
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	603a      	str	r2, [r7, #0]
 8007c12:	71fb      	strb	r3, [r7, #7]
 8007c14:	460b      	mov	r3, r1
 8007c16:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 f89f 	bl	8008d60 <netconn_alloc>
 8007c22:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d054      	beq.n	8007cd4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007c2a:	79bb      	ldrb	r3, [r7, #6]
 8007c2c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4619      	mov	r1, r3
 8007c38:	4829      	ldr	r0, [pc, #164]	; (8007ce0 <netconn_new_with_proto_and_callback+0xd8>)
 8007c3a:	f7ff ffc7 	bl	8007bcc <netconn_apimsg>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007c44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d043      	beq.n	8007cd4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <netconn_new_with_proto_and_callback+0x58>
 8007c54:	4b23      	ldr	r3, [pc, #140]	; (8007ce4 <netconn_new_with_proto_and_callback+0xdc>)
 8007c56:	22a3      	movs	r2, #163	; 0xa3
 8007c58:	4923      	ldr	r1, [pc, #140]	; (8007ce8 <netconn_new_with_proto_and_callback+0xe0>)
 8007c5a:	4824      	ldr	r0, [pc, #144]	; (8007cec <netconn_new_with_proto_and_callback+0xe4>)
 8007c5c:	f014 f904 	bl	801be68 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	3310      	adds	r3, #16
 8007c64:	4618      	mov	r0, r3
 8007c66:	f010 fdb8 	bl	80187da <sys_mbox_valid>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d105      	bne.n	8007c7c <netconn_new_with_proto_and_callback+0x74>
 8007c70:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <netconn_new_with_proto_and_callback+0xdc>)
 8007c72:	22a4      	movs	r2, #164	; 0xa4
 8007c74:	491e      	ldr	r1, [pc, #120]	; (8007cf0 <netconn_new_with_proto_and_callback+0xe8>)
 8007c76:	481d      	ldr	r0, [pc, #116]	; (8007cec <netconn_new_with_proto_and_callback+0xe4>)
 8007c78:	f014 f8f6 	bl	801be68 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	3314      	adds	r3, #20
 8007c80:	4618      	mov	r0, r3
 8007c82:	f010 fdaa 	bl	80187da <sys_mbox_valid>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <netconn_new_with_proto_and_callback+0x90>
 8007c8c:	4b15      	ldr	r3, [pc, #84]	; (8007ce4 <netconn_new_with_proto_and_callback+0xdc>)
 8007c8e:	22a6      	movs	r2, #166	; 0xa6
 8007c90:	4918      	ldr	r1, [pc, #96]	; (8007cf4 <netconn_new_with_proto_and_callback+0xec>)
 8007c92:	4816      	ldr	r0, [pc, #88]	; (8007cec <netconn_new_with_proto_and_callback+0xe4>)
 8007c94:	f014 f8e8 	bl	801be68 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9a:	330c      	adds	r3, #12
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f010 fe2d 	bl	80188fc <sys_sem_valid>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d105      	bne.n	8007cb4 <netconn_new_with_proto_and_callback+0xac>
 8007ca8:	4b0e      	ldr	r3, [pc, #56]	; (8007ce4 <netconn_new_with_proto_and_callback+0xdc>)
 8007caa:	22a9      	movs	r2, #169	; 0xa9
 8007cac:	4912      	ldr	r1, [pc, #72]	; (8007cf8 <netconn_new_with_proto_and_callback+0xf0>)
 8007cae:	480f      	ldr	r0, [pc, #60]	; (8007cec <netconn_new_with_proto_and_callback+0xe4>)
 8007cb0:	f014 f8da 	bl	801be68 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f010 fe12 	bl	80188e2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	3310      	adds	r3, #16
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f010 fd02 	bl	80186cc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007cc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cca:	2007      	movs	r0, #7
 8007ccc:	f004 f95e 	bl	800bf8c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3730      	adds	r7, #48	; 0x30
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	08008d35 	.word	0x08008d35
 8007ce4:	0801ce4c 	.word	0x0801ce4c
 8007ce8:	0801ce80 	.word	0x0801ce80
 8007cec:	0801cea4 	.word	0x0801cea4
 8007cf0:	0801cecc 	.word	0x0801cecc
 8007cf4:	0801cee4 	.word	0x0801cee4
 8007cf8:	0801cf08 	.word	0x0801cf08

08007cfc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08c      	sub	sp, #48	; 0x30
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e014      	b.n	8007d38 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007d12:	2329      	movs	r3, #41	; 0x29
 8007d14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007d16:	f107 030c 	add.w	r3, r7, #12
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4808      	ldr	r0, [pc, #32]	; (8007d40 <netconn_prepare_delete+0x44>)
 8007d1e:	f7ff ff55 	bl	8007bcc <netconn_apimsg>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007d28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <netconn_prepare_delete+0x3a>
    return err;
 8007d30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d34:	e000      	b.n	8007d38 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3730      	adds	r7, #48	; 0x30
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	080092ad 	.word	0x080092ad

08007d44 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <netconn_delete+0x12>
    return ERR_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	e00d      	b.n	8007d72 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff ffd0 	bl	8007cfc <netconn_prepare_delete>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <netconn_delete+0x2a>
    netconn_free(conn);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 f871 	bl	8008e50 <netconn_free>
  }
  return err;
 8007d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08e      	sub	sp, #56	; 0x38
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <netconn_getaddr+0x28>
 8007d90:	4b1d      	ldr	r3, [pc, #116]	; (8007e08 <netconn_getaddr+0x8c>)
 8007d92:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007d96:	491d      	ldr	r1, [pc, #116]	; (8007e0c <netconn_getaddr+0x90>)
 8007d98:	481d      	ldr	r0, [pc, #116]	; (8007e10 <netconn_getaddr+0x94>)
 8007d9a:	f014 f865 	bl	801be68 <iprintf>
 8007d9e:	f06f 030f 	mvn.w	r3, #15
 8007da2:	e02d      	b.n	8007e00 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <netconn_getaddr+0x42>
 8007daa:	4b17      	ldr	r3, [pc, #92]	; (8007e08 <netconn_getaddr+0x8c>)
 8007dac:	f240 1213 	movw	r2, #275	; 0x113
 8007db0:	4918      	ldr	r1, [pc, #96]	; (8007e14 <netconn_getaddr+0x98>)
 8007db2:	4817      	ldr	r0, [pc, #92]	; (8007e10 <netconn_getaddr+0x94>)
 8007db4:	f014 f858 	bl	801be68 <iprintf>
 8007db8:	f06f 030f 	mvn.w	r3, #15
 8007dbc:	e020      	b.n	8007e00 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <netconn_getaddr+0x5c>
 8007dc4:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <netconn_getaddr+0x8c>)
 8007dc6:	f44f 728a 	mov.w	r2, #276	; 0x114
 8007dca:	4913      	ldr	r1, [pc, #76]	; (8007e18 <netconn_getaddr+0x9c>)
 8007dcc:	4810      	ldr	r0, [pc, #64]	; (8007e10 <netconn_getaddr+0x94>)
 8007dce:	f014 f84b 	bl	801be68 <iprintf>
 8007dd2:	f06f 030f 	mvn.w	r3, #15
 8007dd6:	e013      	b.n	8007e00 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8007dea:	f107 0314 	add.w	r3, r7, #20
 8007dee:	4619      	mov	r1, r3
 8007df0:	480a      	ldr	r0, [pc, #40]	; (8007e1c <netconn_getaddr+0xa0>)
 8007df2:	f7ff feeb 	bl	8007bcc <netconn_apimsg>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8007dfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3738      	adds	r7, #56	; 0x38
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	0801ce4c 	.word	0x0801ce4c
 8007e0c:	0801cf24 	.word	0x0801cf24
 8007e10:	0801cea4 	.word	0x0801cea4
 8007e14:	0801cf44 	.word	0x0801cf44
 8007e18:	0801cf64 	.word	0x0801cf64
 8007e1c:	08009d25 	.word	0x08009d25

08007e20 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08e      	sub	sp, #56	; 0x38
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <netconn_connect+0x28>
 8007e34:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <netconn_connect+0x5c>)
 8007e36:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8007e3a:	4911      	ldr	r1, [pc, #68]	; (8007e80 <netconn_connect+0x60>)
 8007e3c:	4811      	ldr	r0, [pc, #68]	; (8007e84 <netconn_connect+0x64>)
 8007e3e:	f014 f813 	bl	801be68 <iprintf>
 8007e42:	f06f 030f 	mvn.w	r3, #15
 8007e46:	e015      	b.n	8007e74 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8007e4e:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <netconn_connect+0x68>)
 8007e50:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8007e5e:	f107 0314 	add.w	r3, r7, #20
 8007e62:	4619      	mov	r1, r3
 8007e64:	4809      	ldr	r0, [pc, #36]	; (8007e8c <netconn_connect+0x6c>)
 8007e66:	f7ff feb1 	bl	8007bcc <netconn_apimsg>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007e70:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3738      	adds	r7, #56	; 0x38
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	0801ce4c 	.word	0x0801ce4c
 8007e80:	0801cfc0 	.word	0x0801cfc0
 8007e84:	0801cea4 	.word	0x0801cea4
 8007e88:	08020f48 	.word	0x08020f48
 8007e8c:	080095a1 	.word	0x080095a1

08007e90 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08c      	sub	sp, #48	; 0x30
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <netconn_disconnect+0x22>
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <netconn_disconnect+0x44>)
 8007ea0:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8007ea4:	490c      	ldr	r1, [pc, #48]	; (8007ed8 <netconn_disconnect+0x48>)
 8007ea6:	480d      	ldr	r0, [pc, #52]	; (8007edc <netconn_disconnect+0x4c>)
 8007ea8:	f013 ffde 	bl	801be68 <iprintf>
 8007eac:	f06f 030f 	mvn.w	r3, #15
 8007eb0:	e00c      	b.n	8007ecc <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8007eb6:	f107 030c 	add.w	r3, r7, #12
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4808      	ldr	r0, [pc, #32]	; (8007ee0 <netconn_disconnect+0x50>)
 8007ebe:	f7ff fe85 	bl	8007bcc <netconn_apimsg>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007ec8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3730      	adds	r7, #48	; 0x30
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	0801ce4c 	.word	0x0801ce4c
 8007ed8:	0801cfe0 	.word	0x0801cfe0
 8007edc:	0801cea4 	.word	0x0801cea4
 8007ee0:	08009729 	.word	0x08009729

08007ee4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <netconn_recv_data+0x2c>
 8007efc:	4b60      	ldr	r3, [pc, #384]	; (8008080 <netconn_recv_data+0x19c>)
 8007efe:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007f02:	4960      	ldr	r1, [pc, #384]	; (8008084 <netconn_recv_data+0x1a0>)
 8007f04:	4860      	ldr	r0, [pc, #384]	; (8008088 <netconn_recv_data+0x1a4>)
 8007f06:	f013 ffaf 	bl	801be68 <iprintf>
 8007f0a:	f06f 030f 	mvn.w	r3, #15
 8007f0e:	e0b2      	b.n	8008076 <netconn_recv_data+0x192>
  *new_buf = NULL;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d109      	bne.n	8007f30 <netconn_recv_data+0x4c>
 8007f1c:	4b58      	ldr	r3, [pc, #352]	; (8008080 <netconn_recv_data+0x19c>)
 8007f1e:	f240 224a 	movw	r2, #586	; 0x24a
 8007f22:	495a      	ldr	r1, [pc, #360]	; (800808c <netconn_recv_data+0x1a8>)
 8007f24:	4858      	ldr	r0, [pc, #352]	; (8008088 <netconn_recv_data+0x1a4>)
 8007f26:	f013 ff9f 	bl	801be68 <iprintf>
 8007f2a:	f06f 030f 	mvn.w	r3, #15
 8007f2e:	e0a2      	b.n	8008076 <netconn_recv_data+0x192>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3310      	adds	r3, #16
 8007f34:	4618      	mov	r0, r3
 8007f36:	f010 fc50 	bl	80187da <sys_mbox_valid>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10e      	bne.n	8007f5e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fb17 	bl	8008574 <netconn_err>
 8007f46:	4603      	mov	r3, r0
 8007f48:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 8007f4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007f52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f56:	e08e      	b.n	8008076 <netconn_recv_data+0x192>
    }
    return ERR_CONN;
 8007f58:	f06f 030a 	mvn.w	r3, #10
 8007f5c:	e08b      	b.n	8008076 <netconn_recv_data+0x192>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d110      	bne.n	8007f8e <netconn_recv_data+0xaa>
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10b      	bne.n	8007f8e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f7c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d104      	bne.n	8007f8e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d025      	beq.n	8007fda <netconn_recv_data+0xf6>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3310      	adds	r3, #16
 8007f92:	f107 0218 	add.w	r2, r7, #24
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f010 fc02 	bl	80187a2 <sys_arch_mbox_tryfetch>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa4:	d121      	bne.n	8007fea <netconn_recv_data+0x106>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fae4 	bl	8008574 <netconn_err>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      if (err != ERR_OK) {
 8007fb2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <netconn_recv_data+0xdc>
        /* return pending error */
        return err;
 8007fba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007fbe:	e05a      	b.n	8008076 <netconn_recv_data+0x192>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <netconn_recv_data+0xf0>
        return ERR_CONN;
 8007fce:	f06f 030a 	mvn.w	r3, #10
 8007fd2:	e050      	b.n	8008076 <netconn_recv_data+0x192>
      }
      return ERR_WOULDBLOCK;
 8007fd4:	f06f 0306 	mvn.w	r3, #6
 8007fd8:	e04d      	b.n	8008076 <netconn_recv_data+0x192>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3310      	adds	r3, #16
 8007fde:	f107 0118 	add.w	r1, r7, #24
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f010 fb9d 	bl	8018724 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d117      	bne.n	8008026 <netconn_recv_data+0x142>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	f107 0217 	add.w	r2, r7, #23
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fb06 	bl	8008610 <lwip_netconn_is_err_msg>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <netconn_recv_data+0x13a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800800a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800800e:	f113 0f0f 	cmn.w	r3, #15
 8008012:	d101      	bne.n	8008018 <netconn_recv_data+0x134>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e02e      	b.n	8008076 <netconn_recv_data+0x192>
      }
      return err;
 8008018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800801c:	e02b      	b.n	8008076 <netconn_recv_data+0x192>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	891b      	ldrh	r3, [r3, #8]
 8008022:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008024:	e00d      	b.n	8008042 <netconn_recv_data+0x15e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <netconn_recv_data+0x156>
 800802c:	4b14      	ldr	r3, [pc, #80]	; (8008080 <netconn_recv_data+0x19c>)
 800802e:	f240 2291 	movw	r2, #657	; 0x291
 8008032:	4917      	ldr	r1, [pc, #92]	; (8008090 <netconn_recv_data+0x1ac>)
 8008034:	4814      	ldr	r0, [pc, #80]	; (8008088 <netconn_recv_data+0x1a4>)
 8008036:	f013 ff17 	bl	801be68 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	891b      	ldrh	r3, [r3, #8]
 8008040:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
 8008042:	f010 fce5 	bl	8018a10 <sys_arch_protect>
 8008046:	6238      	str	r0, [r7, #32]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	621a      	str	r2, [r3, #32]
 8008054:	6a38      	ldr	r0, [r7, #32]
 8008056:	f010 fce9 	bl	8018a2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <netconn_recv_data+0x18a>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008068:	2101      	movs	r1, #1
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3728      	adds	r7, #40	; 0x28
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	0801ce4c 	.word	0x0801ce4c
 8008084:	0801d064 	.word	0x0801d064
 8008088:	0801cea4 	.word	0x0801cea4
 800808c:	0801d084 	.word	0x0801d084
 8008090:	0801d0a0 	.word	0x0801d0a0

08008094 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <netconn_tcp_recvd_msg+0x1e>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ae:	2b10      	cmp	r3, #16
 80080b0:	d009      	beq.n	80080c6 <netconn_tcp_recvd_msg+0x32>
 80080b2:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <netconn_tcp_recvd_msg+0x50>)
 80080b4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80080b8:	490b      	ldr	r1, [pc, #44]	; (80080e8 <netconn_tcp_recvd_msg+0x54>)
 80080ba:	480c      	ldr	r0, [pc, #48]	; (80080ec <netconn_tcp_recvd_msg+0x58>)
 80080bc:	f013 fed4 	bl	801be68 <iprintf>
 80080c0:	f06f 030f 	mvn.w	r3, #15
 80080c4:	e00a      	b.n	80080dc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	4806      	ldr	r0, [pc, #24]	; (80080f0 <netconn_tcp_recvd_msg+0x5c>)
 80080d6:	f7ff fd79 	bl	8007bcc <netconn_apimsg>
 80080da:	4603      	mov	r3, r0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	0801ce4c 	.word	0x0801ce4c
 80080e8:	0801d0ac 	.word	0x0801d0ac
 80080ec:	0801cea4 	.word	0x0801cea4
 80080f0:	08009801 	.word	0x08009801

080080f4 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08c      	sub	sp, #48	; 0x30
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <netconn_tcp_recvd+0x1c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800810c:	2b10      	cmp	r3, #16
 800810e:	d009      	beq.n	8008124 <netconn_tcp_recvd+0x30>
 8008110:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <netconn_tcp_recvd+0x50>)
 8008112:	f240 22b6 	movw	r2, #694	; 0x2b6
 8008116:	490c      	ldr	r1, [pc, #48]	; (8008148 <netconn_tcp_recvd+0x54>)
 8008118:	480c      	ldr	r0, [pc, #48]	; (800814c <netconn_tcp_recvd+0x58>)
 800811a:	f013 fea5 	bl	801be68 <iprintf>
 800811e:	f06f 030f 	mvn.w	r3, #15
 8008122:	e00b      	b.n	800813c <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8008124:	f107 030c 	add.w	r3, r7, #12
 8008128:	461a      	mov	r2, r3
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ffb1 	bl	8008094 <netconn_tcp_recvd_msg>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8008138:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800813c:	4618      	mov	r0, r3
 800813e:	3730      	adds	r7, #48	; 0x30
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	0801ce4c 	.word	0x0801ce4c
 8008148:	0801d0ac 	.word	0x0801d0ac
 800814c:	0801cea4 	.word	0x0801cea4

08008150 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b090      	sub	sp, #64	; 0x40
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3310      	adds	r3, #16
 8008162:	4618      	mov	r0, r3
 8008164:	f010 fb39 	bl	80187da <sys_mbox_valid>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800816e:	f06f 030a 	mvn.w	r3, #10
 8008172:	e072      	b.n	800825a <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800817a:	b25b      	sxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	da09      	bge.n	8008194 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818a:	b2da      	uxtb	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    goto handle_fin;
 8008192:	e03b      	b.n	800820c <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	461a      	mov	r2, r3
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fea2 	bl	8007ee4 <netconn_recv_data>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80081a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80081ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081b2:	e052      	b.n	800825a <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	f003 0308 	and.w	r3, r3, #8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10e      	bne.n	80081e2 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <netconn_recv_data_tcp+0x80>
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	891b      	ldrh	r3, [r3, #8]
 80081ce:	e000      	b.n	80081d2 <netconn_recv_data_tcp+0x82>
 80081d0:	2301      	movs	r3, #1
 80081d2:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80081d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081d6:	f107 0214 	add.w	r2, r7, #20
 80081da:	4619      	mov	r1, r3
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff ff59 	bl	8008094 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d136      	bne.n	8008256 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return ERR_WOULDBLOCK;
 8008204:	f06f 0306 	mvn.w	r3, #6
 8008208:	e027      	b.n	800825a <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 800820a:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <netconn_recv_data_tcp+0xd0>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	2200      	movs	r2, #0
 800821a:	2101      	movs	r1, #1
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10f      	bne.n	8008248 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 f9a3 	bl	8008574 <netconn_err>
 800822e:	4603      	mov	r3, r0
 8008230:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008234:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <netconn_recv_data_tcp+0xf2>
          return err;
 800823c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008240:	e00b      	b.n	800825a <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8008242:	f06f 030d 	mvn.w	r3, #13
 8008246:	e008      	b.n	800825a <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008248:	2101      	movs	r1, #1
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 f962 	bl	8008514 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008250:	f06f 030e 	mvn.w	r3, #14
 8008254:	e001      	b.n	800825a <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8008256:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800825a:	4618      	mov	r0, r3
 800825c:	3740      	adds	r7, #64	; 0x40
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d005      	beq.n	8008284 <netconn_recv_tcp_pbuf_flags+0x20>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008280:	2b10      	cmp	r3, #16
 8008282:	d009      	beq.n	8008298 <netconn_recv_tcp_pbuf_flags+0x34>
 8008284:	4b0a      	ldr	r3, [pc, #40]	; (80082b0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8008286:	f240 3226 	movw	r2, #806	; 0x326
 800828a:	490a      	ldr	r1, [pc, #40]	; (80082b4 <netconn_recv_tcp_pbuf_flags+0x50>)
 800828c:	480a      	ldr	r0, [pc, #40]	; (80082b8 <netconn_recv_tcp_pbuf_flags+0x54>)
 800828e:	f013 fdeb 	bl	801be68 <iprintf>
 8008292:	f06f 030f 	mvn.w	r3, #15
 8008296:	e006      	b.n	80082a6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	461a      	mov	r2, r3
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff ff56 	bl	8008150 <netconn_recv_data_tcp>
 80082a4:	4603      	mov	r3, r0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	0801ce4c 	.word	0x0801ce4c
 80082b4:	0801d0ac 	.word	0x0801d0ac
 80082b8:	0801cea4 	.word	0x0801cea4

080082bc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082d8:	2b10      	cmp	r3, #16
 80082da:	d109      	bne.n	80082f0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80082de:	f240 324d 	movw	r2, #845	; 0x34d
 80082e2:	490a      	ldr	r1, [pc, #40]	; (800830c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80082e4:	480a      	ldr	r0, [pc, #40]	; (8008310 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80082e6:	f013 fdbf 	bl	801be68 <iprintf>
 80082ea:	f06f 030f 	mvn.w	r3, #15
 80082ee:	e006      	b.n	80082fe <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	461a      	mov	r2, r3
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7ff fdf4 	bl	8007ee4 <netconn_recv_data>
 80082fc:	4603      	mov	r3, r0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	0801ce4c 	.word	0x0801ce4c
 800830c:	0801d0d0 	.word	0x0801d0d0
 8008310:	0801cea4 	.word	0x0801cea4

08008314 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08c      	sub	sp, #48	; 0x30
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d109      	bne.n	8008338 <netconn_send+0x24>
 8008324:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <netconn_send+0x4c>)
 8008326:	f240 32b2 	movw	r2, #946	; 0x3b2
 800832a:	490e      	ldr	r1, [pc, #56]	; (8008364 <netconn_send+0x50>)
 800832c:	480e      	ldr	r0, [pc, #56]	; (8008368 <netconn_send+0x54>)
 800832e:	f013 fd9b 	bl	801be68 <iprintf>
 8008332:	f06f 030f 	mvn.w	r3, #15
 8008336:	e00e      	b.n	8008356 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8008340:	f107 030c 	add.w	r3, r7, #12
 8008344:	4619      	mov	r1, r3
 8008346:	4809      	ldr	r0, [pc, #36]	; (800836c <netconn_send+0x58>)
 8008348:	f7ff fc40 	bl	8007bcc <netconn_apimsg>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008352:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008356:	4618      	mov	r0, r3
 8008358:	3730      	adds	r7, #48	; 0x30
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	0801ce4c 	.word	0x0801ce4c
 8008364:	0801d108 	.word	0x0801d108
 8008368:	0801cea4 	.word	0x0801cea4
 800836c:	08009765 	.word	0x08009765

08008370 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	f107 0110 	add.w	r1, r7, #16
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	4613      	mov	r3, r2
 8008392:	2201      	movs	r2, #1
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 f805 	bl	80083a4 <netconn_write_vectors_partly>
 800839a:	4603      	mov	r3, r0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b092      	sub	sp, #72	; 0x48
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4611      	mov	r1, r2
 80083b0:	461a      	mov	r2, r3
 80083b2:	460b      	mov	r3, r1
 80083b4:	80fb      	strh	r3, [r7, #6]
 80083b6:	4613      	mov	r3, r2
 80083b8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d109      	bne.n	80083d4 <netconn_write_vectors_partly+0x30>
 80083c0:	4b4e      	ldr	r3, [pc, #312]	; (80084fc <netconn_write_vectors_partly+0x158>)
 80083c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80083c6:	494e      	ldr	r1, [pc, #312]	; (8008500 <netconn_write_vectors_partly+0x15c>)
 80083c8:	484e      	ldr	r0, [pc, #312]	; (8008504 <netconn_write_vectors_partly+0x160>)
 80083ca:	f013 fd4d 	bl	801be68 <iprintf>
 80083ce:	f06f 030f 	mvn.w	r3, #15
 80083d2:	e08f      	b.n	80084f4 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083dc:	2b10      	cmp	r3, #16
 80083de:	d009      	beq.n	80083f4 <netconn_write_vectors_partly+0x50>
 80083e0:	4b46      	ldr	r3, [pc, #280]	; (80084fc <netconn_write_vectors_partly+0x158>)
 80083e2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80083e6:	4948      	ldr	r1, [pc, #288]	; (8008508 <netconn_write_vectors_partly+0x164>)
 80083e8:	4846      	ldr	r0, [pc, #280]	; (8008504 <netconn_write_vectors_partly+0x160>)
 80083ea:	f013 fd3d 	bl	801be68 <iprintf>
 80083ee:	f06f 0305 	mvn.w	r3, #5
 80083f2:	e07f      	b.n	80084f4 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <netconn_write_vectors_partly+0x68>
 8008402:	797b      	ldrb	r3, [r7, #5]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <netconn_write_vectors_partly+0x6c>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <netconn_write_vectors_partly+0x6e>
 8008410:	2300      	movs	r3, #0
 8008412:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008416:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <netconn_write_vectors_partly+0x86>
 800841e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008424:	f06f 0305 	mvn.w	r3, #5
 8008428:	e064      	b.n	80084f4 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800842e:	2300      	movs	r3, #0
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
 8008432:	e015      	b.n	8008460 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8008434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	4413      	add	r3, r2
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008440:	4413      	add	r3, r2
 8008442:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4413      	add	r3, r2
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008450:	429a      	cmp	r2, r3
 8008452:	d202      	bcs.n	800845a <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8008454:	f06f 0305 	mvn.w	r3, #5
 8008458:	e04c      	b.n	80084f4 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 800845a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845c:	3301      	adds	r3, #1
 800845e:	643b      	str	r3, [r7, #64]	; 0x40
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008464:	429a      	cmp	r2, r3
 8008466:	dbe5      	blt.n	8008434 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8008468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e040      	b.n	80084f4 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8008472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008474:	2b00      	cmp	r3, #0
 8008476:	da0a      	bge.n	800848e <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800847e:	f06f 0305 	mvn.w	r3, #5
 8008482:	e037      	b.n	80084f4 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008484:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008488:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800849e:	797b      	ldrb	r3, [r7, #5]
 80084a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80084a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a6:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80084ac:	f107 0314 	add.w	r3, r7, #20
 80084b0:	4619      	mov	r1, r3
 80084b2:	4816      	ldr	r0, [pc, #88]	; (800850c <netconn_write_vectors_partly+0x168>)
 80084b4:	f7ff fb8a 	bl	8007bcc <netconn_apimsg>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80084be:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d114      	bne.n	80084f0 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 80084c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80084cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d0:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80084d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084de:	429a      	cmp	r2, r3
 80084e0:	d006      	beq.n	80084f0 <netconn_write_vectors_partly+0x14c>
 80084e2:	4b06      	ldr	r3, [pc, #24]	; (80084fc <netconn_write_vectors_partly+0x158>)
 80084e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80084e8:	4909      	ldr	r1, [pc, #36]	; (8008510 <netconn_write_vectors_partly+0x16c>)
 80084ea:	4806      	ldr	r0, [pc, #24]	; (8008504 <netconn_write_vectors_partly+0x160>)
 80084ec:	f013 fcbc 	bl	801be68 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80084f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3748      	adds	r7, #72	; 0x48
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	0801ce4c 	.word	0x0801ce4c
 8008500:	0801d124 	.word	0x0801d124
 8008504:	0801cea4 	.word	0x0801cea4
 8008508:	0801d140 	.word	0x0801d140
 800850c:	08009c0d 	.word	0x08009c0d
 8008510:	0801d164 	.word	0x0801d164

08008514 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08c      	sub	sp, #48	; 0x30
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <netconn_close_shutdown+0x26>
 8008526:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <netconn_close_shutdown+0x50>)
 8008528:	f240 4247 	movw	r2, #1095	; 0x447
 800852c:	490e      	ldr	r1, [pc, #56]	; (8008568 <netconn_close_shutdown+0x54>)
 800852e:	480f      	ldr	r0, [pc, #60]	; (800856c <netconn_close_shutdown+0x58>)
 8008530:	f013 fc9a 	bl	801be68 <iprintf>
 8008534:	f06f 030f 	mvn.w	r3, #15
 8008538:	e010      	b.n	800855c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008542:	2329      	movs	r3, #41	; 0x29
 8008544:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008546:	f107 030c 	add.w	r3, r7, #12
 800854a:	4619      	mov	r1, r3
 800854c:	4808      	ldr	r0, [pc, #32]	; (8008570 <netconn_close_shutdown+0x5c>)
 800854e:	f7ff fb3d 	bl	8007bcc <netconn_apimsg>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008558:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800855c:	4618      	mov	r0, r3
 800855e:	3730      	adds	r7, #48	; 0x30
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	0801ce4c 	.word	0x0801ce4c
 8008568:	0801d188 	.word	0x0801d188
 800856c:	0801cea4 	.word	0x0801cea4
 8008570:	08009e31 	.word	0x08009e31

08008574 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <netconn_err+0x12>
    return ERR_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	e00d      	b.n	80085a2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008586:	f010 fa43 	bl	8018a10 <sys_arch_protect>
 800858a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	7a1b      	ldrb	r3, [r3, #8]
 8008590:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f010 fa47 	bl	8018a2c <sys_arch_unprotect>
  return err;
 800859e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80085b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ba:	f113 0f0e 	cmn.w	r3, #14
 80085be:	d008      	beq.n	80085d2 <lwip_netconn_err_to_msg+0x26>
 80085c0:	f113 0f0d 	cmn.w	r3, #13
 80085c4:	d003      	beq.n	80085ce <lwip_netconn_err_to_msg+0x22>
 80085c6:	f113 0f0f 	cmn.w	r3, #15
 80085ca:	d004      	beq.n	80085d6 <lwip_netconn_err_to_msg+0x2a>
 80085cc:	e005      	b.n	80085da <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80085ce:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <lwip_netconn_err_to_msg+0x4c>)
 80085d0:	e00e      	b.n	80085f0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80085d2:	4b0a      	ldr	r3, [pc, #40]	; (80085fc <lwip_netconn_err_to_msg+0x50>)
 80085d4:	e00c      	b.n	80085f0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80085d6:	4b0a      	ldr	r3, [pc, #40]	; (8008600 <lwip_netconn_err_to_msg+0x54>)
 80085d8:	e00a      	b.n	80085f0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80085da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d005      	beq.n	80085ee <lwip_netconn_err_to_msg+0x42>
 80085e2:	4b08      	ldr	r3, [pc, #32]	; (8008604 <lwip_netconn_err_to_msg+0x58>)
 80085e4:	227d      	movs	r2, #125	; 0x7d
 80085e6:	4908      	ldr	r1, [pc, #32]	; (8008608 <lwip_netconn_err_to_msg+0x5c>)
 80085e8:	4808      	ldr	r0, [pc, #32]	; (800860c <lwip_netconn_err_to_msg+0x60>)
 80085ea:	f013 fc3d 	bl	801be68 <iprintf>
      return NULL;
 80085ee:	2300      	movs	r3, #0
  }
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	08020de1 	.word	0x08020de1
 80085fc:	08020de2 	.word	0x08020de2
 8008600:	08020de3 	.word	0x08020de3
 8008604:	0801d1a4 	.word	0x0801d1a4
 8008608:	0801d1d8 	.word	0x0801d1d8
 800860c:	0801d1e8 	.word	0x0801d1e8

08008610 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <lwip_netconn_is_err_msg+0x1c>
 8008620:	4b12      	ldr	r3, [pc, #72]	; (800866c <lwip_netconn_is_err_msg+0x5c>)
 8008622:	2285      	movs	r2, #133	; 0x85
 8008624:	4912      	ldr	r1, [pc, #72]	; (8008670 <lwip_netconn_is_err_msg+0x60>)
 8008626:	4813      	ldr	r0, [pc, #76]	; (8008674 <lwip_netconn_is_err_msg+0x64>)
 8008628:	f013 fc1e 	bl	801be68 <iprintf>

  if (msg == &netconn_aborted) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a12      	ldr	r2, [pc, #72]	; (8008678 <lwip_netconn_is_err_msg+0x68>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d104      	bne.n	800863e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	22f3      	movs	r2, #243	; 0xf3
 8008638:	701a      	strb	r2, [r3, #0]
    return 1;
 800863a:	2301      	movs	r3, #1
 800863c:	e012      	b.n	8008664 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a0e      	ldr	r2, [pc, #56]	; (800867c <lwip_netconn_is_err_msg+0x6c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d104      	bne.n	8008650 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	22f2      	movs	r2, #242	; 0xf2
 800864a:	701a      	strb	r2, [r3, #0]
    return 1;
 800864c:	2301      	movs	r3, #1
 800864e:	e009      	b.n	8008664 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a0b      	ldr	r2, [pc, #44]	; (8008680 <lwip_netconn_is_err_msg+0x70>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d104      	bne.n	8008662 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	22f1      	movs	r2, #241	; 0xf1
 800865c:	701a      	strb	r2, [r3, #0]
    return 1;
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	0801d1a4 	.word	0x0801d1a4
 8008670:	0801d210 	.word	0x0801d210
 8008674:	0801d1e8 	.word	0x0801d1e8
 8008678:	08020de1 	.word	0x08020de1
 800867c:	08020de2 	.word	0x08020de2
 8008680:	08020de3 	.word	0x08020de3

08008684 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08a      	sub	sp, #40	; 0x28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <recv_udp+0x20>
 8008698:	4b43      	ldr	r3, [pc, #268]	; (80087a8 <recv_udp+0x124>)
 800869a:	22e5      	movs	r2, #229	; 0xe5
 800869c:	4943      	ldr	r1, [pc, #268]	; (80087ac <recv_udp+0x128>)
 800869e:	4844      	ldr	r0, [pc, #272]	; (80087b0 <recv_udp+0x12c>)
 80086a0:	f013 fbe2 	bl	801be68 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <recv_udp+0x32>
 80086aa:	4b3f      	ldr	r3, [pc, #252]	; (80087a8 <recv_udp+0x124>)
 80086ac:	22e6      	movs	r2, #230	; 0xe6
 80086ae:	4941      	ldr	r1, [pc, #260]	; (80087b4 <recv_udp+0x130>)
 80086b0:	483f      	ldr	r0, [pc, #252]	; (80087b0 <recv_udp+0x12c>)
 80086b2:	f013 fbd9 	bl	801be68 <iprintf>
  conn = (struct netconn *)arg;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24

  if (conn == NULL) {
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d103      	bne.n	80086c8 <recv_udp+0x44>
    pbuf_free(p);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f004 fb41 	bl	800cd48 <pbuf_free>
    return;
 80086c6:	e06b      	b.n	80087a0 <recv_udp+0x11c>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d005      	beq.n	80086de <recv_udp+0x5a>
 80086d2:	4b35      	ldr	r3, [pc, #212]	; (80087a8 <recv_udp+0x124>)
 80086d4:	22ee      	movs	r2, #238	; 0xee
 80086d6:	4938      	ldr	r1, [pc, #224]	; (80087b8 <recv_udp+0x134>)
 80086d8:	4835      	ldr	r0, [pc, #212]	; (80087b0 <recv_udp+0x12c>)
 80086da:	f013 fbc5 	bl	801be68 <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 80086de:	f010 f997 	bl	8018a10 <sys_arch_protect>
 80086e2:	6238      	str	r0, [r7, #32]
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	6a38      	ldr	r0, [r7, #32]
 80086ec:	f010 f99e 	bl	8018a2c <sys_arch_unprotect>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	3310      	adds	r3, #16
 80086f4:	4618      	mov	r0, r3
 80086f6:	f010 f870 	bl	80187da <sys_mbox_valid>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <recv_udp+0x8e>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	891b      	ldrh	r3, [r3, #8]
 8008704:	461a      	mov	r2, r3
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	441a      	add	r2, r3
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	69db      	ldr	r3, [r3, #28]
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 800870e:	429a      	cmp	r2, r3
 8008710:	dd03      	ble.n	800871a <recv_udp+0x96>
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f004 fb18 	bl	800cd48 <pbuf_free>
    return;
 8008718:	e042      	b.n	80087a0 <recv_udp+0x11c>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800871a:	2006      	movs	r0, #6
 800871c:	f003 fbe4 	bl	800bee8 <memp_malloc>
 8008720:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d103      	bne.n	8008730 <recv_udp+0xac>
    pbuf_free(p);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f004 fb0d 	bl	800cd48 <pbuf_free>
    return;
 800872e:	e037      	b.n	80087a0 <recv_udp+0x11c>
  } else {
    buf->p = p;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <recv_udp+0xc4>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	e000      	b.n	800874a <recv_udp+0xc6>
 8008748:	2300      	movs	r3, #0
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008752:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	891b      	ldrh	r3, [r3, #8]
 8008758:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	3310      	adds	r3, #16
 800875e:	69b9      	ldr	r1, [r7, #24]
 8008760:	4618      	mov	r0, r3
 8008762:	f00f ffc5 	bl	80186f0 <sys_mbox_trypost>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <recv_udp+0xf0>
    netbuf_delete(buf);
 800876c:	69b8      	ldr	r0, [r7, #24]
 800876e:	f001 fc09 	bl	8009f84 <netbuf_delete>
    return;
 8008772:	e015      	b.n	80087a0 <recv_udp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 8008774:	f010 f94c 	bl	8018a10 <sys_arch_protect>
 8008778:	6138      	str	r0, [r7, #16]
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	6a1a      	ldr	r2, [r3, #32]
 800877e:	8afb      	ldrh	r3, [r7, #22]
 8008780:	441a      	add	r2, r3
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	621a      	str	r2, [r3, #32]
 8008786:	6938      	ldr	r0, [r7, #16]
 8008788:	f010 f950 	bl	8018a2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <recv_udp+0x11c>
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	8afa      	ldrh	r2, [r7, #22]
 800879a:	2100      	movs	r1, #0
 800879c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800879e:	4798      	blx	r3
  }
}
 80087a0:	3728      	adds	r7, #40	; 0x28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	0801d1a4 	.word	0x0801d1a4
 80087ac:	0801d21c 	.word	0x0801d21c
 80087b0:	0801d1e8 	.word	0x0801d1e8
 80087b4:	0801d240 	.word	0x0801d240
 80087b8:	0801d260 	.word	0x0801d260

080087bc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <recv_tcp+0x22>
 80087d0:	4b3c      	ldr	r3, [pc, #240]	; (80088c4 <recv_tcp+0x108>)
 80087d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80087d6:	493c      	ldr	r1, [pc, #240]	; (80088c8 <recv_tcp+0x10c>)
 80087d8:	483c      	ldr	r0, [pc, #240]	; (80088cc <recv_tcp+0x110>)
 80087da:	f013 fb45 	bl	801be68 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <recv_tcp+0x36>
 80087e4:	4b37      	ldr	r3, [pc, #220]	; (80088c4 <recv_tcp+0x108>)
 80087e6:	f240 122d 	movw	r2, #301	; 0x12d
 80087ea:	4939      	ldr	r1, [pc, #228]	; (80088d0 <recv_tcp+0x114>)
 80087ec:	4837      	ldr	r0, [pc, #220]	; (80088cc <recv_tcp+0x110>)
 80087ee:	f013 fb3b 	bl	801be68 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80087f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d006      	beq.n	8008808 <recv_tcp+0x4c>
 80087fa:	4b32      	ldr	r3, [pc, #200]	; (80088c4 <recv_tcp+0x108>)
 80087fc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008800:	4934      	ldr	r1, [pc, #208]	; (80088d4 <recv_tcp+0x118>)
 8008802:	4832      	ldr	r0, [pc, #200]	; (80088cc <recv_tcp+0x110>)
 8008804:	f013 fb30 	bl	801be68 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <recv_tcp+0x5c>
    return ERR_VAL;
 8008812:	f06f 0305 	mvn.w	r3, #5
 8008816:	e051      	b.n	80088bc <recv_tcp+0x100>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	429a      	cmp	r2, r3
 8008820:	d006      	beq.n	8008830 <recv_tcp+0x74>
 8008822:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <recv_tcp+0x108>)
 8008824:	f240 1235 	movw	r2, #309	; 0x135
 8008828:	492b      	ldr	r1, [pc, #172]	; (80088d8 <recv_tcp+0x11c>)
 800882a:	4828      	ldr	r0, [pc, #160]	; (80088cc <recv_tcp+0x110>)
 800882c:	f013 fb1c 	bl	801be68 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	3310      	adds	r3, #16
 8008834:	4618      	mov	r0, r3
 8008836:	f00f ffd0 	bl	80187da <sys_mbox_valid>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10d      	bne.n	800885c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d008      	beq.n	8008858 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	891b      	ldrh	r3, [r3, #8]
 800884a:	4619      	mov	r1, r3
 800884c:	68b8      	ldr	r0, [r7, #8]
 800884e:	f005 f8d7 	bl	800da00 <tcp_recved>
      pbuf_free(p);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f004 fa78 	bl	800cd48 <pbuf_free>
    }
    return ERR_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	e02f      	b.n	80088bc <recv_tcp+0x100>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <recv_tcp+0xb2>
    msg = p;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	891b      	ldrh	r3, [r3, #8]
 800886a:	83fb      	strh	r3, [r7, #30]
 800886c:	e003      	b.n	8008876 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800886e:	4b1b      	ldr	r3, [pc, #108]	; (80088dc <recv_tcp+0x120>)
 8008870:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	3310      	adds	r3, #16
 800887a:	69b9      	ldr	r1, [r7, #24]
 800887c:	4618      	mov	r0, r3
 800887e:	f00f ff37 	bl	80186f0 <sys_mbox_trypost>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008888:	f04f 33ff 	mov.w	r3, #4294967295
 800888c:	e016      	b.n	80088bc <recv_tcp+0x100>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 800888e:	f010 f8bf 	bl	8018a10 <sys_arch_protect>
 8008892:	6138      	str	r0, [r7, #16]
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	6a1a      	ldr	r2, [r3, #32]
 8008898:	8bfb      	ldrh	r3, [r7, #30]
 800889a:	441a      	add	r2, r3
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	621a      	str	r2, [r3, #32]
 80088a0:	6938      	ldr	r0, [r7, #16]
 80088a2:	f010 f8c3 	bl	8018a2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <recv_tcp+0xfe>
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	8bfa      	ldrh	r2, [r7, #30]
 80088b4:	2100      	movs	r1, #0
 80088b6:	6978      	ldr	r0, [r7, #20]
 80088b8:	4798      	blx	r3
  }

  return ERR_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	0801d1a4 	.word	0x0801d1a4
 80088c8:	0801d280 	.word	0x0801d280
 80088cc:	0801d1e8 	.word	0x0801d1e8
 80088d0:	0801d2a4 	.word	0x0801d2a4
 80088d4:	0801d2c4 	.word	0x0801d2c4
 80088d8:	0801d2dc 	.word	0x0801d2dc
 80088dc:	08020de3 	.word	0x08020de3

080088e0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d106      	bne.n	8008902 <poll_tcp+0x22>
 80088f4:	4b2b      	ldr	r3, [pc, #172]	; (80089a4 <poll_tcp+0xc4>)
 80088f6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80088fa:	492b      	ldr	r1, [pc, #172]	; (80089a8 <poll_tcp+0xc8>)
 80088fc:	482b      	ldr	r0, [pc, #172]	; (80089ac <poll_tcp+0xcc>)
 80088fe:	f013 fab3 	bl	801be68 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d104      	bne.n	8008914 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800890a:	2101      	movs	r1, #1
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 ffad 	bl	800986c <lwip_netconn_do_writemore>
 8008912:	e016      	b.n	8008942 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	785b      	ldrb	r3, [r3, #1]
 8008918:	2b04      	cmp	r3, #4
 800891a:	d112      	bne.n	8008942 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <poll_tcp+0x5a>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008928:	7a5b      	ldrb	r3, [r3, #9]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d005      	beq.n	800893a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	7a5a      	ldrb	r2, [r3, #9]
 8008934:	3a01      	subs	r2, #1
 8008936:	b2d2      	uxtb	r2, r2
 8008938:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800893a:	2101      	movs	r1, #1
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fb4f 	bl	8008fe0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d023      	beq.n	8008998 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01f      	beq.n	8008998 <poll_tcp+0xb8>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008960:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008964:	d318      	bcc.n	8008998 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800896e:	2b04      	cmp	r3, #4
 8008970:	d812      	bhi.n	8008998 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008978:	f023 0310 	bic.w	r3, r3, #16
 800897c:	b2da      	uxtb	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <poll_tcp+0xb8>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	2200      	movs	r2, #0
 8008992:	2102      	movs	r1, #2
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	0801d1a4 	.word	0x0801d1a4
 80089a8:	0801d2fc 	.word	0x0801d2fc
 80089ac:	0801d1e8 	.word	0x0801d1e8

080089b0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d106      	bne.n	80089d6 <sent_tcp+0x26>
 80089c8:	4b21      	ldr	r3, [pc, #132]	; (8008a50 <sent_tcp+0xa0>)
 80089ca:	f240 1293 	movw	r2, #403	; 0x193
 80089ce:	4921      	ldr	r1, [pc, #132]	; (8008a54 <sent_tcp+0xa4>)
 80089d0:	4821      	ldr	r0, [pc, #132]	; (8008a58 <sent_tcp+0xa8>)
 80089d2:	f013 fa49 	bl	801be68 <iprintf>

  if (conn) {
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d034      	beq.n	8008a46 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d104      	bne.n	80089ee <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80089e4:	2101      	movs	r1, #1
 80089e6:	6978      	ldr	r0, [r7, #20]
 80089e8:	f000 ff40 	bl	800986c <lwip_netconn_do_writemore>
 80089ec:	e007      	b.n	80089fe <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	785b      	ldrb	r3, [r3, #1]
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d103      	bne.n	80089fe <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80089f6:	2101      	movs	r1, #1
 80089f8:	6978      	ldr	r0, [r7, #20]
 80089fa:	f000 faf1 	bl	8008fe0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01f      	beq.n	8008a46 <sent_tcp+0x96>
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008a0e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008a12:	d318      	bcc.n	8008a46 <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d812      	bhi.n	8008a46 <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a26:	f023 0310 	bic.w	r3, r3, #16
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <sent_tcp+0x96>
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	88fa      	ldrh	r2, [r7, #6]
 8008a40:	2102      	movs	r1, #2
 8008a42:	6978      	ldr	r0, [r7, #20]
 8008a44:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	0801d1a4 	.word	0x0801d1a4
 8008a54:	0801d2fc 	.word	0x0801d2fc
 8008a58:	0801d1e8 	.word	0x0801d1e8

08008a5c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <err_tcp+0x24>
 8008a72:	4b61      	ldr	r3, [pc, #388]	; (8008bf8 <err_tcp+0x19c>)
 8008a74:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008a78:	4960      	ldr	r1, [pc, #384]	; (8008bfc <err_tcp+0x1a0>)
 8008a7a:	4861      	ldr	r0, [pc, #388]	; (8008c00 <err_tcp+0x1a4>)
 8008a7c:	f013 f9f4 	bl	801be68 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008a80:	f00f ffc6 	bl	8018a10 <sys_arch_protect>
 8008a84:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a98:	f043 0301 	orr.w	r3, r3, #1
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	2200      	movs	r2, #0
 8008aae:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008ab0:	69b8      	ldr	r0, [r7, #24]
 8008ab2:	f00f ffbb 	bl	8018a2c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d005      	beq.n	8008aca <err_tcp+0x6e>
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2104      	movs	r1, #4
 8008ac6:	69f8      	ldr	r0, [r7, #28]
 8008ac8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <err_tcp+0x82>
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	69f8      	ldr	r0, [r7, #28]
 8008adc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d005      	beq.n	8008af2 <err_tcp+0x96>
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	2200      	movs	r2, #0
 8008aec:	2102      	movs	r1, #2
 8008aee:	69f8      	ldr	r0, [r7, #28]
 8008af0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fd58 	bl	80085ac <lwip_netconn_err_to_msg>
 8008afc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	3310      	adds	r3, #16
 8008b02:	4618      	mov	r0, r3
 8008b04:	f00f fe69 	bl	80187da <sys_mbox_valid>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	3310      	adds	r3, #16
 8008b12:	6939      	ldr	r1, [r7, #16]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f00f fdeb 	bl	80186f0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3314      	adds	r3, #20
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f00f fe5b 	bl	80187da <sys_mbox_valid>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	3314      	adds	r3, #20
 8008b2e:	6939      	ldr	r1, [r7, #16]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f00f fddd 	bl	80186f0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d005      	beq.n	8008b48 <err_tcp+0xec>
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d002      	beq.n	8008b48 <err_tcp+0xec>
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d146      	bne.n	8008bd6 <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bf14      	ite	ne
 8008b56:	2301      	movne	r3, #1
 8008b58:	2300      	moveq	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b64:	f023 0304 	bic.w	r3, r3, #4
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (!was_nonblocking_connect) {
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d13b      	bne.n	8008bee <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d106      	bne.n	8008b8c <err_tcp+0x130>
 8008b7e:	4b1e      	ldr	r3, [pc, #120]	; (8008bf8 <err_tcp+0x19c>)
 8008b80:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008b84:	491f      	ldr	r1, [pc, #124]	; (8008c04 <err_tcp+0x1a8>)
 8008b86:	481e      	ldr	r0, [pc, #120]	; (8008c00 <err_tcp+0x1a4>)
 8008b88:	f013 f96e 	bl	801be68 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d104      	bne.n	8008b9c <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	2200      	movs	r2, #0
 8008b98:	711a      	strb	r2, [r3, #4]
 8008b9a:	e003      	b.n	8008ba4 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	78fa      	ldrb	r2, [r7, #3]
 8008ba2:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	330c      	adds	r3, #12
 8008bac:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008bae:	68b8      	ldr	r0, [r7, #8]
 8008bb0:	f00f fea4 	bl	80188fc <sys_sem_valid>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <err_tcp+0x16c>
 8008bba:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <err_tcp+0x19c>)
 8008bbc:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008bc0:	4911      	ldr	r1, [pc, #68]	; (8008c08 <err_tcp+0x1ac>)
 8008bc2:	480f      	ldr	r0, [pc, #60]	; (8008c00 <err_tcp+0x1a4>)
 8008bc4:	f013 f950 	bl	801be68 <iprintf>
      conn->current_msg = NULL;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	629a      	str	r2, [r3, #40]	; 0x28
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008bce:	68b8      	ldr	r0, [r7, #8]
 8008bd0:	f00f fe7a 	bl	80188c8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008bd4:	e00b      	b.n	8008bee <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d008      	beq.n	8008bf0 <err_tcp+0x194>
 8008bde:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <err_tcp+0x19c>)
 8008be0:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008be4:	4909      	ldr	r1, [pc, #36]	; (8008c0c <err_tcp+0x1b0>)
 8008be6:	4806      	ldr	r0, [pc, #24]	; (8008c00 <err_tcp+0x1a4>)
 8008be8:	f013 f93e 	bl	801be68 <iprintf>
  }
}
 8008bec:	e000      	b.n	8008bf0 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8008bee:	bf00      	nop
}
 8008bf0:	bf00      	nop
 8008bf2:	3720      	adds	r7, #32
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	0801d1a4 	.word	0x0801d1a4
 8008bfc:	0801d2fc 	.word	0x0801d2fc
 8008c00:	0801d1e8 	.word	0x0801d1e8
 8008c04:	0801d30c 	.word	0x0801d30c
 8008c08:	0801d328 	.word	0x0801d328
 8008c0c:	0801d344 	.word	0x0801d344

08008c10 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f005 fec7 	bl	800e9b4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008c26:	490a      	ldr	r1, [pc, #40]	; (8008c50 <setup_tcp+0x40>)
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f005 fed5 	bl	800e9d8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008c2e:	4909      	ldr	r1, [pc, #36]	; (8008c54 <setup_tcp+0x44>)
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f005 fef3 	bl	800ea1c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008c36:	2202      	movs	r2, #2
 8008c38:	4907      	ldr	r1, [pc, #28]	; (8008c58 <setup_tcp+0x48>)
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f005 ff4a 	bl	800ead4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008c40:	4906      	ldr	r1, [pc, #24]	; (8008c5c <setup_tcp+0x4c>)
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f005 ff0c 	bl	800ea60 <tcp_err>
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	080087bd 	.word	0x080087bd
 8008c54:	080089b1 	.word	0x080089b1
 8008c58:	080088e1 	.word	0x080088e1
 8008c5c:	08008a5d 	.word	0x08008a5d

08008c60 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008c60:	b590      	push	{r4, r7, lr}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d006      	beq.n	8008c84 <pcb_new+0x24>
 8008c76:	4b2b      	ldr	r3, [pc, #172]	; (8008d24 <pcb_new+0xc4>)
 8008c78:	f240 2265 	movw	r2, #613	; 0x265
 8008c7c:	492a      	ldr	r1, [pc, #168]	; (8008d28 <pcb_new+0xc8>)
 8008c7e:	482b      	ldr	r0, [pc, #172]	; (8008d2c <pcb_new+0xcc>)
 8008c80:	f013 f8f2 	bl	801be68 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c8e:	2b10      	cmp	r3, #16
 8008c90:	d022      	beq.n	8008cd8 <pcb_new+0x78>
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d133      	bne.n	8008cfe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681c      	ldr	r4, [r3, #0]
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f00b f9f2 	bl	8014086 <udp_new_ip_type>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d02a      	beq.n	8008d06 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b22      	cmp	r3, #34	; 0x22
 8008cb8:	d104      	bne.n	8008cc4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6858      	ldr	r0, [r3, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	4917      	ldr	r1, [pc, #92]	; (8008d30 <pcb_new+0xd0>)
 8008cd2:	f00b f95f 	bl	8013f94 <udp_recv>
      }
      break;
 8008cd6:	e016      	b.n	8008d06 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681c      	ldr	r4, [r3, #0]
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f005 fe5a 	bl	800e998 <tcp_new_ip_type>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00b      	beq.n	8008d0a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff ff8a 	bl	8008c10 <setup_tcp>
      }
      break;
 8008cfc:	e005      	b.n	8008d0a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	22fa      	movs	r2, #250	; 0xfa
 8008d02:	711a      	strb	r2, [r3, #4]
      return;
 8008d04:	e00a      	b.n	8008d1c <pcb_new+0xbc>
      break;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <pcb_new+0xac>
      break;
 8008d0a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d102      	bne.n	8008d1c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	22ff      	movs	r2, #255	; 0xff
 8008d1a:	711a      	strb	r2, [r3, #4]
  }
}
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd90      	pop	{r4, r7, pc}
 8008d22:	bf00      	nop
 8008d24:	0801d1a4 	.word	0x0801d1a4
 8008d28:	0801d388 	.word	0x0801d388
 8008d2c:	0801d1e8 	.word	0x0801d1e8
 8008d30:	08008685 	.word	0x08008685

08008d34 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff ff85 	bl	8008c60 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008d70:	2007      	movs	r0, #7
 8008d72:	f003 f8b9 	bl	800bee8 <memp_malloc>
 8008d76:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <netconn_alloc+0x22>
    return NULL;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e059      	b.n	8008e36 <netconn_alloc+0xd6>
  }

  conn->pending_err = ERR_OK;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	79fa      	ldrb	r2, [r7, #7]
 8008d8c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008d94:	79fb      	ldrb	r3, [r7, #7]
 8008d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d9a:	2b10      	cmp	r3, #16
 8008d9c:	d004      	beq.n	8008da8 <netconn_alloc+0x48>
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d105      	bne.n	8008dae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008da2:	2306      	movs	r3, #6
 8008da4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008da6:	e00a      	b.n	8008dbe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008da8:	2306      	movs	r3, #6
 8008daa:	617b      	str	r3, [r7, #20]
      break;
 8008dac:	e007      	b.n	8008dbe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008dae:	4b24      	ldr	r3, [pc, #144]	; (8008e40 <netconn_alloc+0xe0>)
 8008db0:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008db4:	4923      	ldr	r1, [pc, #140]	; (8008e44 <netconn_alloc+0xe4>)
 8008db6:	4824      	ldr	r0, [pc, #144]	; (8008e48 <netconn_alloc+0xe8>)
 8008db8:	f013 f856 	bl	801be68 <iprintf>
      goto free_and_return;
 8008dbc:	e036      	b.n	8008e2c <netconn_alloc+0xcc>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3310      	adds	r3, #16
 8008dc2:	6979      	ldr	r1, [r7, #20]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f00f fc5f 	bl	8018688 <sys_mbox_new>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d12c      	bne.n	8008e2a <netconn_alloc+0xca>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f00f fd1d 	bl	8018816 <sys_sem_new>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3310      	adds	r3, #16
 8008de6:	4618      	mov	r0, r3
 8008de8:	f00f fc70 	bl	80186cc <sys_mbox_free>
    goto free_and_return;
 8008dec:	e01e      	b.n	8008e2c <netconn_alloc+0xcc>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3314      	adds	r3, #20
 8008df2:	4618      	mov	r0, r3
 8008df4:	f00f fd02 	bl	80187fc <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f04f 32ff 	mov.w	r2, #4294967295
 8008e04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a0d      	ldr	r2, [pc, #52]	; (8008e4c <netconn_alloc+0xec>)
 8008e16:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	621a      	str	r2, [r3, #32]
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	7cfa      	ldrb	r2, [r7, #19]
 8008e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return conn;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	e005      	b.n	8008e36 <netconn_alloc+0xd6>
    goto free_and_return;
 8008e2a:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008e2c:	68f9      	ldr	r1, [r7, #12]
 8008e2e:	2007      	movs	r0, #7
 8008e30:	f003 f8ac 	bl	800bf8c <memp_free>
  return NULL;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	0801d1a4 	.word	0x0801d1a4
 8008e44:	0801d3a8 	.word	0x0801d3a8
 8008e48:	0801d1e8 	.word	0x0801d1e8
 8008e4c:	77359400 	.word	0x77359400

08008e50 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d006      	beq.n	8008e6e <netconn_free+0x1e>
 8008e60:	4b1b      	ldr	r3, [pc, #108]	; (8008ed0 <netconn_free+0x80>)
 8008e62:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008e66:	491b      	ldr	r1, [pc, #108]	; (8008ed4 <netconn_free+0x84>)
 8008e68:	481b      	ldr	r0, [pc, #108]	; (8008ed8 <netconn_free+0x88>)
 8008e6a:	f012 fffd 	bl	801be68 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	3310      	adds	r3, #16
 8008e72:	4618      	mov	r0, r3
 8008e74:	f00f fcb1 	bl	80187da <sys_mbox_valid>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d006      	beq.n	8008e8c <netconn_free+0x3c>
 8008e7e:	4b14      	ldr	r3, [pc, #80]	; (8008ed0 <netconn_free+0x80>)
 8008e80:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008e84:	4915      	ldr	r1, [pc, #84]	; (8008edc <netconn_free+0x8c>)
 8008e86:	4814      	ldr	r0, [pc, #80]	; (8008ed8 <netconn_free+0x88>)
 8008e88:	f012 ffee 	bl	801be68 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3314      	adds	r3, #20
 8008e90:	4618      	mov	r0, r3
 8008e92:	f00f fca2 	bl	80187da <sys_mbox_valid>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d006      	beq.n	8008eaa <netconn_free+0x5a>
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <netconn_free+0x80>)
 8008e9e:	f240 3227 	movw	r2, #807	; 0x327
 8008ea2:	490f      	ldr	r1, [pc, #60]	; (8008ee0 <netconn_free+0x90>)
 8008ea4:	480c      	ldr	r0, [pc, #48]	; (8008ed8 <netconn_free+0x88>)
 8008ea6:	f012 ffdf 	bl	801be68 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	330c      	adds	r3, #12
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f00f fd17 	bl	80188e2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	330c      	adds	r3, #12
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f00f fd30 	bl	801891e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	2007      	movs	r0, #7
 8008ec2:	f003 f863 	bl	800bf8c <memp_free>
}
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	0801d1a4 	.word	0x0801d1a4
 8008ed4:	0801d3d0 	.word	0x0801d3d0
 8008ed8:	0801d1e8 	.word	0x0801d1e8
 8008edc:	0801d400 	.word	0x0801d400
 8008ee0:	0801d43c 	.word	0x0801d43c

08008ee4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3310      	adds	r3, #16
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f00f fc72 	bl	80187da <sys_mbox_valid>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d02f      	beq.n	8008f5c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008efc:	e018      	b.n	8008f30 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f06:	2b10      	cmp	r3, #16
 8008f08:	d10e      	bne.n	8008f28 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f107 020f 	add.w	r2, r7, #15
 8008f10:	4611      	mov	r1, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff fb7c 	bl	8008610 <lwip_netconn_is_err_msg>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d108      	bne.n	8008f30 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f003 ff11 	bl	800cd48 <pbuf_free>
 8008f26:	e003      	b.n	8008f30 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 f82a 	bl	8009f84 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3310      	adds	r3, #16
 8008f34:	f107 0210 	add.w	r2, r7, #16
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f00f fc31 	bl	80187a2 <sys_arch_mbox_tryfetch>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f46:	d1da      	bne.n	8008efe <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3310      	adds	r3, #16
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f00f fbbd 	bl	80186cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3310      	adds	r3, #16
 8008f56:	4618      	mov	r0, r3
 8008f58:	f00f fc50 	bl	80187fc <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3314      	adds	r3, #20
 8008f60:	4618      	mov	r0, r3
 8008f62:	f00f fc3a 	bl	80187da <sys_mbox_valid>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d034      	beq.n	8008fd6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f6c:	e01d      	b.n	8008faa <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f107 020e 	add.w	r2, r7, #14
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff fb4a 	bl	8008610 <lwip_netconn_is_err_msg>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d113      	bne.n	8008faa <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008f86:	6978      	ldr	r0, [r7, #20]
 8008f88:	f7ff ffac 	bl	8008ee4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f004 fccb 	bl	800d934 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008fa4:	6978      	ldr	r0, [r7, #20]
 8008fa6:	f7ff ff53 	bl	8008e50 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3314      	adds	r3, #20
 8008fae:	f107 0210 	add.w	r2, r7, #16
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f00f fbf4 	bl	80187a2 <sys_arch_mbox_tryfetch>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d1d5      	bne.n	8008f6e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f00f fb80 	bl	80186cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3314      	adds	r3, #20
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f00f fc13 	bl	80187fc <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008fd6:	bf00      	nop
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d106      	bne.n	8009004 <lwip_netconn_do_close_internal+0x24>
 8008ff6:	4ba1      	ldr	r3, [pc, #644]	; (800927c <lwip_netconn_do_close_internal+0x29c>)
 8008ff8:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008ffc:	49a0      	ldr	r1, [pc, #640]	; (8009280 <lwip_netconn_do_close_internal+0x2a0>)
 8008ffe:	48a1      	ldr	r0, [pc, #644]	; (8009284 <lwip_netconn_do_close_internal+0x2a4>)
 8009000:	f012 ff32 	bl	801be68 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800900c:	2b10      	cmp	r3, #16
 800900e:	d006      	beq.n	800901e <lwip_netconn_do_close_internal+0x3e>
 8009010:	4b9a      	ldr	r3, [pc, #616]	; (800927c <lwip_netconn_do_close_internal+0x29c>)
 8009012:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009016:	499c      	ldr	r1, [pc, #624]	; (8009288 <lwip_netconn_do_close_internal+0x2a8>)
 8009018:	489a      	ldr	r0, [pc, #616]	; (8009284 <lwip_netconn_do_close_internal+0x2a4>)
 800901a:	f012 ff25 	bl	801be68 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	785b      	ldrb	r3, [r3, #1]
 8009022:	2b04      	cmp	r3, #4
 8009024:	d006      	beq.n	8009034 <lwip_netconn_do_close_internal+0x54>
 8009026:	4b95      	ldr	r3, [pc, #596]	; (800927c <lwip_netconn_do_close_internal+0x29c>)
 8009028:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800902c:	4997      	ldr	r1, [pc, #604]	; (800928c <lwip_netconn_do_close_internal+0x2ac>)
 800902e:	4895      	ldr	r0, [pc, #596]	; (8009284 <lwip_netconn_do_close_internal+0x2a4>)
 8009030:	f012 ff1a 	bl	801be68 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <lwip_netconn_do_close_internal+0x6a>
 800903c:	4b8f      	ldr	r3, [pc, #572]	; (800927c <lwip_netconn_do_close_internal+0x29c>)
 800903e:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009042:	4993      	ldr	r1, [pc, #588]	; (8009290 <lwip_netconn_do_close_internal+0x2b0>)
 8009044:	488f      	ldr	r0, [pc, #572]	; (8009284 <lwip_netconn_do_close_internal+0x2a4>)
 8009046:	f012 ff0f 	bl	801be68 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <lwip_netconn_do_close_internal+0x80>
 8009052:	4b8a      	ldr	r3, [pc, #552]	; (800927c <lwip_netconn_do_close_internal+0x29c>)
 8009054:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009058:	498e      	ldr	r1, [pc, #568]	; (8009294 <lwip_netconn_do_close_internal+0x2b4>)
 800905a:	488a      	ldr	r0, [pc, #552]	; (8009284 <lwip_netconn_do_close_internal+0x2a4>)
 800905c:	f012 ff04 	bl	801be68 <iprintf>

  tpcb = conn->pcb.tcp;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906a:	7a1b      	ldrb	r3, [r3, #8]
 800906c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	2b03      	cmp	r3, #3
 8009082:	d102      	bne.n	800908a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009084:	2301      	movs	r3, #1
 8009086:	75bb      	strb	r3, [r7, #22]
 8009088:	e01f      	b.n	80090ca <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00e      	beq.n	80090ae <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009094:	2b05      	cmp	r3, #5
 8009096:	d007      	beq.n	80090a8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800909c:	2b06      	cmp	r3, #6
 800909e:	d003      	beq.n	80090a8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d102      	bne.n	80090ae <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80090a8:	2301      	movs	r3, #1
 80090aa:	75bb      	strb	r3, [r7, #22]
 80090ac:	e00d      	b.n	80090ca <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80090ae:	7b7b      	ldrb	r3, [r7, #13]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d008      	beq.n	80090c6 <lwip_netconn_do_close_internal+0xe6>
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	8b5b      	ldrh	r3, [r3, #26]
 80090b8:	f003 0310 	and.w	r3, r3, #16
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80090c0:	2301      	movs	r3, #1
 80090c2:	75bb      	strb	r3, [r7, #22]
 80090c4:	e001      	b.n	80090ca <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80090ca:	7dbb      	ldrb	r3, [r7, #22]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80090d0:	2100      	movs	r1, #0
 80090d2:	6938      	ldr	r0, [r7, #16]
 80090d4:	f005 fc6e 	bl	800e9b4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	7d1b      	ldrb	r3, [r3, #20]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d104      	bne.n	80090ea <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80090e0:	2100      	movs	r1, #0
 80090e2:	6938      	ldr	r0, [r7, #16]
 80090e4:	f005 fcde 	bl	800eaa4 <tcp_accept>
 80090e8:	e01d      	b.n	8009126 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d007      	beq.n	8009100 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80090f0:	2100      	movs	r1, #0
 80090f2:	6938      	ldr	r0, [r7, #16]
 80090f4:	f005 fc70 	bl	800e9d8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80090f8:	2100      	movs	r1, #0
 80090fa:	6938      	ldr	r0, [r7, #16]
 80090fc:	f005 fcd2 	bl	800eaa4 <tcp_accept>
    }
    if (shut_tx) {
 8009100:	7b7b      	ldrb	r3, [r7, #13]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009106:	2100      	movs	r1, #0
 8009108:	6938      	ldr	r0, [r7, #16]
 800910a:	f005 fc87 	bl	800ea1c <tcp_sent>
    }
    if (shut_close) {
 800910e:	7dbb      	ldrb	r3, [r7, #22]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009114:	2200      	movs	r2, #0
 8009116:	2100      	movs	r1, #0
 8009118:	6938      	ldr	r0, [r7, #16]
 800911a:	f005 fcdb 	bl	800ead4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800911e:	2100      	movs	r1, #0
 8009120:	6938      	ldr	r0, [r7, #16]
 8009122:	f005 fc9d 	bl	800ea60 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009126:	7dbb      	ldrb	r3, [r7, #22]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d005      	beq.n	8009138 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800912c:	6938      	ldr	r0, [r7, #16]
 800912e:	f004 fabd 	bl	800d6ac <tcp_close>
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]
 8009136:	e007      	b.n	8009148 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	7b7a      	ldrb	r2, [r7, #13]
 800913c:	4619      	mov	r1, r3
 800913e:	6938      	ldr	r0, [r7, #16]
 8009140:	f004 fae0 	bl	800d704 <tcp_shutdown>
 8009144:	4603      	mov	r3, r0
 8009146:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009150:	2301      	movs	r3, #1
 8009152:	757b      	strb	r3, [r7, #21]
 8009154:	e016      	b.n	8009184 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915e:	d10f      	bne.n	8009180 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009164:	7a5b      	ldrb	r3, [r3, #9]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10c      	bne.n	8009184 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800916a:	2301      	movs	r3, #1
 800916c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800916e:	7dbb      	ldrb	r3, [r7, #22]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d007      	beq.n	8009184 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009174:	6938      	ldr	r0, [r7, #16]
 8009176:	f004 fbdd 	bl	800d934 <tcp_abort>
          err = ERR_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	75fb      	strb	r3, [r7, #23]
 800917e:	e001      	b.n	8009184 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009180:	2301      	movs	r3, #1
 8009182:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009184:	7d7b      	ldrb	r3, [r7, #21]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d044      	beq.n	8009214 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	330c      	adds	r3, #12
 8009192:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	7dfa      	ldrb	r2, [r7, #23]
 800919a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80091a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d129      	bne.n	8009204 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80091b0:	7dbb      	ldrb	r3, [r7, #22]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00c      	beq.n	80091d0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <lwip_netconn_do_close_internal+0x1f0>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	2200      	movs	r2, #0
 80091ca:	2104      	movs	r1, #4
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	4798      	blx	r3
      }
      if (shut_rx) {
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <lwip_netconn_do_close_internal+0x20a>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	2200      	movs	r2, #0
 80091e4:	2100      	movs	r1, #0
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	4798      	blx	r3
      }
      if (shut_tx) {
 80091ea:	7b7b      	ldrb	r3, [r7, #13]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d005      	beq.n	8009204 <lwip_netconn_do_close_internal+0x224>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	2200      	movs	r2, #0
 80091fe:	2102      	movs	r1, #2
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800920a:	68b8      	ldr	r0, [r7, #8]
 800920c:	f00f fb5c 	bl	80188c8 <sys_sem_signal>
    }
    return ERR_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	e02e      	b.n	8009272 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009214:	7d7b      	ldrb	r3, [r7, #21]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d11e      	bne.n	8009258 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	7d1b      	ldrb	r3, [r3, #20]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d106      	bne.n	8009230 <lwip_netconn_do_close_internal+0x250>
 8009222:	4b16      	ldr	r3, [pc, #88]	; (800927c <lwip_netconn_do_close_internal+0x29c>)
 8009224:	f240 4241 	movw	r2, #1089	; 0x441
 8009228:	491b      	ldr	r1, [pc, #108]	; (8009298 <lwip_netconn_do_close_internal+0x2b8>)
 800922a:	4816      	ldr	r0, [pc, #88]	; (8009284 <lwip_netconn_do_close_internal+0x2a4>)
 800922c:	f012 fe1c 	bl	801be68 <iprintf>
    if (shut_tx) {
 8009230:	7b7b      	ldrb	r3, [r7, #13]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009236:	4919      	ldr	r1, [pc, #100]	; (800929c <lwip_netconn_do_close_internal+0x2bc>)
 8009238:	6938      	ldr	r0, [r7, #16]
 800923a:	f005 fbef 	bl	800ea1c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800923e:	2201      	movs	r2, #1
 8009240:	4917      	ldr	r1, [pc, #92]	; (80092a0 <lwip_netconn_do_close_internal+0x2c0>)
 8009242:	6938      	ldr	r0, [r7, #16]
 8009244:	f005 fc46 	bl	800ead4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009248:	4916      	ldr	r1, [pc, #88]	; (80092a4 <lwip_netconn_do_close_internal+0x2c4>)
 800924a:	6938      	ldr	r0, [r7, #16]
 800924c:	f005 fc08 	bl	800ea60 <tcp_err>
    tcp_arg(tpcb, conn);
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	6938      	ldr	r0, [r7, #16]
 8009254:	f005 fbae 	bl	800e9b4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009258:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d106      	bne.n	800926e <lwip_netconn_do_close_internal+0x28e>
 8009260:	4b06      	ldr	r3, [pc, #24]	; (800927c <lwip_netconn_do_close_internal+0x29c>)
 8009262:	f240 424d 	movw	r2, #1101	; 0x44d
 8009266:	4910      	ldr	r1, [pc, #64]	; (80092a8 <lwip_netconn_do_close_internal+0x2c8>)
 8009268:	4806      	ldr	r0, [pc, #24]	; (8009284 <lwip_netconn_do_close_internal+0x2a4>)
 800926a:	f012 fdfd 	bl	801be68 <iprintf>
  return err;
 800926e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	0801d1a4 	.word	0x0801d1a4
 8009280:	0801d478 	.word	0x0801d478
 8009284:	0801d1e8 	.word	0x0801d1e8
 8009288:	0801d488 	.word	0x0801d488
 800928c:	0801d4a8 	.word	0x0801d4a8
 8009290:	0801d4cc 	.word	0x0801d4cc
 8009294:	0801d30c 	.word	0x0801d30c
 8009298:	0801d4e0 	.word	0x0801d4e0
 800929c:	080089b1 	.word	0x080089b1
 80092a0:	080088e1 	.word	0x080088e1
 80092a4:	08008a5d 	.word	0x08008a5d
 80092a8:	0801d504 	.word	0x0801d504

080092ac <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80092c0:	7afb      	ldrb	r3, [r7, #11]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00d      	beq.n	80092e2 <lwip_netconn_do_delconn+0x36>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092d0:	2b10      	cmp	r3, #16
 80092d2:	d006      	beq.n	80092e2 <lwip_netconn_do_delconn+0x36>
 80092d4:	4b61      	ldr	r3, [pc, #388]	; (800945c <lwip_netconn_do_delconn+0x1b0>)
 80092d6:	f240 425f 	movw	r2, #1119	; 0x45f
 80092da:	4961      	ldr	r1, [pc, #388]	; (8009460 <lwip_netconn_do_delconn+0x1b4>)
 80092dc:	4861      	ldr	r0, [pc, #388]	; (8009464 <lwip_netconn_do_delconn+0x1b8>)
 80092de:	f012 fdc3 	bl	801be68 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80092e2:	7afb      	ldrb	r3, [r7, #11]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d005      	beq.n	80092f4 <lwip_netconn_do_delconn+0x48>
 80092e8:	7afb      	ldrb	r3, [r7, #11]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d002      	beq.n	80092f4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80092ee:	7afb      	ldrb	r3, [r7, #11]
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d10a      	bne.n	800930a <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 80092f4:	7afb      	ldrb	r3, [r7, #11]
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d10b      	bne.n	8009312 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009302:	f003 0304 	and.w	r3, r3, #4
 8009306:	2b00      	cmp	r3, #0
 8009308:	d103      	bne.n	8009312 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	22fb      	movs	r2, #251	; 0xfb
 800930e:	711a      	strb	r2, [r3, #4]
 8009310:	e098      	b.n	8009444 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009312:	7afb      	ldrb	r3, [r7, #11]
 8009314:	2b03      	cmp	r3, #3
 8009316:	d10e      	bne.n	8009336 <lwip_netconn_do_delconn+0x8a>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009320:	f003 0304 	and.w	r3, r3, #4
 8009324:	2b00      	cmp	r3, #0
 8009326:	d106      	bne.n	8009336 <lwip_netconn_do_delconn+0x8a>
 8009328:	4b4c      	ldr	r3, [pc, #304]	; (800945c <lwip_netconn_do_delconn+0x1b0>)
 800932a:	f240 427b 	movw	r2, #1147	; 0x47b
 800932e:	494e      	ldr	r1, [pc, #312]	; (8009468 <lwip_netconn_do_delconn+0x1bc>)
 8009330:	484c      	ldr	r0, [pc, #304]	; (8009464 <lwip_netconn_do_delconn+0x1b8>)
 8009332:	f012 fd99 	bl	801be68 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff fdcf 	bl	8008ee4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d05f      	beq.n	8009410 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800935a:	2b10      	cmp	r3, #16
 800935c:	d00e      	beq.n	800937c <lwip_netconn_do_delconn+0xd0>
 800935e:	2b20      	cmp	r3, #32
 8009360:	d000      	beq.n	8009364 <lwip_netconn_do_delconn+0xb8>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8009362:	e051      	b.n	8009408 <lwip_netconn_do_delconn+0x15c>
          msg->conn->pcb.udp->recv_arg = NULL;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	4618      	mov	r0, r3
 8009376:	f00a fe2d 	bl	8013fd4 <udp_remove>
          break;
 800937a:	e045      	b.n	8009408 <lwip_netconn_do_delconn+0x15c>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <lwip_netconn_do_delconn+0xe8>
 8009386:	4b35      	ldr	r3, [pc, #212]	; (800945c <lwip_netconn_do_delconn+0x1b0>)
 8009388:	f240 4294 	movw	r2, #1172	; 0x494
 800938c:	4937      	ldr	r1, [pc, #220]	; (800946c <lwip_netconn_do_delconn+0x1c0>)
 800938e:	4835      	ldr	r0, [pc, #212]	; (8009464 <lwip_netconn_do_delconn+0x1b8>)
 8009390:	f012 fd6a 	bl	801be68 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2204      	movs	r2, #4
 800939a:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2203      	movs	r2, #3
 80093a0:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	629a      	str	r2, [r3, #40]	; 0x28
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2100      	movs	r1, #0
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff fe15 	bl	8008fe0 <lwip_netconn_do_close_internal>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d04a      	beq.n	8009452 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d006      	beq.n	80093d4 <lwip_netconn_do_delconn+0x128>
 80093c6:	4b25      	ldr	r3, [pc, #148]	; (800945c <lwip_netconn_do_delconn+0x1b0>)
 80093c8:	f240 429a 	movw	r2, #1178	; 0x49a
 80093cc:	4928      	ldr	r1, [pc, #160]	; (8009470 <lwip_netconn_do_delconn+0x1c4>)
 80093ce:	4825      	ldr	r0, [pc, #148]	; (8009464 <lwip_netconn_do_delconn+0x1b8>)
 80093d0:	f012 fd4a 	bl	801be68 <iprintf>
            UNLOCK_TCPIP_CORE();
 80093d4:	4827      	ldr	r0, [pc, #156]	; (8009474 <lwip_netconn_do_delconn+0x1c8>)
 80093d6:	f00f fae8 	bl	80189aa <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	330c      	adds	r3, #12
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f00f fa3f 	bl	8018866 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80093e8:	4822      	ldr	r0, [pc, #136]	; (8009474 <lwip_netconn_do_delconn+0x1c8>)
 80093ea:	f00f facf 	bl	801898c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	785b      	ldrb	r3, [r3, #1]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d02c      	beq.n	8009452 <lwip_netconn_do_delconn+0x1a6>
 80093f8:	4b18      	ldr	r3, [pc, #96]	; (800945c <lwip_netconn_do_delconn+0x1b0>)
 80093fa:	f240 429e 	movw	r2, #1182	; 0x49e
 80093fe:	491c      	ldr	r1, [pc, #112]	; (8009470 <lwip_netconn_do_delconn+0x1c4>)
 8009400:	4818      	ldr	r0, [pc, #96]	; (8009464 <lwip_netconn_do_delconn+0x1b8>)
 8009402:	f012 fd31 	bl	801be68 <iprintf>
          return;
 8009406:	e024      	b.n	8009452 <lwip_netconn_do_delconn+0x1a6>
      }
      msg->conn->pcb.tcp = NULL;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2200      	movs	r2, #0
 800940e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d007      	beq.n	800942a <lwip_netconn_do_delconn+0x17e>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	6810      	ldr	r0, [r2, #0]
 8009424:	2200      	movs	r2, #0
 8009426:	2100      	movs	r1, #0
 8009428:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009430:	2b00      	cmp	r3, #0
 8009432:	d007      	beq.n	8009444 <lwip_netconn_do_delconn+0x198>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	6810      	ldr	r0, [r2, #0]
 800943e:	2200      	movs	r2, #0
 8009440:	2102      	movs	r1, #2
 8009442:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	4618      	mov	r0, r3
 800944c:	f00f fa56 	bl	80188fc <sys_sem_valid>
 8009450:	e000      	b.n	8009454 <lwip_netconn_do_delconn+0x1a8>
          return;
 8009452:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	0801d1a4 	.word	0x0801d1a4
 8009460:	0801d514 	.word	0x0801d514
 8009464:	0801d1e8 	.word	0x0801d1e8
 8009468:	0801d528 	.word	0x0801d528
 800946c:	0801d548 	.word	0x0801d548
 8009470:	0801d564 	.word	0x0801d564
 8009474:	20008df8 	.word	0x20008df8

08009478 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d102      	bne.n	800949a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009494:	f06f 0305 	mvn.w	r3, #5
 8009498:	e074      	b.n	8009584 <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d006      	beq.n	80094b0 <lwip_netconn_do_connected+0x38>
 80094a2:	4b3a      	ldr	r3, [pc, #232]	; (800958c <lwip_netconn_do_connected+0x114>)
 80094a4:	f240 5223 	movw	r2, #1315	; 0x523
 80094a8:	4939      	ldr	r1, [pc, #228]	; (8009590 <lwip_netconn_do_connected+0x118>)
 80094aa:	483a      	ldr	r0, [pc, #232]	; (8009594 <lwip_netconn_do_connected+0x11c>)
 80094ac:	f012 fcdc 	bl	801be68 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10d      	bne.n	80094d4 <lwip_netconn_do_connected+0x5c>
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094be:	f003 0304 	and.w	r3, r3, #4
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <lwip_netconn_do_connected+0x5c>
 80094c6:	4b31      	ldr	r3, [pc, #196]	; (800958c <lwip_netconn_do_connected+0x114>)
 80094c8:	f240 5225 	movw	r2, #1317	; 0x525
 80094cc:	4932      	ldr	r1, [pc, #200]	; (8009598 <lwip_netconn_do_connected+0x120>)
 80094ce:	4831      	ldr	r0, [pc, #196]	; (8009594 <lwip_netconn_do_connected+0x11c>)
 80094d0:	f012 fcca 	bl	801be68 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d008      	beq.n	80094ee <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	79fa      	ldrb	r2, [r7, #7]
 80094e2:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	330c      	adds	r3, #12
 80094ec:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094f6:	2b10      	cmp	r3, #16
 80094f8:	d106      	bne.n	8009508 <lwip_netconn_do_connected+0x90>
 80094fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d102      	bne.n	8009508 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 8009502:	69b8      	ldr	r0, [r7, #24]
 8009504:	f7ff fb84 	bl	8008c10 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b00      	cmp	r3, #0
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009524:	f023 0304 	bic.w	r3, r3, #4
 8009528:	b2da      	uxtb	r2, r3
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LWIP_ASSERT("blocking connect state error",
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <lwip_netconn_do_connected+0xc4>
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10c      	bne.n	8009556 <lwip_netconn_do_connected+0xde>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <lwip_netconn_do_connected+0xd0>
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d006      	beq.n	8009556 <lwip_netconn_do_connected+0xde>
 8009548:	4b10      	ldr	r3, [pc, #64]	; (800958c <lwip_netconn_do_connected+0x114>)
 800954a:	f240 5232 	movw	r2, #1330	; 0x532
 800954e:	4913      	ldr	r1, [pc, #76]	; (800959c <lwip_netconn_do_connected+0x124>)
 8009550:	4810      	ldr	r0, [pc, #64]	; (8009594 <lwip_netconn_do_connected+0x11c>)
 8009552:	f012 fc89 	bl	801be68 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	2200      	movs	r2, #0
 800955a:	629a      	str	r2, [r3, #40]	; 0x28
  conn->state = NETCONN_NONE;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2200      	movs	r2, #0
 8009560:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <lwip_netconn_do_connected+0xfe>
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	2200      	movs	r2, #0
 8009570:	2102      	movs	r1, #2
 8009572:	69b8      	ldr	r0, [r7, #24]
 8009574:	4798      	blx	r3

  if (was_blocking) {
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 800957c:	69f8      	ldr	r0, [r7, #28]
 800957e:	f00f f9a3 	bl	80188c8 <sys_sem_signal>
  }
  return ERR_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3720      	adds	r7, #32
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	0801d1a4 	.word	0x0801d1a4
 8009590:	0801d56c 	.word	0x0801d56c
 8009594:	0801d1e8 	.word	0x0801d1e8
 8009598:	0801d58c 	.word	0x0801d58c
 800959c:	0801d5cc 	.word	0x0801d5cc

080095a0 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d102      	bne.n	80095bc <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 80095b6:	23f1      	movs	r3, #241	; 0xf1
 80095b8:	75fb      	strb	r3, [r7, #23]
 80095ba:	e0a0      	b.n	80096fe <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095c6:	2b10      	cmp	r3, #16
 80095c8:	d00f      	beq.n	80095ea <lwip_netconn_do_connect+0x4a>
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	f040 808c 	bne.w	80096e8 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6858      	ldr	r0, [r3, #4]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	6899      	ldr	r1, [r3, #8]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	899b      	ldrh	r3, [r3, #12]
 80095de:	461a      	mov	r2, r3
 80095e0:	f00a fc42 	bl	8013e68 <udp_connect>
 80095e4:	4603      	mov	r3, r0
 80095e6:	75fb      	strb	r3, [r7, #23]
        break;
 80095e8:	e089      	b.n	80096fe <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d102      	bne.n	80095fa <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 80095f4:	23f7      	movs	r3, #247	; 0xf7
 80095f6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 80095f8:	e080      	b.n	80096fc <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009604:	23f6      	movs	r3, #246	; 0xf6
 8009606:	75fb      	strb	r3, [r7, #23]
        break;
 8009608:	e078      	b.n	80096fc <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff fafe 	bl	8008c10 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6858      	ldr	r0, [r3, #4]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6899      	ldr	r1, [r3, #8]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	899a      	ldrh	r2, [r3, #12]
 8009622:	4b3b      	ldr	r3, [pc, #236]	; (8009710 <lwip_netconn_do_connect+0x170>)
 8009624:	f004 fa82 	bl	800db2c <tcp_connect>
 8009628:	4603      	mov	r3, r0
 800962a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800962c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d163      	bne.n	80096fc <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	bf14      	ite	ne
 8009644:	2301      	movne	r3, #1
 8009646:	2300      	moveq	r3, #0
 8009648:	b2db      	uxtb	r3, r3
 800964a:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2203      	movs	r2, #3
 8009652:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00b      	beq.n	8009672 <lwip_netconn_do_connect+0xd2>
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f042 0204 	orr.w	r2, r2, #4
 800966a:	b2d2      	uxtb	r2, r2
 800966c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009670:	e00a      	b.n	8009688 <lwip_netconn_do_connect+0xe8>
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0204 	bic.w	r2, r2, #4
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (non_blocking) {
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 800968e:	23fb      	movs	r3, #251	; 0xfb
 8009690:	75fb      	strb	r3, [r7, #23]
        break;
 8009692:	e033      	b.n	80096fc <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	629a      	str	r2, [r3, #40]	; 0x28
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	785b      	ldrb	r3, [r3, #1]
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d006      	beq.n	80096b4 <lwip_netconn_do_connect+0x114>
 80096a6:	4b1b      	ldr	r3, [pc, #108]	; (8009714 <lwip_netconn_do_connect+0x174>)
 80096a8:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80096ac:	491a      	ldr	r1, [pc, #104]	; (8009718 <lwip_netconn_do_connect+0x178>)
 80096ae:	481b      	ldr	r0, [pc, #108]	; (800971c <lwip_netconn_do_connect+0x17c>)
 80096b0:	f012 fbda 	bl	801be68 <iprintf>
              UNLOCK_TCPIP_CORE();
 80096b4:	481a      	ldr	r0, [pc, #104]	; (8009720 <lwip_netconn_do_connect+0x180>)
 80096b6:	f00f f978 	bl	80189aa <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	330c      	adds	r3, #12
 80096c0:	2100      	movs	r1, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f00f f8cf 	bl	8018866 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 80096c8:	4815      	ldr	r0, [pc, #84]	; (8009720 <lwip_netconn_do_connect+0x180>)
 80096ca:	f00f f95f 	bl	801898c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d116      	bne.n	8009706 <lwip_netconn_do_connect+0x166>
 80096d8:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <lwip_netconn_do_connect+0x174>)
 80096da:	f240 5274 	movw	r2, #1396	; 0x574
 80096de:	490e      	ldr	r1, [pc, #56]	; (8009718 <lwip_netconn_do_connect+0x178>)
 80096e0:	480e      	ldr	r0, [pc, #56]	; (800971c <lwip_netconn_do_connect+0x17c>)
 80096e2:	f012 fbc1 	bl	801be68 <iprintf>
              return;
 80096e6:	e00e      	b.n	8009706 <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <lwip_netconn_do_connect+0x174>)
 80096ea:	f240 527f 	movw	r2, #1407	; 0x57f
 80096ee:	490d      	ldr	r1, [pc, #52]	; (8009724 <lwip_netconn_do_connect+0x184>)
 80096f0:	480a      	ldr	r0, [pc, #40]	; (800971c <lwip_netconn_do_connect+0x17c>)
 80096f2:	f012 fbb9 	bl	801be68 <iprintf>
 80096f6:	23fa      	movs	r3, #250	; 0xfa
 80096f8:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 80096fa:	e000      	b.n	80096fe <lwip_netconn_do_connect+0x15e>
        break;
 80096fc:	bf00      	nop
    }
  }
  msg->err = err;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	7dfa      	ldrb	r2, [r7, #23]
 8009702:	711a      	strb	r2, [r3, #4]
 8009704:	e000      	b.n	8009708 <lwip_netconn_do_connect+0x168>
              return;
 8009706:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	08009479 	.word	0x08009479
 8009714:	0801d1a4 	.word	0x0801d1a4
 8009718:	0801d564 	.word	0x0801d564
 800971c:	0801d1e8 	.word	0x0801d1e8
 8009720:	20008df8 	.word	0x20008df8
 8009724:	0801d5ec 	.word	0x0801d5ec

08009728 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800973e:	2b20      	cmp	r3, #32
 8009740:	d109      	bne.n	8009756 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	4618      	mov	r0, r3
 800974a:	f00a fbfb 	bl	8013f44 <udp_disconnect>
    msg->err = ERR_OK;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009754:	e002      	b.n	800975c <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	22fa      	movs	r2, #250	; 0xfa
 800975a:	711a      	strb	r2, [r3, #4]
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe fefd 	bl	8008574 <netconn_err>
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800977e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d135      	bne.n	80097f2 <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d02e      	beq.n	80097ee <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800979a:	2b20      	cmp	r3, #32
 800979c:	d123      	bne.n	80097e6 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10c      	bne.n	80097c2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685a      	ldr	r2, [r3, #4]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4619      	mov	r1, r3
 80097b6:	4610      	mov	r0, r2
 80097b8:	f00a f8e4 	bl	8013984 <udp_send>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80097c0:	e017      	b.n	80097f2 <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6858      	ldr	r0, [r3, #4]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	6819      	ldr	r1, [r3, #0]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f103 0208 	add.w	r2, r3, #8
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	899b      	ldrh	r3, [r3, #12]
 80097dc:	f00a f906 	bl	80139ec <udp_sendto>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
          break;
 80097e4:	e005      	b.n	80097f2 <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80097e6:	23f5      	movs	r3, #245	; 0xf5
 80097e8:	73fb      	strb	r3, [r7, #15]
          break;
 80097ea:	bf00      	nop
 80097ec:	e001      	b.n	80097f2 <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 80097ee:	23f5      	movs	r3, #245	; 0xf5
 80097f0:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	7bfa      	ldrb	r2, [r7, #15]
 80097f6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80097f8:	bf00      	nop
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2200      	movs	r2, #0
 8009810:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d022      	beq.n	8009862 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009826:	2b10      	cmp	r3, #16
 8009828:	d11b      	bne.n	8009862 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009836:	d202      	bcs.n	800983e <lwip_netconn_do_recv+0x3e>
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	b29b      	uxth	r3, r3
 800983c:	e001      	b.n	8009842 <lwip_netconn_do_recv+0x42>
 800983e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009842:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	89fa      	ldrh	r2, [r7, #14]
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f004 f8d6 	bl	800da00 <tcp_recved>
        remaining -= recved;
 8009854:	89fb      	ldrh	r3, [r7, #14]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e6      	bne.n	8009830 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009862:	bf00      	nop
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d106      	bne.n	8009890 <lwip_netconn_do_writemore+0x24>
 8009882:	4b98      	ldr	r3, [pc, #608]	; (8009ae4 <lwip_netconn_do_writemore+0x278>)
 8009884:	f240 6273 	movw	r2, #1651	; 0x673
 8009888:	4997      	ldr	r1, [pc, #604]	; (8009ae8 <lwip_netconn_do_writemore+0x27c>)
 800988a:	4898      	ldr	r0, [pc, #608]	; (8009aec <lwip_netconn_do_writemore+0x280>)
 800988c:	f012 faec 	bl	801be68 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	785b      	ldrb	r3, [r3, #1]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d006      	beq.n	80098a6 <lwip_netconn_do_writemore+0x3a>
 8009898:	4b92      	ldr	r3, [pc, #584]	; (8009ae4 <lwip_netconn_do_writemore+0x278>)
 800989a:	f240 6274 	movw	r2, #1652	; 0x674
 800989e:	4994      	ldr	r1, [pc, #592]	; (8009af0 <lwip_netconn_do_writemore+0x284>)
 80098a0:	4892      	ldr	r0, [pc, #584]	; (8009aec <lwip_netconn_do_writemore+0x280>)
 80098a2:	f012 fae1 	bl	801be68 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <lwip_netconn_do_writemore+0x50>
 80098ae:	4b8d      	ldr	r3, [pc, #564]	; (8009ae4 <lwip_netconn_do_writemore+0x278>)
 80098b0:	f240 6275 	movw	r2, #1653	; 0x675
 80098b4:	498f      	ldr	r1, [pc, #572]	; (8009af4 <lwip_netconn_do_writemore+0x288>)
 80098b6:	488d      	ldr	r0, [pc, #564]	; (8009aec <lwip_netconn_do_writemore+0x280>)
 80098b8:	f012 fad6 	bl	801be68 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d106      	bne.n	80098d2 <lwip_netconn_do_writemore+0x66>
 80098c4:	4b87      	ldr	r3, [pc, #540]	; (8009ae4 <lwip_netconn_do_writemore+0x278>)
 80098c6:	f240 6276 	movw	r2, #1654	; 0x676
 80098ca:	498b      	ldr	r1, [pc, #556]	; (8009af8 <lwip_netconn_do_writemore+0x28c>)
 80098cc:	4887      	ldr	r0, [pc, #540]	; (8009aec <lwip_netconn_do_writemore+0x280>)
 80098ce:	f012 facb 	bl	801be68 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	699a      	ldr	r2, [r3, #24]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d306      	bcc.n	80098f0 <lwip_netconn_do_writemore+0x84>
 80098e2:	4b80      	ldr	r3, [pc, #512]	; (8009ae4 <lwip_netconn_do_writemore+0x278>)
 80098e4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80098e8:	4984      	ldr	r1, [pc, #528]	; (8009afc <lwip_netconn_do_writemore+0x290>)
 80098ea:	4880      	ldr	r0, [pc, #512]	; (8009aec <lwip_netconn_do_writemore+0x280>)
 80098ec:	f012 fabc 	bl	801be68 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f4:	899b      	ldrh	r3, [r3, #12]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d106      	bne.n	8009908 <lwip_netconn_do_writemore+0x9c>
 80098fa:	4b7a      	ldr	r3, [pc, #488]	; (8009ae4 <lwip_netconn_do_writemore+0x278>)
 80098fc:	f240 6279 	movw	r2, #1657	; 0x679
 8009900:	497f      	ldr	r1, [pc, #508]	; (8009b00 <lwip_netconn_do_writemore+0x294>)
 8009902:	487a      	ldr	r0, [pc, #488]	; (8009aec <lwip_netconn_do_writemore+0x280>)
 8009904:	f012 fab0 	bl	801be68 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	7f1b      	ldrb	r3, [r3, #28]
 800990e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d104      	bne.n	8009928 <lwip_netconn_do_writemore+0xbc>
 800991e:	7ebb      	ldrb	r3, [r7, #26]
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <lwip_netconn_do_writemore+0xc0>
 8009928:	2301      	movs	r3, #1
 800992a:	e000      	b.n	800992e <lwip_netconn_do_writemore+0xc2>
 800992c:	2300      	movs	r3, #0
 800992e:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	4413      	add	r3, r2
 8009940:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800995a:	d307      	bcc.n	800996c <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800995c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009960:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009962:	7ebb      	ldrb	r3, [r7, #26]
 8009964:	f043 0302 	orr.w	r3, r3, #2
 8009968:	76bb      	strb	r3, [r7, #26]
 800996a:	e001      	b.n	8009970 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009978:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800997a:	89fa      	ldrh	r2, [r7, #14]
 800997c:	8bbb      	ldrh	r3, [r7, #28]
 800997e:	429a      	cmp	r2, r3
 8009980:	d216      	bcs.n	80099b0 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8009982:	89fb      	ldrh	r3, [r7, #14]
 8009984:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009986:	7e3b      	ldrb	r3, [r7, #24]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00d      	beq.n	80099a8 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800998c:	8bbb      	ldrh	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10e      	bne.n	80099b0 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <lwip_netconn_do_writemore+0x136>
 800999c:	f06f 0306 	mvn.w	r3, #6
 80099a0:	e000      	b.n	80099a4 <lwip_netconn_do_writemore+0x138>
 80099a2:	2300      	movs	r3, #0
 80099a4:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80099a6:	e07d      	b.n	8009aa4 <lwip_netconn_do_writemore+0x238>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80099a8:	7ebb      	ldrb	r3, [r7, #26]
 80099aa:	f043 0302 	orr.w	r3, r3, #2
 80099ae:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b4:	691a      	ldr	r2, [r3, #16]
 80099b6:	8bbb      	ldrh	r3, [r7, #28]
 80099b8:	441a      	add	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d906      	bls.n	80099d4 <lwip_netconn_do_writemore+0x168>
 80099c6:	4b47      	ldr	r3, [pc, #284]	; (8009ae4 <lwip_netconn_do_writemore+0x278>)
 80099c8:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80099cc:	494d      	ldr	r1, [pc, #308]	; (8009b04 <lwip_netconn_do_writemore+0x298>)
 80099ce:	4847      	ldr	r0, [pc, #284]	; (8009aec <lwip_netconn_do_writemore+0x280>)
 80099d0:	f012 fa4a 	bl	801be68 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80099d4:	8bbb      	ldrh	r3, [r7, #28]
 80099d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099da:	4293      	cmp	r3, r2
 80099dc:	d103      	bne.n	80099e6 <lwip_netconn_do_writemore+0x17a>
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e4:	d209      	bcs.n	80099fa <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80099ea:	8bba      	ldrh	r2, [r7, #28]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d10b      	bne.n	8009a08 <lwip_netconn_do_writemore+0x19c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f4:	899b      	ldrh	r3, [r3, #12]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d906      	bls.n	8009a08 <lwip_netconn_do_writemore+0x19c>
        write_more = 1;
 80099fa:	2301      	movs	r3, #1
 80099fc:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80099fe:	7ebb      	ldrb	r3, [r7, #26]
 8009a00:	f043 0302 	orr.w	r3, r3, #2
 8009a04:	76bb      	strb	r3, [r7, #26]
 8009a06:	e001      	b.n	8009a0c <lwip_netconn_do_writemore+0x1a0>
      } else {
        write_more = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6858      	ldr	r0, [r3, #4]
 8009a10:	7ebb      	ldrb	r3, [r7, #26]
 8009a12:	8bba      	ldrh	r2, [r7, #28]
 8009a14:	6979      	ldr	r1, [r7, #20]
 8009a16:	f007 ff09 	bl	801182c <tcp_write>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d12c      	bne.n	8009a80 <lwip_netconn_do_writemore+0x214>
        conn->current_msg->msg.w.offset += len;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2a:	6999      	ldr	r1, [r3, #24]
 8009a2c:	8bba      	ldrh	r2, [r7, #28]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	440a      	add	r2, r1
 8009a34:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	6919      	ldr	r1, [r3, #16]
 8009a3c:	8bba      	ldrh	r2, [r7, #28]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	440a      	add	r2, r1
 8009a44:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d113      	bne.n	8009a80 <lwip_netconn_do_writemore+0x214>
          conn->current_msg->msg.w.vector_cnt--;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5c:	899a      	ldrh	r2, [r3, #12]
 8009a5e:	3a01      	subs	r2, #1
 8009a60:	b292      	uxth	r2, r2
 8009a62:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a68:	899b      	ldrh	r3, [r3, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d008      	beq.n	8009a80 <lwip_netconn_do_writemore+0x214>
            conn->current_msg->msg.w.vector++;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	3208      	adds	r2, #8
 8009a76:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009a80:	7e7b      	ldrb	r3, [r7, #25]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <lwip_netconn_do_writemore+0x224>
 8009a86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f43f af50 	beq.w	8009930 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009a90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d004      	beq.n	8009aa2 <lwip_netconn_do_writemore+0x236>
 8009a98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa0:	d149      	bne.n	8009b36 <lwip_netconn_do_writemore+0x2ca>
err_mem:
 8009aa2:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009aa4:	7e3b      	ldrb	r3, [r7, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d02e      	beq.n	8009b08 <lwip_netconn_do_writemore+0x29c>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	699a      	ldr	r2, [r3, #24]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d226      	bcs.n	8009b08 <lwip_netconn_do_writemore+0x29c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d005      	beq.n	8009ace <lwip_netconn_do_writemore+0x262>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2103      	movs	r1, #3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ad4:	f043 0310 	orr.w	r3, r3, #16
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009ae0:	e029      	b.n	8009b36 <lwip_netconn_do_writemore+0x2ca>
 8009ae2:	bf00      	nop
 8009ae4:	0801d1a4 	.word	0x0801d1a4
 8009ae8:	0801d2fc 	.word	0x0801d2fc
 8009aec:	0801d1e8 	.word	0x0801d1e8
 8009af0:	0801d604 	.word	0x0801d604
 8009af4:	0801d30c 	.word	0x0801d30c
 8009af8:	0801d624 	.word	0x0801d624
 8009afc:	0801d63c 	.word	0x0801d63c
 8009b00:	0801d67c 	.word	0x0801d67c
 8009b04:	0801d6a4 	.word	0x0801d6a4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b10:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009b14:	d305      	bcc.n	8009b22 <lwip_netconn_do_writemore+0x2b6>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d909      	bls.n	8009b36 <lwip_netconn_do_writemore+0x2ca>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d005      	beq.n	8009b36 <lwip_netconn_do_writemore+0x2ca>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2103      	movs	r1, #3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009b36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d11d      	bne.n	8009b7a <lwip_netconn_do_writemore+0x30e>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d002      	beq.n	8009b54 <lwip_netconn_do_writemore+0x2e8>
 8009b4e:	7e3b      	ldrb	r3, [r7, #24]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <lwip_netconn_do_writemore+0x2ec>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009b54:	2301      	movs	r3, #1
 8009b56:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f008 fc51 	bl	8012404 <tcp_output>
 8009b62:	4603      	mov	r3, r0
 8009b64:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009b66:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009b6a:	f113 0f04 	cmn.w	r3, #4
 8009b6e:	d12c      	bne.n	8009bca <lwip_netconn_do_writemore+0x35e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009b70:	7b3b      	ldrb	r3, [r7, #12]
 8009b72:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009b74:	2301      	movs	r3, #1
 8009b76:	76fb      	strb	r3, [r7, #27]
 8009b78:	e027      	b.n	8009bca <lwip_netconn_do_writemore+0x35e>
      }
    } else if (err == ERR_MEM) {
 8009b7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d120      	bne.n	8009bc6 <lwip_netconn_do_writemore+0x35a>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f008 fc3b 	bl	8012404 <tcp_output>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009b92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009b96:	f113 0f04 	cmn.w	r3, #4
 8009b9a:	d104      	bne.n	8009ba6 <lwip_netconn_do_writemore+0x33a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009b9c:	7b7b      	ldrb	r3, [r7, #13]
 8009b9e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	76fb      	strb	r3, [r7, #27]
 8009ba4:	e011      	b.n	8009bca <lwip_netconn_do_writemore+0x35e>
      } else if (dontblock) {
 8009ba6:	7e3b      	ldrb	r3, [r7, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <lwip_netconn_do_writemore+0x35e>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <lwip_netconn_do_writemore+0x350>
 8009bb6:	f06f 0306 	mvn.w	r3, #6
 8009bba:	e000      	b.n	8009bbe <lwip_netconn_do_writemore+0x352>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	76fb      	strb	r3, [r7, #27]
 8009bc4:	e001      	b.n	8009bca <lwip_netconn_do_writemore+0x35e>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009bca:	7efb      	ldrb	r3, [r7, #27]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d015      	beq.n	8009bfc <lwip_netconn_do_writemore+0x390>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bde:	7ffa      	ldrb	r2, [r7, #31]
 8009be0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d006      	beq.n	8009c02 <lwip_netconn_do_writemore+0x396>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009bf4:	68b8      	ldr	r0, [r7, #8]
 8009bf6:	f00e fe67 	bl	80188c8 <sys_sem_signal>
 8009bfa:	e002      	b.n	8009c02 <lwip_netconn_do_writemore+0x396>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8009c00:	e000      	b.n	8009c04 <lwip_netconn_do_writemore+0x398>
  }
#endif
  return ERR_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3720      	adds	r7, #32
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fca9 	bl	8008574 <netconn_err>
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d166      	bne.n	8009cfc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c38:	2b10      	cmp	r3, #16
 8009c3a:	d15d      	bne.n	8009cf8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009c46:	23fb      	movs	r3, #251	; 0xfb
 8009c48:	73fb      	strb	r3, [r7, #15]
 8009c4a:	e057      	b.n	8009cfc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d04d      	beq.n	8009cf2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d006      	beq.n	8009c76 <lwip_netconn_do_write+0x6a>
 8009c68:	4b28      	ldr	r3, [pc, #160]	; (8009d0c <lwip_netconn_do_write+0x100>)
 8009c6a:	f240 7223 	movw	r2, #1827	; 0x723
 8009c6e:	4928      	ldr	r1, [pc, #160]	; (8009d10 <lwip_netconn_do_write+0x104>)
 8009c70:	4828      	ldr	r0, [pc, #160]	; (8009d14 <lwip_netconn_do_write+0x108>)
 8009c72:	f012 f8f9 	bl	801be68 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <lwip_netconn_do_write+0x80>
 8009c7e:	4b23      	ldr	r3, [pc, #140]	; (8009d0c <lwip_netconn_do_write+0x100>)
 8009c80:	f240 7224 	movw	r2, #1828	; 0x724
 8009c84:	4924      	ldr	r1, [pc, #144]	; (8009d18 <lwip_netconn_do_write+0x10c>)
 8009c86:	4823      	ldr	r0, [pc, #140]	; (8009d14 <lwip_netconn_do_write+0x108>)
 8009c88:	f012 f8ee 	bl	801be68 <iprintf>
        msg->conn->current_msg = msg;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2100      	movs	r1, #0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff fde6 	bl	800986c <lwip_netconn_do_writemore>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d02e      	beq.n	8009d04 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	785b      	ldrb	r3, [r3, #1]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d006      	beq.n	8009cbe <lwip_netconn_do_write+0xb2>
 8009cb0:	4b16      	ldr	r3, [pc, #88]	; (8009d0c <lwip_netconn_do_write+0x100>)
 8009cb2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009cb6:	4919      	ldr	r1, [pc, #100]	; (8009d1c <lwip_netconn_do_write+0x110>)
 8009cb8:	4816      	ldr	r0, [pc, #88]	; (8009d14 <lwip_netconn_do_write+0x108>)
 8009cba:	f012 f8d5 	bl	801be68 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009cbe:	4818      	ldr	r0, [pc, #96]	; (8009d20 <lwip_netconn_do_write+0x114>)
 8009cc0:	f00e fe73 	bl	80189aa <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	330c      	adds	r3, #12
 8009cca:	2100      	movs	r1, #0
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f00e fdca 	bl	8018866 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009cd2:	4813      	ldr	r0, [pc, #76]	; (8009d20 <lwip_netconn_do_write+0x114>)
 8009cd4:	f00e fe5a 	bl	801898c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d110      	bne.n	8009d04 <lwip_netconn_do_write+0xf8>
 8009ce2:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <lwip_netconn_do_write+0x100>)
 8009ce4:	f240 722c 	movw	r2, #1836	; 0x72c
 8009ce8:	490c      	ldr	r1, [pc, #48]	; (8009d1c <lwip_netconn_do_write+0x110>)
 8009cea:	480a      	ldr	r0, [pc, #40]	; (8009d14 <lwip_netconn_do_write+0x108>)
 8009cec:	f012 f8bc 	bl	801be68 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009cf0:	e008      	b.n	8009d04 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009cf2:	23f5      	movs	r3, #245	; 0xf5
 8009cf4:	73fb      	strb	r3, [r7, #15]
 8009cf6:	e001      	b.n	8009cfc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009cf8:	23fa      	movs	r3, #250	; 0xfa
 8009cfa:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	7bfa      	ldrb	r2, [r7, #15]
 8009d00:	711a      	strb	r2, [r3, #4]
 8009d02:	e000      	b.n	8009d06 <lwip_netconn_do_write+0xfa>
        return;
 8009d04:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	0801d1a4 	.word	0x0801d1a4
 8009d10:	0801d548 	.word	0x0801d548
 8009d14:	0801d1e8 	.word	0x0801d1e8
 8009d18:	0801d6d0 	.word	0x0801d6d0
 8009d1c:	0801d564 	.word	0x0801d564
 8009d20:	20008df8 	.word	0x20008df8

08009d24 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d06c      	beq.n	8009e14 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	7c1b      	ldrb	r3, [r3, #16]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	6812      	ldr	r2, [r2, #0]
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	e006      	b.n	8009d60 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	6852      	ldr	r2, [r2, #4]
 8009d5e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d70:	2b10      	cmp	r3, #16
 8009d72:	d021      	beq.n	8009db8 <lwip_netconn_do_getaddr+0x94>
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d144      	bne.n	8009e02 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	7c1b      	ldrb	r3, [r3, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	8a52      	ldrh	r2, [r2, #18]
 8009d8c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 8009d8e:	e044      	b.n	8009e1a <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	7c1b      	ldrb	r3, [r3, #16]
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d103      	bne.n	8009da8 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	22f5      	movs	r2, #245	; 0xf5
 8009da4:	711a      	strb	r2, [r3, #4]
        break;
 8009da6:	e038      	b.n	8009e1a <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	8a92      	ldrh	r2, [r2, #20]
 8009db4:	801a      	strh	r2, [r3, #0]
        break;
 8009db6:	e030      	b.n	8009e1a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	7c1b      	ldrb	r3, [r3, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10f      	bne.n	8009de0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d005      	beq.n	8009dd8 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	7d1b      	ldrb	r3, [r3, #20]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d103      	bne.n	8009de0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	22f5      	movs	r2, #245	; 0xf5
 8009ddc:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 8009dde:	e01c      	b.n	8009e1a <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	7c1b      	ldrb	r3, [r3, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d004      	beq.n	8009df2 <lwip_netconn_do_getaddr+0xce>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	8adb      	ldrh	r3, [r3, #22]
 8009df0:	e003      	b.n	8009dfa <lwip_netconn_do_getaddr+0xd6>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	8b1b      	ldrh	r3, [r3, #24]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	68d2      	ldr	r2, [r2, #12]
 8009dfe:	8013      	strh	r3, [r2, #0]
        break;
 8009e00:	e00b      	b.n	8009e1a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 8009e02:	4b08      	ldr	r3, [pc, #32]	; (8009e24 <lwip_netconn_do_getaddr+0x100>)
 8009e04:	f240 727d 	movw	r2, #1917	; 0x77d
 8009e08:	4907      	ldr	r1, [pc, #28]	; (8009e28 <lwip_netconn_do_getaddr+0x104>)
 8009e0a:	4808      	ldr	r0, [pc, #32]	; (8009e2c <lwip_netconn_do_getaddr+0x108>)
 8009e0c:	f012 f82c 	bl	801be68 <iprintf>
        break;
 8009e10:	bf00      	nop
 8009e12:	e002      	b.n	8009e1a <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	22f5      	movs	r2, #245	; 0xf5
 8009e18:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	0801d1a4 	.word	0x0801d1a4
 8009e28:	0801d6e4 	.word	0x0801d6e4
 8009e2c:	0801d1e8 	.word	0x0801d1e8

08009e30 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	785b      	ldrb	r3, [r3, #1]
 8009e42:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d069      	beq.n	8009f22 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009e58:	2b10      	cmp	r3, #16
 8009e5a:	d162      	bne.n	8009f22 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009e60:	2b03      	cmp	r3, #3
 8009e62:	d002      	beq.n	8009e6a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d05b      	beq.n	8009f22 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d103      	bne.n	8009e78 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	22f5      	movs	r2, #245	; 0xf5
 8009e74:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009e76:	e059      	b.n	8009f2c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009e78:	7afb      	ldrb	r3, [r7, #11]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d103      	bne.n	8009e86 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	22fb      	movs	r2, #251	; 0xfb
 8009e82:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009e84:	e052      	b.n	8009f2c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	7a1b      	ldrb	r3, [r3, #8]
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff f824 	bl	8008ee4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d006      	beq.n	8009eb4 <lwip_netconn_do_close+0x84>
 8009ea6:	4b23      	ldr	r3, [pc, #140]	; (8009f34 <lwip_netconn_do_close+0x104>)
 8009ea8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009eac:	4922      	ldr	r1, [pc, #136]	; (8009f38 <lwip_netconn_do_close+0x108>)
 8009eae:	4823      	ldr	r0, [pc, #140]	; (8009f3c <lwip_netconn_do_close+0x10c>)
 8009eb0:	f011 ffda 	bl	801be68 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2204      	movs	r2, #4
 8009eba:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff f888 	bl	8008fe0 <lwip_netconn_do_close_internal>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d029      	beq.n	8009f2a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	d006      	beq.n	8009eee <lwip_netconn_do_close+0xbe>
 8009ee0:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <lwip_netconn_do_close+0x104>)
 8009ee2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009ee6:	4916      	ldr	r1, [pc, #88]	; (8009f40 <lwip_netconn_do_close+0x110>)
 8009ee8:	4814      	ldr	r0, [pc, #80]	; (8009f3c <lwip_netconn_do_close+0x10c>)
 8009eea:	f011 ffbd 	bl	801be68 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009eee:	4815      	ldr	r0, [pc, #84]	; (8009f44 <lwip_netconn_do_close+0x114>)
 8009ef0:	f00e fd5b 	bl	80189aa <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	330c      	adds	r3, #12
 8009efa:	2100      	movs	r1, #0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f00e fcb2 	bl	8018866 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009f02:	4810      	ldr	r0, [pc, #64]	; (8009f44 <lwip_netconn_do_close+0x114>)
 8009f04:	f00e fd42 	bl	801898c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00b      	beq.n	8009f2a <lwip_netconn_do_close+0xfa>
 8009f12:	4b08      	ldr	r3, [pc, #32]	; (8009f34 <lwip_netconn_do_close+0x104>)
 8009f14:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009f18:	4909      	ldr	r1, [pc, #36]	; (8009f40 <lwip_netconn_do_close+0x110>)
 8009f1a:	4808      	ldr	r0, [pc, #32]	; (8009f3c <lwip_netconn_do_close+0x10c>)
 8009f1c:	f011 ffa4 	bl	801be68 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009f20:	e003      	b.n	8009f2a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	22f5      	movs	r2, #245	; 0xf5
 8009f26:	711a      	strb	r2, [r3, #4]
 8009f28:	e000      	b.n	8009f2c <lwip_netconn_do_close+0xfc>
      return;
 8009f2a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	0801d1a4 	.word	0x0801d1a4
 8009f38:	0801d548 	.word	0x0801d548
 8009f3c:	0801d1e8 	.word	0x0801d1e8
 8009f40:	0801d564 	.word	0x0801d564
 8009f44:	20008df8 	.word	0x20008df8

08009f48 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8009f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dc04      	bgt.n	8009f64 <err_to_errno+0x1c>
 8009f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f5e:	425b      	negs	r3, r3
 8009f60:	2b10      	cmp	r3, #16
 8009f62:	dd01      	ble.n	8009f68 <err_to_errno+0x20>
    return EIO;
 8009f64:	2305      	movs	r3, #5
 8009f66:	e005      	b.n	8009f74 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8009f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f6c:	425b      	negs	r3, r3
 8009f6e:	4a04      	ldr	r2, [pc, #16]	; (8009f80 <err_to_errno+0x38>)
 8009f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	08020de4 	.word	0x08020de4

08009f84 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d013      	beq.n	8009fba <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00b      	beq.n	8009fb2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f002 fed2 	bl	800cd48 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	605a      	str	r2, [r3, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	2006      	movs	r0, #6
 8009fb6:	f001 ffe9 	bl	800bf8c <memp_free>
  }
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <netbuf_free+0x1c>
 8009fd2:	4b0d      	ldr	r3, [pc, #52]	; (800a008 <netbuf_free+0x44>)
 8009fd4:	2281      	movs	r2, #129	; 0x81
 8009fd6:	490d      	ldr	r1, [pc, #52]	; (800a00c <netbuf_free+0x48>)
 8009fd8:	480d      	ldr	r0, [pc, #52]	; (800a010 <netbuf_free+0x4c>)
 8009fda:	f011 ff45 	bl	801be68 <iprintf>
 8009fde:	e00f      	b.n	800a000 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f002 feab 	bl	800cd48 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	605a      	str	r2, [r3, #4]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	0801d6fc 	.word	0x0801d6fc
 800a00c:	0801d798 	.word	0x0801d798
 800a010:	0801d74c 	.word	0x0801d74c

0800a014 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d108      	bne.n	800a03a <netbuf_ref+0x26>
 800a028:	4b1c      	ldr	r3, [pc, #112]	; (800a09c <netbuf_ref+0x88>)
 800a02a:	2299      	movs	r2, #153	; 0x99
 800a02c:	491c      	ldr	r1, [pc, #112]	; (800a0a0 <netbuf_ref+0x8c>)
 800a02e:	481d      	ldr	r0, [pc, #116]	; (800a0a4 <netbuf_ref+0x90>)
 800a030:	f011 ff1a 	bl	801be68 <iprintf>
 800a034:	f06f 030f 	mvn.w	r3, #15
 800a038:	e02b      	b.n	800a092 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d004      	beq.n	800a04c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4618      	mov	r0, r3
 800a048:	f002 fe7e 	bl	800cd48 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800a04c:	2241      	movs	r2, #65	; 0x41
 800a04e:	2100      	movs	r1, #0
 800a050:	2036      	movs	r0, #54	; 0x36
 800a052:	f002 fb67 	bl	800c724 <pbuf_alloc>
 800a056:	4602      	mov	r2, r0
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d105      	bne.n	800a070 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295
 800a06e:	e010      	b.n	800a092 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	88fa      	ldrh	r2, [r7, #6]
 800a07e:	811a      	strh	r2, [r3, #8]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	6812      	ldr	r2, [r2, #0]
 800a084:	891b      	ldrh	r3, [r3, #8]
 800a086:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	0801d6fc 	.word	0x0801d6fc
 800a0a0:	0801d7b4 	.word	0x0801d7b4
 800a0a4:	0801d74c 	.word	0x0801d74c

0800a0a8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	db02      	blt.n	800a0c0 <tryget_socket_unconn_nouse+0x18>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	dd01      	ble.n	800a0c4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	e003      	b.n	800a0cc <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	011b      	lsls	r3, r3, #4
 800a0c8:	4a03      	ldr	r2, [pc, #12]	; (800a0d8 <tryget_socket_unconn_nouse+0x30>)
 800a0ca:	4413      	add	r3, r2
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	20008358 	.word	0x20008358

0800a0dc <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff ffdf 	bl	800a0a8 <tryget_socket_unconn_nouse>
 800a0ea:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff ffec 	bl	800a0dc <tryget_socket_unconn>
 800a104:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d005      	beq.n	800a118 <tryget_socket+0x22>
    if (sock->conn) {
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <tryget_socket+0x22>
      return sock;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	e000      	b.n	800a11a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff ffe2 	bl	800a0f6 <tryget_socket>
 800a132:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d104      	bne.n	800a144 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800a13a:	4b05      	ldr	r3, [pc, #20]	; (800a150 <get_socket+0x2c>)
 800a13c:	2209      	movs	r2, #9
 800a13e:	601a      	str	r2, [r3, #0]
    return NULL;
 800a140:	2300      	movs	r3, #0
 800a142:	e000      	b.n	800a146 <get_socket+0x22>
  }
  return sock;
 800a144:	68fb      	ldr	r3, [r7, #12]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	2000c594 	.word	0x2000c594

0800a154 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a15e:	2300      	movs	r3, #0
 800a160:	60fb      	str	r3, [r7, #12]
 800a162:	e052      	b.n	800a20a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800a164:	f00e fc54 	bl	8018a10 <sys_arch_protect>
 800a168:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800a16a:	4a2c      	ldr	r2, [pc, #176]	; (800a21c <alloc_socket+0xc8>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	011b      	lsls	r3, r3, #4
 800a170:	4413      	add	r3, r2
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d142      	bne.n	800a1fe <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800a178:	4a28      	ldr	r2, [pc, #160]	; (800a21c <alloc_socket+0xc8>)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	4413      	add	r3, r2
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800a184:	68b8      	ldr	r0, [r7, #8]
 800a186:	f00e fc51 	bl	8018a2c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800a18a:	4a24      	ldr	r2, [pc, #144]	; (800a21c <alloc_socket+0xc8>)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	4413      	add	r3, r2
 800a192:	3304      	adds	r3, #4
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a198:	4a20      	ldr	r2, [pc, #128]	; (800a21c <alloc_socket+0xc8>)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	4413      	add	r3, r2
 800a1a0:	330e      	adds	r3, #14
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d006      	beq.n	800a1b6 <alloc_socket+0x62>
 800a1a8:	4b1d      	ldr	r3, [pc, #116]	; (800a220 <alloc_socket+0xcc>)
 800a1aa:	f240 220e 	movw	r2, #526	; 0x20e
 800a1ae:	491d      	ldr	r1, [pc, #116]	; (800a224 <alloc_socket+0xd0>)
 800a1b0:	481d      	ldr	r0, [pc, #116]	; (800a228 <alloc_socket+0xd4>)
 800a1b2:	f011 fe59 	bl	801be68 <iprintf>
      sockets[i].rcvevent   = 0;
 800a1b6:	4a19      	ldr	r2, [pc, #100]	; (800a21c <alloc_socket+0xc8>)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	4413      	add	r3, r2
 800a1be:	3308      	adds	r3, #8
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1cc:	2b10      	cmp	r3, #16
 800a1ce:	d102      	bne.n	800a1d6 <alloc_socket+0x82>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <alloc_socket+0x86>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e000      	b.n	800a1dc <alloc_socket+0x88>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	b299      	uxth	r1, r3
 800a1de:	4a0f      	ldr	r2, [pc, #60]	; (800a21c <alloc_socket+0xc8>)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	011b      	lsls	r3, r3, #4
 800a1e4:	4413      	add	r3, r2
 800a1e6:	330a      	adds	r3, #10
 800a1e8:	460a      	mov	r2, r1
 800a1ea:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800a1ec:	4a0b      	ldr	r2, [pc, #44]	; (800a21c <alloc_socket+0xc8>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	011b      	lsls	r3, r3, #4
 800a1f2:	4413      	add	r3, r2
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	e00a      	b.n	800a214 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800a1fe:	68b8      	ldr	r0, [r7, #8]
 800a200:	f00e fc14 	bl	8018a2c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3301      	adds	r3, #1
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	dda9      	ble.n	800a164 <alloc_socket+0x10>
  }
  return -1;
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20008358 	.word	0x20008358
 800a220:	0801d894 	.word	0x0801d894
 800a224:	0801d8c8 	.word	0x0801d8c8
 800a228:	0801d8e8 	.word	0x0801d8e8

0800a22c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	6852      	ldr	r2, [r2, #4]
 800a240:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
  return 1;
 800a256:	2301      	movs	r3, #1
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00d      	beq.n	800a294 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d005      	beq.n	800a28a <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f002 fd60 	bl	800cd48 <pbuf_free>
 800a288:	e004      	b.n	800a294 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff fe78 	bl	8009f84 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d002      	beq.n	800a2a0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800a29a:	68b8      	ldr	r0, [r7, #8]
 800a29c:	f7fd fd52 	bl	8007d44 <netconn_delete>
  }
}
 800a2a0:	bf00      	nop
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800a2b2:	f00e fbad 	bl	8018a10 <sys_arch_protect>
 800a2b6:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800a2b8:	f107 0308 	add.w	r3, r7, #8
 800a2bc:	f107 020c 	add.w	r2, r7, #12
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7ff ffb2 	bl	800a22c <free_socket_locked>
 800a2c8:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800a2ca:	6978      	ldr	r0, [r7, #20]
 800a2cc:	f00e fbae 	bl	8018a2c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d006      	beq.n	800a2e4 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f107 0208 	add.w	r2, r7, #8
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6838      	ldr	r0, [r7, #0]
 800a2e0:	f7ff ffc0 	bl	800a264 <free_socket_free_elements>
  }
}
 800a2e4:	bf00      	nop
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff ff13 	bl	800a124 <get_socket>
 800a2fe:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <lwip_close+0x20>
    return -1;
 800a306:	f04f 33ff 	mov.w	r3, #4294967295
 800a30a:	e039      	b.n	800a380 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00b      	beq.n	800a32c <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a31e:	2b10      	cmp	r3, #16
 800a320:	bf0c      	ite	eq
 800a322:	2301      	moveq	r3, #1
 800a324:	2300      	movne	r3, #0
 800a326:	b2db      	uxtb	r3, r3
 800a328:	617b      	str	r3, [r7, #20]
 800a32a:	e00a      	b.n	800a342 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d006      	beq.n	800a342 <lwip_close+0x56>
 800a334:	4b14      	ldr	r3, [pc, #80]	; (800a388 <lwip_close+0x9c>)
 800a336:	f44f 7245 	mov.w	r2, #788	; 0x314
 800a33a:	4914      	ldr	r1, [pc, #80]	; (800a38c <lwip_close+0xa0>)
 800a33c:	4814      	ldr	r0, [pc, #80]	; (800a390 <lwip_close+0xa4>)
 800a33e:	f011 fd93 	bl	801be68 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	f7fd fcd8 	bl	8007cfc <netconn_prepare_delete>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00e      	beq.n	800a376 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800a358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff fdf3 	bl	8009f48 <err_to_errno>
 800a362:	60b8      	str	r0, [r7, #8]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <lwip_close+0x84>
 800a36a:	4a0a      	ldr	r2, [pc, #40]	; (800a394 <lwip_close+0xa8>)
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	e004      	b.n	800a380 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	6938      	ldr	r0, [r7, #16]
 800a37a:	f7ff ff95 	bl	800a2a8 <free_socket>
  set_errno(0);
  return 0;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	0801d894 	.word	0x0801d894
 800a38c:	0801d954 	.word	0x0801d954
 800a390:	0801d8e8 	.word	0x0801d8e8
 800a394:	2000c594 	.word	0x2000c594

0800a398 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08c      	sub	sp, #48	; 0x30
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f7ff febd 	bl	800a124 <get_socket>
 800a3aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <lwip_connect+0x20>
    return -1;
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b6:	e062      	b.n	800a47e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	785b      	ldrb	r3, [r3, #1]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d108      	bne.n	800a3d2 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fd fd63 	bl	8007e90 <netconn_disconnect>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a3d0:	e039      	b.n	800a446 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b10      	cmp	r3, #16
 800a3d6:	d10c      	bne.n	800a3f2 <lwip_connect+0x5a>
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	785b      	ldrb	r3, [r3, #1]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <lwip_connect+0x50>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d104      	bne.n	800a3f2 <lwip_connect+0x5a>
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d014      	beq.n	800a41c <lwip_connect+0x84>
 800a3f2:	4b25      	ldr	r3, [pc, #148]	; (800a488 <lwip_connect+0xf0>)
 800a3f4:	f240 3249 	movw	r2, #841	; 0x349
 800a3f8:	4924      	ldr	r1, [pc, #144]	; (800a48c <lwip_connect+0xf4>)
 800a3fa:	4825      	ldr	r0, [pc, #148]	; (800a490 <lwip_connect+0xf8>)
 800a3fc:	f011 fd34 	bl	801be68 <iprintf>
 800a400:	f06f 000f 	mvn.w	r0, #15
 800a404:	f7ff fda0 	bl	8009f48 <err_to_errno>
 800a408:	6238      	str	r0, [r7, #32]
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <lwip_connect+0x7e>
 800a410:	4a20      	ldr	r2, [pc, #128]	; (800a494 <lwip_connect+0xfc>)
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	f04f 33ff 	mov.w	r3, #4294967295
 800a41a:	e030      	b.n	800a47e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	617b      	str	r3, [r7, #20]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	885b      	ldrh	r3, [r3, #2]
 800a426:	4618      	mov	r0, r3
 800a428:	f001 f8a8 	bl	800b57c <lwip_htons>
 800a42c:	4603      	mov	r3, r0
 800a42e:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a436:	f107 0114 	add.w	r1, r7, #20
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fd fcf0 	bl	8007e20 <netconn_connect>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 800a446:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00e      	beq.n	800a46c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a44e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a452:	4618      	mov	r0, r3
 800a454:	f7ff fd78 	bl	8009f48 <err_to_errno>
 800a458:	61b8      	str	r0, [r7, #24]
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <lwip_connect+0xce>
 800a460:	4a0c      	ldr	r2, [pc, #48]	; (800a494 <lwip_connect+0xfc>)
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a466:	f04f 33ff 	mov.w	r3, #4294967295
 800a46a:	e008      	b.n	800a47e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <lwip_connect+0xe4>
 800a476:	4a07      	ldr	r2, [pc, #28]	; (800a494 <lwip_connect+0xfc>)
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3730      	adds	r7, #48	; 0x30
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	0801d894 	.word	0x0801d894
 800a48c:	0801d96c 	.word	0x0801d96c
 800a490:	0801d8e8 	.word	0x0801d8e8
 800a494:	2000c594 	.word	0x2000c594

0800a498 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08c      	sub	sp, #48	; 0x30
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	db01      	blt.n	800a4ba <lwip_recv_tcp+0x22>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	e001      	b.n	800a4be <lwip_recv_tcp+0x26>
 800a4ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <lwip_recv_tcp+0x3c>
 800a4c6:	4b74      	ldr	r3, [pc, #464]	; (800a698 <lwip_recv_tcp+0x200>)
 800a4c8:	f240 329e 	movw	r2, #926	; 0x39e
 800a4cc:	4973      	ldr	r1, [pc, #460]	; (800a69c <lwip_recv_tcp+0x204>)
 800a4ce:	4874      	ldr	r0, [pc, #464]	; (800a6a0 <lwip_recv_tcp+0x208>)
 800a4d0:	f011 fcca 	bl	801be68 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4de:	2b10      	cmp	r3, #16
 800a4e0:	d006      	beq.n	800a4f0 <lwip_recv_tcp+0x58>
 800a4e2:	4b6d      	ldr	r3, [pc, #436]	; (800a698 <lwip_recv_tcp+0x200>)
 800a4e4:	f240 329f 	movw	r2, #927	; 0x39f
 800a4e8:	496e      	ldr	r1, [pc, #440]	; (800a6a4 <lwip_recv_tcp+0x20c>)
 800a4ea:	486d      	ldr	r0, [pc, #436]	; (800a6a0 <lwip_recv_tcp+0x208>)
 800a4ec:	f011 fcbc 	bl	801be68 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	f003 0308 	and.w	r3, r3, #8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d005      	beq.n	800a506 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800a4fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4fe:	f043 0304 	orr.w	r3, r3, #4
 800a502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	e036      	b.n	800a584 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a51e:	f107 0114 	add.w	r1, r7, #20
 800a522:	4618      	mov	r0, r3
 800a524:	f7fd fe9e 	bl	8008264 <netconn_recv_tcp_pbuf_flags>
 800a528:	4603      	mov	r3, r0
 800a52a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800a52e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a532:	2b00      	cmp	r3, #0
 800a534:	d019      	beq.n	800a56a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f300 808d 	bgt.w	800a658 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800a53e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff fd00 	bl	8009f48 <err_to_errno>
 800a548:	61f8      	str	r0, [r7, #28]
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <lwip_recv_tcp+0xbe>
 800a550:	4a55      	ldr	r2, [pc, #340]	; (800a6a8 <lwip_recv_tcp+0x210>)
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800a556:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a55a:	f113 0f0f 	cmn.w	r3, #15
 800a55e:	d101      	bne.n	800a564 <lwip_recv_tcp+0xcc>
          return 0;
 800a560:	2300      	movs	r3, #0
 800a562:	e094      	b.n	800a68e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800a564:	f04f 33ff 	mov.w	r3, #4294967295
 800a568:	e091      	b.n	800a68e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d106      	bne.n	800a57e <lwip_recv_tcp+0xe6>
 800a570:	4b49      	ldr	r3, [pc, #292]	; (800a698 <lwip_recv_tcp+0x200>)
 800a572:	f240 32c5 	movw	r2, #965	; 0x3c5
 800a576:	494d      	ldr	r1, [pc, #308]	; (800a6ac <lwip_recv_tcp+0x214>)
 800a578:	4849      	ldr	r0, [pc, #292]	; (800a6a0 <lwip_recv_tcp+0x208>)
 800a57a:	f011 fc75 	bl	801be68 <iprintf>
      sock->lastdata.pbuf = p;
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	891b      	ldrh	r3, [r3, #8]
 800a588:	461a      	mov	r2, r3
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	4293      	cmp	r3, r2
 800a58e:	dd03      	ble.n	800a598 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	891b      	ldrh	r3, [r3, #8]
 800a594:	847b      	strh	r3, [r7, #34]	; 0x22
 800a596:	e001      	b.n	800a59c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800a59c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	4413      	add	r3, r2
 800a5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	dd03      	ble.n	800a5b0 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	43db      	mvns	r3, r3
 800a5ae:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800a5b0:	6978      	ldr	r0, [r7, #20]
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	18d1      	adds	r1, r2, r3
 800a5b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f002 fdca 	bl	800d154 <pbuf_copy_partial>

    recvd += copylen;
 800a5c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c4:	4413      	add	r3, r2
 800a5c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800a5c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	da06      	bge.n	800a5de <lwip_recv_tcp+0x146>
 800a5d0:	4b31      	ldr	r3, [pc, #196]	; (800a698 <lwip_recv_tcp+0x200>)
 800a5d2:	f240 32dd 	movw	r2, #989	; 0x3dd
 800a5d6:	4936      	ldr	r1, [pc, #216]	; (800a6b0 <lwip_recv_tcp+0x218>)
 800a5d8:	4831      	ldr	r0, [pc, #196]	; (800a6a0 <lwip_recv_tcp+0x208>)
 800a5da:	f011 fc45 	bl	801be68 <iprintf>
    recv_left -= copylen;
 800a5de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d123      	bne.n	800a638 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	891b      	ldrh	r3, [r3, #8]
 800a5f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d906      	bls.n	800a608 <lwip_recv_tcp+0x170>
 800a5fa:	4b27      	ldr	r3, [pc, #156]	; (800a698 <lwip_recv_tcp+0x200>)
 800a5fc:	f240 32e3 	movw	r2, #995	; 0x3e3
 800a600:	492c      	ldr	r1, [pc, #176]	; (800a6b4 <lwip_recv_tcp+0x21c>)
 800a602:	4827      	ldr	r0, [pc, #156]	; (800a6a0 <lwip_recv_tcp+0x208>)
 800a604:	f011 fc30 	bl	801be68 <iprintf>
      if (p->tot_len - copylen > 0) {
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	891b      	ldrh	r3, [r3, #8]
 800a60c:	461a      	mov	r2, r3
 800a60e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	dd09      	ble.n	800a62a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f002 fb60 	bl	800cce2 <pbuf_free_header>
 800a622:	4602      	mov	r2, r0
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	605a      	str	r2, [r3, #4]
 800a628:	e006      	b.n	800a638 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	4618      	mov	r0, r3
 800a634:	f002 fb88 	bl	800cd48 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800a638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a63c:	f043 0314 	orr.w	r3, r3, #20
 800a640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	2b00      	cmp	r3, #0
 800a648:	dd08      	ble.n	800a65c <lwip_recv_tcp+0x1c4>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	f43f af58 	beq.w	800a506 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800a656:	e001      	b.n	800a65c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800a658:	bf00      	nop
 800a65a:	e000      	b.n	800a65e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800a65c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800a65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a660:	2b00      	cmp	r3, #0
 800a662:	dd0b      	ble.n	800a67c <lwip_recv_tcp+0x1e4>
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f7fd fd3c 	bl	80080f4 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800a67c:	2300      	movs	r3, #0
 800a67e:	61bb      	str	r3, [r7, #24]
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <lwip_recv_tcp+0x1f4>
 800a686:	4a08      	ldr	r2, [pc, #32]	; (800a6a8 <lwip_recv_tcp+0x210>)
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	6013      	str	r3, [r2, #0]
  return recvd;
 800a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3730      	adds	r7, #48	; 0x30
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	0801d894 	.word	0x0801d894
 800a69c:	0801d98c 	.word	0x0801d98c
 800a6a0:	0801d8e8 	.word	0x0801d8e8
 800a6a4:	0801d99c 	.word	0x0801d99c
 800a6a8:	2000c594 	.word	0x2000c594
 800a6ac:	0801d9c0 	.word	0x0801d9c0
 800a6b0:	0801d9cc 	.word	0x0801d9cc
 800a6b4:	0801d9f4 	.word	0x0801d9f4

0800a6b8 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800a6b8:	b590      	push	{r4, r7, lr}
 800a6ba:	b08b      	sub	sp, #44	; 0x2c
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <lwip_sock_make_addr+0x28>
 800a6d2:	4b2b      	ldr	r3, [pc, #172]	; (800a780 <lwip_sock_make_addr+0xc8>)
 800a6d4:	f240 4207 	movw	r2, #1031	; 0x407
 800a6d8:	492a      	ldr	r1, [pc, #168]	; (800a784 <lwip_sock_make_addr+0xcc>)
 800a6da:	482b      	ldr	r0, [pc, #172]	; (800a788 <lwip_sock_make_addr+0xd0>)
 800a6dc:	f011 fbc4 	bl	801be68 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d106      	bne.n	800a6f4 <lwip_sock_make_addr+0x3c>
 800a6e6:	4b26      	ldr	r3, [pc, #152]	; (800a780 <lwip_sock_make_addr+0xc8>)
 800a6e8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800a6ec:	4927      	ldr	r1, [pc, #156]	; (800a78c <lwip_sock_make_addr+0xd4>)
 800a6ee:	4826      	ldr	r0, [pc, #152]	; (800a788 <lwip_sock_make_addr+0xd0>)
 800a6f0:	f011 fbba 	bl	801be68 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <lwip_sock_make_addr+0x50>
 800a6fa:	4b21      	ldr	r3, [pc, #132]	; (800a780 <lwip_sock_make_addr+0xc8>)
 800a6fc:	f240 4209 	movw	r2, #1033	; 0x409
 800a700:	4923      	ldr	r1, [pc, #140]	; (800a790 <lwip_sock_make_addr+0xd8>)
 800a702:	4821      	ldr	r0, [pc, #132]	; (800a788 <lwip_sock_make_addr+0xd0>)
 800a704:	f011 fbb0 	bl	801be68 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a708:	f107 0314 	add.w	r3, r7, #20
 800a70c:	2210      	movs	r2, #16
 800a70e:	701a      	strb	r2, [r3, #0]
 800a710:	f107 0314 	add.w	r3, r7, #20
 800a714:	2202      	movs	r2, #2
 800a716:	705a      	strb	r2, [r3, #1]
 800a718:	f107 0414 	add.w	r4, r7, #20
 800a71c:	88fb      	ldrh	r3, [r7, #6]
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 ff2c 	bl	800b57c <lwip_htons>
 800a724:	4603      	mov	r3, r0
 800a726:	8063      	strh	r3, [r4, #2]
 800a728:	f107 0314 	add.w	r3, r7, #20
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	6812      	ldr	r2, [r2, #0]
 800a730:	605a      	str	r2, [r3, #4]
 800a732:	f107 0314 	add.w	r3, r7, #20
 800a736:	3308      	adds	r3, #8
 800a738:	2208      	movs	r2, #8
 800a73a:	2100      	movs	r1, #0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f011 fb8b 	bl	801be58 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	7d3a      	ldrb	r2, [r7, #20]
 800a748:	4293      	cmp	r3, r2
 800a74a:	d202      	bcs.n	800a752 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800a74c:	2301      	movs	r3, #1
 800a74e:	627b      	str	r3, [r7, #36]	; 0x24
 800a750:	e008      	b.n	800a764 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	7d3a      	ldrb	r2, [r7, #20]
 800a758:	4293      	cmp	r3, r2
 800a75a:	d903      	bls.n	800a764 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800a75c:	7d3b      	ldrb	r3, [r7, #20]
 800a75e:	461a      	mov	r2, r3
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800a764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	f107 0314 	add.w	r3, r7, #20
 800a76c:	4619      	mov	r1, r3
 800a76e:	6838      	ldr	r0, [r7, #0]
 800a770:	f011 fb67 	bl	801be42 <memcpy>
  return truncated;
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a776:	4618      	mov	r0, r3
 800a778:	372c      	adds	r7, #44	; 0x2c
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd90      	pop	{r4, r7, pc}
 800a77e:	bf00      	nop
 800a780:	0801d894 	.word	0x0801d894
 800a784:	0801da04 	.word	0x0801da04
 800a788:	0801d8e8 	.word	0x0801d8e8
 800a78c:	0801da18 	.word	0x0801da18
 800a790:	0801da28 	.word	0x0801da28

0800a794 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af02      	add	r7, sp, #8
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <lwip_recv_tcp_from+0x18>
    return 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e021      	b.n	800a7f0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d01d      	beq.n	800a7ee <lwip_recv_tcp_from+0x5a>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01a      	beq.n	800a7ee <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6818      	ldr	r0, [r3, #0]
 800a7bc:	f107 0216 	add.w	r2, r7, #22
 800a7c0:	f107 0110 	add.w	r1, r7, #16
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f7fd fad9 	bl	8007d7c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00e      	beq.n	800a7ee <lwip_recv_tcp_from+0x5a>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00b      	beq.n	800a7ee <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	8afa      	ldrh	r2, [r7, #22]
 800a7dc:	f107 0110 	add.w	r1, r7, #16
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f7ff ff67 	bl	800a6b8 <lwip_sock_make_addr>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	e000      	b.n	800a7f0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800a7f8:	b590      	push	{r4, r7, lr}
 800a7fa:	b08d      	sub	sp, #52	; 0x34
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10d      	bne.n	800a82a <lwip_recvfrom_udp_raw+0x32>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	dd09      	ble.n	800a82a <lwip_recvfrom_udp_raw+0x32>
 800a816:	4b5e      	ldr	r3, [pc, #376]	; (800a990 <lwip_recvfrom_udp_raw+0x198>)
 800a818:	f240 4249 	movw	r2, #1097	; 0x449
 800a81c:	495d      	ldr	r1, [pc, #372]	; (800a994 <lwip_recvfrom_udp_raw+0x19c>)
 800a81e:	485e      	ldr	r0, [pc, #376]	; (800a998 <lwip_recvfrom_udp_raw+0x1a0>)
 800a820:	f011 fb22 	bl	801be68 <iprintf>
 800a824:	f06f 030f 	mvn.w	r3, #15
 800a828:	e0ad      	b.n	800a986 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f003 0308 	and.w	r3, r3, #8
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800a834:	2304      	movs	r3, #4
 800a836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a83a:	e002      	b.n	800a842 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d11e      	bne.n	800a88c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a856:	f107 0110 	add.w	r1, r7, #16
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fd fd2e 	bl	80082bc <netconn_recv_udp_raw_netbuf_flags>
 800a860:	4603      	mov	r3, r0
 800a862:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800a864:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800a86c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a870:	e089      	b.n	800a986 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d106      	bne.n	800a886 <lwip_recvfrom_udp_raw+0x8e>
 800a878:	4b45      	ldr	r3, [pc, #276]	; (800a990 <lwip_recvfrom_udp_raw+0x198>)
 800a87a:	f240 425e 	movw	r2, #1118	; 0x45e
 800a87e:	4947      	ldr	r1, [pc, #284]	; (800a99c <lwip_recvfrom_udp_raw+0x1a4>)
 800a880:	4845      	ldr	r0, [pc, #276]	; (800a998 <lwip_recvfrom_udp_raw+0x1a0>)
 800a882:	f011 faf1 	bl	801be68 <iprintf>
    sock->lastdata.netbuf = buf;
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	891b      	ldrh	r3, [r3, #8]
 800a892:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a898:	2300      	movs	r3, #0
 800a89a:	61fb      	str	r3, [r7, #28]
 800a89c:	e029      	b.n	800a8f2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800a89e:	8b3a      	ldrh	r2, [r7, #24]
 800a8a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	689a      	ldr	r2, [r3, #8]
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	8afb      	ldrh	r3, [r7, #22]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d902      	bls.n	800a8be <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800a8b8:	8afb      	ldrh	r3, [r7, #22]
 800a8ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a8bc:	e006      	b.n	800a8cc <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	4413      	add	r3, r2
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	6818      	ldr	r0, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	4413      	add	r3, r2
 800a8da:	6819      	ldr	r1, [r3, #0]
 800a8dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8e0:	f002 fc38 	bl	800d154 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800a8e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a8e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8e8:	4413      	add	r3, r2
 800a8ea:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	69fa      	ldr	r2, [r7, #28]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	da03      	bge.n	800a904 <lwip_recvfrom_udp_raw+0x10c>
 800a8fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a8fe:	8b3b      	ldrh	r3, [r7, #24]
 800a900:	429a      	cmp	r2, r3
 800a902:	d3cc      	bcc.n	800a89e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d01a      	beq.n	800a942 <lwip_recvfrom_udp_raw+0x14a>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d016      	beq.n	800a942 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d012      	beq.n	800a942 <lwip_recvfrom_udp_raw+0x14a>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00e      	beq.n	800a942 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6818      	ldr	r0, [r3, #0]
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f103 0108 	add.w	r1, r3, #8
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3304      	adds	r3, #4
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	4623      	mov	r3, r4
 800a93e:	f7ff febb 	bl	800a6b8 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800a954:	7d7b      	ldrb	r3, [r7, #21]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d106      	bne.n	800a978 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	4618      	mov	r0, r3
 800a974:	f7ff fb06 	bl	8009f84 <netbuf_delete>
  }
  if (datagram_len) {
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	8b3a      	ldrh	r2, [r7, #24]
 800a982:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	372c      	adds	r7, #44	; 0x2c
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd90      	pop	{r4, r7, pc}
 800a98e:	bf00      	nop
 800a990:	0801d894 	.word	0x0801d894
 800a994:	0801da38 	.word	0x0801da38
 800a998:	0801d8e8 	.word	0x0801d8e8
 800a99c:	0801da64 	.word	0x0801da64

0800a9a0 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b096      	sub	sp, #88	; 0x58
 800a9a4:	af02      	add	r7, sp, #8
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7ff fbb8 	bl	800a124 <get_socket>
 800a9b4:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800a9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d102      	bne.n	800a9c2 <lwip_recvfrom+0x22>
    return -1;
 800a9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c0:	e077      	b.n	800aab2 <lwip_recvfrom+0x112>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9cc:	2b10      	cmp	r3, #16
 800a9ce:	d112      	bne.n	800a9f6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	68b9      	ldr	r1, [r7, #8]
 800a9d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a9d8:	f7ff fd5e 	bl	800a498 <lwip_recv_tcp>
 800a9dc:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800a9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9e0:	9301      	str	r3, [sp, #4]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	4b35      	ldr	r3, [pc, #212]	; (800aabc <lwip_recvfrom+0x11c>)
 800a9e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a9ee:	f7ff fed1 	bl	800a794 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800a9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9f4:	e05d      	b.n	800aab2 <lwip_recvfrom+0x112>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800aa0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa12:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800aa14:	2301      	movs	r3, #1
 800aa16:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800aa18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa1a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800aa1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <lwip_recvfrom+0x88>
 800aa22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	e000      	b.n	800aa2a <lwip_recvfrom+0x8a>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800aa2c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800aa30:	f107 0214 	add.w	r2, r7, #20
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800aa3e:	f7ff fedb 	bl	800a7f8 <lwip_recvfrom_udp_raw>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800aa48:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00e      	beq.n	800aa6e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800aa50:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff fa77 	bl	8009f48 <err_to_errno>
 800aa5a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800aa5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <lwip_recvfrom+0xc8>
 800aa62:	4a17      	ldr	r2, [pc, #92]	; (800aac0 <lwip_recvfrom+0x120>)
 800aa64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa66:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800aa68:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6c:	e021      	b.n	800aab2 <lwip_recvfrom+0x112>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800aa6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa70:	461a      	mov	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	bf28      	it	cs
 800aa78:	4613      	movcs	r3, r2
 800aa7a:	4a12      	ldr	r2, [pc, #72]	; (800aac4 <lwip_recvfrom+0x124>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d806      	bhi.n	800aa8e <lwip_recvfrom+0xee>
 800aa80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa82:	461a      	mov	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4293      	cmp	r3, r2
 800aa88:	bf28      	it	cs
 800aa8a:	4613      	movcs	r3, r2
 800aa8c:	e001      	b.n	800aa92 <lwip_recvfrom+0xf2>
 800aa8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aa92:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800aa94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d002      	beq.n	800aaa0 <lwip_recvfrom+0x100>
      *fromlen = msg.msg_namelen;
 800aa9a:	69ba      	ldr	r2, [r7, #24]
 800aa9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa9e:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	643b      	str	r3, [r7, #64]	; 0x40
 800aaa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d002      	beq.n	800aab0 <lwip_recvfrom+0x110>
 800aaaa:	4a05      	ldr	r2, [pc, #20]	; (800aac0 <lwip_recvfrom+0x120>)
 800aaac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaae:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800aab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3750      	adds	r7, #80	; 0x50
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	0801da70 	.word	0x0801da70
 800aac0:	2000c594 	.word	0x2000c594
 800aac4:	7ffffffe 	.word	0x7ffffffe

0800aac8 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af02      	add	r7, sp, #8
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800aad6:	2300      	movs	r3, #0
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	2300      	movs	r3, #0
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f7ff ff5b 	bl	800a9a0 <lwip_recvfrom>
 800aaea:	4603      	mov	r3, r0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b08a      	sub	sp, #40	; 0x28
 800aaf8:	af02      	add	r7, sp, #8
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7ff fb0e 	bl	800a124 <get_socket>
 800ab08:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d102      	bne.n	800ab16 <lwip_send+0x22>
    return -1;
 800ab10:	f04f 33ff 	mov.w	r3, #4294967295
 800ab14:	e046      	b.n	800aba4 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab20:	2b10      	cmp	r3, #16
 800ab22:	d00b      	beq.n	800ab3c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800ab24:	2300      	movs	r3, #0
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	68b9      	ldr	r1, [r7, #8]
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 f83c 	bl	800abb0 <lwip_sendto>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	e033      	b.n	800aba4 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <lwip_send+0x56>
 800ab46:	2203      	movs	r2, #3
 800ab48:	e000      	b.n	800ab4c <lwip_send+0x58>
 800ab4a:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	105b      	asrs	r3, r3, #1
 800ab50:	b25b      	sxtb	r3, r3
 800ab52:	f003 0304 	and.w	r3, r3, #4
 800ab56:	b25b      	sxtb	r3, r3
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800ab5c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	6818      	ldr	r0, [r3, #0]
 800ab66:	7efa      	ldrb	r2, [r7, #27]
 800ab68:	f107 0310 	add.w	r3, r7, #16
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	68b9      	ldr	r1, [r7, #8]
 800ab74:	f7fd fbfc 	bl	8008370 <netconn_write_partly>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800ab7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff f9e1 	bl	8009f48 <err_to_errno>
 800ab86:	6178      	str	r0, [r7, #20]
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <lwip_send+0xa0>
 800ab8e:	4a07      	ldr	r2, [pc, #28]	; (800abac <lwip_send+0xb8>)
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800ab94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <lwip_send+0xac>
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	e001      	b.n	800aba4 <lwip_send+0xb0>
 800aba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3720      	adds	r7, #32
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	2000c594 	.word	0x2000c594

0800abb0 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08e      	sub	sp, #56	; 0x38
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
 800abbc:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff fab0 	bl	800a124 <get_socket>
 800abc4:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800abc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <lwip_sendto+0x22>
    return -1;
 800abcc:	f04f 33ff 	mov.w	r3, #4294967295
 800abd0:	e093      	b.n	800acfa <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abdc:	2b10      	cmp	r3, #16
 800abde:	d107      	bne.n	800abf0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	68b9      	ldr	r1, [r7, #8]
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f7ff ff84 	bl	800aaf4 <lwip_send>
 800abec:	4603      	mov	r3, r0
 800abee:	e084      	b.n	800acfa <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf6:	d30a      	bcc.n	800ac0e <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800abf8:	235a      	movs	r3, #90	; 0x5a
 800abfa:	623b      	str	r3, [r7, #32]
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <lwip_sendto+0x58>
 800ac02:	4a40      	ldr	r2, [pc, #256]	; (800ad04 <lwip_sendto+0x154>)
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	e075      	b.n	800acfa <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800ac12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d102      	bne.n	800ac1e <lwip_sendto+0x6e>
 800ac18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d023      	beq.n	800ac66 <lwip_sendto+0xb6>
 800ac1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac20:	2b10      	cmp	r3, #16
 800ac22:	d10b      	bne.n	800ac3c <lwip_sendto+0x8c>
 800ac24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d008      	beq.n	800ac3c <lwip_sendto+0x8c>
 800ac2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac2c:	785b      	ldrb	r3, [r3, #1]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d104      	bne.n	800ac3c <lwip_sendto+0x8c>
 800ac32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d014      	beq.n	800ac66 <lwip_sendto+0xb6>
 800ac3c:	4b32      	ldr	r3, [pc, #200]	; (800ad08 <lwip_sendto+0x158>)
 800ac3e:	f240 6255 	movw	r2, #1621	; 0x655
 800ac42:	4932      	ldr	r1, [pc, #200]	; (800ad0c <lwip_sendto+0x15c>)
 800ac44:	4832      	ldr	r0, [pc, #200]	; (800ad10 <lwip_sendto+0x160>)
 800ac46:	f011 f90f 	bl	801be68 <iprintf>
 800ac4a:	f06f 000f 	mvn.w	r0, #15
 800ac4e:	f7ff f97b 	bl	8009f48 <err_to_errno>
 800ac52:	62b8      	str	r0, [r7, #40]	; 0x28
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <lwip_sendto+0xb0>
 800ac5a:	4a2a      	ldr	r2, [pc, #168]	; (800ad04 <lwip_sendto+0x154>)
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	f04f 33ff 	mov.w	r3, #4294967295
 800ac64:	e049      	b.n	800acfa <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800ac66:	2300      	movs	r3, #0
 800ac68:	617b      	str	r3, [r7, #20]
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800ac6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00a      	beq.n	800ac8a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ac74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	61bb      	str	r3, [r7, #24]
 800ac7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac7c:	885b      	ldrh	r3, [r3, #2]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 fc7c 	bl	800b57c <lwip_htons>
 800ac84:	4603      	mov	r3, r0
 800ac86:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ac88:	e003      	b.n	800ac92 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800ac8e:	2300      	movs	r3, #0
 800ac90:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800ac92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac94:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800ac96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac98:	f107 0310 	add.w	r3, r7, #16
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7ff f9b8 	bl	800a014 <netbuf_ref>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800acaa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10a      	bne.n	800acc8 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f107 0210 	add.w	r2, r7, #16
 800acba:	4611      	mov	r1, r2
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fd fb29 	bl	8008314 <netconn_send>
 800acc2:	4603      	mov	r3, r0
 800acc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800acc8:	f107 0310 	add.w	r3, r7, #16
 800accc:	4618      	mov	r0, r3
 800acce:	f7ff f979 	bl	8009fc4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800acd2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff f936 	bl	8009f48 <err_to_errno>
 800acdc:	6278      	str	r0, [r7, #36]	; 0x24
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <lwip_sendto+0x13a>
 800ace4:	4a07      	ldr	r2, [pc, #28]	; (800ad04 <lwip_sendto+0x154>)
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800acea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <lwip_sendto+0x146>
 800acf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800acf4:	e001      	b.n	800acfa <lwip_sendto+0x14a>
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3738      	adds	r7, #56	; 0x38
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	2000c594 	.word	0x2000c594
 800ad08:	0801d894 	.word	0x0801d894
 800ad0c:	0801db74 	.word	0x0801db74
 800ad10:	0801d8e8 	.word	0x0801d8e8

0800ad14 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d00d      	beq.n	800ad42 <lwip_socket+0x2e>
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d002      	beq.n	800ad30 <lwip_socket+0x1c>
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d016      	beq.n	800ad5c <lwip_socket+0x48>
 800ad2e:	e01c      	b.n	800ad6a <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	4a21      	ldr	r2, [pc, #132]	; (800adbc <lwip_socket+0xa8>)
 800ad36:	4619      	mov	r1, r3
 800ad38:	2040      	movs	r0, #64	; 0x40
 800ad3a:	f7fc ff65 	bl	8007c08 <netconn_new_with_proto_and_callback>
 800ad3e:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ad40:	e019      	b.n	800ad76 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b88      	cmp	r3, #136	; 0x88
 800ad46:	d101      	bne.n	800ad4c <lwip_socket+0x38>
 800ad48:	2321      	movs	r3, #33	; 0x21
 800ad4a:	e000      	b.n	800ad4e <lwip_socket+0x3a>
 800ad4c:	2320      	movs	r3, #32
 800ad4e:	4a1b      	ldr	r2, [pc, #108]	; (800adbc <lwip_socket+0xa8>)
 800ad50:	2100      	movs	r1, #0
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fc ff58 	bl	8007c08 <netconn_new_with_proto_and_callback>
 800ad58:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ad5a:	e00c      	b.n	800ad76 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800ad5c:	4a17      	ldr	r2, [pc, #92]	; (800adbc <lwip_socket+0xa8>)
 800ad5e:	2100      	movs	r1, #0
 800ad60:	2010      	movs	r0, #16
 800ad62:	f7fc ff51 	bl	8007c08 <netconn_new_with_proto_and_callback>
 800ad66:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ad68:	e005      	b.n	800ad76 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800ad6a:	4b15      	ldr	r3, [pc, #84]	; (800adc0 <lwip_socket+0xac>)
 800ad6c:	2216      	movs	r2, #22
 800ad6e:	601a      	str	r2, [r3, #0]
      return -1;
 800ad70:	f04f 33ff 	mov.w	r3, #4294967295
 800ad74:	e01e      	b.n	800adb4 <lwip_socket+0xa0>
  }

  if (!conn) {
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d105      	bne.n	800ad88 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800ad7c:	4b10      	ldr	r3, [pc, #64]	; (800adc0 <lwip_socket+0xac>)
 800ad7e:	2269      	movs	r2, #105	; 0x69
 800ad80:	601a      	str	r2, [r3, #0]
    return -1;
 800ad82:	f04f 33ff 	mov.w	r3, #4294967295
 800ad86:	e015      	b.n	800adb4 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6978      	ldr	r0, [r7, #20]
 800ad8c:	f7ff f9e2 	bl	800a154 <alloc_socket>
 800ad90:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad98:	d108      	bne.n	800adac <lwip_socket+0x98>
    netconn_delete(conn);
 800ad9a:	6978      	ldr	r0, [r7, #20]
 800ad9c:	f7fc ffd2 	bl	8007d44 <netconn_delete>
    set_errno(ENFILE);
 800ada0:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <lwip_socket+0xac>)
 800ada2:	2217      	movs	r2, #23
 800ada4:	601a      	str	r2, [r3, #0]
    return -1;
 800ada6:	f04f 33ff 	mov.w	r3, #4294967295
 800adaa:	e003      	b.n	800adb4 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800adb2:	693b      	ldr	r3, [r7, #16]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	0800ae4d 	.word	0x0800ae4d
 800adc0:	2000c594 	.word	0x2000c594

0800adc4 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]
 800add6:	e02c      	b.n	800ae32 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	695a      	ldr	r2, [r3, #20]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	4413      	add	r3, r2
 800ade2:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	429a      	cmp	r2, r3
 800adec:	d11e      	bne.n	800ae2c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d009      	beq.n	800ae08 <lwip_poll_should_wake+0x44>
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <lwip_poll_should_wake+0x44>
        return 1;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e01a      	b.n	800ae3e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d009      	beq.n	800ae22 <lwip_poll_should_wake+0x5e>
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	f003 0302 	and.w	r3, r3, #2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <lwip_poll_should_wake+0x5e>
        return 1;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e00d      	b.n	800ae3e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e008      	b.n	800ae3e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	617b      	str	r3, [r7, #20]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d3cd      	bcc.n	800add8 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
	...

0800ae4c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08a      	sub	sp, #40	; 0x28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 80a4 	beq.w	800afac <event_callback+0x160>
    s = conn->socket;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	da18      	bge.n	800aea2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ae70:	f00d fdce 	bl	8018a10 <sys_arch_protect>
 800ae74:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	da0b      	bge.n	800ae96 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ae7e:	78fb      	ldrb	r3, [r7, #3]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d104      	bne.n	800ae8e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	1e5a      	subs	r2, r3, #1
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ae8e:	69f8      	ldr	r0, [r7, #28]
 800ae90:	f00d fdcc 	bl	8018a2c <sys_arch_unprotect>
        return;
 800ae94:	e08d      	b.n	800afb2 <event_callback+0x166>
      }
      s = conn->socket;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ae9c:	69f8      	ldr	r0, [r7, #28]
 800ae9e:	f00d fdc5 	bl	8018a2c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800aea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aea4:	f7ff f93e 	bl	800a124 <get_socket>
 800aea8:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d07f      	beq.n	800afb0 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800aeb4:	f00d fdac 	bl	8018a10 <sys_arch_protect>
 800aeb8:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d83e      	bhi.n	800af3e <event_callback+0xf2>
 800aec0:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <event_callback+0x7c>)
 800aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec6:	bf00      	nop
 800aec8:	0800aedd 	.word	0x0800aedd
 800aecc:	0800aeff 	.word	0x0800aeff
 800aed0:	0800af17 	.word	0x0800af17
 800aed4:	0800af2b 	.word	0x0800af2b
 800aed8:	0800af37 	.word	0x0800af37
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3301      	adds	r3, #1
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	b21a      	sxth	r2, r3
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	dd2a      	ble.n	800af4e <event_callback+0x102>
        check_waiters = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	623b      	str	r3, [r7, #32]
      }
      break;
 800aefc:	e027      	b.n	800af4e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800af04:	b29b      	uxth	r3, r3
 800af06:	3b01      	subs	r3, #1
 800af08:	b29b      	uxth	r3, r3
 800af0a:	b21a      	sxth	r2, r3
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	623b      	str	r3, [r7, #32]
      break;
 800af14:	e01c      	b.n	800af50 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	895b      	ldrh	r3, [r3, #10]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <event_callback+0xd6>
        check_waiters = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2201      	movs	r2, #1
 800af26:	815a      	strh	r2, [r3, #10]
      break;
 800af28:	e012      	b.n	800af50 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	2200      	movs	r2, #0
 800af2e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	623b      	str	r3, [r7, #32]
      break;
 800af34:	e00c      	b.n	800af50 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	2201      	movs	r2, #1
 800af3a:	819a      	strh	r2, [r3, #12]
      break;
 800af3c:	e008      	b.n	800af50 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800af3e:	4b1e      	ldr	r3, [pc, #120]	; (800afb8 <event_callback+0x16c>)
 800af40:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800af44:	491d      	ldr	r1, [pc, #116]	; (800afbc <event_callback+0x170>)
 800af46:	481e      	ldr	r0, [pc, #120]	; (800afc0 <event_callback+0x174>)
 800af48:	f010 ff8e 	bl	801be68 <iprintf>
      break;
 800af4c:	e000      	b.n	800af50 <event_callback+0x104>
      break;
 800af4e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	7b9b      	ldrb	r3, [r3, #14]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d025      	beq.n	800afa4 <event_callback+0x158>
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d022      	beq.n	800afa4 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	bfcc      	ite	gt
 800af68:	2301      	movgt	r3, #1
 800af6a:	2300      	movle	r3, #0
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	895b      	ldrh	r3, [r3, #10]
 800af74:	2b00      	cmp	r3, #0
 800af76:	bf14      	ite	ne
 800af78:	2301      	movne	r3, #1
 800af7a:	2300      	moveq	r3, #0
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	899b      	ldrh	r3, [r3, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	bf14      	ite	ne
 800af88:	2301      	movne	r3, #1
 800af8a:	2300      	moveq	r3, #0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800af90:	69f8      	ldr	r0, [r7, #28]
 800af92:	f00d fd4b 	bl	8018a2c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	6979      	ldr	r1, [r7, #20]
 800af9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af9e:	f000 f811 	bl	800afc4 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800afa2:	e006      	b.n	800afb2 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800afa4:	69f8      	ldr	r0, [r7, #28]
 800afa6:	f00d fd41 	bl	8018a2c <sys_arch_unprotect>
 800afaa:	e002      	b.n	800afb2 <event_callback+0x166>
    return;
 800afac:	bf00      	nop
 800afae:	e000      	b.n	800afb2 <event_callback+0x166>
      return;
 800afb0:	bf00      	nop
  }
  done_socket(sock);
}
 800afb2:	3728      	adds	r7, #40	; 0x28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	0801d894 	.word	0x0801d894
 800afbc:	0801dc10 	.word	0x0801dc10
 800afc0:	0801d8e8 	.word	0x0801d8e8

0800afc4 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af02      	add	r7, sp, #8
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800afd2:	4b3d      	ldr	r3, [pc, #244]	; (800b0c8 <select_check_waiters+0x104>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	617b      	str	r3, [r7, #20]
 800afd8:	e06f      	b.n	800b0ba <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d168      	bne.n	800b0b4 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d009      	beq.n	800b002 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	68f9      	ldr	r1, [r7, #12]
 800aff8:	6978      	ldr	r0, [r7, #20]
 800affa:	f7ff fee3 	bl	800adc4 <lwip_poll_should_wake>
 800affe:	6138      	str	r0, [r7, #16]
 800b000:	e04d      	b.n	800b09e <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d014      	beq.n	800b032 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d010      	beq.n	800b032 <select_check_waiters+0x6e>
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	0952      	lsrs	r2, r2, #5
 800b018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	f002 021f 	and.w	r2, r2, #31
 800b022:	2101      	movs	r1, #1
 800b024:	fa01 f202 	lsl.w	r2, r1, r2
 800b028:	4013      	ands	r3, r2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <select_check_waiters+0x6e>
            do_signal = 1;
 800b02e:	2301      	movs	r3, #1
 800b030:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d017      	beq.n	800b068 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d114      	bne.n	800b068 <select_check_waiters+0xa4>
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d010      	beq.n	800b068 <select_check_waiters+0xa4>
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	0952      	lsrs	r2, r2, #5
 800b04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	f002 021f 	and.w	r2, r2, #31
 800b058:	2101      	movs	r1, #1
 800b05a:	fa01 f202 	lsl.w	r2, r1, r2
 800b05e:	4013      	ands	r3, r2
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <select_check_waiters+0xa4>
            do_signal = 1;
 800b064:	2301      	movs	r3, #1
 800b066:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d017      	beq.n	800b09e <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d114      	bne.n	800b09e <select_check_waiters+0xda>
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d010      	beq.n	800b09e <select_check_waiters+0xda>
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	0952      	lsrs	r2, r2, #5
 800b084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	f002 021f 	and.w	r2, r2, #31
 800b08e:	2101      	movs	r1, #1
 800b090:	fa01 f202 	lsl.w	r2, r1, r2
 800b094:	4013      	ands	r3, r2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <select_check_waiters+0xda>
            do_signal = 1;
 800b09a:	2301      	movs	r3, #1
 800b09c:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d007      	beq.n	800b0b4 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	3320      	adds	r3, #32
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f00d fc0a 	bl	80188c8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	617b      	str	r3, [r7, #20]
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d18c      	bne.n	800afda <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800b0c0:	bf00      	nop
 800b0c2:	3718      	adds	r7, #24
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	20008398 	.word	0x20008398

0800b0cc <lwip_ioctl>:
  return err;
}

int
lwip_ioctl(int s, long cmd, void *argp)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08c      	sub	sp, #48	; 0x30
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff f823 	bl	800a124 <get_socket>
 800b0de:	6278      	str	r0, [r7, #36]	; 0x24
  u8_t val;
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d102      	bne.n	800b0ec <lwip_ioctl+0x20>
    return -1;
 800b0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ea:	e089      	b.n	800b200 <lwip_ioctl+0x134>
  }

  switch (cmd) {
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	4a46      	ldr	r2, [pc, #280]	; (800b208 <lwip_ioctl+0x13c>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d04e      	beq.n	800b192 <lwip_ioctl+0xc6>
 800b0f4:	4a45      	ldr	r2, [pc, #276]	; (800b20c <lwip_ioctl+0x140>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d006      	beq.n	800b108 <lwip_ioctl+0x3c>
      sock_set_errno(sock, 0);
      done_socket(sock);
      return 0;

    default:
      break;
 800b0fa:	bf00      	nop
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800b0fc:	2326      	movs	r3, #38	; 0x26
 800b0fe:	613b      	str	r3, [r7, #16]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d07a      	beq.n	800b1fc <lwip_ioctl+0x130>
 800b106:	e076      	b.n	800b1f6 <lwip_ioctl+0x12a>
      if (!argp) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <lwip_ioctl+0x58>
        sock_set_errno(sock, EINVAL);
 800b10e:	2316      	movs	r3, #22
 800b110:	61bb      	str	r3, [r7, #24]
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <lwip_ioctl+0x52>
 800b118:	4a3d      	ldr	r2, [pc, #244]	; (800b210 <lwip_ioctl+0x144>)
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	6013      	str	r3, [r2, #0]
        return -1;
 800b11e:	f04f 33ff 	mov.w	r3, #4294967295
 800b122:	e06d      	b.n	800b200 <lwip_ioctl+0x134>
      SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
 800b124:	f00d fc74 	bl	8018a10 <sys_arch_protect>
 800b128:	6238      	str	r0, [r7, #32]
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	62bb      	str	r3, [r7, #40]	; 0x28
 800b132:	6a38      	ldr	r0, [r7, #32]
 800b134:	f00d fc7a 	bl	8018a2c <sys_arch_unprotect>
      if (recv_avail < 0) {
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	da01      	bge.n	800b142 <lwip_ioctl+0x76>
        recv_avail = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	62bb      	str	r3, [r7, #40]	; 0x28
      if (sock->lastdata.netbuf) {
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d016      	beq.n	800b178 <lwip_ioctl+0xac>
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b154:	2b10      	cmp	r3, #16
 800b156:	d107      	bne.n	800b168 <lwip_ioctl+0x9c>
          recv_avail += sock->lastdata.pbuf->tot_len;
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	891b      	ldrh	r3, [r3, #8]
 800b15e:	461a      	mov	r2, r3
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	4413      	add	r3, r2
 800b164:	62bb      	str	r3, [r7, #40]	; 0x28
 800b166:	e007      	b.n	800b178 <lwip_ioctl+0xac>
          recv_avail += sock->lastdata.netbuf->p->tot_len;
 800b168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	891b      	ldrh	r3, [r3, #8]
 800b170:	461a      	mov	r2, r3
 800b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b174:	4413      	add	r3, r2
 800b176:	62bb      	str	r3, [r7, #40]	; 0x28
      *((int *)argp) = recv_avail;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b17c:	601a      	str	r2, [r3, #0]
      sock_set_errno(sock, 0);
 800b17e:	2300      	movs	r3, #0
 800b180:	61fb      	str	r3, [r7, #28]
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <lwip_ioctl+0xc2>
 800b188:	4a21      	ldr	r2, [pc, #132]	; (800b210 <lwip_ioctl+0x144>)
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	6013      	str	r3, [r2, #0]
      return 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	e036      	b.n	800b200 <lwip_ioctl+0x134>
      val = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (argp && *(int *)argp) {
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d006      	beq.n	800b1ac <lwip_ioctl+0xe0>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <lwip_ioctl+0xe0>
        val = 1;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      netconn_set_nonblocking(sock->conn, val);
 800b1ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00b      	beq.n	800b1cc <lwip_ioctl+0x100>
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f042 0202 	orr.w	r2, r2, #2
 800b1c4:	b2d2      	uxtb	r2, r2
 800b1c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b1ca:	e00a      	b.n	800b1e2 <lwip_ioctl+0x116>
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f022 0202 	bic.w	r2, r2, #2
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      sock_set_errno(sock, 0);
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	617b      	str	r3, [r7, #20]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <lwip_ioctl+0x126>
 800b1ec:	4a08      	ldr	r2, [pc, #32]	; (800b210 <lwip_ioctl+0x144>)
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	6013      	str	r3, [r2, #0]
      return 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e004      	b.n	800b200 <lwip_ioctl+0x134>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800b1f6:	4a06      	ldr	r2, [pc, #24]	; (800b210 <lwip_ioctl+0x144>)
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return -1;
 800b1fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b200:	4618      	mov	r0, r3
 800b202:	3730      	adds	r7, #48	; 0x30
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	8004667e 	.word	0x8004667e
 800b20c:	4004667f 	.word	0x4004667f
 800b210:	2000c594 	.word	0x2000c594

0800b214 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b21e:	f008 f9b7 	bl	8013590 <sys_timeouts_sleeptime>
 800b222:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22a:	d10b      	bne.n	800b244 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b22c:	4813      	ldr	r0, [pc, #76]	; (800b27c <tcpip_timeouts_mbox_fetch+0x68>)
 800b22e:	f00d fbbc 	bl	80189aa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b232:	2200      	movs	r2, #0
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f00d fa74 	bl	8018724 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b23c:	480f      	ldr	r0, [pc, #60]	; (800b27c <tcpip_timeouts_mbox_fetch+0x68>)
 800b23e:	f00d fba5 	bl	801898c <sys_mutex_lock>
    return;
 800b242:	e018      	b.n	800b276 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d102      	bne.n	800b250 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b24a:	f008 f967 	bl	801351c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b24e:	e7e6      	b.n	800b21e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b250:	480a      	ldr	r0, [pc, #40]	; (800b27c <tcpip_timeouts_mbox_fetch+0x68>)
 800b252:	f00d fbaa 	bl	80189aa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f00d fa62 	bl	8018724 <sys_arch_mbox_fetch>
 800b260:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b262:	4806      	ldr	r0, [pc, #24]	; (800b27c <tcpip_timeouts_mbox_fetch+0x68>)
 800b264:	f00d fb92 	bl	801898c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26e:	d102      	bne.n	800b276 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b270:	f008 f954 	bl	801351c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b274:	e7d3      	b.n	800b21e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	20008df8 	.word	0x20008df8

0800b280 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b288:	4810      	ldr	r0, [pc, #64]	; (800b2cc <tcpip_thread+0x4c>)
 800b28a:	f00d fb7f 	bl	801898c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b28e:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <tcpip_thread+0x50>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b296:	4b0e      	ldr	r3, [pc, #56]	; (800b2d0 <tcpip_thread+0x50>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a0e      	ldr	r2, [pc, #56]	; (800b2d4 <tcpip_thread+0x54>)
 800b29c:	6812      	ldr	r2, [r2, #0]
 800b29e:	4610      	mov	r0, r2
 800b2a0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b2a2:	f107 030c 	add.w	r3, r7, #12
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	480b      	ldr	r0, [pc, #44]	; (800b2d8 <tcpip_thread+0x58>)
 800b2aa:	f7ff ffb3 	bl	800b214 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d106      	bne.n	800b2c2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b2b4:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <tcpip_thread+0x5c>)
 800b2b6:	2291      	movs	r2, #145	; 0x91
 800b2b8:	4909      	ldr	r1, [pc, #36]	; (800b2e0 <tcpip_thread+0x60>)
 800b2ba:	480a      	ldr	r0, [pc, #40]	; (800b2e4 <tcpip_thread+0x64>)
 800b2bc:	f010 fdd4 	bl	801be68 <iprintf>
      continue;
 800b2c0:	e003      	b.n	800b2ca <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f000 f80f 	bl	800b2e8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b2ca:	e7ea      	b.n	800b2a2 <tcpip_thread+0x22>
 800b2cc:	20008df8 	.word	0x20008df8
 800b2d0:	2000839c 	.word	0x2000839c
 800b2d4:	200083a0 	.word	0x200083a0
 800b2d8:	200083a4 	.word	0x200083a4
 800b2dc:	0801dc64 	.word	0x0801dc64
 800b2e0:	0801dc94 	.word	0x0801dc94
 800b2e4:	0801dcb4 	.word	0x0801dcb4

0800b2e8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d018      	beq.n	800b32a <tcpip_thread_handle_msg+0x42>
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d021      	beq.n	800b340 <tcpip_thread_handle_msg+0x58>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d126      	bne.n	800b34e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	6850      	ldr	r0, [r2, #4]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	6892      	ldr	r2, [r2, #8]
 800b30c:	4611      	mov	r1, r2
 800b30e:	4798      	blx	r3
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f001 fd14 	bl	800cd48 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b320:	6879      	ldr	r1, [r7, #4]
 800b322:	2009      	movs	r0, #9
 800b324:	f000 fe32 	bl	800bf8c <memp_free>
      break;
 800b328:	e018      	b.n	800b35c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	6892      	ldr	r2, [r2, #8]
 800b332:	4610      	mov	r0, r2
 800b334:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	2008      	movs	r0, #8
 800b33a:	f000 fe27 	bl	800bf8c <memp_free>
      break;
 800b33e:	e00d      	b.n	800b35c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	6892      	ldr	r2, [r2, #8]
 800b348:	4610      	mov	r0, r2
 800b34a:	4798      	blx	r3
      break;
 800b34c:	e006      	b.n	800b35c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b34e:	4b05      	ldr	r3, [pc, #20]	; (800b364 <tcpip_thread_handle_msg+0x7c>)
 800b350:	22cf      	movs	r2, #207	; 0xcf
 800b352:	4905      	ldr	r1, [pc, #20]	; (800b368 <tcpip_thread_handle_msg+0x80>)
 800b354:	4805      	ldr	r0, [pc, #20]	; (800b36c <tcpip_thread_handle_msg+0x84>)
 800b356:	f010 fd87 	bl	801be68 <iprintf>
      break;
 800b35a:	bf00      	nop
  }
}
 800b35c:	bf00      	nop
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	0801dc64 	.word	0x0801dc64
 800b368:	0801dc94 	.word	0x0801dc94
 800b36c:	0801dcb4 	.word	0x0801dcb4

0800b370 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b37c:	481a      	ldr	r0, [pc, #104]	; (800b3e8 <tcpip_inpkt+0x78>)
 800b37e:	f00d fa2c 	bl	80187da <sys_mbox_valid>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d105      	bne.n	800b394 <tcpip_inpkt+0x24>
 800b388:	4b18      	ldr	r3, [pc, #96]	; (800b3ec <tcpip_inpkt+0x7c>)
 800b38a:	22fc      	movs	r2, #252	; 0xfc
 800b38c:	4918      	ldr	r1, [pc, #96]	; (800b3f0 <tcpip_inpkt+0x80>)
 800b38e:	4819      	ldr	r0, [pc, #100]	; (800b3f4 <tcpip_inpkt+0x84>)
 800b390:	f010 fd6a 	bl	801be68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b394:	2009      	movs	r0, #9
 800b396:	f000 fda7 	bl	800bee8 <memp_malloc>
 800b39a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d102      	bne.n	800b3a8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a6:	e01a      	b.n	800b3de <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b3c0:	6979      	ldr	r1, [r7, #20]
 800b3c2:	4809      	ldr	r0, [pc, #36]	; (800b3e8 <tcpip_inpkt+0x78>)
 800b3c4:	f00d f994 	bl	80186f0 <sys_mbox_trypost>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d006      	beq.n	800b3dc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b3ce:	6979      	ldr	r1, [r7, #20]
 800b3d0:	2009      	movs	r0, #9
 800b3d2:	f000 fddb 	bl	800bf8c <memp_free>
    return ERR_MEM;
 800b3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3da:	e000      	b.n	800b3de <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b3dc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	200083a4 	.word	0x200083a4
 800b3ec:	0801dc64 	.word	0x0801dc64
 800b3f0:	0801dcdc 	.word	0x0801dcdc
 800b3f4:	0801dcb4 	.word	0x0801dcb4

0800b3f8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b408:	f003 0318 	and.w	r3, r3, #24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d006      	beq.n	800b41e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b410:	4a08      	ldr	r2, [pc, #32]	; (800b434 <tcpip_input+0x3c>)
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ffab 	bl	800b370 <tcpip_inpkt>
 800b41a:	4603      	mov	r3, r0
 800b41c:	e005      	b.n	800b42a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b41e:	4a06      	ldr	r2, [pc, #24]	; (800b438 <tcpip_input+0x40>)
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff ffa4 	bl	800b370 <tcpip_inpkt>
 800b428:	4603      	mov	r3, r0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	080184dd 	.word	0x080184dd
 800b438:	08017135 	.word	0x08017135

0800b43c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b446:	4819      	ldr	r0, [pc, #100]	; (800b4ac <tcpip_try_callback+0x70>)
 800b448:	f00d f9c7 	bl	80187da <sys_mbox_valid>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d106      	bne.n	800b460 <tcpip_try_callback+0x24>
 800b452:	4b17      	ldr	r3, [pc, #92]	; (800b4b0 <tcpip_try_callback+0x74>)
 800b454:	f240 125d 	movw	r2, #349	; 0x15d
 800b458:	4916      	ldr	r1, [pc, #88]	; (800b4b4 <tcpip_try_callback+0x78>)
 800b45a:	4817      	ldr	r0, [pc, #92]	; (800b4b8 <tcpip_try_callback+0x7c>)
 800b45c:	f010 fd04 	bl	801be68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b460:	2008      	movs	r0, #8
 800b462:	f000 fd41 	bl	800bee8 <memp_malloc>
 800b466:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b46e:	f04f 33ff 	mov.w	r3, #4294967295
 800b472:	e017      	b.n	800b4a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2201      	movs	r2, #1
 800b478:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b486:	68f9      	ldr	r1, [r7, #12]
 800b488:	4808      	ldr	r0, [pc, #32]	; (800b4ac <tcpip_try_callback+0x70>)
 800b48a:	f00d f931 	bl	80186f0 <sys_mbox_trypost>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d006      	beq.n	800b4a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b494:	68f9      	ldr	r1, [r7, #12]
 800b496:	2008      	movs	r0, #8
 800b498:	f000 fd78 	bl	800bf8c <memp_free>
    return ERR_MEM;
 800b49c:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a0:	e000      	b.n	800b4a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	200083a4 	.word	0x200083a4
 800b4b0:	0801dc64 	.word	0x0801dc64
 800b4b4:	0801dcdc 	.word	0x0801dcdc
 800b4b8:	0801dcb4 	.word	0x0801dcb4

0800b4bc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b4c8:	4806      	ldr	r0, [pc, #24]	; (800b4e4 <tcpip_send_msg_wait_sem+0x28>)
 800b4ca:	f00d fa5f 	bl	801898c <sys_mutex_lock>
  fn(apimsg);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	68b8      	ldr	r0, [r7, #8]
 800b4d2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b4d4:	4803      	ldr	r0, [pc, #12]	; (800b4e4 <tcpip_send_msg_wait_sem+0x28>)
 800b4d6:	f00d fa68 	bl	80189aa <sys_mutex_unlock>
  return ERR_OK;
 800b4da:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20008df8 	.word	0x20008df8

0800b4e8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b4f2:	f000 f871 	bl	800b5d8 <lwip_init>

  tcpip_init_done = initfunc;
 800b4f6:	4a17      	ldr	r2, [pc, #92]	; (800b554 <tcpip_init+0x6c>)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b4fc:	4a16      	ldr	r2, [pc, #88]	; (800b558 <tcpip_init+0x70>)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b502:	2106      	movs	r1, #6
 800b504:	4815      	ldr	r0, [pc, #84]	; (800b55c <tcpip_init+0x74>)
 800b506:	f00d f8bf 	bl	8018688 <sys_mbox_new>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d006      	beq.n	800b51e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b510:	4b13      	ldr	r3, [pc, #76]	; (800b560 <tcpip_init+0x78>)
 800b512:	f240 2261 	movw	r2, #609	; 0x261
 800b516:	4913      	ldr	r1, [pc, #76]	; (800b564 <tcpip_init+0x7c>)
 800b518:	4813      	ldr	r0, [pc, #76]	; (800b568 <tcpip_init+0x80>)
 800b51a:	f010 fca5 	bl	801be68 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b51e:	4813      	ldr	r0, [pc, #76]	; (800b56c <tcpip_init+0x84>)
 800b520:	f00d fa18 	bl	8018954 <sys_mutex_new>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d006      	beq.n	800b538 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b52a:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <tcpip_init+0x78>)
 800b52c:	f240 2265 	movw	r2, #613	; 0x265
 800b530:	490f      	ldr	r1, [pc, #60]	; (800b570 <tcpip_init+0x88>)
 800b532:	480d      	ldr	r0, [pc, #52]	; (800b568 <tcpip_init+0x80>)
 800b534:	f010 fc98 	bl	801be68 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b538:	2300      	movs	r3, #0
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b540:	2200      	movs	r2, #0
 800b542:	490c      	ldr	r1, [pc, #48]	; (800b574 <tcpip_init+0x8c>)
 800b544:	480c      	ldr	r0, [pc, #48]	; (800b578 <tcpip_init+0x90>)
 800b546:	f00d fa3d 	bl	80189c4 <sys_thread_new>
}
 800b54a:	bf00      	nop
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	2000839c 	.word	0x2000839c
 800b558:	200083a0 	.word	0x200083a0
 800b55c:	200083a4 	.word	0x200083a4
 800b560:	0801dc64 	.word	0x0801dc64
 800b564:	0801dcec 	.word	0x0801dcec
 800b568:	0801dcb4 	.word	0x0801dcb4
 800b56c:	20008df8 	.word	0x20008df8
 800b570:	0801dd10 	.word	0x0801dd10
 800b574:	0800b281 	.word	0x0800b281
 800b578:	0801dd34 	.word	0x0801dd34

0800b57c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	4603      	mov	r3, r0
 800b584:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	021b      	lsls	r3, r3, #8
 800b58a:	b21a      	sxth	r2, r3
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	0a1b      	lsrs	r3, r3, #8
 800b590:	b29b      	uxth	r3, r3
 800b592:	b21b      	sxth	r3, r3
 800b594:	4313      	orrs	r3, r2
 800b596:	b21b      	sxth	r3, r3
 800b598:	b29b      	uxth	r3, r3
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b083      	sub	sp, #12
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	061a      	lsls	r2, r3, #24
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	021b      	lsls	r3, r3, #8
 800b5b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b5ba:	431a      	orrs	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	0a1b      	lsrs	r3, r3, #8
 800b5c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	0e1b      	lsrs	r3, r3, #24
 800b5ca:	4313      	orrs	r3, r2
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b5e2:	f00d f9a9 	bl	8018938 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b5e6:	f000 f8d5 	bl	800b794 <mem_init>
  memp_init();
 800b5ea:	f000 fc31 	bl	800be50 <memp_init>
  pbuf_init();
  netif_init();
 800b5ee:	f000 fcf7 	bl	800bfe0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b5f2:	f008 f805 	bl	8013600 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b5f6:	f001 fe51 	bl	800d29c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b5fa:	f007 ff49 	bl	8013490 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b612:	4b05      	ldr	r3, [pc, #20]	; (800b628 <ptr_to_mem+0x20>)
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	88fb      	ldrh	r3, [r7, #6]
 800b618:	4413      	add	r3, r2
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	200083a8 	.word	0x200083a8

0800b62c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a05      	ldr	r2, [pc, #20]	; (800b64c <mem_to_ptr+0x20>)
 800b638:	6812      	ldr	r2, [r2, #0]
 800b63a:	1a9b      	subs	r3, r3, r2
 800b63c:	b29b      	uxth	r3, r3
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	200083a8 	.word	0x200083a8

0800b650 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b650:	b590      	push	{r4, r7, lr}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b658:	4b45      	ldr	r3, [pc, #276]	; (800b770 <plug_holes+0x120>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d206      	bcs.n	800b670 <plug_holes+0x20>
 800b662:	4b44      	ldr	r3, [pc, #272]	; (800b774 <plug_holes+0x124>)
 800b664:	f240 12df 	movw	r2, #479	; 0x1df
 800b668:	4943      	ldr	r1, [pc, #268]	; (800b778 <plug_holes+0x128>)
 800b66a:	4844      	ldr	r0, [pc, #272]	; (800b77c <plug_holes+0x12c>)
 800b66c:	f010 fbfc 	bl	801be68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b670:	4b43      	ldr	r3, [pc, #268]	; (800b780 <plug_holes+0x130>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	429a      	cmp	r2, r3
 800b678:	d306      	bcc.n	800b688 <plug_holes+0x38>
 800b67a:	4b3e      	ldr	r3, [pc, #248]	; (800b774 <plug_holes+0x124>)
 800b67c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b680:	4940      	ldr	r1, [pc, #256]	; (800b784 <plug_holes+0x134>)
 800b682:	483e      	ldr	r0, [pc, #248]	; (800b77c <plug_holes+0x12c>)
 800b684:	f010 fbf0 	bl	801be68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	791b      	ldrb	r3, [r3, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d006      	beq.n	800b69e <plug_holes+0x4e>
 800b690:	4b38      	ldr	r3, [pc, #224]	; (800b774 <plug_holes+0x124>)
 800b692:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b696:	493c      	ldr	r1, [pc, #240]	; (800b788 <plug_holes+0x138>)
 800b698:	4838      	ldr	r0, [pc, #224]	; (800b77c <plug_holes+0x12c>)
 800b69a:	f010 fbe5 	bl	801be68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6a6:	d906      	bls.n	800b6b6 <plug_holes+0x66>
 800b6a8:	4b32      	ldr	r3, [pc, #200]	; (800b774 <plug_holes+0x124>)
 800b6aa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b6ae:	4937      	ldr	r1, [pc, #220]	; (800b78c <plug_holes+0x13c>)
 800b6b0:	4832      	ldr	r0, [pc, #200]	; (800b77c <plug_holes+0x12c>)
 800b6b2:	f010 fbd9 	bl	801be68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	881b      	ldrh	r3, [r3, #0]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff ffa4 	bl	800b608 <ptr_to_mem>
 800b6c0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d024      	beq.n	800b714 <plug_holes+0xc4>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	791b      	ldrb	r3, [r3, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d120      	bne.n	800b714 <plug_holes+0xc4>
 800b6d2:	4b2b      	ldr	r3, [pc, #172]	; (800b780 <plug_holes+0x130>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d01b      	beq.n	800b714 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b6dc:	4b2c      	ldr	r3, [pc, #176]	; (800b790 <plug_holes+0x140>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d102      	bne.n	800b6ec <plug_holes+0x9c>
      lfree = mem;
 800b6e6:	4a2a      	ldr	r2, [pc, #168]	; (800b790 <plug_holes+0x140>)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	881a      	ldrh	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6fc:	d00a      	beq.n	800b714 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	4618      	mov	r0, r3
 800b704:	f7ff ff80 	bl	800b608 <ptr_to_mem>
 800b708:	4604      	mov	r4, r0
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff ff8e 	bl	800b62c <mem_to_ptr>
 800b710:	4603      	mov	r3, r0
 800b712:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	885b      	ldrh	r3, [r3, #2]
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff ff75 	bl	800b608 <ptr_to_mem>
 800b71e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	429a      	cmp	r2, r3
 800b726:	d01f      	beq.n	800b768 <plug_holes+0x118>
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	791b      	ldrb	r3, [r3, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d11b      	bne.n	800b768 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b730:	4b17      	ldr	r3, [pc, #92]	; (800b790 <plug_holes+0x140>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	429a      	cmp	r2, r3
 800b738:	d102      	bne.n	800b740 <plug_holes+0xf0>
      lfree = pmem;
 800b73a:	4a15      	ldr	r2, [pc, #84]	; (800b790 <plug_holes+0x140>)
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	881a      	ldrh	r2, [r3, #0]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b750:	d00a      	beq.n	800b768 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff ff56 	bl	800b608 <ptr_to_mem>
 800b75c:	4604      	mov	r4, r0
 800b75e:	68b8      	ldr	r0, [r7, #8]
 800b760:	f7ff ff64 	bl	800b62c <mem_to_ptr>
 800b764:	4603      	mov	r3, r0
 800b766:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b768:	bf00      	nop
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd90      	pop	{r4, r7, pc}
 800b770:	200083a8 	.word	0x200083a8
 800b774:	0801dd44 	.word	0x0801dd44
 800b778:	0801dd74 	.word	0x0801dd74
 800b77c:	0801dd8c 	.word	0x0801dd8c
 800b780:	200083ac 	.word	0x200083ac
 800b784:	0801ddb4 	.word	0x0801ddb4
 800b788:	0801ddd0 	.word	0x0801ddd0
 800b78c:	0801ddec 	.word	0x0801ddec
 800b790:	200083b4 	.word	0x200083b4

0800b794 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b79a:	4b1f      	ldr	r3, [pc, #124]	; (800b818 <mem_init+0x84>)
 800b79c:	3303      	adds	r3, #3
 800b79e:	f023 0303 	bic.w	r3, r3, #3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4b1d      	ldr	r3, [pc, #116]	; (800b81c <mem_init+0x88>)
 800b7a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b7a8:	4b1c      	ldr	r3, [pc, #112]	; (800b81c <mem_init+0x88>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b7b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b7c2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b7c6:	f7ff ff1f 	bl	800b608 <ptr_to_mem>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	4b14      	ldr	r3, [pc, #80]	; (800b820 <mem_init+0x8c>)
 800b7ce:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800b7d0:	4b13      	ldr	r3, [pc, #76]	; (800b820 <mem_init+0x8c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b7d8:	4b11      	ldr	r3, [pc, #68]	; (800b820 <mem_init+0x8c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b7e0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b7e2:	4b0f      	ldr	r3, [pc, #60]	; (800b820 <mem_init+0x8c>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b7ea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b7ec:	4b0b      	ldr	r3, [pc, #44]	; (800b81c <mem_init+0x88>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a0c      	ldr	r2, [pc, #48]	; (800b824 <mem_init+0x90>)
 800b7f2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b7f4:	480c      	ldr	r0, [pc, #48]	; (800b828 <mem_init+0x94>)
 800b7f6:	f00d f8ad 	bl	8018954 <sys_mutex_new>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d006      	beq.n	800b80e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <mem_init+0x98>)
 800b802:	f240 221f 	movw	r2, #543	; 0x21f
 800b806:	490a      	ldr	r1, [pc, #40]	; (800b830 <mem_init+0x9c>)
 800b808:	480a      	ldr	r0, [pc, #40]	; (800b834 <mem_init+0xa0>)
 800b80a:	f010 fb2d 	bl	801be68 <iprintf>
  }
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20008e14 	.word	0x20008e14
 800b81c:	200083a8 	.word	0x200083a8
 800b820:	200083ac 	.word	0x200083ac
 800b824:	200083b4 	.word	0x200083b4
 800b828:	200083b0 	.word	0x200083b0
 800b82c:	0801dd44 	.word	0x0801dd44
 800b830:	0801de18 	.word	0x0801de18
 800b834:	0801dd8c 	.word	0x0801dd8c

0800b838 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fef3 	bl	800b62c <mem_to_ptr>
 800b846:	4603      	mov	r3, r0
 800b848:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	4618      	mov	r0, r3
 800b850:	f7ff feda 	bl	800b608 <ptr_to_mem>
 800b854:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	885b      	ldrh	r3, [r3, #2]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff fed4 	bl	800b608 <ptr_to_mem>
 800b860:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b86a:	d818      	bhi.n	800b89e <mem_link_valid+0x66>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	885b      	ldrh	r3, [r3, #2]
 800b870:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b874:	d813      	bhi.n	800b89e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b87a:	8afa      	ldrh	r2, [r7, #22]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d004      	beq.n	800b88a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	881b      	ldrh	r3, [r3, #0]
 800b884:	8afa      	ldrh	r2, [r7, #22]
 800b886:	429a      	cmp	r2, r3
 800b888:	d109      	bne.n	800b89e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b88a:	4b08      	ldr	r3, [pc, #32]	; (800b8ac <mem_link_valid+0x74>)
 800b88c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	429a      	cmp	r2, r3
 800b892:	d006      	beq.n	800b8a2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	885b      	ldrh	r3, [r3, #2]
 800b898:	8afa      	ldrh	r2, [r7, #22]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d001      	beq.n	800b8a2 <mem_link_valid+0x6a>
    return 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	e000      	b.n	800b8a4 <mem_link_valid+0x6c>
  }
  return 1;
 800b8a2:	2301      	movs	r3, #1
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	200083ac 	.word	0x200083ac

0800b8b0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d070      	beq.n	800b9a0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f003 0303 	and.w	r3, r3, #3
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00d      	beq.n	800b8e4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b8c8:	4b37      	ldr	r3, [pc, #220]	; (800b9a8 <mem_free+0xf8>)
 800b8ca:	f240 2273 	movw	r2, #627	; 0x273
 800b8ce:	4937      	ldr	r1, [pc, #220]	; (800b9ac <mem_free+0xfc>)
 800b8d0:	4837      	ldr	r0, [pc, #220]	; (800b9b0 <mem_free+0x100>)
 800b8d2:	f010 fac9 	bl	801be68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b8d6:	f00d f89b 	bl	8018a10 <sys_arch_protect>
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f00d f8a5 	bl	8018a2c <sys_arch_unprotect>
    return;
 800b8e2:	e05e      	b.n	800b9a2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	3b08      	subs	r3, #8
 800b8e8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b8ea:	4b32      	ldr	r3, [pc, #200]	; (800b9b4 <mem_free+0x104>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69fa      	ldr	r2, [r7, #28]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d306      	bcc.n	800b902 <mem_free+0x52>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f103 020c 	add.w	r2, r3, #12
 800b8fa:	4b2f      	ldr	r3, [pc, #188]	; (800b9b8 <mem_free+0x108>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d90d      	bls.n	800b91e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b902:	4b29      	ldr	r3, [pc, #164]	; (800b9a8 <mem_free+0xf8>)
 800b904:	f240 227f 	movw	r2, #639	; 0x27f
 800b908:	492c      	ldr	r1, [pc, #176]	; (800b9bc <mem_free+0x10c>)
 800b90a:	4829      	ldr	r0, [pc, #164]	; (800b9b0 <mem_free+0x100>)
 800b90c:	f010 faac 	bl	801be68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b910:	f00d f87e 	bl	8018a10 <sys_arch_protect>
 800b914:	6138      	str	r0, [r7, #16]
 800b916:	6938      	ldr	r0, [r7, #16]
 800b918:	f00d f888 	bl	8018a2c <sys_arch_unprotect>
    return;
 800b91c:	e041      	b.n	800b9a2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b91e:	4828      	ldr	r0, [pc, #160]	; (800b9c0 <mem_free+0x110>)
 800b920:	f00d f834 	bl	801898c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	791b      	ldrb	r3, [r3, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d110      	bne.n	800b94e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b92c:	4b1e      	ldr	r3, [pc, #120]	; (800b9a8 <mem_free+0xf8>)
 800b92e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b932:	4924      	ldr	r1, [pc, #144]	; (800b9c4 <mem_free+0x114>)
 800b934:	481e      	ldr	r0, [pc, #120]	; (800b9b0 <mem_free+0x100>)
 800b936:	f010 fa97 	bl	801be68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b93a:	4821      	ldr	r0, [pc, #132]	; (800b9c0 <mem_free+0x110>)
 800b93c:	f00d f835 	bl	80189aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b940:	f00d f866 	bl	8018a10 <sys_arch_protect>
 800b944:	6178      	str	r0, [r7, #20]
 800b946:	6978      	ldr	r0, [r7, #20]
 800b948:	f00d f870 	bl	8018a2c <sys_arch_unprotect>
    return;
 800b94c:	e029      	b.n	800b9a2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b94e:	69f8      	ldr	r0, [r7, #28]
 800b950:	f7ff ff72 	bl	800b838 <mem_link_valid>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d110      	bne.n	800b97c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b95a:	4b13      	ldr	r3, [pc, #76]	; (800b9a8 <mem_free+0xf8>)
 800b95c:	f240 2295 	movw	r2, #661	; 0x295
 800b960:	4919      	ldr	r1, [pc, #100]	; (800b9c8 <mem_free+0x118>)
 800b962:	4813      	ldr	r0, [pc, #76]	; (800b9b0 <mem_free+0x100>)
 800b964:	f010 fa80 	bl	801be68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b968:	4815      	ldr	r0, [pc, #84]	; (800b9c0 <mem_free+0x110>)
 800b96a:	f00d f81e 	bl	80189aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b96e:	f00d f84f 	bl	8018a10 <sys_arch_protect>
 800b972:	61b8      	str	r0, [r7, #24]
 800b974:	69b8      	ldr	r0, [r7, #24]
 800b976:	f00d f859 	bl	8018a2c <sys_arch_unprotect>
    return;
 800b97a:	e012      	b.n	800b9a2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	2200      	movs	r2, #0
 800b980:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b982:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <mem_free+0x11c>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	69fa      	ldr	r2, [r7, #28]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d202      	bcs.n	800b992 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b98c:	4a0f      	ldr	r2, [pc, #60]	; (800b9cc <mem_free+0x11c>)
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b992:	69f8      	ldr	r0, [r7, #28]
 800b994:	f7ff fe5c 	bl	800b650 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b998:	4809      	ldr	r0, [pc, #36]	; (800b9c0 <mem_free+0x110>)
 800b99a:	f00d f806 	bl	80189aa <sys_mutex_unlock>
 800b99e:	e000      	b.n	800b9a2 <mem_free+0xf2>
    return;
 800b9a0:	bf00      	nop
}
 800b9a2:	3720      	adds	r7, #32
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	0801dd44 	.word	0x0801dd44
 800b9ac:	0801de34 	.word	0x0801de34
 800b9b0:	0801dd8c 	.word	0x0801dd8c
 800b9b4:	200083a8 	.word	0x200083a8
 800b9b8:	200083ac 	.word	0x200083ac
 800b9bc:	0801de58 	.word	0x0801de58
 800b9c0:	200083b0 	.word	0x200083b0
 800b9c4:	0801de74 	.word	0x0801de74
 800b9c8:	0801de9c 	.word	0x0801de9c
 800b9cc:	200083b4 	.word	0x200083b4

0800b9d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b9dc:	887b      	ldrh	r3, [r7, #2]
 800b9de:	3303      	adds	r3, #3
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	f023 0303 	bic.w	r3, r3, #3
 800b9e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b9e8:	8bfb      	ldrh	r3, [r7, #30]
 800b9ea:	2b0b      	cmp	r3, #11
 800b9ec:	d801      	bhi.n	800b9f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b9f2:	8bfb      	ldrh	r3, [r7, #30]
 800b9f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9f8:	d803      	bhi.n	800ba02 <mem_trim+0x32>
 800b9fa:	8bfa      	ldrh	r2, [r7, #30]
 800b9fc:	887b      	ldrh	r3, [r7, #2]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d201      	bcs.n	800ba06 <mem_trim+0x36>
    return NULL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	e0d8      	b.n	800bbb8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ba06:	4b6e      	ldr	r3, [pc, #440]	; (800bbc0 <mem_trim+0x1f0>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d304      	bcc.n	800ba1a <mem_trim+0x4a>
 800ba10:	4b6c      	ldr	r3, [pc, #432]	; (800bbc4 <mem_trim+0x1f4>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d306      	bcc.n	800ba28 <mem_trim+0x58>
 800ba1a:	4b6b      	ldr	r3, [pc, #428]	; (800bbc8 <mem_trim+0x1f8>)
 800ba1c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ba20:	496a      	ldr	r1, [pc, #424]	; (800bbcc <mem_trim+0x1fc>)
 800ba22:	486b      	ldr	r0, [pc, #428]	; (800bbd0 <mem_trim+0x200>)
 800ba24:	f010 fa20 	bl	801be68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ba28:	4b65      	ldr	r3, [pc, #404]	; (800bbc0 <mem_trim+0x1f0>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d304      	bcc.n	800ba3c <mem_trim+0x6c>
 800ba32:	4b64      	ldr	r3, [pc, #400]	; (800bbc4 <mem_trim+0x1f4>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d307      	bcc.n	800ba4c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba3c:	f00c ffe8 	bl	8018a10 <sys_arch_protect>
 800ba40:	60b8      	str	r0, [r7, #8]
 800ba42:	68b8      	ldr	r0, [r7, #8]
 800ba44:	f00c fff2 	bl	8018a2c <sys_arch_unprotect>
    return rmem;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	e0b5      	b.n	800bbb8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	3b08      	subs	r3, #8
 800ba50:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ba52:	69b8      	ldr	r0, [r7, #24]
 800ba54:	f7ff fdea 	bl	800b62c <mem_to_ptr>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	881a      	ldrh	r2, [r3, #0]
 800ba60:	8afb      	ldrh	r3, [r7, #22]
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	3b08      	subs	r3, #8
 800ba68:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ba6a:	8bfa      	ldrh	r2, [r7, #30]
 800ba6c:	8abb      	ldrh	r3, [r7, #20]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d906      	bls.n	800ba80 <mem_trim+0xb0>
 800ba72:	4b55      	ldr	r3, [pc, #340]	; (800bbc8 <mem_trim+0x1f8>)
 800ba74:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ba78:	4956      	ldr	r1, [pc, #344]	; (800bbd4 <mem_trim+0x204>)
 800ba7a:	4855      	ldr	r0, [pc, #340]	; (800bbd0 <mem_trim+0x200>)
 800ba7c:	f010 f9f4 	bl	801be68 <iprintf>
  if (newsize > size) {
 800ba80:	8bfa      	ldrh	r2, [r7, #30]
 800ba82:	8abb      	ldrh	r3, [r7, #20]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d901      	bls.n	800ba8c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e095      	b.n	800bbb8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ba8c:	8bfa      	ldrh	r2, [r7, #30]
 800ba8e:	8abb      	ldrh	r3, [r7, #20]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d101      	bne.n	800ba98 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	e08f      	b.n	800bbb8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba98:	484f      	ldr	r0, [pc, #316]	; (800bbd8 <mem_trim+0x208>)
 800ba9a:	f00c ff77 	bl	801898c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff fdb0 	bl	800b608 <ptr_to_mem>
 800baa8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	791b      	ldrb	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d13f      	bne.n	800bb32 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800baba:	d106      	bne.n	800baca <mem_trim+0xfa>
 800babc:	4b42      	ldr	r3, [pc, #264]	; (800bbc8 <mem_trim+0x1f8>)
 800babe:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bac2:	4946      	ldr	r1, [pc, #280]	; (800bbdc <mem_trim+0x20c>)
 800bac4:	4842      	ldr	r0, [pc, #264]	; (800bbd0 <mem_trim+0x200>)
 800bac6:	f010 f9cf 	bl	801be68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bad0:	8afa      	ldrh	r2, [r7, #22]
 800bad2:	8bfb      	ldrh	r3, [r7, #30]
 800bad4:	4413      	add	r3, r2
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	3308      	adds	r3, #8
 800bada:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800badc:	4b40      	ldr	r3, [pc, #256]	; (800bbe0 <mem_trim+0x210>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d106      	bne.n	800baf4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bae6:	89fb      	ldrh	r3, [r7, #14]
 800bae8:	4618      	mov	r0, r3
 800baea:	f7ff fd8d 	bl	800b608 <ptr_to_mem>
 800baee:	4602      	mov	r2, r0
 800baf0:	4b3b      	ldr	r3, [pc, #236]	; (800bbe0 <mem_trim+0x210>)
 800baf2:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800baf4:	89fb      	ldrh	r3, [r7, #14]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fd86 	bl	800b608 <ptr_to_mem>
 800bafc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2200      	movs	r2, #0
 800bb02:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	89ba      	ldrh	r2, [r7, #12]
 800bb08:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	8afa      	ldrh	r2, [r7, #22]
 800bb0e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	89fa      	ldrh	r2, [r7, #14]
 800bb14:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb1e:	d047      	beq.n	800bbb0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff fd6f 	bl	800b608 <ptr_to_mem>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	89fb      	ldrh	r3, [r7, #14]
 800bb2e:	8053      	strh	r3, [r2, #2]
 800bb30:	e03e      	b.n	800bbb0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bb32:	8bfb      	ldrh	r3, [r7, #30]
 800bb34:	f103 0214 	add.w	r2, r3, #20
 800bb38:	8abb      	ldrh	r3, [r7, #20]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d838      	bhi.n	800bbb0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bb3e:	8afa      	ldrh	r2, [r7, #22]
 800bb40:	8bfb      	ldrh	r3, [r7, #30]
 800bb42:	4413      	add	r3, r2
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	3308      	adds	r3, #8
 800bb48:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb52:	d106      	bne.n	800bb62 <mem_trim+0x192>
 800bb54:	4b1c      	ldr	r3, [pc, #112]	; (800bbc8 <mem_trim+0x1f8>)
 800bb56:	f240 3216 	movw	r2, #790	; 0x316
 800bb5a:	4920      	ldr	r1, [pc, #128]	; (800bbdc <mem_trim+0x20c>)
 800bb5c:	481c      	ldr	r0, [pc, #112]	; (800bbd0 <mem_trim+0x200>)
 800bb5e:	f010 f983 	bl	801be68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bb62:	89fb      	ldrh	r3, [r7, #14]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff fd4f 	bl	800b608 <ptr_to_mem>
 800bb6a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bb6c:	4b1c      	ldr	r3, [pc, #112]	; (800bbe0 <mem_trim+0x210>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d202      	bcs.n	800bb7c <mem_trim+0x1ac>
      lfree = mem2;
 800bb76:	4a1a      	ldr	r2, [pc, #104]	; (800bbe0 <mem_trim+0x210>)
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	881a      	ldrh	r2, [r3, #0]
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	8afa      	ldrh	r2, [r7, #22]
 800bb8e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	89fa      	ldrh	r2, [r7, #14]
 800bb94:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	881b      	ldrh	r3, [r3, #0]
 800bb9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb9e:	d007      	beq.n	800bbb0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7ff fd2f 	bl	800b608 <ptr_to_mem>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	89fb      	ldrh	r3, [r7, #14]
 800bbae:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bbb0:	4809      	ldr	r0, [pc, #36]	; (800bbd8 <mem_trim+0x208>)
 800bbb2:	f00c fefa 	bl	80189aa <sys_mutex_unlock>
  return rmem;
 800bbb6:	687b      	ldr	r3, [r7, #4]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3720      	adds	r7, #32
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	200083a8 	.word	0x200083a8
 800bbc4:	200083ac 	.word	0x200083ac
 800bbc8:	0801dd44 	.word	0x0801dd44
 800bbcc:	0801ded0 	.word	0x0801ded0
 800bbd0:	0801dd8c 	.word	0x0801dd8c
 800bbd4:	0801dee8 	.word	0x0801dee8
 800bbd8:	200083b0 	.word	0x200083b0
 800bbdc:	0801df08 	.word	0x0801df08
 800bbe0:	200083b4 	.word	0x200083b4

0800bbe4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b088      	sub	sp, #32
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <mem_malloc+0x14>
    return NULL;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e0e2      	b.n	800bdbe <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bbf8:	88fb      	ldrh	r3, [r7, #6]
 800bbfa:	3303      	adds	r3, #3
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	f023 0303 	bic.w	r3, r3, #3
 800bc02:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bc04:	8bbb      	ldrh	r3, [r7, #28]
 800bc06:	2b0b      	cmp	r3, #11
 800bc08:	d801      	bhi.n	800bc0e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bc0a:	230c      	movs	r3, #12
 800bc0c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bc0e:	8bbb      	ldrh	r3, [r7, #28]
 800bc10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc14:	d803      	bhi.n	800bc1e <mem_malloc+0x3a>
 800bc16:	8bba      	ldrh	r2, [r7, #28]
 800bc18:	88fb      	ldrh	r3, [r7, #6]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d201      	bcs.n	800bc22 <mem_malloc+0x3e>
    return NULL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e0cd      	b.n	800bdbe <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bc22:	4869      	ldr	r0, [pc, #420]	; (800bdc8 <mem_malloc+0x1e4>)
 800bc24:	f00c feb2 	bl	801898c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bc28:	4b68      	ldr	r3, [pc, #416]	; (800bdcc <mem_malloc+0x1e8>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff fcfd 	bl	800b62c <mem_to_ptr>
 800bc32:	4603      	mov	r3, r0
 800bc34:	83fb      	strh	r3, [r7, #30]
 800bc36:	e0b7      	b.n	800bda8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bc38:	8bfb      	ldrh	r3, [r7, #30]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff fce4 	bl	800b608 <ptr_to_mem>
 800bc40:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	791b      	ldrb	r3, [r3, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f040 80a7 	bne.w	800bd9a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	8bfb      	ldrh	r3, [r7, #30]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	f1a3 0208 	sub.w	r2, r3, #8
 800bc5a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	f0c0 809c 	bcc.w	800bd9a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	8bfb      	ldrh	r3, [r7, #30]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	f1a3 0208 	sub.w	r2, r3, #8
 800bc70:	8bbb      	ldrh	r3, [r7, #28]
 800bc72:	3314      	adds	r3, #20
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d333      	bcc.n	800bce0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bc78:	8bfa      	ldrh	r2, [r7, #30]
 800bc7a:	8bbb      	ldrh	r3, [r7, #28]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	3308      	adds	r3, #8
 800bc82:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bc84:	8a7b      	ldrh	r3, [r7, #18]
 800bc86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc8a:	d106      	bne.n	800bc9a <mem_malloc+0xb6>
 800bc8c:	4b50      	ldr	r3, [pc, #320]	; (800bdd0 <mem_malloc+0x1ec>)
 800bc8e:	f240 3287 	movw	r2, #903	; 0x387
 800bc92:	4950      	ldr	r1, [pc, #320]	; (800bdd4 <mem_malloc+0x1f0>)
 800bc94:	4850      	ldr	r0, [pc, #320]	; (800bdd8 <mem_malloc+0x1f4>)
 800bc96:	f010 f8e7 	bl	801be68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bc9a:	8a7b      	ldrh	r3, [r7, #18]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7ff fcb3 	bl	800b608 <ptr_to_mem>
 800bca2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	881a      	ldrh	r2, [r3, #0]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	8bfa      	ldrh	r2, [r7, #30]
 800bcb6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	8a7a      	ldrh	r2, [r7, #18]
 800bcbc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	881b      	ldrh	r3, [r3, #0]
 800bcc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bccc:	d00b      	beq.n	800bce6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff fc98 	bl	800b608 <ptr_to_mem>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	8a7b      	ldrh	r3, [r7, #18]
 800bcdc:	8053      	strh	r3, [r2, #2]
 800bcde:	e002      	b.n	800bce6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	2201      	movs	r2, #1
 800bce4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bce6:	4b39      	ldr	r3, [pc, #228]	; (800bdcc <mem_malloc+0x1e8>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d127      	bne.n	800bd40 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bcf0:	4b36      	ldr	r3, [pc, #216]	; (800bdcc <mem_malloc+0x1e8>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bcf6:	e005      	b.n	800bd04 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff fc83 	bl	800b608 <ptr_to_mem>
 800bd02:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	791b      	ldrb	r3, [r3, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d004      	beq.n	800bd16 <mem_malloc+0x132>
 800bd0c:	4b33      	ldr	r3, [pc, #204]	; (800bddc <mem_malloc+0x1f8>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	69ba      	ldr	r2, [r7, #24]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d1f0      	bne.n	800bcf8 <mem_malloc+0x114>
          }
          lfree = cur;
 800bd16:	4a2d      	ldr	r2, [pc, #180]	; (800bdcc <mem_malloc+0x1e8>)
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bd1c:	4b2b      	ldr	r3, [pc, #172]	; (800bdcc <mem_malloc+0x1e8>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	4b2e      	ldr	r3, [pc, #184]	; (800bddc <mem_malloc+0x1f8>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d00b      	beq.n	800bd40 <mem_malloc+0x15c>
 800bd28:	4b28      	ldr	r3, [pc, #160]	; (800bdcc <mem_malloc+0x1e8>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	791b      	ldrb	r3, [r3, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d006      	beq.n	800bd40 <mem_malloc+0x15c>
 800bd32:	4b27      	ldr	r3, [pc, #156]	; (800bdd0 <mem_malloc+0x1ec>)
 800bd34:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bd38:	4929      	ldr	r1, [pc, #164]	; (800bde0 <mem_malloc+0x1fc>)
 800bd3a:	4827      	ldr	r0, [pc, #156]	; (800bdd8 <mem_malloc+0x1f4>)
 800bd3c:	f010 f894 	bl	801be68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bd40:	4821      	ldr	r0, [pc, #132]	; (800bdc8 <mem_malloc+0x1e4>)
 800bd42:	f00c fe32 	bl	80189aa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bd46:	8bba      	ldrh	r2, [r7, #28]
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	4a23      	ldr	r2, [pc, #140]	; (800bddc <mem_malloc+0x1f8>)
 800bd50:	6812      	ldr	r2, [r2, #0]
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d906      	bls.n	800bd64 <mem_malloc+0x180>
 800bd56:	4b1e      	ldr	r3, [pc, #120]	; (800bdd0 <mem_malloc+0x1ec>)
 800bd58:	f240 32ba 	movw	r2, #954	; 0x3ba
 800bd5c:	4921      	ldr	r1, [pc, #132]	; (800bde4 <mem_malloc+0x200>)
 800bd5e:	481e      	ldr	r0, [pc, #120]	; (800bdd8 <mem_malloc+0x1f4>)
 800bd60:	f010 f882 	bl	801be68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f003 0303 	and.w	r3, r3, #3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d006      	beq.n	800bd7c <mem_malloc+0x198>
 800bd6e:	4b18      	ldr	r3, [pc, #96]	; (800bdd0 <mem_malloc+0x1ec>)
 800bd70:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800bd74:	491c      	ldr	r1, [pc, #112]	; (800bde8 <mem_malloc+0x204>)
 800bd76:	4818      	ldr	r0, [pc, #96]	; (800bdd8 <mem_malloc+0x1f4>)
 800bd78:	f010 f876 	bl	801be68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f003 0303 	and.w	r3, r3, #3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d006      	beq.n	800bd94 <mem_malloc+0x1b0>
 800bd86:	4b12      	ldr	r3, [pc, #72]	; (800bdd0 <mem_malloc+0x1ec>)
 800bd88:	f240 32be 	movw	r2, #958	; 0x3be
 800bd8c:	4917      	ldr	r1, [pc, #92]	; (800bdec <mem_malloc+0x208>)
 800bd8e:	4812      	ldr	r0, [pc, #72]	; (800bdd8 <mem_malloc+0x1f4>)
 800bd90:	f010 f86a 	bl	801be68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	3308      	adds	r3, #8
 800bd98:	e011      	b.n	800bdbe <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bd9a:	8bfb      	ldrh	r3, [r7, #30]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff fc33 	bl	800b608 <ptr_to_mem>
 800bda2:	4603      	mov	r3, r0
 800bda4:	881b      	ldrh	r3, [r3, #0]
 800bda6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bda8:	8bfa      	ldrh	r2, [r7, #30]
 800bdaa:	8bbb      	ldrh	r3, [r7, #28]
 800bdac:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	f4ff af41 	bcc.w	800bc38 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bdb6:	4804      	ldr	r0, [pc, #16]	; (800bdc8 <mem_malloc+0x1e4>)
 800bdb8:	f00c fdf7 	bl	80189aa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3720      	adds	r7, #32
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	200083b0 	.word	0x200083b0
 800bdcc:	200083b4 	.word	0x200083b4
 800bdd0:	0801dd44 	.word	0x0801dd44
 800bdd4:	0801df08 	.word	0x0801df08
 800bdd8:	0801dd8c 	.word	0x0801dd8c
 800bddc:	200083ac 	.word	0x200083ac
 800bde0:	0801df1c 	.word	0x0801df1c
 800bde4:	0801df38 	.word	0x0801df38
 800bde8:	0801df68 	.word	0x0801df68
 800bdec:	0801df98 	.word	0x0801df98

0800bdf0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	3303      	adds	r3, #3
 800be06:	f023 0303 	bic.w	r3, r3, #3
 800be0a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800be0c:	2300      	movs	r3, #0
 800be0e:	60fb      	str	r3, [r7, #12]
 800be10:	e011      	b.n	800be36 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	4413      	add	r3, r2
 800be2e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	3301      	adds	r3, #1
 800be34:	60fb      	str	r3, [r7, #12]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	461a      	mov	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4293      	cmp	r3, r2
 800be40:	dbe7      	blt.n	800be12 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800be42:	bf00      	nop
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
	...

0800be50 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800be56:	2300      	movs	r3, #0
 800be58:	80fb      	strh	r3, [r7, #6]
 800be5a:	e009      	b.n	800be70 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800be5c:	88fb      	ldrh	r3, [r7, #6]
 800be5e:	4a08      	ldr	r2, [pc, #32]	; (800be80 <memp_init+0x30>)
 800be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff ffc3 	bl	800bdf0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800be6a:	88fb      	ldrh	r3, [r7, #6]
 800be6c:	3301      	adds	r3, #1
 800be6e:	80fb      	strh	r3, [r7, #6]
 800be70:	88fb      	ldrh	r3, [r7, #6]
 800be72:	2b0c      	cmp	r3, #12
 800be74:	d9f2      	bls.n	800be5c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	08020ec4 	.word	0x08020ec4

0800be84 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800be8c:	f00c fdc0 	bl	8018a10 <sys_arch_protect>
 800be90:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d015      	beq.n	800becc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	6812      	ldr	r2, [r2, #0]
 800bea8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f003 0303 	and.w	r3, r3, #3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d006      	beq.n	800bec2 <do_memp_malloc_pool+0x3e>
 800beb4:	4b09      	ldr	r3, [pc, #36]	; (800bedc <do_memp_malloc_pool+0x58>)
 800beb6:	f240 1219 	movw	r2, #281	; 0x119
 800beba:	4909      	ldr	r1, [pc, #36]	; (800bee0 <do_memp_malloc_pool+0x5c>)
 800bebc:	4809      	ldr	r0, [pc, #36]	; (800bee4 <do_memp_malloc_pool+0x60>)
 800bebe:	f00f ffd3 	bl	801be68 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f00c fdb2 	bl	8018a2c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	e003      	b.n	800bed4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f00c fdad 	bl	8018a2c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	0801dfbc 	.word	0x0801dfbc
 800bee0:	0801dfec 	.word	0x0801dfec
 800bee4:	0801e010 	.word	0x0801e010

0800bee8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	2b0c      	cmp	r3, #12
 800bef6:	d908      	bls.n	800bf0a <memp_malloc+0x22>
 800bef8:	4b0a      	ldr	r3, [pc, #40]	; (800bf24 <memp_malloc+0x3c>)
 800befa:	f240 1257 	movw	r2, #343	; 0x157
 800befe:	490a      	ldr	r1, [pc, #40]	; (800bf28 <memp_malloc+0x40>)
 800bf00:	480a      	ldr	r0, [pc, #40]	; (800bf2c <memp_malloc+0x44>)
 800bf02:	f00f ffb1 	bl	801be68 <iprintf>
 800bf06:	2300      	movs	r3, #0
 800bf08:	e008      	b.n	800bf1c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bf0a:	79fb      	ldrb	r3, [r7, #7]
 800bf0c:	4a08      	ldr	r2, [pc, #32]	; (800bf30 <memp_malloc+0x48>)
 800bf0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff ffb6 	bl	800be84 <do_memp_malloc_pool>
 800bf18:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	0801dfbc 	.word	0x0801dfbc
 800bf28:	0801e04c 	.word	0x0801e04c
 800bf2c:	0801e010 	.word	0x0801e010
 800bf30:	08020ec4 	.word	0x08020ec4

0800bf34 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	f003 0303 	and.w	r3, r3, #3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d006      	beq.n	800bf56 <do_memp_free_pool+0x22>
 800bf48:	4b0d      	ldr	r3, [pc, #52]	; (800bf80 <do_memp_free_pool+0x4c>)
 800bf4a:	f240 126d 	movw	r2, #365	; 0x16d
 800bf4e:	490d      	ldr	r1, [pc, #52]	; (800bf84 <do_memp_free_pool+0x50>)
 800bf50:	480d      	ldr	r0, [pc, #52]	; (800bf88 <do_memp_free_pool+0x54>)
 800bf52:	f00f ff89 	bl	801be68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bf5a:	f00c fd59 	bl	8018a10 <sys_arch_protect>
 800bf5e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bf72:	68b8      	ldr	r0, [r7, #8]
 800bf74:	f00c fd5a 	bl	8018a2c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bf78:	bf00      	nop
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	0801dfbc 	.word	0x0801dfbc
 800bf84:	0801e06c 	.word	0x0801e06c
 800bf88:	0801e010 	.word	0x0801e010

0800bf8c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	4603      	mov	r3, r0
 800bf94:	6039      	str	r1, [r7, #0]
 800bf96:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	2b0c      	cmp	r3, #12
 800bf9c:	d907      	bls.n	800bfae <memp_free+0x22>
 800bf9e:	4b0c      	ldr	r3, [pc, #48]	; (800bfd0 <memp_free+0x44>)
 800bfa0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bfa4:	490b      	ldr	r1, [pc, #44]	; (800bfd4 <memp_free+0x48>)
 800bfa6:	480c      	ldr	r0, [pc, #48]	; (800bfd8 <memp_free+0x4c>)
 800bfa8:	f00f ff5e 	bl	801be68 <iprintf>
 800bfac:	e00c      	b.n	800bfc8 <memp_free+0x3c>

  if (mem == NULL) {
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d008      	beq.n	800bfc6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	4a09      	ldr	r2, [pc, #36]	; (800bfdc <memp_free+0x50>)
 800bfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff ffb8 	bl	800bf34 <do_memp_free_pool>
 800bfc4:	e000      	b.n	800bfc8 <memp_free+0x3c>
    return;
 800bfc6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	0801dfbc 	.word	0x0801dfbc
 800bfd4:	0801e08c 	.word	0x0801e08c
 800bfd8:	0801e010 	.word	0x0801e010
 800bfdc:	08020ec4 	.word	0x08020ec4

0800bfe0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bfe4:	bf00      	nop
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
	...

0800bff0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d108      	bne.n	800c016 <netif_add+0x26>
 800c004:	4b5b      	ldr	r3, [pc, #364]	; (800c174 <netif_add+0x184>)
 800c006:	f240 1227 	movw	r2, #295	; 0x127
 800c00a:	495b      	ldr	r1, [pc, #364]	; (800c178 <netif_add+0x188>)
 800c00c:	485b      	ldr	r0, [pc, #364]	; (800c17c <netif_add+0x18c>)
 800c00e:	f00f ff2b 	bl	801be68 <iprintf>
 800c012:	2300      	movs	r3, #0
 800c014:	e0a9      	b.n	800c16a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d108      	bne.n	800c02e <netif_add+0x3e>
 800c01c:	4b55      	ldr	r3, [pc, #340]	; (800c174 <netif_add+0x184>)
 800c01e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c022:	4957      	ldr	r1, [pc, #348]	; (800c180 <netif_add+0x190>)
 800c024:	4855      	ldr	r0, [pc, #340]	; (800c17c <netif_add+0x18c>)
 800c026:	f00f ff1f 	bl	801be68 <iprintf>
 800c02a:	2300      	movs	r3, #0
 800c02c:	e09d      	b.n	800c16a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c034:	4b53      	ldr	r3, [pc, #332]	; (800c184 <netif_add+0x194>)
 800c036:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c03e:	4b51      	ldr	r3, [pc, #324]	; (800c184 <netif_add+0x194>)
 800c040:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c048:	4b4e      	ldr	r3, [pc, #312]	; (800c184 <netif_add+0x194>)
 800c04a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	4a49      	ldr	r2, [pc, #292]	; (800c188 <netif_add+0x198>)
 800c062:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3324      	adds	r3, #36	; 0x24
 800c076:	2204      	movs	r2, #4
 800c078:	2100      	movs	r1, #0
 800c07a:	4618      	mov	r0, r3
 800c07c:	f00f feec 	bl	801be58 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6a3a      	ldr	r2, [r7, #32]
 800c08a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c08c:	4b3f      	ldr	r3, [pc, #252]	; (800c18c <netif_add+0x19c>)
 800c08e:	781a      	ldrb	r2, [r3, #0]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c09a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 f914 	bl	800c2d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	4798      	blx	r3
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d001      	beq.n	800c0b8 <netif_add+0xc8>
    return NULL;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	e058      	b.n	800c16a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0be:	2bff      	cmp	r3, #255	; 0xff
 800c0c0:	d103      	bne.n	800c0ca <netif_add+0xda>
        netif->num = 0;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c0ce:	4b30      	ldr	r3, [pc, #192]	; (800c190 <netif_add+0x1a0>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	e02b      	b.n	800c12e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d106      	bne.n	800c0ec <netif_add+0xfc>
 800c0de:	4b25      	ldr	r3, [pc, #148]	; (800c174 <netif_add+0x184>)
 800c0e0:	f240 128b 	movw	r2, #395	; 0x18b
 800c0e4:	492b      	ldr	r1, [pc, #172]	; (800c194 <netif_add+0x1a4>)
 800c0e6:	4825      	ldr	r0, [pc, #148]	; (800c17c <netif_add+0x18c>)
 800c0e8:	f00f febe 	bl	801be68 <iprintf>
        num_netifs++;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2bff      	cmp	r3, #255	; 0xff
 800c0f6:	dd06      	ble.n	800c106 <netif_add+0x116>
 800c0f8:	4b1e      	ldr	r3, [pc, #120]	; (800c174 <netif_add+0x184>)
 800c0fa:	f240 128d 	movw	r2, #397	; 0x18d
 800c0fe:	4926      	ldr	r1, [pc, #152]	; (800c198 <netif_add+0x1a8>)
 800c100:	481e      	ldr	r0, [pc, #120]	; (800c17c <netif_add+0x18c>)
 800c102:	f00f feb1 	bl	801be68 <iprintf>
        if (netif2->num == netif->num) {
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c112:	429a      	cmp	r2, r3
 800c114:	d108      	bne.n	800c128 <netif_add+0x138>
          netif->num++;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c11c:	3301      	adds	r3, #1
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c126:	e005      	b.n	800c134 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	617b      	str	r3, [r7, #20]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1d0      	bne.n	800c0d6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1be      	bne.n	800c0b8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c140:	2bfe      	cmp	r3, #254	; 0xfe
 800c142:	d103      	bne.n	800c14c <netif_add+0x15c>
    netif_num = 0;
 800c144:	4b11      	ldr	r3, [pc, #68]	; (800c18c <netif_add+0x19c>)
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	e006      	b.n	800c15a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c152:	3301      	adds	r3, #1
 800c154:	b2da      	uxtb	r2, r3
 800c156:	4b0d      	ldr	r3, [pc, #52]	; (800c18c <netif_add+0x19c>)
 800c158:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c15a:	4b0d      	ldr	r3, [pc, #52]	; (800c190 <netif_add+0x1a0>)
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c162:	4a0b      	ldr	r2, [pc, #44]	; (800c190 <netif_add+0x1a0>)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c168:	68fb      	ldr	r3, [r7, #12]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	0801e0a8 	.word	0x0801e0a8
 800c178:	0801e13c 	.word	0x0801e13c
 800c17c:	0801e0f8 	.word	0x0801e0f8
 800c180:	0801e158 	.word	0x0801e158
 800c184:	08020f48 	.word	0x08020f48
 800c188:	0800c5b3 	.word	0x0800c5b3
 800c18c:	200083ec 	.word	0x200083ec
 800c190:	2000c540 	.word	0x2000c540
 800c194:	0801e17c 	.word	0x0801e17c
 800c198:	0801e190 	.word	0x0801e190

0800c19c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f002 fe39 	bl	800ee20 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f007 ff75 	bl	80140a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c1b6:	bf00      	nop
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d106      	bne.n	800c1e0 <netif_do_set_ipaddr+0x20>
 800c1d2:	4b1d      	ldr	r3, [pc, #116]	; (800c248 <netif_do_set_ipaddr+0x88>)
 800c1d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c1d8:	491c      	ldr	r1, [pc, #112]	; (800c24c <netif_do_set_ipaddr+0x8c>)
 800c1da:	481d      	ldr	r0, [pc, #116]	; (800c250 <netif_do_set_ipaddr+0x90>)
 800c1dc:	f00f fe44 	bl	801be68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d106      	bne.n	800c1f4 <netif_do_set_ipaddr+0x34>
 800c1e6:	4b18      	ldr	r3, [pc, #96]	; (800c248 <netif_do_set_ipaddr+0x88>)
 800c1e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c1ec:	4917      	ldr	r1, [pc, #92]	; (800c24c <netif_do_set_ipaddr+0x8c>)
 800c1ee:	4818      	ldr	r0, [pc, #96]	; (800c250 <netif_do_set_ipaddr+0x90>)
 800c1f0:	f00f fe3a 	bl	801be68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d01c      	beq.n	800c23c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	3304      	adds	r3, #4
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c212:	f107 0314 	add.w	r3, r7, #20
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ffbf 	bl	800c19c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <netif_do_set_ipaddr+0x6a>
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	e000      	b.n	800c22c <netif_do_set_ipaddr+0x6c>
 800c22a:	2300      	movs	r3, #0
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c230:	2101      	movs	r1, #1
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 f8d2 	bl	800c3dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c238:	2301      	movs	r3, #1
 800c23a:	e000      	b.n	800c23e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3718      	adds	r7, #24
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	0801e0a8 	.word	0x0801e0a8
 800c24c:	0801e1c0 	.word	0x0801e1c0
 800c250:	0801e0f8 	.word	0x0801e0f8

0800c254 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	3308      	adds	r3, #8
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d00a      	beq.n	800c284 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <netif_do_set_netmask+0x26>
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	e000      	b.n	800c27c <netif_do_set_netmask+0x28>
 800c27a:	2300      	movs	r3, #0
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c280:	2301      	movs	r3, #1
 800c282:	e000      	b.n	800c286 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3714      	adds	r7, #20
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c292:	b480      	push	{r7}
 800c294:	b085      	sub	sp, #20
 800c296:	af00      	add	r7, sp, #0
 800c298:	60f8      	str	r0, [r7, #12]
 800c29a:	60b9      	str	r1, [r7, #8]
 800c29c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	330c      	adds	r3, #12
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d00a      	beq.n	800c2c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <netif_do_set_gw+0x26>
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	e000      	b.n	800c2ba <netif_do_set_gw+0x28>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e000      	b.n	800c2c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b088      	sub	sp, #32
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c2ec:	4b1c      	ldr	r3, [pc, #112]	; (800c360 <netif_set_addr+0x90>)
 800c2ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c2f6:	4b1a      	ldr	r3, [pc, #104]	; (800c360 <netif_set_addr+0x90>)
 800c2f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c300:	4b17      	ldr	r3, [pc, #92]	; (800c360 <netif_set_addr+0x90>)
 800c302:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <netif_set_addr+0x42>
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <netif_set_addr+0x46>
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <netif_set_addr+0x48>
 800c316:	2300      	movs	r3, #0
 800c318:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d006      	beq.n	800c32e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c320:	f107 0310 	add.w	r3, r7, #16
 800c324:	461a      	mov	r2, r3
 800c326:	68b9      	ldr	r1, [r7, #8]
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	f7ff ff49 	bl	800c1c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c32e:	69fa      	ldr	r2, [r7, #28]
 800c330:	6879      	ldr	r1, [r7, #4]
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f7ff ff8e 	bl	800c254 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c338:	69ba      	ldr	r2, [r7, #24]
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f7ff ffa8 	bl	800c292 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d106      	bne.n	800c356 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c348:	f107 0310 	add.w	r3, r7, #16
 800c34c:	461a      	mov	r2, r3
 800c34e:	68b9      	ldr	r1, [r7, #8]
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f7ff ff35 	bl	800c1c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c356:	bf00      	nop
 800c358:	3720      	adds	r7, #32
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	08020f48 	.word	0x08020f48

0800c364 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c36c:	4a04      	ldr	r2, [pc, #16]	; (800c380 <netif_set_default+0x1c>)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c372:	bf00      	nop
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	2000c544 	.word	0x2000c544

0800c384 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d107      	bne.n	800c3a2 <netif_set_up+0x1e>
 800c392:	4b0f      	ldr	r3, [pc, #60]	; (800c3d0 <netif_set_up+0x4c>)
 800c394:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c398:	490e      	ldr	r1, [pc, #56]	; (800c3d4 <netif_set_up+0x50>)
 800c39a:	480f      	ldr	r0, [pc, #60]	; (800c3d8 <netif_set_up+0x54>)
 800c39c:	f00f fd64 	bl	801be68 <iprintf>
 800c3a0:	e013      	b.n	800c3ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3a8:	f003 0301 	and.w	r3, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10c      	bne.n	800c3ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3b6:	f043 0301 	orr.w	r3, r3, #1
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c3c2:	2103      	movs	r1, #3
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f809 	bl	800c3dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	0801e0a8 	.word	0x0801e0a8
 800c3d4:	0801e230 	.word	0x0801e230
 800c3d8:	0801e0f8 	.word	0x0801e0f8

0800c3dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d106      	bne.n	800c3fc <netif_issue_reports+0x20>
 800c3ee:	4b18      	ldr	r3, [pc, #96]	; (800c450 <netif_issue_reports+0x74>)
 800c3f0:	f240 326d 	movw	r2, #877	; 0x36d
 800c3f4:	4917      	ldr	r1, [pc, #92]	; (800c454 <netif_issue_reports+0x78>)
 800c3f6:	4818      	ldr	r0, [pc, #96]	; (800c458 <netif_issue_reports+0x7c>)
 800c3f8:	f00f fd36 	bl	801be68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c402:	f003 0304 	and.w	r3, r3, #4
 800c406:	2b00      	cmp	r3, #0
 800c408:	d01e      	beq.n	800c448 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c410:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c414:	2b00      	cmp	r3, #0
 800c416:	d017      	beq.n	800c448 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c418:	78fb      	ldrb	r3, [r7, #3]
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d013      	beq.n	800c44a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	3304      	adds	r3, #4
 800c426:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00e      	beq.n	800c44a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c432:	f003 0308 	and.w	r3, r3, #8
 800c436:	2b00      	cmp	r3, #0
 800c438:	d007      	beq.n	800c44a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3304      	adds	r3, #4
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f00a fc3d 	bl	8016cc0 <etharp_request>
 800c446:	e000      	b.n	800c44a <netif_issue_reports+0x6e>
    return;
 800c448:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	0801e0a8 	.word	0x0801e0a8
 800c454:	0801e24c 	.word	0x0801e24c
 800c458:	0801e0f8 	.word	0x0801e0f8

0800c45c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d107      	bne.n	800c47a <netif_set_down+0x1e>
 800c46a:	4b12      	ldr	r3, [pc, #72]	; (800c4b4 <netif_set_down+0x58>)
 800c46c:	f240 329b 	movw	r2, #923	; 0x39b
 800c470:	4911      	ldr	r1, [pc, #68]	; (800c4b8 <netif_set_down+0x5c>)
 800c472:	4812      	ldr	r0, [pc, #72]	; (800c4bc <netif_set_down+0x60>)
 800c474:	f00f fcf8 	bl	801be68 <iprintf>
 800c478:	e019      	b.n	800c4ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c480:	f003 0301 	and.w	r3, r3, #1
 800c484:	2b00      	cmp	r3, #0
 800c486:	d012      	beq.n	800c4ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c48e:	f023 0301 	bic.w	r3, r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4a0:	f003 0308 	and.w	r3, r3, #8
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f009 ffc3 	bl	8016434 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	0801e0a8 	.word	0x0801e0a8
 800c4b8:	0801e270 	.word	0x0801e270
 800c4bc:	0801e0f8 	.word	0x0801e0f8

0800c4c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d107      	bne.n	800c4de <netif_set_link_up+0x1e>
 800c4ce:	4b15      	ldr	r3, [pc, #84]	; (800c524 <netif_set_link_up+0x64>)
 800c4d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c4d4:	4914      	ldr	r1, [pc, #80]	; (800c528 <netif_set_link_up+0x68>)
 800c4d6:	4815      	ldr	r0, [pc, #84]	; (800c52c <netif_set_link_up+0x6c>)
 800c4d8:	f00f fcc6 	bl	801be68 <iprintf>
 800c4dc:	e01e      	b.n	800c51c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4e4:	f003 0304 	and.w	r3, r3, #4
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d117      	bne.n	800c51c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4f2:	f043 0304 	orr.w	r3, r3, #4
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f008 f9f8 	bl	80148f4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c504:	2103      	movs	r1, #3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff ff68 	bl	800c3dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	69db      	ldr	r3, [r3, #28]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <netif_set_link_up+0x5c>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	0801e0a8 	.word	0x0801e0a8
 800c528:	0801e290 	.word	0x0801e290
 800c52c:	0801e0f8 	.word	0x0801e0f8

0800c530 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d107      	bne.n	800c54e <netif_set_link_down+0x1e>
 800c53e:	4b11      	ldr	r3, [pc, #68]	; (800c584 <netif_set_link_down+0x54>)
 800c540:	f240 4206 	movw	r2, #1030	; 0x406
 800c544:	4910      	ldr	r1, [pc, #64]	; (800c588 <netif_set_link_down+0x58>)
 800c546:	4811      	ldr	r0, [pc, #68]	; (800c58c <netif_set_link_down+0x5c>)
 800c548:	f00f fc8e 	bl	801be68 <iprintf>
 800c54c:	e017      	b.n	800c57e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c554:	f003 0304 	and.w	r3, r3, #4
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d010      	beq.n	800c57e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c562:	f023 0304 	bic.w	r3, r3, #4
 800c566:	b2da      	uxtb	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	69db      	ldr	r3, [r3, #28]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <netif_set_link_down+0x4e>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	0801e0a8 	.word	0x0801e0a8
 800c588:	0801e2b4 	.word	0x0801e2b4
 800c58c:	0801e0f8 	.word	0x0801e0f8

0800c590 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d002      	beq.n	800c5a6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	61da      	str	r2, [r3, #28]
  }
}
 800c5a6:	bf00      	nop
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr

0800c5b2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b085      	sub	sp, #20
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	60b9      	str	r1, [r7, #8]
 800c5bc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c5be:	f06f 030b 	mvn.w	r3, #11
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3714      	adds	r7, #20
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
	...

0800c5d0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c5da:	79fb      	ldrb	r3, [r7, #7]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d013      	beq.n	800c608 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c5e0:	4b0d      	ldr	r3, [pc, #52]	; (800c618 <netif_get_by_index+0x48>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	60fb      	str	r3, [r7, #12]
 800c5e6:	e00c      	b.n	800c602 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	79fa      	ldrb	r2, [r7, #7]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d101      	bne.n	800c5fc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	e006      	b.n	800c60a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	60fb      	str	r3, [r7, #12]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1ef      	bne.n	800c5e8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	2000c540 	.word	0x2000c540

0800c61c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c622:	f00c f9f5 	bl	8018a10 <sys_arch_protect>
 800c626:	6038      	str	r0, [r7, #0]
 800c628:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <pbuf_free_ooseq+0x44>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	6838      	ldr	r0, [r7, #0]
 800c630:	f00c f9fc 	bl	8018a2c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c634:	4b0b      	ldr	r3, [pc, #44]	; (800c664 <pbuf_free_ooseq+0x48>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	607b      	str	r3, [r7, #4]
 800c63a:	e00a      	b.n	800c652 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f002 fc29 	bl	800ee9c <tcp_free_ooseq>
      return;
 800c64a:	e005      	b.n	800c658 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	607b      	str	r3, [r7, #4]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1f1      	bne.n	800c63c <pbuf_free_ooseq+0x20>
    }
  }
}
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	2000c548 	.word	0x2000c548
 800c664:	2000c550 	.word	0x2000c550

0800c668 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c670:	f7ff ffd4 	bl	800c61c <pbuf_free_ooseq>
}
 800c674:	bf00      	nop
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c682:	f00c f9c5 	bl	8018a10 <sys_arch_protect>
 800c686:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c688:	4b0f      	ldr	r3, [pc, #60]	; (800c6c8 <pbuf_pool_is_empty+0x4c>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c68e:	4b0e      	ldr	r3, [pc, #56]	; (800c6c8 <pbuf_pool_is_empty+0x4c>)
 800c690:	2201      	movs	r2, #1
 800c692:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f00c f9c9 	bl	8018a2c <sys_arch_unprotect>

  if (!queued) {
 800c69a:	78fb      	ldrb	r3, [r7, #3]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10f      	bne.n	800c6c0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	480a      	ldr	r0, [pc, #40]	; (800c6cc <pbuf_pool_is_empty+0x50>)
 800c6a4:	f7fe feca 	bl	800b43c <tcpip_try_callback>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d008      	beq.n	800c6c0 <pbuf_pool_is_empty+0x44>
 800c6ae:	f00c f9af 	bl	8018a10 <sys_arch_protect>
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <pbuf_pool_is_empty+0x4c>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	701a      	strb	r2, [r3, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f00c f9b6 	bl	8018a2c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	2000c548 	.word	0x2000c548
 800c6cc:	0800c669 	.word	0x0800c669

0800c6d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	4611      	mov	r1, r2
 800c6dc:	461a      	mov	r2, r3
 800c6de:	460b      	mov	r3, r1
 800c6e0:	80fb      	strh	r3, [r7, #6]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	88fa      	ldrh	r2, [r7, #6]
 800c6f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	88ba      	ldrh	r2, [r7, #4]
 800c6fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c6fe:	8b3b      	ldrh	r3, [r7, #24]
 800c700:	b2da      	uxtb	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	7f3a      	ldrb	r2, [r7, #28]
 800c70a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2201      	movs	r2, #1
 800c710:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2200      	movs	r2, #0
 800c716:	73da      	strb	r2, [r3, #15]
}
 800c718:	bf00      	nop
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08c      	sub	sp, #48	; 0x30
 800c728:	af02      	add	r7, sp, #8
 800c72a:	4603      	mov	r3, r0
 800c72c:	71fb      	strb	r3, [r7, #7]
 800c72e:	460b      	mov	r3, r1
 800c730:	80bb      	strh	r3, [r7, #4]
 800c732:	4613      	mov	r3, r2
 800c734:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c736:	79fb      	ldrb	r3, [r7, #7]
 800c738:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c73a:	887b      	ldrh	r3, [r7, #2]
 800c73c:	2b41      	cmp	r3, #65	; 0x41
 800c73e:	d00b      	beq.n	800c758 <pbuf_alloc+0x34>
 800c740:	2b41      	cmp	r3, #65	; 0x41
 800c742:	dc02      	bgt.n	800c74a <pbuf_alloc+0x26>
 800c744:	2b01      	cmp	r3, #1
 800c746:	d007      	beq.n	800c758 <pbuf_alloc+0x34>
 800c748:	e0c2      	b.n	800c8d0 <pbuf_alloc+0x1ac>
 800c74a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c74e:	d00b      	beq.n	800c768 <pbuf_alloc+0x44>
 800c750:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c754:	d070      	beq.n	800c838 <pbuf_alloc+0x114>
 800c756:	e0bb      	b.n	800c8d0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c758:	887a      	ldrh	r2, [r7, #2]
 800c75a:	88bb      	ldrh	r3, [r7, #4]
 800c75c:	4619      	mov	r1, r3
 800c75e:	2000      	movs	r0, #0
 800c760:	f000 f8d2 	bl	800c908 <pbuf_alloc_reference>
 800c764:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c766:	e0bd      	b.n	800c8e4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c768:	2300      	movs	r3, #0
 800c76a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c76c:	2300      	movs	r3, #0
 800c76e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c770:	88bb      	ldrh	r3, [r7, #4]
 800c772:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c774:	200c      	movs	r0, #12
 800c776:	f7ff fbb7 	bl	800bee8 <memp_malloc>
 800c77a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d109      	bne.n	800c796 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800c782:	f7ff ff7b 	bl	800c67c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800c78c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c78e:	f000 fadb 	bl	800cd48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	e0a7      	b.n	800c8e6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c798:	3303      	adds	r3, #3
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	f023 0303 	bic.w	r3, r3, #3
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	8b7a      	ldrh	r2, [r7, #26]
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	bf28      	it	cs
 800c7ae:	4613      	movcs	r3, r2
 800c7b0:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c7b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7b4:	3310      	adds	r3, #16
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	3303      	adds	r3, #3
 800c7bc:	f023 0303 	bic.w	r3, r3, #3
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	89f9      	ldrh	r1, [r7, #14]
 800c7c4:	8b7a      	ldrh	r2, [r7, #26]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	887b      	ldrh	r3, [r7, #2]
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	4601      	mov	r1, r0
 800c7d2:	6938      	ldr	r0, [r7, #16]
 800c7d4:	f7ff ff7c 	bl	800c6d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	f003 0303 	and.w	r3, r3, #3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d006      	beq.n	800c7f2 <pbuf_alloc+0xce>
 800c7e4:	4b42      	ldr	r3, [pc, #264]	; (800c8f0 <pbuf_alloc+0x1cc>)
 800c7e6:	f240 1201 	movw	r2, #257	; 0x101
 800c7ea:	4942      	ldr	r1, [pc, #264]	; (800c8f4 <pbuf_alloc+0x1d0>)
 800c7ec:	4842      	ldr	r0, [pc, #264]	; (800c8f8 <pbuf_alloc+0x1d4>)
 800c7ee:	f00f fb3b 	bl	801be68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c7f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7f4:	3303      	adds	r3, #3
 800c7f6:	f023 0303 	bic.w	r3, r3, #3
 800c7fa:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c7fe:	d106      	bne.n	800c80e <pbuf_alloc+0xea>
 800c800:	4b3b      	ldr	r3, [pc, #236]	; (800c8f0 <pbuf_alloc+0x1cc>)
 800c802:	f240 1203 	movw	r2, #259	; 0x103
 800c806:	493d      	ldr	r1, [pc, #244]	; (800c8fc <pbuf_alloc+0x1d8>)
 800c808:	483b      	ldr	r0, [pc, #236]	; (800c8f8 <pbuf_alloc+0x1d4>)
 800c80a:	f00f fb2d 	bl	801be68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	d102      	bne.n	800c81a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	627b      	str	r3, [r7, #36]	; 0x24
 800c818:	e002      	b.n	800c820 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c824:	8b7a      	ldrh	r2, [r7, #26]
 800c826:	89fb      	ldrh	r3, [r7, #14]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c82c:	2300      	movs	r3, #0
 800c82e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c830:	8b7b      	ldrh	r3, [r7, #26]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d19e      	bne.n	800c774 <pbuf_alloc+0x50>
      break;
 800c836:	e055      	b.n	800c8e4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c83a:	3303      	adds	r3, #3
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	f023 0303 	bic.w	r3, r3, #3
 800c842:	b29a      	uxth	r2, r3
 800c844:	88bb      	ldrh	r3, [r7, #4]
 800c846:	3303      	adds	r3, #3
 800c848:	b29b      	uxth	r3, r3
 800c84a:	f023 0303 	bic.w	r3, r3, #3
 800c84e:	b29b      	uxth	r3, r3
 800c850:	4413      	add	r3, r2
 800c852:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c854:	8b3b      	ldrh	r3, [r7, #24]
 800c856:	3310      	adds	r3, #16
 800c858:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c85a:	8b3a      	ldrh	r2, [r7, #24]
 800c85c:	88bb      	ldrh	r3, [r7, #4]
 800c85e:	3303      	adds	r3, #3
 800c860:	f023 0303 	bic.w	r3, r3, #3
 800c864:	429a      	cmp	r2, r3
 800c866:	d306      	bcc.n	800c876 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c868:	8afa      	ldrh	r2, [r7, #22]
 800c86a:	88bb      	ldrh	r3, [r7, #4]
 800c86c:	3303      	adds	r3, #3
 800c86e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c872:	429a      	cmp	r2, r3
 800c874:	d201      	bcs.n	800c87a <pbuf_alloc+0x156>
        return NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	e035      	b.n	800c8e6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c87a:	8afb      	ldrh	r3, [r7, #22]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff f9b1 	bl	800bbe4 <mem_malloc>
 800c882:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <pbuf_alloc+0x16a>
        return NULL;
 800c88a:	2300      	movs	r3, #0
 800c88c:	e02b      	b.n	800c8e6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c88e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c890:	3310      	adds	r3, #16
 800c892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c894:	4413      	add	r3, r2
 800c896:	3303      	adds	r3, #3
 800c898:	f023 0303 	bic.w	r3, r3, #3
 800c89c:	4618      	mov	r0, r3
 800c89e:	88b9      	ldrh	r1, [r7, #4]
 800c8a0:	88ba      	ldrh	r2, [r7, #4]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	9301      	str	r3, [sp, #4]
 800c8a6:	887b      	ldrh	r3, [r7, #2]
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4601      	mov	r1, r0
 800c8ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8b0:	f7ff ff0e 	bl	800c6d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	f003 0303 	and.w	r3, r3, #3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d010      	beq.n	800c8e2 <pbuf_alloc+0x1be>
 800c8c0:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <pbuf_alloc+0x1cc>)
 800c8c2:	f240 1223 	movw	r2, #291	; 0x123
 800c8c6:	490e      	ldr	r1, [pc, #56]	; (800c900 <pbuf_alloc+0x1dc>)
 800c8c8:	480b      	ldr	r0, [pc, #44]	; (800c8f8 <pbuf_alloc+0x1d4>)
 800c8ca:	f00f facd 	bl	801be68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c8ce:	e008      	b.n	800c8e2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <pbuf_alloc+0x1cc>)
 800c8d2:	f240 1227 	movw	r2, #295	; 0x127
 800c8d6:	490b      	ldr	r1, [pc, #44]	; (800c904 <pbuf_alloc+0x1e0>)
 800c8d8:	4807      	ldr	r0, [pc, #28]	; (800c8f8 <pbuf_alloc+0x1d4>)
 800c8da:	f00f fac5 	bl	801be68 <iprintf>
      return NULL;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	e001      	b.n	800c8e6 <pbuf_alloc+0x1c2>
      break;
 800c8e2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3728      	adds	r7, #40	; 0x28
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	0801e2d8 	.word	0x0801e2d8
 800c8f4:	0801e308 	.word	0x0801e308
 800c8f8:	0801e338 	.word	0x0801e338
 800c8fc:	0801e360 	.word	0x0801e360
 800c900:	0801e394 	.word	0x0801e394
 800c904:	0801e3c0 	.word	0x0801e3c0

0800c908 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af02      	add	r7, sp, #8
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	807b      	strh	r3, [r7, #2]
 800c914:	4613      	mov	r3, r2
 800c916:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c918:	883b      	ldrh	r3, [r7, #0]
 800c91a:	2b41      	cmp	r3, #65	; 0x41
 800c91c:	d009      	beq.n	800c932 <pbuf_alloc_reference+0x2a>
 800c91e:	883b      	ldrh	r3, [r7, #0]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d006      	beq.n	800c932 <pbuf_alloc_reference+0x2a>
 800c924:	4b0f      	ldr	r3, [pc, #60]	; (800c964 <pbuf_alloc_reference+0x5c>)
 800c926:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c92a:	490f      	ldr	r1, [pc, #60]	; (800c968 <pbuf_alloc_reference+0x60>)
 800c92c:	480f      	ldr	r0, [pc, #60]	; (800c96c <pbuf_alloc_reference+0x64>)
 800c92e:	f00f fa9b 	bl	801be68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c932:	200b      	movs	r0, #11
 800c934:	f7ff fad8 	bl	800bee8 <memp_malloc>
 800c938:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c940:	2300      	movs	r3, #0
 800c942:	e00b      	b.n	800c95c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c944:	8879      	ldrh	r1, [r7, #2]
 800c946:	887a      	ldrh	r2, [r7, #2]
 800c948:	2300      	movs	r3, #0
 800c94a:	9301      	str	r3, [sp, #4]
 800c94c:	883b      	ldrh	r3, [r7, #0]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	460b      	mov	r3, r1
 800c952:	6879      	ldr	r1, [r7, #4]
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff febb 	bl	800c6d0 <pbuf_init_alloced_pbuf>
  return p;
 800c95a:	68fb      	ldr	r3, [r7, #12]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	0801e2d8 	.word	0x0801e2d8
 800c968:	0801e3dc 	.word	0x0801e3dc
 800c96c:	0801e338 	.word	0x0801e338

0800c970 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b088      	sub	sp, #32
 800c974:	af02      	add	r7, sp, #8
 800c976:	607b      	str	r3, [r7, #4]
 800c978:	4603      	mov	r3, r0
 800c97a:	73fb      	strb	r3, [r7, #15]
 800c97c:	460b      	mov	r3, r1
 800c97e:	81bb      	strh	r3, [r7, #12]
 800c980:	4613      	mov	r3, r2
 800c982:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c984:	7bfb      	ldrb	r3, [r7, #15]
 800c986:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c988:	8a7b      	ldrh	r3, [r7, #18]
 800c98a:	3303      	adds	r3, #3
 800c98c:	f023 0203 	bic.w	r2, r3, #3
 800c990:	89bb      	ldrh	r3, [r7, #12]
 800c992:	441a      	add	r2, r3
 800c994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c996:	429a      	cmp	r2, r3
 800c998:	d901      	bls.n	800c99e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	e018      	b.n	800c9d0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d007      	beq.n	800c9b4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c9a4:	8a7b      	ldrh	r3, [r7, #18]
 800c9a6:	3303      	adds	r3, #3
 800c9a8:	f023 0303 	bic.w	r3, r3, #3
 800c9ac:	6a3a      	ldr	r2, [r7, #32]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	617b      	str	r3, [r7, #20]
 800c9b2:	e001      	b.n	800c9b8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	89b9      	ldrh	r1, [r7, #12]
 800c9bc:	89ba      	ldrh	r2, [r7, #12]
 800c9be:	2302      	movs	r3, #2
 800c9c0:	9301      	str	r3, [sp, #4]
 800c9c2:	897b      	ldrh	r3, [r7, #10]
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	6979      	ldr	r1, [r7, #20]
 800c9ca:	f7ff fe81 	bl	800c6d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c9ce:	687b      	ldr	r3, [r7, #4]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d106      	bne.n	800c9f8 <pbuf_realloc+0x20>
 800c9ea:	4b3a      	ldr	r3, [pc, #232]	; (800cad4 <pbuf_realloc+0xfc>)
 800c9ec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c9f0:	4939      	ldr	r1, [pc, #228]	; (800cad8 <pbuf_realloc+0x100>)
 800c9f2:	483a      	ldr	r0, [pc, #232]	; (800cadc <pbuf_realloc+0x104>)
 800c9f4:	f00f fa38 	bl	801be68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	891b      	ldrh	r3, [r3, #8]
 800c9fc:	887a      	ldrh	r2, [r7, #2]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d264      	bcs.n	800cacc <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	891a      	ldrh	r2, [r3, #8]
 800ca06:	887b      	ldrh	r3, [r7, #2]
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ca0c:	887b      	ldrh	r3, [r7, #2]
 800ca0e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ca14:	e018      	b.n	800ca48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	895b      	ldrh	r3, [r3, #10]
 800ca1a:	897a      	ldrh	r2, [r7, #10]
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	891a      	ldrh	r2, [r3, #8]
 800ca24:	893b      	ldrh	r3, [r7, #8]
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d106      	bne.n	800ca48 <pbuf_realloc+0x70>
 800ca3a:	4b26      	ldr	r3, [pc, #152]	; (800cad4 <pbuf_realloc+0xfc>)
 800ca3c:	f240 12af 	movw	r2, #431	; 0x1af
 800ca40:	4927      	ldr	r1, [pc, #156]	; (800cae0 <pbuf_realloc+0x108>)
 800ca42:	4826      	ldr	r0, [pc, #152]	; (800cadc <pbuf_realloc+0x104>)
 800ca44:	f00f fa10 	bl	801be68 <iprintf>
  while (rem_len > q->len) {
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	895b      	ldrh	r3, [r3, #10]
 800ca4c:	897a      	ldrh	r2, [r7, #10]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d8e1      	bhi.n	800ca16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	7b1b      	ldrb	r3, [r3, #12]
 800ca56:	f003 030f 	and.w	r3, r3, #15
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d122      	bne.n	800caa4 <pbuf_realloc+0xcc>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	895b      	ldrh	r3, [r3, #10]
 800ca62:	897a      	ldrh	r2, [r7, #10]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d01d      	beq.n	800caa4 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	7b5b      	ldrb	r3, [r3, #13]
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d117      	bne.n	800caa4 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	897b      	ldrh	r3, [r7, #10]
 800ca82:	4413      	add	r3, r2
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	4619      	mov	r1, r3
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f7fe ffa1 	bl	800b9d0 <mem_trim>
 800ca8e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d106      	bne.n	800caa4 <pbuf_realloc+0xcc>
 800ca96:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <pbuf_realloc+0xfc>)
 800ca98:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ca9c:	4911      	ldr	r1, [pc, #68]	; (800cae4 <pbuf_realloc+0x10c>)
 800ca9e:	480f      	ldr	r0, [pc, #60]	; (800cadc <pbuf_realloc+0x104>)
 800caa0:	f00f f9e2 	bl	801be68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	897a      	ldrh	r2, [r7, #10]
 800caa8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	895a      	ldrh	r2, [r3, #10]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d004      	beq.n	800cac4 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 f942 	bl	800cd48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2200      	movs	r2, #0
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	e000      	b.n	800cace <pbuf_realloc+0xf6>
    return;
 800cacc:	bf00      	nop

}
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	0801e2d8 	.word	0x0801e2d8
 800cad8:	0801e3f0 	.word	0x0801e3f0
 800cadc:	0801e338 	.word	0x0801e338
 800cae0:	0801e408 	.word	0x0801e408
 800cae4:	0801e420 	.word	0x0801e420

0800cae8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	4613      	mov	r3, r2
 800caf4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d106      	bne.n	800cb0a <pbuf_add_header_impl+0x22>
 800cafc:	4b2b      	ldr	r3, [pc, #172]	; (800cbac <pbuf_add_header_impl+0xc4>)
 800cafe:	f240 12df 	movw	r2, #479	; 0x1df
 800cb02:	492b      	ldr	r1, [pc, #172]	; (800cbb0 <pbuf_add_header_impl+0xc8>)
 800cb04:	482b      	ldr	r0, [pc, #172]	; (800cbb4 <pbuf_add_header_impl+0xcc>)
 800cb06:	f00f f9af 	bl	801be68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d003      	beq.n	800cb18 <pbuf_add_header_impl+0x30>
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb16:	d301      	bcc.n	800cb1c <pbuf_add_header_impl+0x34>
    return 1;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e043      	b.n	800cba4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d101      	bne.n	800cb26 <pbuf_add_header_impl+0x3e>
    return 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	e03e      	b.n	800cba4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	891a      	ldrh	r2, [r3, #8]
 800cb2e:	8a7b      	ldrh	r3, [r7, #18]
 800cb30:	4413      	add	r3, r2
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	8a7a      	ldrh	r2, [r7, #18]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d901      	bls.n	800cb3e <pbuf_add_header_impl+0x56>
    return 1;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e032      	b.n	800cba4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	7b1b      	ldrb	r3, [r3, #12]
 800cb42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cb44:	8a3b      	ldrh	r3, [r7, #16]
 800cb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00c      	beq.n	800cb68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	425b      	negs	r3, r3
 800cb56:	4413      	add	r3, r2
 800cb58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3310      	adds	r3, #16
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d20d      	bcs.n	800cb80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e01d      	b.n	800cba4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d006      	beq.n	800cb7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	425b      	negs	r3, r3
 800cb76:	4413      	add	r3, r2
 800cb78:	617b      	str	r3, [r7, #20]
 800cb7a:	e001      	b.n	800cb80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e011      	b.n	800cba4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	895a      	ldrh	r2, [r3, #10]
 800cb8a:	8a7b      	ldrh	r3, [r7, #18]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	891a      	ldrh	r2, [r3, #8]
 800cb98:	8a7b      	ldrh	r3, [r7, #18]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	811a      	strh	r2, [r3, #8]


  return 0;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	0801e2d8 	.word	0x0801e2d8
 800cbb0:	0801e43c 	.word	0x0801e43c
 800cbb4:	0801e338 	.word	0x0801e338

0800cbb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff ff8e 	bl	800cae8 <pbuf_add_header_impl>
 800cbcc:	4603      	mov	r3, r0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d106      	bne.n	800cbf6 <pbuf_remove_header+0x1e>
 800cbe8:	4b20      	ldr	r3, [pc, #128]	; (800cc6c <pbuf_remove_header+0x94>)
 800cbea:	f240 224b 	movw	r2, #587	; 0x24b
 800cbee:	4920      	ldr	r1, [pc, #128]	; (800cc70 <pbuf_remove_header+0x98>)
 800cbf0:	4820      	ldr	r0, [pc, #128]	; (800cc74 <pbuf_remove_header+0x9c>)
 800cbf2:	f00f f939 	bl	801be68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d003      	beq.n	800cc04 <pbuf_remove_header+0x2c>
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc02:	d301      	bcc.n	800cc08 <pbuf_remove_header+0x30>
    return 1;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e02c      	b.n	800cc62 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <pbuf_remove_header+0x3a>
    return 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	e027      	b.n	800cc62 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	895b      	ldrh	r3, [r3, #10]
 800cc1a:	89fa      	ldrh	r2, [r7, #14]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d908      	bls.n	800cc32 <pbuf_remove_header+0x5a>
 800cc20:	4b12      	ldr	r3, [pc, #72]	; (800cc6c <pbuf_remove_header+0x94>)
 800cc22:	f240 2255 	movw	r2, #597	; 0x255
 800cc26:	4914      	ldr	r1, [pc, #80]	; (800cc78 <pbuf_remove_header+0xa0>)
 800cc28:	4812      	ldr	r0, [pc, #72]	; (800cc74 <pbuf_remove_header+0x9c>)
 800cc2a:	f00f f91d 	bl	801be68 <iprintf>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e017      	b.n	800cc62 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	441a      	add	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	895a      	ldrh	r2, [r3, #10]
 800cc48:	89fb      	ldrh	r3, [r7, #14]
 800cc4a:	1ad3      	subs	r3, r2, r3
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	891a      	ldrh	r2, [r3, #8]
 800cc56:	89fb      	ldrh	r3, [r7, #14]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	0801e2d8 	.word	0x0801e2d8
 800cc70:	0801e43c 	.word	0x0801e43c
 800cc74:	0801e338 	.word	0x0801e338
 800cc78:	0801e448 	.word	0x0801e448

0800cc7c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	807b      	strh	r3, [r7, #2]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cc8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	da08      	bge.n	800cca6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cc94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cc98:	425b      	negs	r3, r3
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7ff ff9b 	bl	800cbd8 <pbuf_remove_header>
 800cca2:	4603      	mov	r3, r0
 800cca4:	e007      	b.n	800ccb6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cca6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ccaa:	787a      	ldrb	r2, [r7, #1]
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7ff ff1a 	bl	800cae8 <pbuf_add_header_impl>
 800ccb4:	4603      	mov	r3, r0
  }
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b082      	sub	sp, #8
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ccca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff ffd2 	bl	800cc7c <pbuf_header_impl>
 800ccd8:	4603      	mov	r3, r0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b086      	sub	sp, #24
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	460b      	mov	r3, r1
 800ccec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800ccf2:	887b      	ldrh	r3, [r7, #2]
 800ccf4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ccf6:	e01c      	b.n	800cd32 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	895b      	ldrh	r3, [r3, #10]
 800ccfc:	8a7a      	ldrh	r2, [r7, #18]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d310      	bcc.n	800cd24 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	895b      	ldrh	r3, [r3, #10]
 800cd0a:	8a7a      	ldrh	r2, [r7, #18]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f000 f813 	bl	800cd48 <pbuf_free>
 800cd22:	e006      	b.n	800cd32 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800cd24:	8a7b      	ldrh	r3, [r7, #18]
 800cd26:	4619      	mov	r1, r3
 800cd28:	6978      	ldr	r0, [r7, #20]
 800cd2a:	f7ff ff55 	bl	800cbd8 <pbuf_remove_header>
      free_left = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800cd32:	8a7b      	ldrh	r3, [r7, #18]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <pbuf_free_header+0x5c>
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1dc      	bne.n	800ccf8 <pbuf_free_header+0x16>
    }
  }
  return p;
 800cd3e:	697b      	ldr	r3, [r7, #20]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b088      	sub	sp, #32
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10b      	bne.n	800cd6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d106      	bne.n	800cd6a <pbuf_free+0x22>
 800cd5c:	4b3b      	ldr	r3, [pc, #236]	; (800ce4c <pbuf_free+0x104>)
 800cd5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cd62:	493b      	ldr	r1, [pc, #236]	; (800ce50 <pbuf_free+0x108>)
 800cd64:	483b      	ldr	r0, [pc, #236]	; (800ce54 <pbuf_free+0x10c>)
 800cd66:	f00f f87f 	bl	801be68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e069      	b.n	800ce42 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cd72:	e062      	b.n	800ce3a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cd74:	f00b fe4c 	bl	8018a10 <sys_arch_protect>
 800cd78:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	7b9b      	ldrb	r3, [r3, #14]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <pbuf_free+0x48>
 800cd82:	4b32      	ldr	r3, [pc, #200]	; (800ce4c <pbuf_free+0x104>)
 800cd84:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cd88:	4933      	ldr	r1, [pc, #204]	; (800ce58 <pbuf_free+0x110>)
 800cd8a:	4832      	ldr	r0, [pc, #200]	; (800ce54 <pbuf_free+0x10c>)
 800cd8c:	f00f f86c 	bl	801be68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	7b9b      	ldrb	r3, [r3, #14]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	739a      	strb	r2, [r3, #14]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	7b9b      	ldrb	r3, [r3, #14]
 800cda0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cda2:	69b8      	ldr	r0, [r7, #24]
 800cda4:	f00b fe42 	bl	8018a2c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cda8:	7dfb      	ldrb	r3, [r7, #23]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d143      	bne.n	800ce36 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7b1b      	ldrb	r3, [r3, #12]
 800cdb8:	f003 030f 	and.w	r3, r3, #15
 800cdbc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	7b5b      	ldrb	r3, [r3, #13]
 800cdc2:	f003 0302 	and.w	r3, r3, #2
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d011      	beq.n	800cdee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <pbuf_free+0x9c>
 800cdd6:	4b1d      	ldr	r3, [pc, #116]	; (800ce4c <pbuf_free+0x104>)
 800cdd8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cddc:	491f      	ldr	r1, [pc, #124]	; (800ce5c <pbuf_free+0x114>)
 800cdde:	481d      	ldr	r0, [pc, #116]	; (800ce54 <pbuf_free+0x10c>)
 800cde0:	f00f f842 	bl	801be68 <iprintf>
        pc->custom_free_function(p);
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	4798      	blx	r3
 800cdec:	e01d      	b.n	800ce2a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d104      	bne.n	800cdfe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	200c      	movs	r0, #12
 800cdf8:	f7ff f8c8 	bl	800bf8c <memp_free>
 800cdfc:	e015      	b.n	800ce2a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d104      	bne.n	800ce0e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ce04:	6879      	ldr	r1, [r7, #4]
 800ce06:	200b      	movs	r0, #11
 800ce08:	f7ff f8c0 	bl	800bf8c <memp_free>
 800ce0c:	e00d      	b.n	800ce2a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d103      	bne.n	800ce1c <pbuf_free+0xd4>
          mem_free(p);
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f7fe fd4b 	bl	800b8b0 <mem_free>
 800ce1a:	e006      	b.n	800ce2a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ce1c:	4b0b      	ldr	r3, [pc, #44]	; (800ce4c <pbuf_free+0x104>)
 800ce1e:	f240 320f 	movw	r2, #783	; 0x30f
 800ce22:	490f      	ldr	r1, [pc, #60]	; (800ce60 <pbuf_free+0x118>)
 800ce24:	480b      	ldr	r0, [pc, #44]	; (800ce54 <pbuf_free+0x10c>)
 800ce26:	f00f f81f 	bl	801be68 <iprintf>
        }
      }
      count++;
 800ce2a:	7ffb      	ldrb	r3, [r7, #31]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	607b      	str	r3, [r7, #4]
 800ce34:	e001      	b.n	800ce3a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d199      	bne.n	800cd74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ce40:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3720      	adds	r7, #32
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	0801e2d8 	.word	0x0801e2d8
 800ce50:	0801e43c 	.word	0x0801e43c
 800ce54:	0801e338 	.word	0x0801e338
 800ce58:	0801e468 	.word	0x0801e468
 800ce5c:	0801e480 	.word	0x0801e480
 800ce60:	0801e4a4 	.word	0x0801e4a4

0800ce64 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ce70:	e005      	b.n	800ce7e <pbuf_clen+0x1a>
    ++len;
 800ce72:	89fb      	ldrh	r3, [r7, #14]
 800ce74:	3301      	adds	r3, #1
 800ce76:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1f6      	bne.n	800ce72 <pbuf_clen+0xe>
  }
  return len;
 800ce84:	89fb      	ldrh	r3, [r7, #14]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
	...

0800ce94 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d016      	beq.n	800ced0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cea2:	f00b fdb5 	bl	8018a10 <sys_arch_protect>
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7b9b      	ldrb	r3, [r3, #14]
 800ceac:	3301      	adds	r3, #1
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	739a      	strb	r2, [r3, #14]
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f00b fdb9 	bl	8018a2c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7b9b      	ldrb	r3, [r3, #14]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d106      	bne.n	800ced0 <pbuf_ref+0x3c>
 800cec2:	4b05      	ldr	r3, [pc, #20]	; (800ced8 <pbuf_ref+0x44>)
 800cec4:	f240 3242 	movw	r2, #834	; 0x342
 800cec8:	4904      	ldr	r1, [pc, #16]	; (800cedc <pbuf_ref+0x48>)
 800ceca:	4805      	ldr	r0, [pc, #20]	; (800cee0 <pbuf_ref+0x4c>)
 800cecc:	f00e ffcc 	bl	801be68 <iprintf>
  }
}
 800ced0:	bf00      	nop
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	0801e2d8 	.word	0x0801e2d8
 800cedc:	0801e4b8 	.word	0x0801e4b8
 800cee0:	0801e338 	.word	0x0801e338

0800cee4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <pbuf_cat+0x16>
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d107      	bne.n	800cf0a <pbuf_cat+0x26>
 800cefa:	4b20      	ldr	r3, [pc, #128]	; (800cf7c <pbuf_cat+0x98>)
 800cefc:	f240 325a 	movw	r2, #858	; 0x35a
 800cf00:	491f      	ldr	r1, [pc, #124]	; (800cf80 <pbuf_cat+0x9c>)
 800cf02:	4820      	ldr	r0, [pc, #128]	; (800cf84 <pbuf_cat+0xa0>)
 800cf04:	f00e ffb0 	bl	801be68 <iprintf>
 800cf08:	e034      	b.n	800cf74 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	60fb      	str	r3, [r7, #12]
 800cf0e:	e00a      	b.n	800cf26 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	891a      	ldrh	r2, [r3, #8]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	891b      	ldrh	r3, [r3, #8]
 800cf18:	4413      	add	r3, r2
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	60fb      	str	r3, [r7, #12]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d1f0      	bne.n	800cf10 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	891a      	ldrh	r2, [r3, #8]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	895b      	ldrh	r3, [r3, #10]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d006      	beq.n	800cf48 <pbuf_cat+0x64>
 800cf3a:	4b10      	ldr	r3, [pc, #64]	; (800cf7c <pbuf_cat+0x98>)
 800cf3c:	f240 3262 	movw	r2, #866	; 0x362
 800cf40:	4911      	ldr	r1, [pc, #68]	; (800cf88 <pbuf_cat+0xa4>)
 800cf42:	4810      	ldr	r0, [pc, #64]	; (800cf84 <pbuf_cat+0xa0>)
 800cf44:	f00e ff90 	bl	801be68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d006      	beq.n	800cf5e <pbuf_cat+0x7a>
 800cf50:	4b0a      	ldr	r3, [pc, #40]	; (800cf7c <pbuf_cat+0x98>)
 800cf52:	f240 3263 	movw	r2, #867	; 0x363
 800cf56:	490d      	ldr	r1, [pc, #52]	; (800cf8c <pbuf_cat+0xa8>)
 800cf58:	480a      	ldr	r0, [pc, #40]	; (800cf84 <pbuf_cat+0xa0>)
 800cf5a:	f00e ff85 	bl	801be68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	891a      	ldrh	r2, [r3, #8]
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	891b      	ldrh	r3, [r3, #8]
 800cf66:	4413      	add	r3, r2
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	0801e2d8 	.word	0x0801e2d8
 800cf80:	0801e4cc 	.word	0x0801e4cc
 800cf84:	0801e338 	.word	0x0801e338
 800cf88:	0801e504 	.word	0x0801e504
 800cf8c:	0801e534 	.word	0x0801e534

0800cf90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f7ff ffa1 	bl	800cee4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cfa2:	6838      	ldr	r0, [r7, #0]
 800cfa4:	f7ff ff76 	bl	800ce94 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cfa8:	bf00      	nop
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d008      	beq.n	800cfda <pbuf_copy+0x2a>
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d005      	beq.n	800cfda <pbuf_copy+0x2a>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	891a      	ldrh	r2, [r3, #8]
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	891b      	ldrh	r3, [r3, #8]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d209      	bcs.n	800cfee <pbuf_copy+0x3e>
 800cfda:	4b57      	ldr	r3, [pc, #348]	; (800d138 <pbuf_copy+0x188>)
 800cfdc:	f240 32ca 	movw	r2, #970	; 0x3ca
 800cfe0:	4956      	ldr	r1, [pc, #344]	; (800d13c <pbuf_copy+0x18c>)
 800cfe2:	4857      	ldr	r0, [pc, #348]	; (800d140 <pbuf_copy+0x190>)
 800cfe4:	f00e ff40 	bl	801be68 <iprintf>
 800cfe8:	f06f 030f 	mvn.w	r3, #15
 800cfec:	e09f      	b.n	800d12e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	895b      	ldrh	r3, [r3, #10]
 800cff2:	461a      	mov	r2, r3
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	1ad2      	subs	r2, r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	895b      	ldrh	r3, [r3, #10]
 800cffc:	4619      	mov	r1, r3
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	1acb      	subs	r3, r1, r3
 800d002:	429a      	cmp	r2, r3
 800d004:	d306      	bcc.n	800d014 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	895b      	ldrh	r3, [r3, #10]
 800d00a:	461a      	mov	r2, r3
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	60fb      	str	r3, [r7, #12]
 800d012:	e005      	b.n	800d020 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	895b      	ldrh	r3, [r3, #10]
 800d018:	461a      	mov	r2, r3
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	685a      	ldr	r2, [r3, #4]
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	18d0      	adds	r0, r2, r3
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	4413      	add	r3, r2
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	4619      	mov	r1, r3
 800d034:	f00e ff05 	bl	801be42 <memcpy>
    offset_to += len;
 800d038:	697a      	ldr	r2, [r7, #20]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	4413      	add	r3, r2
 800d03e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	4413      	add	r3, r2
 800d046:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	895b      	ldrh	r3, [r3, #10]
 800d04c:	461a      	mov	r2, r3
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	4293      	cmp	r3, r2
 800d052:	d906      	bls.n	800d062 <pbuf_copy+0xb2>
 800d054:	4b38      	ldr	r3, [pc, #224]	; (800d138 <pbuf_copy+0x188>)
 800d056:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d05a:	493a      	ldr	r1, [pc, #232]	; (800d144 <pbuf_copy+0x194>)
 800d05c:	4838      	ldr	r0, [pc, #224]	; (800d140 <pbuf_copy+0x190>)
 800d05e:	f00e ff03 	bl	801be68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	895b      	ldrh	r3, [r3, #10]
 800d066:	461a      	mov	r2, r3
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d906      	bls.n	800d07c <pbuf_copy+0xcc>
 800d06e:	4b32      	ldr	r3, [pc, #200]	; (800d138 <pbuf_copy+0x188>)
 800d070:	f240 32da 	movw	r2, #986	; 0x3da
 800d074:	4934      	ldr	r1, [pc, #208]	; (800d148 <pbuf_copy+0x198>)
 800d076:	4832      	ldr	r0, [pc, #200]	; (800d140 <pbuf_copy+0x190>)
 800d078:	f00e fef6 	bl	801be68 <iprintf>
    if (offset_from >= p_from->len) {
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	895b      	ldrh	r3, [r3, #10]
 800d080:	461a      	mov	r2, r3
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	4293      	cmp	r3, r2
 800d086:	d304      	bcc.n	800d092 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	895b      	ldrh	r3, [r3, #10]
 800d096:	461a      	mov	r2, r3
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d114      	bne.n	800d0c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10c      	bne.n	800d0c8 <pbuf_copy+0x118>
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d009      	beq.n	800d0c8 <pbuf_copy+0x118>
 800d0b4:	4b20      	ldr	r3, [pc, #128]	; (800d138 <pbuf_copy+0x188>)
 800d0b6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d0ba:	4924      	ldr	r1, [pc, #144]	; (800d14c <pbuf_copy+0x19c>)
 800d0bc:	4820      	ldr	r0, [pc, #128]	; (800d140 <pbuf_copy+0x190>)
 800d0be:	f00e fed3 	bl	801be68 <iprintf>
 800d0c2:	f06f 030f 	mvn.w	r3, #15
 800d0c6:	e032      	b.n	800d12e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d013      	beq.n	800d0f6 <pbuf_copy+0x146>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	895a      	ldrh	r2, [r3, #10]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	891b      	ldrh	r3, [r3, #8]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d10d      	bne.n	800d0f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d009      	beq.n	800d0f6 <pbuf_copy+0x146>
 800d0e2:	4b15      	ldr	r3, [pc, #84]	; (800d138 <pbuf_copy+0x188>)
 800d0e4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800d0e8:	4919      	ldr	r1, [pc, #100]	; (800d150 <pbuf_copy+0x1a0>)
 800d0ea:	4815      	ldr	r0, [pc, #84]	; (800d140 <pbuf_copy+0x190>)
 800d0ec:	f00e febc 	bl	801be68 <iprintf>
 800d0f0:	f06f 0305 	mvn.w	r3, #5
 800d0f4:	e01b      	b.n	800d12e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d013      	beq.n	800d124 <pbuf_copy+0x174>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	895a      	ldrh	r2, [r3, #10]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	891b      	ldrh	r3, [r3, #8]
 800d104:	429a      	cmp	r2, r3
 800d106:	d10d      	bne.n	800d124 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d009      	beq.n	800d124 <pbuf_copy+0x174>
 800d110:	4b09      	ldr	r3, [pc, #36]	; (800d138 <pbuf_copy+0x188>)
 800d112:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800d116:	490e      	ldr	r1, [pc, #56]	; (800d150 <pbuf_copy+0x1a0>)
 800d118:	4809      	ldr	r0, [pc, #36]	; (800d140 <pbuf_copy+0x190>)
 800d11a:	f00e fea5 	bl	801be68 <iprintf>
 800d11e:	f06f 0305 	mvn.w	r3, #5
 800d122:	e004      	b.n	800d12e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	f47f af61 	bne.w	800cfee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	0801e2d8 	.word	0x0801e2d8
 800d13c:	0801e580 	.word	0x0801e580
 800d140:	0801e338 	.word	0x0801e338
 800d144:	0801e5b0 	.word	0x0801e5b0
 800d148:	0801e5c8 	.word	0x0801e5c8
 800d14c:	0801e5e4 	.word	0x0801e5e4
 800d150:	0801e5f4 	.word	0x0801e5f4

0800d154 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b088      	sub	sp, #32
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4611      	mov	r1, r2
 800d160:	461a      	mov	r2, r3
 800d162:	460b      	mov	r3, r1
 800d164:	80fb      	strh	r3, [r7, #6]
 800d166:	4613      	mov	r3, r2
 800d168:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d108      	bne.n	800d18a <pbuf_copy_partial+0x36>
 800d178:	4b2b      	ldr	r3, [pc, #172]	; (800d228 <pbuf_copy_partial+0xd4>)
 800d17a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d17e:	492b      	ldr	r1, [pc, #172]	; (800d22c <pbuf_copy_partial+0xd8>)
 800d180:	482b      	ldr	r0, [pc, #172]	; (800d230 <pbuf_copy_partial+0xdc>)
 800d182:	f00e fe71 	bl	801be68 <iprintf>
 800d186:	2300      	movs	r3, #0
 800d188:	e04a      	b.n	800d220 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d108      	bne.n	800d1a2 <pbuf_copy_partial+0x4e>
 800d190:	4b25      	ldr	r3, [pc, #148]	; (800d228 <pbuf_copy_partial+0xd4>)
 800d192:	f240 420b 	movw	r2, #1035	; 0x40b
 800d196:	4927      	ldr	r1, [pc, #156]	; (800d234 <pbuf_copy_partial+0xe0>)
 800d198:	4825      	ldr	r0, [pc, #148]	; (800d230 <pbuf_copy_partial+0xdc>)
 800d19a:	f00e fe65 	bl	801be68 <iprintf>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e03e      	b.n	800d220 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	61fb      	str	r3, [r7, #28]
 800d1a6:	e034      	b.n	800d212 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d1a8:	88bb      	ldrh	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00a      	beq.n	800d1c4 <pbuf_copy_partial+0x70>
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	895b      	ldrh	r3, [r3, #10]
 800d1b2:	88ba      	ldrh	r2, [r7, #4]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d305      	bcc.n	800d1c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	895b      	ldrh	r3, [r3, #10]
 800d1bc:	88ba      	ldrh	r2, [r7, #4]
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	80bb      	strh	r3, [r7, #4]
 800d1c2:	e023      	b.n	800d20c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	895a      	ldrh	r2, [r3, #10]
 800d1c8:	88bb      	ldrh	r3, [r7, #4]
 800d1ca:	1ad3      	subs	r3, r2, r3
 800d1cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d1ce:	8b3a      	ldrh	r2, [r7, #24]
 800d1d0:	88fb      	ldrh	r3, [r7, #6]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d901      	bls.n	800d1da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d1d6:	88fb      	ldrh	r3, [r7, #6]
 800d1d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d1da:	8b7b      	ldrh	r3, [r7, #26]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	18d0      	adds	r0, r2, r3
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	88bb      	ldrh	r3, [r7, #4]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	8b3a      	ldrh	r2, [r7, #24]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	f00e fe29 	bl	801be42 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d1f0:	8afa      	ldrh	r2, [r7, #22]
 800d1f2:	8b3b      	ldrh	r3, [r7, #24]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d1f8:	8b7a      	ldrh	r2, [r7, #26]
 800d1fa:	8b3b      	ldrh	r3, [r7, #24]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d200:	88fa      	ldrh	r2, [r7, #6]
 800d202:	8b3b      	ldrh	r3, [r7, #24]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	61fb      	str	r3, [r7, #28]
 800d212:	88fb      	ldrh	r3, [r7, #6]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <pbuf_copy_partial+0xca>
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1c4      	bne.n	800d1a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d21e:	8afb      	ldrh	r3, [r7, #22]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3720      	adds	r7, #32
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	0801e2d8 	.word	0x0801e2d8
 800d22c:	0801e620 	.word	0x0801e620
 800d230:	0801e338 	.word	0x0801e338
 800d234:	0801e640 	.word	0x0801e640

0800d238 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	4603      	mov	r3, r0
 800d240:	603a      	str	r2, [r7, #0]
 800d242:	71fb      	strb	r3, [r7, #7]
 800d244:	460b      	mov	r3, r1
 800d246:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	8919      	ldrh	r1, [r3, #8]
 800d24c:	88ba      	ldrh	r2, [r7, #4]
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff fa67 	bl	800c724 <pbuf_alloc>
 800d256:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <pbuf_clone+0x2a>
    return NULL;
 800d25e:	2300      	movs	r3, #0
 800d260:	e011      	b.n	800d286 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff fea3 	bl	800cfb0 <pbuf_copy>
 800d26a:	4603      	mov	r3, r0
 800d26c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d26e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d006      	beq.n	800d284 <pbuf_clone+0x4c>
 800d276:	4b06      	ldr	r3, [pc, #24]	; (800d290 <pbuf_clone+0x58>)
 800d278:	f240 5224 	movw	r2, #1316	; 0x524
 800d27c:	4905      	ldr	r1, [pc, #20]	; (800d294 <pbuf_clone+0x5c>)
 800d27e:	4806      	ldr	r0, [pc, #24]	; (800d298 <pbuf_clone+0x60>)
 800d280:	f00e fdf2 	bl	801be68 <iprintf>
  return q;
 800d284:	68fb      	ldr	r3, [r7, #12]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	0801e2d8 	.word	0x0801e2d8
 800d294:	0801e74c 	.word	0x0801e74c
 800d298:	0801e338 	.word	0x0801e338

0800d29c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d2a0:	f00e fe5e 	bl	801bf60 <rand>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	4b01      	ldr	r3, [pc, #4]	; (800d2bc <tcp_init+0x20>)
 800d2b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d2b8:	bf00      	nop
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	2000000c 	.word	0x2000000c

0800d2c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	7d1b      	ldrb	r3, [r3, #20]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d105      	bne.n	800d2dc <tcp_free+0x1c>
 800d2d0:	4b06      	ldr	r3, [pc, #24]	; (800d2ec <tcp_free+0x2c>)
 800d2d2:	22d4      	movs	r2, #212	; 0xd4
 800d2d4:	4906      	ldr	r1, [pc, #24]	; (800d2f0 <tcp_free+0x30>)
 800d2d6:	4807      	ldr	r0, [pc, #28]	; (800d2f4 <tcp_free+0x34>)
 800d2d8:	f00e fdc6 	bl	801be68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	2001      	movs	r0, #1
 800d2e0:	f7fe fe54 	bl	800bf8c <memp_free>
}
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	0801e7d8 	.word	0x0801e7d8
 800d2f0:	0801e808 	.word	0x0801e808
 800d2f4:	0801e81c 	.word	0x0801e81c

0800d2f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7d1b      	ldrb	r3, [r3, #20]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d105      	bne.n	800d314 <tcp_free_listen+0x1c>
 800d308:	4b06      	ldr	r3, [pc, #24]	; (800d324 <tcp_free_listen+0x2c>)
 800d30a:	22df      	movs	r2, #223	; 0xdf
 800d30c:	4906      	ldr	r1, [pc, #24]	; (800d328 <tcp_free_listen+0x30>)
 800d30e:	4807      	ldr	r0, [pc, #28]	; (800d32c <tcp_free_listen+0x34>)
 800d310:	f00e fdaa 	bl	801be68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d314:	6879      	ldr	r1, [r7, #4]
 800d316:	2002      	movs	r0, #2
 800d318:	f7fe fe38 	bl	800bf8c <memp_free>
}
 800d31c:	bf00      	nop
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	0801e7d8 	.word	0x0801e7d8
 800d328:	0801e844 	.word	0x0801e844
 800d32c:	0801e81c 	.word	0x0801e81c

0800d330 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d334:	f001 f850 	bl	800e3d8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d338:	4b07      	ldr	r3, [pc, #28]	; (800d358 <tcp_tmr+0x28>)
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	3301      	adds	r3, #1
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	4b05      	ldr	r3, [pc, #20]	; (800d358 <tcp_tmr+0x28>)
 800d342:	701a      	strb	r2, [r3, #0]
 800d344:	4b04      	ldr	r3, [pc, #16]	; (800d358 <tcp_tmr+0x28>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d350:	f000 fd04 	bl	800dd5c <tcp_slowtmr>
  }
}
 800d354:	bf00      	nop
 800d356:	bd80      	pop	{r7, pc}
 800d358:	200083ed 	.word	0x200083ed

0800d35c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d105      	bne.n	800d378 <tcp_remove_listener+0x1c>
 800d36c:	4b0d      	ldr	r3, [pc, #52]	; (800d3a4 <tcp_remove_listener+0x48>)
 800d36e:	22ff      	movs	r2, #255	; 0xff
 800d370:	490d      	ldr	r1, [pc, #52]	; (800d3a8 <tcp_remove_listener+0x4c>)
 800d372:	480e      	ldr	r0, [pc, #56]	; (800d3ac <tcp_remove_listener+0x50>)
 800d374:	f00e fd78 	bl	801be68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	60fb      	str	r3, [r7, #12]
 800d37c:	e00a      	b.n	800d394 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	429a      	cmp	r2, r3
 800d386:	d102      	bne.n	800d38e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1f1      	bne.n	800d37e <tcp_remove_listener+0x22>
    }
  }
}
 800d39a:	bf00      	nop
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	0801e7d8 	.word	0x0801e7d8
 800d3a8:	0801e860 	.word	0x0801e860
 800d3ac:	0801e81c 	.word	0x0801e81c

0800d3b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <tcp_listen_closed+0x1c>
 800d3be:	4b14      	ldr	r3, [pc, #80]	; (800d410 <tcp_listen_closed+0x60>)
 800d3c0:	f240 1211 	movw	r2, #273	; 0x111
 800d3c4:	4913      	ldr	r1, [pc, #76]	; (800d414 <tcp_listen_closed+0x64>)
 800d3c6:	4814      	ldr	r0, [pc, #80]	; (800d418 <tcp_listen_closed+0x68>)
 800d3c8:	f00e fd4e 	bl	801be68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7d1b      	ldrb	r3, [r3, #20]
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d006      	beq.n	800d3e2 <tcp_listen_closed+0x32>
 800d3d4:	4b0e      	ldr	r3, [pc, #56]	; (800d410 <tcp_listen_closed+0x60>)
 800d3d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d3da:	4910      	ldr	r1, [pc, #64]	; (800d41c <tcp_listen_closed+0x6c>)
 800d3dc:	480e      	ldr	r0, [pc, #56]	; (800d418 <tcp_listen_closed+0x68>)
 800d3de:	f00e fd43 	bl	801be68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	e00b      	b.n	800d400 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d3e8:	4a0d      	ldr	r2, [pc, #52]	; (800d420 <tcp_listen_closed+0x70>)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6879      	ldr	r1, [r7, #4]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff ffb1 	bl	800d35c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b03      	cmp	r3, #3
 800d404:	d9f0      	bls.n	800d3e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d406:	bf00      	nop
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	0801e7d8 	.word	0x0801e7d8
 800d414:	0801e888 	.word	0x0801e888
 800d418:	0801e81c 	.word	0x0801e81c
 800d41c:	0801e894 	.word	0x0801e894
 800d420:	08020f10 	.word	0x08020f10

0800d424 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d424:	b5b0      	push	{r4, r5, r7, lr}
 800d426:	b088      	sub	sp, #32
 800d428:	af04      	add	r7, sp, #16
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	460b      	mov	r3, r1
 800d42e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <tcp_close_shutdown+0x20>
 800d436:	4b61      	ldr	r3, [pc, #388]	; (800d5bc <tcp_close_shutdown+0x198>)
 800d438:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d43c:	4960      	ldr	r1, [pc, #384]	; (800d5c0 <tcp_close_shutdown+0x19c>)
 800d43e:	4861      	ldr	r0, [pc, #388]	; (800d5c4 <tcp_close_shutdown+0x1a0>)
 800d440:	f00e fd12 	bl	801be68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d444:	78fb      	ldrb	r3, [r7, #3]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d066      	beq.n	800d518 <tcp_close_shutdown+0xf4>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7d1b      	ldrb	r3, [r3, #20]
 800d44e:	2b04      	cmp	r3, #4
 800d450:	d003      	beq.n	800d45a <tcp_close_shutdown+0x36>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7d1b      	ldrb	r3, [r3, #20]
 800d456:	2b07      	cmp	r3, #7
 800d458:	d15e      	bne.n	800d518 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d104      	bne.n	800d46c <tcp_close_shutdown+0x48>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d466:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d46a:	d055      	beq.n	800d518 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	8b5b      	ldrh	r3, [r3, #26]
 800d470:	f003 0310 	and.w	r3, r3, #16
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <tcp_close_shutdown+0x62>
 800d478:	4b50      	ldr	r3, [pc, #320]	; (800d5bc <tcp_close_shutdown+0x198>)
 800d47a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d47e:	4952      	ldr	r1, [pc, #328]	; (800d5c8 <tcp_close_shutdown+0x1a4>)
 800d480:	4850      	ldr	r0, [pc, #320]	; (800d5c4 <tcp_close_shutdown+0x1a0>)
 800d482:	f00e fcf1 	bl	801be68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d48e:	687d      	ldr	r5, [r7, #4]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	3304      	adds	r3, #4
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	8ad2      	ldrh	r2, [r2, #22]
 800d498:	6879      	ldr	r1, [r7, #4]
 800d49a:	8b09      	ldrh	r1, [r1, #24]
 800d49c:	9102      	str	r1, [sp, #8]
 800d49e:	9201      	str	r2, [sp, #4]
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	462b      	mov	r3, r5
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	4601      	mov	r1, r0
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f005 fd6f 	bl	8012f8c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f001 fb40 	bl	800eb34 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d4b4:	4b45      	ldr	r3, [pc, #276]	; (800d5cc <tcp_close_shutdown+0x1a8>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d105      	bne.n	800d4ca <tcp_close_shutdown+0xa6>
 800d4be:	4b43      	ldr	r3, [pc, #268]	; (800d5cc <tcp_close_shutdown+0x1a8>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	4a41      	ldr	r2, [pc, #260]	; (800d5cc <tcp_close_shutdown+0x1a8>)
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	e013      	b.n	800d4f2 <tcp_close_shutdown+0xce>
 800d4ca:	4b40      	ldr	r3, [pc, #256]	; (800d5cc <tcp_close_shutdown+0x1a8>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	e00c      	b.n	800d4ec <tcp_close_shutdown+0xc8>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d104      	bne.n	800d4e6 <tcp_close_shutdown+0xc2>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	68da      	ldr	r2, [r3, #12]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	60da      	str	r2, [r3, #12]
 800d4e4:	e005      	b.n	800d4f2 <tcp_close_shutdown+0xce>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	60fb      	str	r3, [r7, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1ef      	bne.n	800d4d2 <tcp_close_shutdown+0xae>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	60da      	str	r2, [r3, #12]
 800d4f8:	4b35      	ldr	r3, [pc, #212]	; (800d5d0 <tcp_close_shutdown+0x1ac>)
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d4fe:	4b35      	ldr	r3, [pc, #212]	; (800d5d4 <tcp_close_shutdown+0x1b0>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	429a      	cmp	r2, r3
 800d506:	d102      	bne.n	800d50e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d508:	f003 ffd2 	bl	80114b0 <tcp_trigger_input_pcb_close>
 800d50c:	e002      	b.n	800d514 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff fed6 	bl	800d2c0 <tcp_free>
      }
      return ERR_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	e04d      	b.n	800d5b4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	7d1b      	ldrb	r3, [r3, #20]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d02d      	beq.n	800d57c <tcp_close_shutdown+0x158>
 800d520:	2b02      	cmp	r3, #2
 800d522:	d036      	beq.n	800d592 <tcp_close_shutdown+0x16e>
 800d524:	2b00      	cmp	r3, #0
 800d526:	d13f      	bne.n	800d5a8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	8adb      	ldrh	r3, [r3, #22]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d021      	beq.n	800d574 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d530:	4b29      	ldr	r3, [pc, #164]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d105      	bne.n	800d546 <tcp_close_shutdown+0x122>
 800d53a:	4b27      	ldr	r3, [pc, #156]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	4a25      	ldr	r2, [pc, #148]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	e013      	b.n	800d56e <tcp_close_shutdown+0x14a>
 800d546:	4b24      	ldr	r3, [pc, #144]	; (800d5d8 <tcp_close_shutdown+0x1b4>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	60bb      	str	r3, [r7, #8]
 800d54c:	e00c      	b.n	800d568 <tcp_close_shutdown+0x144>
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	429a      	cmp	r2, r3
 800d556:	d104      	bne.n	800d562 <tcp_close_shutdown+0x13e>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	68da      	ldr	r2, [r3, #12]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	60da      	str	r2, [r3, #12]
 800d560:	e005      	b.n	800d56e <tcp_close_shutdown+0x14a>
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	60bb      	str	r3, [r7, #8]
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1ef      	bne.n	800d54e <tcp_close_shutdown+0x12a>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff fea3 	bl	800d2c0 <tcp_free>
      break;
 800d57a:	e01a      	b.n	800d5b2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff ff17 	bl	800d3b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d582:	6879      	ldr	r1, [r7, #4]
 800d584:	4815      	ldr	r0, [pc, #84]	; (800d5dc <tcp_close_shutdown+0x1b8>)
 800d586:	f001 fb25 	bl	800ebd4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7ff feb4 	bl	800d2f8 <tcp_free_listen>
      break;
 800d590:	e00f      	b.n	800d5b2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d592:	6879      	ldr	r1, [r7, #4]
 800d594:	480d      	ldr	r0, [pc, #52]	; (800d5cc <tcp_close_shutdown+0x1a8>)
 800d596:	f001 fb1d 	bl	800ebd4 <tcp_pcb_remove>
 800d59a:	4b0d      	ldr	r3, [pc, #52]	; (800d5d0 <tcp_close_shutdown+0x1ac>)
 800d59c:	2201      	movs	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff fe8d 	bl	800d2c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d5a6:	e004      	b.n	800d5b2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f819 	bl	800d5e0 <tcp_close_shutdown_fin>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	e000      	b.n	800d5b4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bdb0      	pop	{r4, r5, r7, pc}
 800d5bc:	0801e7d8 	.word	0x0801e7d8
 800d5c0:	0801e8ac 	.word	0x0801e8ac
 800d5c4:	0801e81c 	.word	0x0801e81c
 800d5c8:	0801e8cc 	.word	0x0801e8cc
 800d5cc:	2000c550 	.word	0x2000c550
 800d5d0:	2000c54c 	.word	0x2000c54c
 800d5d4:	2000c564 	.word	0x2000c564
 800d5d8:	2000c55c 	.word	0x2000c55c
 800d5dc:	2000c558 	.word	0x2000c558

0800d5e0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <tcp_close_shutdown_fin+0x1c>
 800d5ee:	4b2c      	ldr	r3, [pc, #176]	; (800d6a0 <tcp_close_shutdown_fin+0xc0>)
 800d5f0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d5f4:	492b      	ldr	r1, [pc, #172]	; (800d6a4 <tcp_close_shutdown_fin+0xc4>)
 800d5f6:	482c      	ldr	r0, [pc, #176]	; (800d6a8 <tcp_close_shutdown_fin+0xc8>)
 800d5f8:	f00e fc36 	bl	801be68 <iprintf>

  switch (pcb->state) {
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	7d1b      	ldrb	r3, [r3, #20]
 800d600:	2b04      	cmp	r3, #4
 800d602:	d010      	beq.n	800d626 <tcp_close_shutdown_fin+0x46>
 800d604:	2b07      	cmp	r3, #7
 800d606:	d01b      	beq.n	800d640 <tcp_close_shutdown_fin+0x60>
 800d608:	2b03      	cmp	r3, #3
 800d60a:	d126      	bne.n	800d65a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f004 fdbb 	bl	8012188 <tcp_send_fin>
 800d612:	4603      	mov	r3, r0
 800d614:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d11f      	bne.n	800d65e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2205      	movs	r2, #5
 800d622:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d624:	e01b      	b.n	800d65e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f004 fdae 	bl	8012188 <tcp_send_fin>
 800d62c:	4603      	mov	r3, r0
 800d62e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d114      	bne.n	800d662 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2205      	movs	r2, #5
 800d63c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d63e:	e010      	b.n	800d662 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f004 fda1 	bl	8012188 <tcp_send_fin>
 800d646:	4603      	mov	r3, r0
 800d648:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d109      	bne.n	800d666 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2209      	movs	r2, #9
 800d656:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d658:	e005      	b.n	800d666 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	e01c      	b.n	800d698 <tcp_close_shutdown_fin+0xb8>
      break;
 800d65e:	bf00      	nop
 800d660:	e002      	b.n	800d668 <tcp_close_shutdown_fin+0x88>
      break;
 800d662:	bf00      	nop
 800d664:	e000      	b.n	800d668 <tcp_close_shutdown_fin+0x88>
      break;
 800d666:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d103      	bne.n	800d678 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f004 fec7 	bl	8012404 <tcp_output>
 800d676:	e00d      	b.n	800d694 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d680:	d108      	bne.n	800d694 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	8b5b      	ldrh	r3, [r3, #26]
 800d686:	f043 0308 	orr.w	r3, r3, #8
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d690:	2300      	movs	r3, #0
 800d692:	e001      	b.n	800d698 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	0801e7d8 	.word	0x0801e7d8
 800d6a4:	0801e888 	.word	0x0801e888
 800d6a8:	0801e81c 	.word	0x0801e81c

0800d6ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d109      	bne.n	800d6ce <tcp_close+0x22>
 800d6ba:	4b0f      	ldr	r3, [pc, #60]	; (800d6f8 <tcp_close+0x4c>)
 800d6bc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d6c0:	490e      	ldr	r1, [pc, #56]	; (800d6fc <tcp_close+0x50>)
 800d6c2:	480f      	ldr	r0, [pc, #60]	; (800d700 <tcp_close+0x54>)
 800d6c4:	f00e fbd0 	bl	801be68 <iprintf>
 800d6c8:	f06f 030f 	mvn.w	r3, #15
 800d6cc:	e00f      	b.n	800d6ee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	7d1b      	ldrb	r3, [r3, #20]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d006      	beq.n	800d6e4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	8b5b      	ldrh	r3, [r3, #26]
 800d6da:	f043 0310 	orr.w	r3, r3, #16
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d6e4:	2101      	movs	r1, #1
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7ff fe9c 	bl	800d424 <tcp_close_shutdown>
 800d6ec:	4603      	mov	r3, r0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	0801e7d8 	.word	0x0801e7d8
 800d6fc:	0801e8e8 	.word	0x0801e8e8
 800d700:	0801e81c 	.word	0x0801e81c

0800d704 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d109      	bne.n	800d72a <tcp_shutdown+0x26>
 800d716:	4b25      	ldr	r3, [pc, #148]	; (800d7ac <tcp_shutdown+0xa8>)
 800d718:	f240 2207 	movw	r2, #519	; 0x207
 800d71c:	4924      	ldr	r1, [pc, #144]	; (800d7b0 <tcp_shutdown+0xac>)
 800d71e:	4825      	ldr	r0, [pc, #148]	; (800d7b4 <tcp_shutdown+0xb0>)
 800d720:	f00e fba2 	bl	801be68 <iprintf>
 800d724:	f06f 030f 	mvn.w	r3, #15
 800d728:	e03c      	b.n	800d7a4 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	7d1b      	ldrb	r3, [r3, #20]
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d102      	bne.n	800d738 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d732:	f06f 030a 	mvn.w	r3, #10
 800d736:	e035      	b.n	800d7a4 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d01b      	beq.n	800d776 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8b5b      	ldrh	r3, [r3, #26]
 800d742:	f043 0310 	orr.w	r3, r3, #16
 800d746:	b29a      	uxth	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d005      	beq.n	800d75e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d752:	2101      	movs	r1, #1
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f7ff fe65 	bl	800d424 <tcp_close_shutdown>
 800d75a:	4603      	mov	r3, r0
 800d75c:	e022      	b.n	800d7a4 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d762:	2b00      	cmp	r3, #0
 800d764:	d007      	beq.n	800d776 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7ff faec 	bl	800cd48 <pbuf_free>
      pcb->refused_data = NULL;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d012      	beq.n	800d7a2 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	7d1b      	ldrb	r3, [r3, #20]
 800d780:	2b03      	cmp	r3, #3
 800d782:	db0b      	blt.n	800d79c <tcp_shutdown+0x98>
 800d784:	2b04      	cmp	r3, #4
 800d786:	dd01      	ble.n	800d78c <tcp_shutdown+0x88>
 800d788:	2b07      	cmp	r3, #7
 800d78a:	d107      	bne.n	800d79c <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	4619      	mov	r1, r3
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7ff fe46 	bl	800d424 <tcp_close_shutdown>
 800d798:	4603      	mov	r3, r0
 800d79a:	e003      	b.n	800d7a4 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d79c:	f06f 030a 	mvn.w	r3, #10
 800d7a0:	e000      	b.n	800d7a4 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	0801e7d8 	.word	0x0801e7d8
 800d7b0:	0801e900 	.word	0x0801e900
 800d7b4:	0801e81c 	.word	0x0801e81c

0800d7b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b08e      	sub	sp, #56	; 0x38
 800d7bc:	af04      	add	r7, sp, #16
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d107      	bne.n	800d7d8 <tcp_abandon+0x20>
 800d7c8:	4b52      	ldr	r3, [pc, #328]	; (800d914 <tcp_abandon+0x15c>)
 800d7ca:	f240 223d 	movw	r2, #573	; 0x23d
 800d7ce:	4952      	ldr	r1, [pc, #328]	; (800d918 <tcp_abandon+0x160>)
 800d7d0:	4852      	ldr	r0, [pc, #328]	; (800d91c <tcp_abandon+0x164>)
 800d7d2:	f00e fb49 	bl	801be68 <iprintf>
 800d7d6:	e099      	b.n	800d90c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7d1b      	ldrb	r3, [r3, #20]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d106      	bne.n	800d7ee <tcp_abandon+0x36>
 800d7e0:	4b4c      	ldr	r3, [pc, #304]	; (800d914 <tcp_abandon+0x15c>)
 800d7e2:	f240 2241 	movw	r2, #577	; 0x241
 800d7e6:	494e      	ldr	r1, [pc, #312]	; (800d920 <tcp_abandon+0x168>)
 800d7e8:	484c      	ldr	r0, [pc, #304]	; (800d91c <tcp_abandon+0x164>)
 800d7ea:	f00e fb3d 	bl	801be68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7d1b      	ldrb	r3, [r3, #20]
 800d7f2:	2b0a      	cmp	r3, #10
 800d7f4:	d107      	bne.n	800d806 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d7f6:	6879      	ldr	r1, [r7, #4]
 800d7f8:	484a      	ldr	r0, [pc, #296]	; (800d924 <tcp_abandon+0x16c>)
 800d7fa:	f001 f9eb 	bl	800ebd4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fd5e 	bl	800d2c0 <tcp_free>
 800d804:	e082      	b.n	800d90c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d812:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d818:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d820:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	7d1b      	ldrb	r3, [r3, #20]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d126      	bne.n	800d87e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	8adb      	ldrh	r3, [r3, #22]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d02e      	beq.n	800d896 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d838:	4b3b      	ldr	r3, [pc, #236]	; (800d928 <tcp_abandon+0x170>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d105      	bne.n	800d84e <tcp_abandon+0x96>
 800d842:	4b39      	ldr	r3, [pc, #228]	; (800d928 <tcp_abandon+0x170>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	4a37      	ldr	r2, [pc, #220]	; (800d928 <tcp_abandon+0x170>)
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	e013      	b.n	800d876 <tcp_abandon+0xbe>
 800d84e:	4b36      	ldr	r3, [pc, #216]	; (800d928 <tcp_abandon+0x170>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	61fb      	str	r3, [r7, #28]
 800d854:	e00c      	b.n	800d870 <tcp_abandon+0xb8>
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d104      	bne.n	800d86a <tcp_abandon+0xb2>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68da      	ldr	r2, [r3, #12]
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	60da      	str	r2, [r3, #12]
 800d868:	e005      	b.n	800d876 <tcp_abandon+0xbe>
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	61fb      	str	r3, [r7, #28]
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1ef      	bne.n	800d856 <tcp_abandon+0x9e>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	60da      	str	r2, [r3, #12]
 800d87c:	e00b      	b.n	800d896 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	8adb      	ldrh	r3, [r3, #22]
 800d886:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	4828      	ldr	r0, [pc, #160]	; (800d92c <tcp_abandon+0x174>)
 800d88c:	f001 f9a2 	bl	800ebd4 <tcp_pcb_remove>
 800d890:	4b27      	ldr	r3, [pc, #156]	; (800d930 <tcp_abandon+0x178>)
 800d892:	2201      	movs	r2, #1
 800d894:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 fe78 	bl	800e598 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d004      	beq.n	800d8ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 fe6f 	bl	800e598 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d004      	beq.n	800d8cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 fe66 	bl	800e598 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00e      	beq.n	800d8f0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	8b12      	ldrh	r2, [r2, #24]
 800d8dc:	9202      	str	r2, [sp, #8]
 800d8de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8e0:	9201      	str	r2, [sp, #4]
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	697a      	ldr	r2, [r7, #20]
 800d8e8:	69b9      	ldr	r1, [r7, #24]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f005 fb4e 	bl	8012f8c <tcp_rst>
    }
    last_state = pcb->state;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	7d1b      	ldrb	r3, [r3, #20]
 800d8f4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7ff fce2 	bl	800d2c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d004      	beq.n	800d90c <tcp_abandon+0x154>
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f06f 010c 	mvn.w	r1, #12
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	4798      	blx	r3
  }
}
 800d90c:	3728      	adds	r7, #40	; 0x28
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	0801e7d8 	.word	0x0801e7d8
 800d918:	0801e91c 	.word	0x0801e91c
 800d91c:	0801e81c 	.word	0x0801e81c
 800d920:	0801e938 	.word	0x0801e938
 800d924:	2000c560 	.word	0x2000c560
 800d928:	2000c55c 	.word	0x2000c55c
 800d92c:	2000c550 	.word	0x2000c550
 800d930:	2000c54c 	.word	0x2000c54c

0800d934 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d93c:	2101      	movs	r1, #1
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7ff ff3a 	bl	800d7b8 <tcp_abandon>
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <tcp_update_rcv_ann_wnd+0x1c>
 800d95a:	4b25      	ldr	r3, [pc, #148]	; (800d9f0 <tcp_update_rcv_ann_wnd+0xa4>)
 800d95c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d960:	4924      	ldr	r1, [pc, #144]	; (800d9f4 <tcp_update_rcv_ann_wnd+0xa8>)
 800d962:	4825      	ldr	r0, [pc, #148]	; (800d9f8 <tcp_update_rcv_ann_wnd+0xac>)
 800d964:	f00e fa80 	bl	801be68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d970:	4413      	add	r3, r2
 800d972:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d97c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d980:	bf28      	it	cs
 800d982:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d986:	b292      	uxth	r2, r2
 800d988:	4413      	add	r3, r2
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	1ad3      	subs	r3, r2, r3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	db08      	blt.n	800d9a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99e:	68fa      	ldr	r2, [r7, #12]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	e020      	b.n	800d9e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ac:	1ad3      	subs	r3, r2, r3
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	dd03      	ble.n	800d9ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d9b8:	e014      	b.n	800d9e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9cc:	d306      	bcc.n	800d9dc <tcp_update_rcv_ann_wnd+0x90>
 800d9ce:	4b08      	ldr	r3, [pc, #32]	; (800d9f0 <tcp_update_rcv_ann_wnd+0xa4>)
 800d9d0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d9d4:	4909      	ldr	r1, [pc, #36]	; (800d9fc <tcp_update_rcv_ann_wnd+0xb0>)
 800d9d6:	4808      	ldr	r0, [pc, #32]	; (800d9f8 <tcp_update_rcv_ann_wnd+0xac>)
 800d9d8:	f00e fa46 	bl	801be68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d9e4:	2300      	movs	r3, #0
  }
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	0801e7d8 	.word	0x0801e7d8
 800d9f4:	0801ea34 	.word	0x0801ea34
 800d9f8:	0801e81c 	.word	0x0801e81c
 800d9fc:	0801ea58 	.word	0x0801ea58

0800da00 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	460b      	mov	r3, r1
 800da0a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d107      	bne.n	800da22 <tcp_recved+0x22>
 800da12:	4b1f      	ldr	r3, [pc, #124]	; (800da90 <tcp_recved+0x90>)
 800da14:	f240 32cf 	movw	r2, #975	; 0x3cf
 800da18:	491e      	ldr	r1, [pc, #120]	; (800da94 <tcp_recved+0x94>)
 800da1a:	481f      	ldr	r0, [pc, #124]	; (800da98 <tcp_recved+0x98>)
 800da1c:	f00e fa24 	bl	801be68 <iprintf>
 800da20:	e032      	b.n	800da88 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	7d1b      	ldrb	r3, [r3, #20]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d106      	bne.n	800da38 <tcp_recved+0x38>
 800da2a:	4b19      	ldr	r3, [pc, #100]	; (800da90 <tcp_recved+0x90>)
 800da2c:	f240 32d3 	movw	r2, #979	; 0x3d3
 800da30:	491a      	ldr	r1, [pc, #104]	; (800da9c <tcp_recved+0x9c>)
 800da32:	4819      	ldr	r0, [pc, #100]	; (800da98 <tcp_recved+0x98>)
 800da34:	f00e fa18 	bl	801be68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da3c:	887b      	ldrh	r3, [r7, #2]
 800da3e:	4413      	add	r3, r2
 800da40:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800da42:	89fb      	ldrh	r3, [r7, #14]
 800da44:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da48:	d804      	bhi.n	800da54 <tcp_recved+0x54>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da4e:	89fa      	ldrh	r2, [r7, #14]
 800da50:	429a      	cmp	r2, r3
 800da52:	d204      	bcs.n	800da5e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800da5a:	851a      	strh	r2, [r3, #40]	; 0x28
 800da5c:	e002      	b.n	800da64 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	89fa      	ldrh	r2, [r7, #14]
 800da62:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff ff71 	bl	800d94c <tcp_update_rcv_ann_wnd>
 800da6a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800da72:	d309      	bcc.n	800da88 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	8b5b      	ldrh	r3, [r3, #26]
 800da78:	f043 0302 	orr.w	r3, r3, #2
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f004 fcbe 	bl	8012404 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	0801e7d8 	.word	0x0801e7d8
 800da94:	0801ea74 	.word	0x0801ea74
 800da98:	0801e81c 	.word	0x0801e81c
 800da9c:	0801ea8c 	.word	0x0801ea8c

0800daa0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800daaa:	4b1e      	ldr	r3, [pc, #120]	; (800db24 <tcp_new_port+0x84>)
 800daac:	881b      	ldrh	r3, [r3, #0]
 800daae:	3301      	adds	r3, #1
 800dab0:	b29a      	uxth	r2, r3
 800dab2:	4b1c      	ldr	r3, [pc, #112]	; (800db24 <tcp_new_port+0x84>)
 800dab4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dab6:	4b1b      	ldr	r3, [pc, #108]	; (800db24 <tcp_new_port+0x84>)
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d103      	bne.n	800daca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dac2:	4b18      	ldr	r3, [pc, #96]	; (800db24 <tcp_new_port+0x84>)
 800dac4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dac8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800daca:	2300      	movs	r3, #0
 800dacc:	71fb      	strb	r3, [r7, #7]
 800dace:	e01e      	b.n	800db0e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	4a15      	ldr	r2, [pc, #84]	; (800db28 <tcp_new_port+0x88>)
 800dad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	603b      	str	r3, [r7, #0]
 800dadc:	e011      	b.n	800db02 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	8ada      	ldrh	r2, [r3, #22]
 800dae2:	4b10      	ldr	r3, [pc, #64]	; (800db24 <tcp_new_port+0x84>)
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d108      	bne.n	800dafc <tcp_new_port+0x5c>
        n++;
 800daea:	88bb      	ldrh	r3, [r7, #4]
 800daec:	3301      	adds	r3, #1
 800daee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800daf0:	88bb      	ldrh	r3, [r7, #4]
 800daf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daf6:	d3d8      	bcc.n	800daaa <tcp_new_port+0xa>
          return 0;
 800daf8:	2300      	movs	r3, #0
 800dafa:	e00d      	b.n	800db18 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	603b      	str	r3, [r7, #0]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1ea      	bne.n	800dade <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800db08:	79fb      	ldrb	r3, [r7, #7]
 800db0a:	3301      	adds	r3, #1
 800db0c:	71fb      	strb	r3, [r7, #7]
 800db0e:	79fb      	ldrb	r3, [r7, #7]
 800db10:	2b03      	cmp	r3, #3
 800db12:	d9dd      	bls.n	800dad0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800db14:	4b03      	ldr	r3, [pc, #12]	; (800db24 <tcp_new_port+0x84>)
 800db16:	881b      	ldrh	r3, [r3, #0]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr
 800db24:	2000000c 	.word	0x2000000c
 800db28:	08020f10 	.word	0x08020f10

0800db2c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08a      	sub	sp, #40	; 0x28
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	4613      	mov	r3, r2
 800db3a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d109      	bne.n	800db5a <tcp_connect+0x2e>
 800db46:	4b7d      	ldr	r3, [pc, #500]	; (800dd3c <tcp_connect+0x210>)
 800db48:	f240 4235 	movw	r2, #1077	; 0x435
 800db4c:	497c      	ldr	r1, [pc, #496]	; (800dd40 <tcp_connect+0x214>)
 800db4e:	487d      	ldr	r0, [pc, #500]	; (800dd44 <tcp_connect+0x218>)
 800db50:	f00e f98a 	bl	801be68 <iprintf>
 800db54:	f06f 030f 	mvn.w	r3, #15
 800db58:	e0ec      	b.n	800dd34 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d109      	bne.n	800db74 <tcp_connect+0x48>
 800db60:	4b76      	ldr	r3, [pc, #472]	; (800dd3c <tcp_connect+0x210>)
 800db62:	f240 4236 	movw	r2, #1078	; 0x436
 800db66:	4978      	ldr	r1, [pc, #480]	; (800dd48 <tcp_connect+0x21c>)
 800db68:	4876      	ldr	r0, [pc, #472]	; (800dd44 <tcp_connect+0x218>)
 800db6a:	f00e f97d 	bl	801be68 <iprintf>
 800db6e:	f06f 030f 	mvn.w	r3, #15
 800db72:	e0df      	b.n	800dd34 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	7d1b      	ldrb	r3, [r3, #20]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d009      	beq.n	800db90 <tcp_connect+0x64>
 800db7c:	4b6f      	ldr	r3, [pc, #444]	; (800dd3c <tcp_connect+0x210>)
 800db7e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800db82:	4972      	ldr	r1, [pc, #456]	; (800dd4c <tcp_connect+0x220>)
 800db84:	486f      	ldr	r0, [pc, #444]	; (800dd44 <tcp_connect+0x218>)
 800db86:	f00e f96f 	bl	801be68 <iprintf>
 800db8a:	f06f 0309 	mvn.w	r3, #9
 800db8e:	e0d1      	b.n	800dd34 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d002      	beq.n	800db9c <tcp_connect+0x70>
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	e000      	b.n	800db9e <tcp_connect+0x72>
 800db9c:	2300      	movs	r3, #0
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	88fa      	ldrh	r2, [r7, #6]
 800dba6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	7a1b      	ldrb	r3, [r3, #8]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d006      	beq.n	800dbbe <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	7a1b      	ldrb	r3, [r3, #8]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fe fd0b 	bl	800c5d0 <netif_get_by_index>
 800dbba:	6278      	str	r0, [r7, #36]	; 0x24
 800dbbc:	e005      	b.n	800dbca <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f009 fa1c 	bl	8017000 <ip4_route>
 800dbc8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d102      	bne.n	800dbd6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800dbd0:	f06f 0303 	mvn.w	r3, #3
 800dbd4:	e0ae      	b.n	800dd34 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d003      	beq.n	800dbe4 <tcp_connect+0xb8>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d111      	bne.n	800dc08 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <tcp_connect+0xc4>
 800dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbec:	3304      	adds	r3, #4
 800dbee:	e000      	b.n	800dbf2 <tcp_connect+0xc6>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d102      	bne.n	800dc00 <tcp_connect+0xd4>
      return ERR_RTE;
 800dbfa:	f06f 0303 	mvn.w	r3, #3
 800dbfe:	e099      	b.n	800dd34 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8adb      	ldrh	r3, [r3, #22]
 800dc0c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	8adb      	ldrh	r3, [r3, #22]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10c      	bne.n	800dc30 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800dc16:	f7ff ff43 	bl	800daa0 <tcp_new_port>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	8adb      	ldrh	r3, [r3, #22]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d102      	bne.n	800dc30 <tcp_connect+0x104>
      return ERR_BUF;
 800dc2a:	f06f 0301 	mvn.w	r3, #1
 800dc2e:	e081      	b.n	800dd34 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f001 f863 	bl	800ecfc <tcp_next_iss>
 800dc36:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	697a      	ldr	r2, [r7, #20]
 800dc42:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	1e5a      	subs	r2, r3, #1
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	1e5a      	subs	r2, r3, #1
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	1e5a      	subs	r2, r3, #1
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dc62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dc7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dc84:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	461a      	mov	r2, r3
 800dc90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc92:	f001 f859 	bl	800ed48 <tcp_eff_send_mss_netif>
 800dc96:	4603      	mov	r3, r0
 800dc98:	461a      	mov	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2201      	movs	r2, #1
 800dca2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	683a      	ldr	r2, [r7, #0]
 800dcaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800dcae:	2102      	movs	r1, #2
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f004 fab9 	bl	8012228 <tcp_enqueue_flags>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800dcba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d136      	bne.n	800dd30 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800dcc8:	8b7b      	ldrh	r3, [r7, #26]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d021      	beq.n	800dd12 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dcce:	4b20      	ldr	r3, [pc, #128]	; (800dd50 <tcp_connect+0x224>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d105      	bne.n	800dce4 <tcp_connect+0x1b8>
 800dcd8:	4b1d      	ldr	r3, [pc, #116]	; (800dd50 <tcp_connect+0x224>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	4a1c      	ldr	r2, [pc, #112]	; (800dd50 <tcp_connect+0x224>)
 800dce0:	6013      	str	r3, [r2, #0]
 800dce2:	e013      	b.n	800dd0c <tcp_connect+0x1e0>
 800dce4:	4b1a      	ldr	r3, [pc, #104]	; (800dd50 <tcp_connect+0x224>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	623b      	str	r3, [r7, #32]
 800dcea:	e00c      	b.n	800dd06 <tcp_connect+0x1da>
 800dcec:	6a3b      	ldr	r3, [r7, #32]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d104      	bne.n	800dd00 <tcp_connect+0x1d4>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	68da      	ldr	r2, [r3, #12]
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	60da      	str	r2, [r3, #12]
 800dcfe:	e005      	b.n	800dd0c <tcp_connect+0x1e0>
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	623b      	str	r3, [r7, #32]
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d1ef      	bne.n	800dcec <tcp_connect+0x1c0>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800dd12:	4b10      	ldr	r3, [pc, #64]	; (800dd54 <tcp_connect+0x228>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	60da      	str	r2, [r3, #12]
 800dd1a:	4a0e      	ldr	r2, [pc, #56]	; (800dd54 <tcp_connect+0x228>)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	f005 faf6 	bl	8013310 <tcp_timer_needed>
 800dd24:	4b0c      	ldr	r3, [pc, #48]	; (800dd58 <tcp_connect+0x22c>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f004 fb6a 	bl	8012404 <tcp_output>
  }
  return ret;
 800dd30:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3728      	adds	r7, #40	; 0x28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	0801e7d8 	.word	0x0801e7d8
 800dd40:	0801eab4 	.word	0x0801eab4
 800dd44:	0801e81c 	.word	0x0801e81c
 800dd48:	0801ead0 	.word	0x0801ead0
 800dd4c:	0801eaec 	.word	0x0801eaec
 800dd50:	2000c55c 	.word	0x2000c55c
 800dd54:	2000c550 	.word	0x2000c550
 800dd58:	2000c54c 	.word	0x2000c54c

0800dd5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dd5c:	b5b0      	push	{r4, r5, r7, lr}
 800dd5e:	b090      	sub	sp, #64	; 0x40
 800dd60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dd68:	4b94      	ldr	r3, [pc, #592]	; (800dfbc <tcp_slowtmr+0x260>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	4a93      	ldr	r2, [pc, #588]	; (800dfbc <tcp_slowtmr+0x260>)
 800dd70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dd72:	4b93      	ldr	r3, [pc, #588]	; (800dfc0 <tcp_slowtmr+0x264>)
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	3301      	adds	r3, #1
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	4b91      	ldr	r3, [pc, #580]	; (800dfc0 <tcp_slowtmr+0x264>)
 800dd7c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dd82:	4b90      	ldr	r3, [pc, #576]	; (800dfc4 <tcp_slowtmr+0x268>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dd88:	e29f      	b.n	800e2ca <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8c:	7d1b      	ldrb	r3, [r3, #20]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <tcp_slowtmr+0x44>
 800dd92:	4b8d      	ldr	r3, [pc, #564]	; (800dfc8 <tcp_slowtmr+0x26c>)
 800dd94:	f240 42be 	movw	r2, #1214	; 0x4be
 800dd98:	498c      	ldr	r1, [pc, #560]	; (800dfcc <tcp_slowtmr+0x270>)
 800dd9a:	488d      	ldr	r0, [pc, #564]	; (800dfd0 <tcp_slowtmr+0x274>)
 800dd9c:	f00e f864 	bl	801be68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda2:	7d1b      	ldrb	r3, [r3, #20]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d106      	bne.n	800ddb6 <tcp_slowtmr+0x5a>
 800dda8:	4b87      	ldr	r3, [pc, #540]	; (800dfc8 <tcp_slowtmr+0x26c>)
 800ddaa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ddae:	4989      	ldr	r1, [pc, #548]	; (800dfd4 <tcp_slowtmr+0x278>)
 800ddb0:	4887      	ldr	r0, [pc, #540]	; (800dfd0 <tcp_slowtmr+0x274>)
 800ddb2:	f00e f859 	bl	801be68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	7d1b      	ldrb	r3, [r3, #20]
 800ddba:	2b0a      	cmp	r3, #10
 800ddbc:	d106      	bne.n	800ddcc <tcp_slowtmr+0x70>
 800ddbe:	4b82      	ldr	r3, [pc, #520]	; (800dfc8 <tcp_slowtmr+0x26c>)
 800ddc0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ddc4:	4984      	ldr	r1, [pc, #528]	; (800dfd8 <tcp_slowtmr+0x27c>)
 800ddc6:	4882      	ldr	r0, [pc, #520]	; (800dfd0 <tcp_slowtmr+0x274>)
 800ddc8:	f00e f84e 	bl	801be68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ddcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddce:	7f9a      	ldrb	r2, [r3, #30]
 800ddd0:	4b7b      	ldr	r3, [pc, #492]	; (800dfc0 <tcp_slowtmr+0x264>)
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d105      	bne.n	800dde4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ddd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dde2:	e272      	b.n	800e2ca <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dde4:	4b76      	ldr	r3, [pc, #472]	; (800dfc0 <tcp_slowtmr+0x264>)
 800dde6:	781a      	ldrb	r2, [r3, #0]
 800dde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ddec:	2300      	movs	r3, #0
 800ddee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfa:	7d1b      	ldrb	r3, [r3, #20]
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	d10a      	bne.n	800de16 <tcp_slowtmr+0xba>
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de06:	2b05      	cmp	r3, #5
 800de08:	d905      	bls.n	800de16 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800de0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de0e:	3301      	adds	r3, #1
 800de10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de14:	e11e      	b.n	800e054 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800de16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de1c:	2b0b      	cmp	r3, #11
 800de1e:	d905      	bls.n	800de2c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800de20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de24:	3301      	adds	r3, #1
 800de26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de2a:	e113      	b.n	800e054 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800de2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800de32:	2b00      	cmp	r3, #0
 800de34:	d075      	beq.n	800df22 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800de36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d006      	beq.n	800de4c <tcp_slowtmr+0xf0>
 800de3e:	4b62      	ldr	r3, [pc, #392]	; (800dfc8 <tcp_slowtmr+0x26c>)
 800de40:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800de44:	4965      	ldr	r1, [pc, #404]	; (800dfdc <tcp_slowtmr+0x280>)
 800de46:	4862      	ldr	r0, [pc, #392]	; (800dfd0 <tcp_slowtmr+0x274>)
 800de48:	f00e f80e 	bl	801be68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de50:	2b00      	cmp	r3, #0
 800de52:	d106      	bne.n	800de62 <tcp_slowtmr+0x106>
 800de54:	4b5c      	ldr	r3, [pc, #368]	; (800dfc8 <tcp_slowtmr+0x26c>)
 800de56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800de5a:	4961      	ldr	r1, [pc, #388]	; (800dfe0 <tcp_slowtmr+0x284>)
 800de5c:	485c      	ldr	r0, [pc, #368]	; (800dfd0 <tcp_slowtmr+0x274>)
 800de5e:	f00e f803 	bl	801be68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800de68:	2b0b      	cmp	r3, #11
 800de6a:	d905      	bls.n	800de78 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800de6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de70:	3301      	adds	r3, #1
 800de72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de76:	e0ed      	b.n	800e054 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800de7e:	3b01      	subs	r3, #1
 800de80:	4a58      	ldr	r2, [pc, #352]	; (800dfe4 <tcp_slowtmr+0x288>)
 800de82:	5cd3      	ldrb	r3, [r2, r3]
 800de84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800de8c:	7c7a      	ldrb	r2, [r7, #17]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d907      	bls.n	800dea2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800de92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800de98:	3301      	adds	r3, #1
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dea8:	7c7a      	ldrb	r2, [r7, #17]
 800deaa:	429a      	cmp	r2, r3
 800deac:	f200 80d2 	bhi.w	800e054 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800deb0:	2301      	movs	r3, #1
 800deb2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800deb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800deba:	2b00      	cmp	r3, #0
 800debc:	d108      	bne.n	800ded0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800debe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dec0:	f005 f958 	bl	8013174 <tcp_zero_window_probe>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d014      	beq.n	800def4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800deca:	2300      	movs	r3, #0
 800decc:	623b      	str	r3, [r7, #32]
 800dece:	e011      	b.n	800def4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ded6:	4619      	mov	r1, r3
 800ded8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deda:	f004 f80d 	bl	8011ef8 <tcp_split_unsent_seg>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d107      	bne.n	800def4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dee6:	f004 fa8d 	bl	8012404 <tcp_output>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d101      	bne.n	800def4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800def4:	6a3b      	ldr	r3, [r7, #32]
 800def6:	2b00      	cmp	r3, #0
 800def8:	f000 80ac 	beq.w	800e054 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	2200      	movs	r2, #0
 800df00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800df04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df0a:	2b06      	cmp	r3, #6
 800df0c:	f200 80a2 	bhi.w	800e054 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800df10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df16:	3301      	adds	r3, #1
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800df20:	e098      	b.n	800e054 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800df22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df28:	2b00      	cmp	r3, #0
 800df2a:	db0f      	blt.n	800df4c <tcp_slowtmr+0x1f0>
 800df2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800df36:	4293      	cmp	r3, r2
 800df38:	d008      	beq.n	800df4c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800df3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800df40:	b29b      	uxth	r3, r3
 800df42:	3301      	adds	r3, #1
 800df44:	b29b      	uxth	r3, r3
 800df46:	b21a      	sxth	r2, r3
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800df52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800df58:	429a      	cmp	r2, r3
 800df5a:	db7b      	blt.n	800e054 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800df5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df5e:	f004 fd49 	bl	80129f4 <tcp_rexmit_rto_prepare>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d007      	beq.n	800df78 <tcp_slowtmr+0x21c>
 800df68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d171      	bne.n	800e054 <tcp_slowtmr+0x2f8>
 800df70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df74:	2b00      	cmp	r3, #0
 800df76:	d06d      	beq.n	800e054 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800df78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7a:	7d1b      	ldrb	r3, [r3, #20]
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d03a      	beq.n	800dff6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df86:	2b0c      	cmp	r3, #12
 800df88:	bf28      	it	cs
 800df8a:	230c      	movcs	r3, #12
 800df8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800df8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800df94:	10db      	asrs	r3, r3, #3
 800df96:	b21b      	sxth	r3, r3
 800df98:	461a      	mov	r2, r3
 800df9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dfa0:	4413      	add	r3, r2
 800dfa2:	7efa      	ldrb	r2, [r7, #27]
 800dfa4:	4910      	ldr	r1, [pc, #64]	; (800dfe8 <tcp_slowtmr+0x28c>)
 800dfa6:	5c8a      	ldrb	r2, [r1, r2]
 800dfa8:	4093      	lsls	r3, r2
 800dfaa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	dc1a      	bgt.n	800dfec <tcp_slowtmr+0x290>
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	b21a      	sxth	r2, r3
 800dfba:	e019      	b.n	800dff0 <tcp_slowtmr+0x294>
 800dfbc:	2000c554 	.word	0x2000c554
 800dfc0:	200083ee 	.word	0x200083ee
 800dfc4:	2000c550 	.word	0x2000c550
 800dfc8:	0801e7d8 	.word	0x0801e7d8
 800dfcc:	0801eb1c 	.word	0x0801eb1c
 800dfd0:	0801e81c 	.word	0x0801e81c
 800dfd4:	0801eb48 	.word	0x0801eb48
 800dfd8:	0801eb74 	.word	0x0801eb74
 800dfdc:	0801eba4 	.word	0x0801eba4
 800dfe0:	0801ebd8 	.word	0x0801ebd8
 800dfe4:	08020f08 	.word	0x08020f08
 800dfe8:	08020ef8 	.word	0x08020ef8
 800dfec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	2200      	movs	r2, #0
 800dffa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e008:	4293      	cmp	r3, r2
 800e00a:	bf28      	it	cs
 800e00c:	4613      	movcs	r3, r2
 800e00e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e010:	8a7b      	ldrh	r3, [r7, #18]
 800e012:	085b      	lsrs	r3, r3, #1
 800e014:	b29a      	uxth	r2, r3
 800e016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e018:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	b29b      	uxth	r3, r3
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d206      	bcs.n	800e03c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e032:	005b      	lsls	r3, r3, #1
 800e034:	b29a      	uxth	r2, r3
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e048:	2200      	movs	r2, #0
 800e04a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e04e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e050:	f004 fd40 	bl	8012ad4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	7d1b      	ldrb	r3, [r3, #20]
 800e058:	2b06      	cmp	r3, #6
 800e05a:	d111      	bne.n	800e080 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05e:	8b5b      	ldrh	r3, [r3, #26]
 800e060:	f003 0310 	and.w	r3, r3, #16
 800e064:	2b00      	cmp	r3, #0
 800e066:	d00b      	beq.n	800e080 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e068:	4b9d      	ldr	r3, [pc, #628]	; (800e2e0 <tcp_slowtmr+0x584>)
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06e:	6a1b      	ldr	r3, [r3, #32]
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	2b28      	cmp	r3, #40	; 0x28
 800e074:	d904      	bls.n	800e080 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e07a:	3301      	adds	r3, #1
 800e07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e082:	7a5b      	ldrb	r3, [r3, #9]
 800e084:	f003 0308 	and.w	r3, r3, #8
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d04c      	beq.n	800e126 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e090:	2b04      	cmp	r3, #4
 800e092:	d003      	beq.n	800e09c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e098:	2b07      	cmp	r3, #7
 800e09a:	d144      	bne.n	800e126 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e09c:	4b90      	ldr	r3, [pc, #576]	; (800e2e0 <tcp_slowtmr+0x584>)
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e0ac:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e0b0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e0b4:	498b      	ldr	r1, [pc, #556]	; (800e2e4 <tcp_slowtmr+0x588>)
 800e0b6:	fba1 1303 	umull	r1, r3, r1, r3
 800e0ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d90a      	bls.n	800e0d6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e0ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e0d4:	e027      	b.n	800e126 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0d6:	4b82      	ldr	r3, [pc, #520]	; (800e2e0 <tcp_slowtmr+0x584>)
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0dc:	6a1b      	ldr	r3, [r3, #32]
 800e0de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	4b7e      	ldr	r3, [pc, #504]	; (800e2e8 <tcp_slowtmr+0x58c>)
 800e0f0:	fb03 f300 	mul.w	r3, r3, r0
 800e0f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e0f6:	497b      	ldr	r1, [pc, #492]	; (800e2e4 <tcp_slowtmr+0x588>)
 800e0f8:	fba1 1303 	umull	r1, r3, r1, r3
 800e0fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d911      	bls.n	800e126 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e104:	f004 fff6 	bl	80130f4 <tcp_keepalive>
 800e108:	4603      	mov	r3, r0
 800e10a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e10e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e112:	2b00      	cmp	r3, #0
 800e114:	d107      	bne.n	800e126 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e11c:	3301      	adds	r3, #1
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e122:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d011      	beq.n	800e152 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e12e:	4b6c      	ldr	r3, [pc, #432]	; (800e2e0 <tcp_slowtmr+0x584>)
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e134:	6a1b      	ldr	r3, [r3, #32]
 800e136:	1ad2      	subs	r2, r2, r3
 800e138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e13e:	4619      	mov	r1, r3
 800e140:	460b      	mov	r3, r1
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	440b      	add	r3, r1
 800e146:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e148:	429a      	cmp	r2, r3
 800e14a:	d302      	bcc.n	800e152 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e14c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e14e:	f000 fea5 	bl	800ee9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e154:	7d1b      	ldrb	r3, [r3, #20]
 800e156:	2b03      	cmp	r3, #3
 800e158:	d10b      	bne.n	800e172 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e15a:	4b61      	ldr	r3, [pc, #388]	; (800e2e0 <tcp_slowtmr+0x584>)
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e160:	6a1b      	ldr	r3, [r3, #32]
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	2b28      	cmp	r3, #40	; 0x28
 800e166:	d904      	bls.n	800e172 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e16c:	3301      	adds	r3, #1
 800e16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e174:	7d1b      	ldrb	r3, [r3, #20]
 800e176:	2b09      	cmp	r3, #9
 800e178:	d10b      	bne.n	800e192 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e17a:	4b59      	ldr	r3, [pc, #356]	; (800e2e0 <tcp_slowtmr+0x584>)
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	6a1b      	ldr	r3, [r3, #32]
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	2bf0      	cmp	r3, #240	; 0xf0
 800e186:	d904      	bls.n	800e192 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e18c:	3301      	adds	r3, #1
 800e18e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e196:	2b00      	cmp	r3, #0
 800e198:	d060      	beq.n	800e25c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1a0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1a4:	f000 fcc6 	bl	800eb34 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d010      	beq.n	800e1d0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e1ae:	4b4f      	ldr	r3, [pc, #316]	; (800e2ec <tcp_slowtmr+0x590>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d106      	bne.n	800e1c6 <tcp_slowtmr+0x46a>
 800e1b8:	4b4d      	ldr	r3, [pc, #308]	; (800e2f0 <tcp_slowtmr+0x594>)
 800e1ba:	f240 526d 	movw	r2, #1389	; 0x56d
 800e1be:	494d      	ldr	r1, [pc, #308]	; (800e2f4 <tcp_slowtmr+0x598>)
 800e1c0:	484d      	ldr	r0, [pc, #308]	; (800e2f8 <tcp_slowtmr+0x59c>)
 800e1c2:	f00d fe51 	bl	801be68 <iprintf>
        prev->next = pcb->next;
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	68da      	ldr	r2, [r3, #12]
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	60da      	str	r2, [r3, #12]
 800e1ce:	e00f      	b.n	800e1f0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e1d0:	4b46      	ldr	r3, [pc, #280]	; (800e2ec <tcp_slowtmr+0x590>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d006      	beq.n	800e1e8 <tcp_slowtmr+0x48c>
 800e1da:	4b45      	ldr	r3, [pc, #276]	; (800e2f0 <tcp_slowtmr+0x594>)
 800e1dc:	f240 5271 	movw	r2, #1393	; 0x571
 800e1e0:	4946      	ldr	r1, [pc, #280]	; (800e2fc <tcp_slowtmr+0x5a0>)
 800e1e2:	4845      	ldr	r0, [pc, #276]	; (800e2f8 <tcp_slowtmr+0x59c>)
 800e1e4:	f00d fe40 	bl	801be68 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	4a3f      	ldr	r2, [pc, #252]	; (800e2ec <tcp_slowtmr+0x590>)
 800e1ee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e1f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d013      	beq.n	800e220 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e200:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	3304      	adds	r3, #4
 800e206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e208:	8ad2      	ldrh	r2, [r2, #22]
 800e20a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e20c:	8b09      	ldrh	r1, [r1, #24]
 800e20e:	9102      	str	r1, [sp, #8]
 800e210:	9201      	str	r2, [sp, #4]
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	462b      	mov	r3, r5
 800e216:	4622      	mov	r2, r4
 800e218:	4601      	mov	r1, r0
 800e21a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e21c:	f004 feb6 	bl	8012f8c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	7d1b      	ldrb	r3, [r3, #20]
 800e22a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e236:	6838      	ldr	r0, [r7, #0]
 800e238:	f7ff f842 	bl	800d2c0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e23c:	4b30      	ldr	r3, [pc, #192]	; (800e300 <tcp_slowtmr+0x5a4>)
 800e23e:	2200      	movs	r2, #0
 800e240:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d004      	beq.n	800e252 <tcp_slowtmr+0x4f6>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f06f 010c 	mvn.w	r1, #12
 800e24e:	68b8      	ldr	r0, [r7, #8]
 800e250:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e252:	4b2b      	ldr	r3, [pc, #172]	; (800e300 <tcp_slowtmr+0x5a4>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d037      	beq.n	800e2ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e25a:	e590      	b.n	800dd7e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	7f1b      	ldrb	r3, [r3, #28]
 800e26a:	3301      	adds	r3, #1
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e274:	7f1a      	ldrb	r2, [r3, #28]
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	7f5b      	ldrb	r3, [r3, #29]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d325      	bcc.n	800e2ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	2200      	movs	r2, #0
 800e282:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e284:	4b1e      	ldr	r3, [pc, #120]	; (800e300 <tcp_slowtmr+0x5a4>)
 800e286:	2200      	movs	r2, #0
 800e288:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00b      	beq.n	800e2ac <tcp_slowtmr+0x550>
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e29a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e29c:	6912      	ldr	r2, [r2, #16]
 800e29e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	4798      	blx	r3
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e2aa:	e002      	b.n	800e2b2 <tcp_slowtmr+0x556>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e2b2:	4b13      	ldr	r3, [pc, #76]	; (800e300 <tcp_slowtmr+0x5a4>)
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d000      	beq.n	800e2bc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e2ba:	e560      	b.n	800dd7e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e2bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d102      	bne.n	800e2ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2c6:	f004 f89d 	bl	8012404 <tcp_output>
  while (pcb != NULL) {
 800e2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f47f ad5c 	bne.w	800dd8a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e2d6:	4b0b      	ldr	r3, [pc, #44]	; (800e304 <tcp_slowtmr+0x5a8>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e2dc:	e067      	b.n	800e3ae <tcp_slowtmr+0x652>
 800e2de:	bf00      	nop
 800e2e0:	2000c554 	.word	0x2000c554
 800e2e4:	10624dd3 	.word	0x10624dd3
 800e2e8:	000124f8 	.word	0x000124f8
 800e2ec:	2000c550 	.word	0x2000c550
 800e2f0:	0801e7d8 	.word	0x0801e7d8
 800e2f4:	0801ec10 	.word	0x0801ec10
 800e2f8:	0801e81c 	.word	0x0801e81c
 800e2fc:	0801ec3c 	.word	0x0801ec3c
 800e300:	2000c54c 	.word	0x2000c54c
 800e304:	2000c560 	.word	0x2000c560
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	7d1b      	ldrb	r3, [r3, #20]
 800e30c:	2b0a      	cmp	r3, #10
 800e30e:	d006      	beq.n	800e31e <tcp_slowtmr+0x5c2>
 800e310:	4b2a      	ldr	r3, [pc, #168]	; (800e3bc <tcp_slowtmr+0x660>)
 800e312:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e316:	492a      	ldr	r1, [pc, #168]	; (800e3c0 <tcp_slowtmr+0x664>)
 800e318:	482a      	ldr	r0, [pc, #168]	; (800e3c4 <tcp_slowtmr+0x668>)
 800e31a:	f00d fda5 	bl	801be68 <iprintf>
    pcb_remove = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e324:	4b28      	ldr	r3, [pc, #160]	; (800e3c8 <tcp_slowtmr+0x66c>)
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32a:	6a1b      	ldr	r3, [r3, #32]
 800e32c:	1ad3      	subs	r3, r2, r3
 800e32e:	2bf0      	cmp	r3, #240	; 0xf0
 800e330:	d904      	bls.n	800e33c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e336:	3301      	adds	r3, #1
 800e338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e340:	2b00      	cmp	r3, #0
 800e342:	d02f      	beq.n	800e3a4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e346:	f000 fbf5 	bl	800eb34 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d010      	beq.n	800e372 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e350:	4b1e      	ldr	r3, [pc, #120]	; (800e3cc <tcp_slowtmr+0x670>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e356:	429a      	cmp	r2, r3
 800e358:	d106      	bne.n	800e368 <tcp_slowtmr+0x60c>
 800e35a:	4b18      	ldr	r3, [pc, #96]	; (800e3bc <tcp_slowtmr+0x660>)
 800e35c:	f240 52af 	movw	r2, #1455	; 0x5af
 800e360:	491b      	ldr	r1, [pc, #108]	; (800e3d0 <tcp_slowtmr+0x674>)
 800e362:	4818      	ldr	r0, [pc, #96]	; (800e3c4 <tcp_slowtmr+0x668>)
 800e364:	f00d fd80 	bl	801be68 <iprintf>
        prev->next = pcb->next;
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	68da      	ldr	r2, [r3, #12]
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	60da      	str	r2, [r3, #12]
 800e370:	e00f      	b.n	800e392 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e372:	4b16      	ldr	r3, [pc, #88]	; (800e3cc <tcp_slowtmr+0x670>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e378:	429a      	cmp	r2, r3
 800e37a:	d006      	beq.n	800e38a <tcp_slowtmr+0x62e>
 800e37c:	4b0f      	ldr	r3, [pc, #60]	; (800e3bc <tcp_slowtmr+0x660>)
 800e37e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e382:	4914      	ldr	r1, [pc, #80]	; (800e3d4 <tcp_slowtmr+0x678>)
 800e384:	480f      	ldr	r0, [pc, #60]	; (800e3c4 <tcp_slowtmr+0x668>)
 800e386:	f00d fd6f 	bl	801be68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	4a0f      	ldr	r2, [pc, #60]	; (800e3cc <tcp_slowtmr+0x670>)
 800e390:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e394:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e39c:	69f8      	ldr	r0, [r7, #28]
 800e39e:	f7fe ff8f 	bl	800d2c0 <tcp_free>
 800e3a2:	e004      	b.n	800e3ae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d1a9      	bne.n	800e308 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e3b4:	bf00      	nop
 800e3b6:	3730      	adds	r7, #48	; 0x30
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e3bc:	0801e7d8 	.word	0x0801e7d8
 800e3c0:	0801ec68 	.word	0x0801ec68
 800e3c4:	0801e81c 	.word	0x0801e81c
 800e3c8:	2000c554 	.word	0x2000c554
 800e3cc:	2000c560 	.word	0x2000c560
 800e3d0:	0801ec98 	.word	0x0801ec98
 800e3d4:	0801ecc0 	.word	0x0801ecc0

0800e3d8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e3de:	4b2d      	ldr	r3, [pc, #180]	; (800e494 <tcp_fasttmr+0xbc>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	4b2b      	ldr	r3, [pc, #172]	; (800e494 <tcp_fasttmr+0xbc>)
 800e3e8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e3ea:	4b2b      	ldr	r3, [pc, #172]	; (800e498 <tcp_fasttmr+0xc0>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e3f0:	e048      	b.n	800e484 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	7f9a      	ldrb	r2, [r3, #30]
 800e3f6:	4b27      	ldr	r3, [pc, #156]	; (800e494 <tcp_fasttmr+0xbc>)
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d03f      	beq.n	800e47e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e3fe:	4b25      	ldr	r3, [pc, #148]	; (800e494 <tcp_fasttmr+0xbc>)
 800e400:	781a      	ldrb	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	8b5b      	ldrh	r3, [r3, #26]
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d010      	beq.n	800e434 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	8b5b      	ldrh	r3, [r3, #26]
 800e416:	f043 0302 	orr.w	r3, r3, #2
 800e41a:	b29a      	uxth	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f003 ffef 	bl	8012404 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	8b5b      	ldrh	r3, [r3, #26]
 800e42a:	f023 0303 	bic.w	r3, r3, #3
 800e42e:	b29a      	uxth	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	8b5b      	ldrh	r3, [r3, #26]
 800e438:	f003 0308 	and.w	r3, r3, #8
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d009      	beq.n	800e454 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	8b5b      	ldrh	r3, [r3, #26]
 800e444:	f023 0308 	bic.w	r3, r3, #8
 800e448:	b29a      	uxth	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7ff f8c6 	bl	800d5e0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00a      	beq.n	800e478 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e462:	4b0e      	ldr	r3, [pc, #56]	; (800e49c <tcp_fasttmr+0xc4>)
 800e464:	2200      	movs	r2, #0
 800e466:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f819 	bl	800e4a0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e46e:	4b0b      	ldr	r3, [pc, #44]	; (800e49c <tcp_fasttmr+0xc4>)
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d000      	beq.n	800e478 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e476:	e7b8      	b.n	800e3ea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	607b      	str	r3, [r7, #4]
 800e47c:	e002      	b.n	800e484 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d1b3      	bne.n	800e3f2 <tcp_fasttmr+0x1a>
    }
  }
}
 800e48a:	bf00      	nop
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	200083ee 	.word	0x200083ee
 800e498:	2000c550 	.word	0x2000c550
 800e49c:	2000c54c 	.word	0x2000c54c

0800e4a0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e4a0:	b590      	push	{r4, r7, lr}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d109      	bne.n	800e4c2 <tcp_process_refused_data+0x22>
 800e4ae:	4b37      	ldr	r3, [pc, #220]	; (800e58c <tcp_process_refused_data+0xec>)
 800e4b0:	f240 6209 	movw	r2, #1545	; 0x609
 800e4b4:	4936      	ldr	r1, [pc, #216]	; (800e590 <tcp_process_refused_data+0xf0>)
 800e4b6:	4837      	ldr	r0, [pc, #220]	; (800e594 <tcp_process_refused_data+0xf4>)
 800e4b8:	f00d fcd6 	bl	801be68 <iprintf>
 800e4bc:	f06f 030f 	mvn.w	r3, #15
 800e4c0:	e060      	b.n	800e584 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4c6:	7b5b      	ldrb	r3, [r3, #13]
 800e4c8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4ce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00b      	beq.n	800e4f8 <tcp_process_refused_data+0x58>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6918      	ldr	r0, [r3, #16]
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	68ba      	ldr	r2, [r7, #8]
 800e4ee:	6879      	ldr	r1, [r7, #4]
 800e4f0:	47a0      	blx	r4
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	73fb      	strb	r3, [r7, #15]
 800e4f6:	e007      	b.n	800e508 <tcp_process_refused_data+0x68>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	6879      	ldr	r1, [r7, #4]
 800e4fe:	2000      	movs	r0, #0
 800e500:	f000 f8a2 	bl	800e648 <tcp_recv_null>
 800e504:	4603      	mov	r3, r0
 800e506:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d12a      	bne.n	800e566 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e510:	7bbb      	ldrb	r3, [r7, #14]
 800e512:	f003 0320 	and.w	r3, r3, #32
 800e516:	2b00      	cmp	r3, #0
 800e518:	d033      	beq.n	800e582 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e51e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e522:	d005      	beq.n	800e530 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e528:	3301      	adds	r3, #1
 800e52a:	b29a      	uxth	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00b      	beq.n	800e552 <tcp_process_refused_data+0xb2>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6918      	ldr	r0, [r3, #16]
 800e544:	2300      	movs	r3, #0
 800e546:	2200      	movs	r2, #0
 800e548:	6879      	ldr	r1, [r7, #4]
 800e54a:	47a0      	blx	r4
 800e54c:	4603      	mov	r3, r0
 800e54e:	73fb      	strb	r3, [r7, #15]
 800e550:	e001      	b.n	800e556 <tcp_process_refused_data+0xb6>
 800e552:	2300      	movs	r3, #0
 800e554:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e55a:	f113 0f0d 	cmn.w	r3, #13
 800e55e:	d110      	bne.n	800e582 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e560:	f06f 030c 	mvn.w	r3, #12
 800e564:	e00e      	b.n	800e584 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e56a:	f113 0f0d 	cmn.w	r3, #13
 800e56e:	d102      	bne.n	800e576 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e570:	f06f 030c 	mvn.w	r3, #12
 800e574:	e006      	b.n	800e584 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e57c:	f06f 0304 	mvn.w	r3, #4
 800e580:	e000      	b.n	800e584 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3714      	adds	r7, #20
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd90      	pop	{r4, r7, pc}
 800e58c:	0801e7d8 	.word	0x0801e7d8
 800e590:	0801ece8 	.word	0x0801ece8
 800e594:	0801e81c 	.word	0x0801e81c

0800e598 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e5a0:	e007      	b.n	800e5b2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 f809 	bl	800e5c0 <tcp_seg_free>
    seg = next;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1f4      	bne.n	800e5a2 <tcp_segs_free+0xa>
  }
}
 800e5b8:	bf00      	nop
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00c      	beq.n	800e5e8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d004      	beq.n	800e5e0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe fbb4 	bl	800cd48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	2003      	movs	r0, #3
 800e5e4:	f7fd fcd2 	bl	800bf8c <memp_free>
  }
}
 800e5e8:	bf00      	nop
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d106      	bne.n	800e60c <tcp_seg_copy+0x1c>
 800e5fe:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <tcp_seg_copy+0x4c>)
 800e600:	f240 6282 	movw	r2, #1666	; 0x682
 800e604:	490e      	ldr	r1, [pc, #56]	; (800e640 <tcp_seg_copy+0x50>)
 800e606:	480f      	ldr	r0, [pc, #60]	; (800e644 <tcp_seg_copy+0x54>)
 800e608:	f00d fc2e 	bl	801be68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e60c:	2003      	movs	r0, #3
 800e60e:	f7fd fc6b 	bl	800bee8 <memp_malloc>
 800e612:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d101      	bne.n	800e61e <tcp_seg_copy+0x2e>
    return NULL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	e00a      	b.n	800e634 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e61e:	2210      	movs	r2, #16
 800e620:	6879      	ldr	r1, [r7, #4]
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f00d fc0d 	bl	801be42 <memcpy>
  pbuf_ref(cseg->p);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fe fc31 	bl	800ce94 <pbuf_ref>
  return cseg;
 800e632:	68fb      	ldr	r3, [r7, #12]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	0801e7d8 	.word	0x0801e7d8
 800e640:	0801ed2c 	.word	0x0801ed2c
 800e644:	0801e81c 	.word	0x0801e81c

0800e648 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d109      	bne.n	800e670 <tcp_recv_null+0x28>
 800e65c:	4b12      	ldr	r3, [pc, #72]	; (800e6a8 <tcp_recv_null+0x60>)
 800e65e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e662:	4912      	ldr	r1, [pc, #72]	; (800e6ac <tcp_recv_null+0x64>)
 800e664:	4812      	ldr	r0, [pc, #72]	; (800e6b0 <tcp_recv_null+0x68>)
 800e666:	f00d fbff 	bl	801be68 <iprintf>
 800e66a:	f06f 030f 	mvn.w	r3, #15
 800e66e:	e016      	b.n	800e69e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d009      	beq.n	800e68a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	891b      	ldrh	r3, [r3, #8]
 800e67a:	4619      	mov	r1, r3
 800e67c:	68b8      	ldr	r0, [r7, #8]
 800e67e:	f7ff f9bf 	bl	800da00 <tcp_recved>
    pbuf_free(p);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7fe fb60 	bl	800cd48 <pbuf_free>
 800e688:	e008      	b.n	800e69c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e68a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d104      	bne.n	800e69c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e692:	68b8      	ldr	r0, [r7, #8]
 800e694:	f7ff f80a 	bl	800d6ac <tcp_close>
 800e698:	4603      	mov	r3, r0
 800e69a:	e000      	b.n	800e69e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0801e7d8 	.word	0x0801e7d8
 800e6ac:	0801ed48 	.word	0x0801ed48
 800e6b0:	0801e81c 	.word	0x0801e81c

0800e6b4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e6be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	db01      	blt.n	800e6ca <tcp_kill_prio+0x16>
 800e6c6:	79fb      	ldrb	r3, [r7, #7]
 800e6c8:	e000      	b.n	800e6cc <tcp_kill_prio+0x18>
 800e6ca:	237f      	movs	r3, #127	; 0x7f
 800e6cc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e6ce:	7afb      	ldrb	r3, [r7, #11]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d034      	beq.n	800e73e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e6d4:	7afb      	ldrb	r3, [r7, #11]
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6e2:	4b19      	ldr	r3, [pc, #100]	; (800e748 <tcp_kill_prio+0x94>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	617b      	str	r3, [r7, #20]
 800e6e8:	e01f      	b.n	800e72a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	7d5b      	ldrb	r3, [r3, #21]
 800e6ee:	7afa      	ldrb	r2, [r7, #11]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d80c      	bhi.n	800e70e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e6f8:	7afa      	ldrb	r2, [r7, #11]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d112      	bne.n	800e724 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e6fe:	4b13      	ldr	r3, [pc, #76]	; (800e74c <tcp_kill_prio+0x98>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	6a1b      	ldr	r3, [r3, #32]
 800e706:	1ad3      	subs	r3, r2, r3
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d80a      	bhi.n	800e724 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <tcp_kill_prio+0x98>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	6a1b      	ldr	r3, [r3, #32]
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	7d5b      	ldrb	r3, [r3, #21]
 800e722:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1dc      	bne.n	800e6ea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d004      	beq.n	800e740 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e736:	6938      	ldr	r0, [r7, #16]
 800e738:	f7ff f8fc 	bl	800d934 <tcp_abort>
 800e73c:	e000      	b.n	800e740 <tcp_kill_prio+0x8c>
    return;
 800e73e:	bf00      	nop
  }
}
 800e740:	3718      	adds	r7, #24
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	2000c550 	.word	0x2000c550
 800e74c:	2000c554 	.word	0x2000c554

0800e750 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	2b08      	cmp	r3, #8
 800e75e:	d009      	beq.n	800e774 <tcp_kill_state+0x24>
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	2b09      	cmp	r3, #9
 800e764:	d006      	beq.n	800e774 <tcp_kill_state+0x24>
 800e766:	4b1a      	ldr	r3, [pc, #104]	; (800e7d0 <tcp_kill_state+0x80>)
 800e768:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e76c:	4919      	ldr	r1, [pc, #100]	; (800e7d4 <tcp_kill_state+0x84>)
 800e76e:	481a      	ldr	r0, [pc, #104]	; (800e7d8 <tcp_kill_state+0x88>)
 800e770:	f00d fb7a 	bl	801be68 <iprintf>

  inactivity = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e778:	2300      	movs	r3, #0
 800e77a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e77c:	4b17      	ldr	r3, [pc, #92]	; (800e7dc <tcp_kill_state+0x8c>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	617b      	str	r3, [r7, #20]
 800e782:	e017      	b.n	800e7b4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	79fa      	ldrb	r2, [r7, #7]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d10f      	bne.n	800e7ae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e78e:	4b14      	ldr	r3, [pc, #80]	; (800e7e0 <tcp_kill_state+0x90>)
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	6a1b      	ldr	r3, [r3, #32]
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d807      	bhi.n	800e7ae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e79e:	4b10      	ldr	r3, [pc, #64]	; (800e7e0 <tcp_kill_state+0x90>)
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	6a1b      	ldr	r3, [r3, #32]
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	617b      	str	r3, [r7, #20]
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d1e4      	bne.n	800e784 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d003      	beq.n	800e7c8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	6938      	ldr	r0, [r7, #16]
 800e7c4:	f7fe fff8 	bl	800d7b8 <tcp_abandon>
  }
}
 800e7c8:	bf00      	nop
 800e7ca:	3718      	adds	r7, #24
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	0801e7d8 	.word	0x0801e7d8
 800e7d4:	0801ed64 	.word	0x0801ed64
 800e7d8:	0801e81c 	.word	0x0801e81c
 800e7dc:	2000c550 	.word	0x2000c550
 800e7e0:	2000c554 	.word	0x2000c554

0800e7e4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7f2:	4b12      	ldr	r3, [pc, #72]	; (800e83c <tcp_kill_timewait+0x58>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	e012      	b.n	800e820 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e7fa:	4b11      	ldr	r3, [pc, #68]	; (800e840 <tcp_kill_timewait+0x5c>)
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6a1b      	ldr	r3, [r3, #32]
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	429a      	cmp	r2, r3
 800e808:	d807      	bhi.n	800e81a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e80a:	4b0d      	ldr	r3, [pc, #52]	; (800e840 <tcp_kill_timewait+0x5c>)
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6a1b      	ldr	r3, [r3, #32]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1e9      	bne.n	800e7fa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e82c:	68b8      	ldr	r0, [r7, #8]
 800e82e:	f7ff f881 	bl	800d934 <tcp_abort>
  }
}
 800e832:	bf00      	nop
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	2000c560 	.word	0x2000c560
 800e840:	2000c554 	.word	0x2000c554

0800e844 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e84a:	4b10      	ldr	r3, [pc, #64]	; (800e88c <tcp_handle_closepend+0x48>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e850:	e014      	b.n	800e87c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	8b5b      	ldrh	r3, [r3, #26]
 800e85c:	f003 0308 	and.w	r3, r3, #8
 800e860:	2b00      	cmp	r3, #0
 800e862:	d009      	beq.n	800e878 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	8b5b      	ldrh	r3, [r3, #26]
 800e868:	f023 0308 	bic.w	r3, r3, #8
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7fe feb4 	bl	800d5e0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1e7      	bne.n	800e852 <tcp_handle_closepend+0xe>
  }
}
 800e882:	bf00      	nop
 800e884:	3708      	adds	r7, #8
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	2000c550 	.word	0x2000c550

0800e890 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	4603      	mov	r3, r0
 800e898:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e89a:	2001      	movs	r0, #1
 800e89c:	f7fd fb24 	bl	800bee8 <memp_malloc>
 800e8a0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d126      	bne.n	800e8f6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e8a8:	f7ff ffcc 	bl	800e844 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e8ac:	f7ff ff9a 	bl	800e7e4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8b0:	2001      	movs	r0, #1
 800e8b2:	f7fd fb19 	bl	800bee8 <memp_malloc>
 800e8b6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d11b      	bne.n	800e8f6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e8be:	2009      	movs	r0, #9
 800e8c0:	f7ff ff46 	bl	800e750 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8c4:	2001      	movs	r0, #1
 800e8c6:	f7fd fb0f 	bl	800bee8 <memp_malloc>
 800e8ca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d111      	bne.n	800e8f6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e8d2:	2008      	movs	r0, #8
 800e8d4:	f7ff ff3c 	bl	800e750 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8d8:	2001      	movs	r0, #1
 800e8da:	f7fd fb05 	bl	800bee8 <memp_malloc>
 800e8de:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d107      	bne.n	800e8f6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e8e6:	79fb      	ldrb	r3, [r7, #7]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7ff fee3 	bl	800e6b4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8ee:	2001      	movs	r0, #1
 800e8f0:	f7fd fafa 	bl	800bee8 <memp_malloc>
 800e8f4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d03f      	beq.n	800e97c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e8fc:	229c      	movs	r2, #156	; 0x9c
 800e8fe:	2100      	movs	r1, #0
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f00d faa9 	bl	801be58 <memset>
    pcb->prio = prio;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	79fa      	ldrb	r2, [r7, #7]
 800e90a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e912:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e91c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	22ff      	movs	r2, #255	; 0xff
 800e92a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e932:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2206      	movs	r2, #6
 800e938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2206      	movs	r2, #6
 800e940:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e948:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2201      	movs	r2, #1
 800e94e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e952:	4b0d      	ldr	r3, [pc, #52]	; (800e988 <tcp_alloc+0xf8>)
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e95a:	4b0c      	ldr	r3, [pc, #48]	; (800e98c <tcp_alloc+0xfc>)
 800e95c:	781a      	ldrb	r2, [r3, #0]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e968:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	4a08      	ldr	r2, [pc, #32]	; (800e990 <tcp_alloc+0x100>)
 800e970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	4a07      	ldr	r2, [pc, #28]	; (800e994 <tcp_alloc+0x104>)
 800e978:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e97c:	68fb      	ldr	r3, [r7, #12]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	2000c554 	.word	0x2000c554
 800e98c:	200083ee 	.word	0x200083ee
 800e990:	0800e649 	.word	0x0800e649
 800e994:	006ddd00 	.word	0x006ddd00

0800e998 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e9a2:	2040      	movs	r0, #64	; 0x40
 800e9a4:	f7ff ff74 	bl	800e890 <tcp_alloc>
 800e9a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	683a      	ldr	r2, [r7, #0]
 800e9c8:	611a      	str	r2, [r3, #16]
  }
}
 800e9ca:	bf00      	nop
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
	...

0800e9d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00e      	beq.n	800ea06 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7d1b      	ldrb	r3, [r3, #20]
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d106      	bne.n	800e9fe <tcp_recv+0x26>
 800e9f0:	4b07      	ldr	r3, [pc, #28]	; (800ea10 <tcp_recv+0x38>)
 800e9f2:	f240 72df 	movw	r2, #2015	; 0x7df
 800e9f6:	4907      	ldr	r1, [pc, #28]	; (800ea14 <tcp_recv+0x3c>)
 800e9f8:	4807      	ldr	r0, [pc, #28]	; (800ea18 <tcp_recv+0x40>)
 800e9fa:	f00d fa35 	bl	801be68 <iprintf>
    pcb->recv = recv;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ea06:	bf00      	nop
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	0801e7d8 	.word	0x0801e7d8
 800ea14:	0801ed74 	.word	0x0801ed74
 800ea18:	0801e81c 	.word	0x0801e81c

0800ea1c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00e      	beq.n	800ea4a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	7d1b      	ldrb	r3, [r3, #20]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d106      	bne.n	800ea42 <tcp_sent+0x26>
 800ea34:	4b07      	ldr	r3, [pc, #28]	; (800ea54 <tcp_sent+0x38>)
 800ea36:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ea3a:	4907      	ldr	r1, [pc, #28]	; (800ea58 <tcp_sent+0x3c>)
 800ea3c:	4807      	ldr	r0, [pc, #28]	; (800ea5c <tcp_sent+0x40>)
 800ea3e:	f00d fa13 	bl	801be68 <iprintf>
    pcb->sent = sent;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	0801e7d8 	.word	0x0801e7d8
 800ea58:	0801ed9c 	.word	0x0801ed9c
 800ea5c:	0801e81c 	.word	0x0801e81c

0800ea60 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00e      	beq.n	800ea8e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7d1b      	ldrb	r3, [r3, #20]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d106      	bne.n	800ea86 <tcp_err+0x26>
 800ea78:	4b07      	ldr	r3, [pc, #28]	; (800ea98 <tcp_err+0x38>)
 800ea7a:	f640 020d 	movw	r2, #2061	; 0x80d
 800ea7e:	4907      	ldr	r1, [pc, #28]	; (800ea9c <tcp_err+0x3c>)
 800ea80:	4807      	ldr	r0, [pc, #28]	; (800eaa0 <tcp_err+0x40>)
 800ea82:	f00d f9f1 	bl	801be68 <iprintf>
    pcb->errf = err;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	683a      	ldr	r2, [r7, #0]
 800ea8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ea8e:	bf00      	nop
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	0801e7d8 	.word	0x0801e7d8
 800ea9c:	0801edc4 	.word	0x0801edc4
 800eaa0:	0801e81c 	.word	0x0801e81c

0800eaa4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d008      	beq.n	800eac6 <tcp_accept+0x22>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	7d1b      	ldrb	r3, [r3, #20]
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d104      	bne.n	800eac6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	619a      	str	r2, [r3, #24]
  }
}
 800eac6:	bf00      	nop
 800eac8:	3714      	adds	r7, #20
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
	...

0800ead4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	4613      	mov	r3, r2
 800eae0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d107      	bne.n	800eaf8 <tcp_poll+0x24>
 800eae8:	4b0e      	ldr	r3, [pc, #56]	; (800eb24 <tcp_poll+0x50>)
 800eaea:	f640 023d 	movw	r2, #2109	; 0x83d
 800eaee:	490e      	ldr	r1, [pc, #56]	; (800eb28 <tcp_poll+0x54>)
 800eaf0:	480e      	ldr	r0, [pc, #56]	; (800eb2c <tcp_poll+0x58>)
 800eaf2:	f00d f9b9 	bl	801be68 <iprintf>
 800eaf6:	e011      	b.n	800eb1c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	7d1b      	ldrb	r3, [r3, #20]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d106      	bne.n	800eb0e <tcp_poll+0x3a>
 800eb00:	4b08      	ldr	r3, [pc, #32]	; (800eb24 <tcp_poll+0x50>)
 800eb02:	f640 023e 	movw	r2, #2110	; 0x83e
 800eb06:	490a      	ldr	r1, [pc, #40]	; (800eb30 <tcp_poll+0x5c>)
 800eb08:	4808      	ldr	r0, [pc, #32]	; (800eb2c <tcp_poll+0x58>)
 800eb0a:	f00d f9ad 	bl	801be68 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	79fa      	ldrb	r2, [r7, #7]
 800eb1a:	775a      	strb	r2, [r3, #29]
}
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	0801e7d8 	.word	0x0801e7d8
 800eb28:	0801edec 	.word	0x0801edec
 800eb2c:	0801e81c 	.word	0x0801e81c
 800eb30:	0801ee04 	.word	0x0801ee04

0800eb34 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d107      	bne.n	800eb52 <tcp_pcb_purge+0x1e>
 800eb42:	4b21      	ldr	r3, [pc, #132]	; (800ebc8 <tcp_pcb_purge+0x94>)
 800eb44:	f640 0251 	movw	r2, #2129	; 0x851
 800eb48:	4920      	ldr	r1, [pc, #128]	; (800ebcc <tcp_pcb_purge+0x98>)
 800eb4a:	4821      	ldr	r0, [pc, #132]	; (800ebd0 <tcp_pcb_purge+0x9c>)
 800eb4c:	f00d f98c 	bl	801be68 <iprintf>
 800eb50:	e037      	b.n	800ebc2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	7d1b      	ldrb	r3, [r3, #20]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d033      	beq.n	800ebc2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eb5e:	2b0a      	cmp	r3, #10
 800eb60:	d02f      	beq.n	800ebc2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d02b      	beq.n	800ebc2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d007      	beq.n	800eb82 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fe f8e6 	bl	800cd48 <pbuf_free>
      pcb->refused_data = NULL;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d002      	beq.n	800eb90 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f000 f986 	bl	800ee9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb96:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff fcfb 	bl	800e598 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fcf6 	bl	800e598 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	66da      	str	r2, [r3, #108]	; 0x6c
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	0801e7d8 	.word	0x0801e7d8
 800ebcc:	0801ee24 	.word	0x0801ee24
 800ebd0:	0801e81c 	.word	0x0801e81c

0800ebd4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d106      	bne.n	800ebf2 <tcp_pcb_remove+0x1e>
 800ebe4:	4b3e      	ldr	r3, [pc, #248]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800ebe6:	f640 0283 	movw	r2, #2179	; 0x883
 800ebea:	493e      	ldr	r1, [pc, #248]	; (800ece4 <tcp_pcb_remove+0x110>)
 800ebec:	483e      	ldr	r0, [pc, #248]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ebee:	f00d f93b 	bl	801be68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d106      	bne.n	800ec06 <tcp_pcb_remove+0x32>
 800ebf8:	4b39      	ldr	r3, [pc, #228]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800ebfa:	f640 0284 	movw	r2, #2180	; 0x884
 800ebfe:	493b      	ldr	r1, [pc, #236]	; (800ecec <tcp_pcb_remove+0x118>)
 800ec00:	4839      	ldr	r0, [pc, #228]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ec02:	f00d f931 	bl	801be68 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	683a      	ldr	r2, [r7, #0]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d105      	bne.n	800ec1c <tcp_pcb_remove+0x48>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68da      	ldr	r2, [r3, #12]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	601a      	str	r2, [r3, #0]
 800ec1a:	e013      	b.n	800ec44 <tcp_pcb_remove+0x70>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60fb      	str	r3, [r7, #12]
 800ec22:	e00c      	b.n	800ec3e <tcp_pcb_remove+0x6a>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	683a      	ldr	r2, [r7, #0]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d104      	bne.n	800ec38 <tcp_pcb_remove+0x64>
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	68da      	ldr	r2, [r3, #12]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	60da      	str	r2, [r3, #12]
 800ec36:	e005      	b.n	800ec44 <tcp_pcb_remove+0x70>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	60fb      	str	r3, [r7, #12]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d1ef      	bne.n	800ec24 <tcp_pcb_remove+0x50>
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	2200      	movs	r2, #0
 800ec48:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ec4a:	6838      	ldr	r0, [r7, #0]
 800ec4c:	f7ff ff72 	bl	800eb34 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	7d1b      	ldrb	r3, [r3, #20]
 800ec54:	2b0a      	cmp	r3, #10
 800ec56:	d013      	beq.n	800ec80 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d00f      	beq.n	800ec80 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	8b5b      	ldrh	r3, [r3, #26]
 800ec64:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d009      	beq.n	800ec80 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	8b5b      	ldrh	r3, [r3, #26]
 800ec70:	f043 0302 	orr.w	r3, r3, #2
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec7a:	6838      	ldr	r0, [r7, #0]
 800ec7c:	f003 fbc2 	bl	8012404 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	7d1b      	ldrb	r3, [r3, #20]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d020      	beq.n	800ecca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d006      	beq.n	800ec9e <tcp_pcb_remove+0xca>
 800ec90:	4b13      	ldr	r3, [pc, #76]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800ec92:	f640 0293 	movw	r2, #2195	; 0x893
 800ec96:	4916      	ldr	r1, [pc, #88]	; (800ecf0 <tcp_pcb_remove+0x11c>)
 800ec98:	4813      	ldr	r0, [pc, #76]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ec9a:	f00d f8e5 	bl	801be68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d006      	beq.n	800ecb4 <tcp_pcb_remove+0xe0>
 800eca6:	4b0e      	ldr	r3, [pc, #56]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800eca8:	f640 0294 	movw	r2, #2196	; 0x894
 800ecac:	4911      	ldr	r1, [pc, #68]	; (800ecf4 <tcp_pcb_remove+0x120>)
 800ecae:	480e      	ldr	r0, [pc, #56]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ecb0:	f00d f8da 	bl	801be68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d006      	beq.n	800ecca <tcp_pcb_remove+0xf6>
 800ecbc:	4b08      	ldr	r3, [pc, #32]	; (800ece0 <tcp_pcb_remove+0x10c>)
 800ecbe:	f640 0296 	movw	r2, #2198	; 0x896
 800ecc2:	490d      	ldr	r1, [pc, #52]	; (800ecf8 <tcp_pcb_remove+0x124>)
 800ecc4:	4808      	ldr	r0, [pc, #32]	; (800ece8 <tcp_pcb_remove+0x114>)
 800ecc6:	f00d f8cf 	bl	801be68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	2200      	movs	r2, #0
 800ecce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ecd6:	bf00      	nop
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	0801e7d8 	.word	0x0801e7d8
 800ece4:	0801ee40 	.word	0x0801ee40
 800ece8:	0801e81c 	.word	0x0801e81c
 800ecec:	0801ee5c 	.word	0x0801ee5c
 800ecf0:	0801ee7c 	.word	0x0801ee7c
 800ecf4:	0801ee94 	.word	0x0801ee94
 800ecf8:	0801eeb0 	.word	0x0801eeb0

0800ecfc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d106      	bne.n	800ed18 <tcp_next_iss+0x1c>
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <tcp_next_iss+0x38>)
 800ed0c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ed10:	4909      	ldr	r1, [pc, #36]	; (800ed38 <tcp_next_iss+0x3c>)
 800ed12:	480a      	ldr	r0, [pc, #40]	; (800ed3c <tcp_next_iss+0x40>)
 800ed14:	f00d f8a8 	bl	801be68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ed18:	4b09      	ldr	r3, [pc, #36]	; (800ed40 <tcp_next_iss+0x44>)
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <tcp_next_iss+0x48>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4413      	add	r3, r2
 800ed22:	4a07      	ldr	r2, [pc, #28]	; (800ed40 <tcp_next_iss+0x44>)
 800ed24:	6013      	str	r3, [r2, #0]
  return iss;
 800ed26:	4b06      	ldr	r3, [pc, #24]	; (800ed40 <tcp_next_iss+0x44>)
 800ed28:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	0801e7d8 	.word	0x0801e7d8
 800ed38:	0801eec8 	.word	0x0801eec8
 800ed3c:	0801e81c 	.word	0x0801e81c
 800ed40:	20000010 	.word	0x20000010
 800ed44:	2000c554 	.word	0x2000c554

0800ed48 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	4603      	mov	r3, r0
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d106      	bne.n	800ed6a <tcp_eff_send_mss_netif+0x22>
 800ed5c:	4b14      	ldr	r3, [pc, #80]	; (800edb0 <tcp_eff_send_mss_netif+0x68>)
 800ed5e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ed62:	4914      	ldr	r1, [pc, #80]	; (800edb4 <tcp_eff_send_mss_netif+0x6c>)
 800ed64:	4814      	ldr	r0, [pc, #80]	; (800edb8 <tcp_eff_send_mss_netif+0x70>)
 800ed66:	f00d f87f 	bl	801be68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d101      	bne.n	800ed74 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ed70:	89fb      	ldrh	r3, [r7, #14]
 800ed72:	e019      	b.n	800eda8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed78:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ed7a:	8afb      	ldrh	r3, [r7, #22]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d012      	beq.n	800eda6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ed80:	2328      	movs	r3, #40	; 0x28
 800ed82:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ed84:	8afa      	ldrh	r2, [r7, #22]
 800ed86:	8abb      	ldrh	r3, [r7, #20]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d904      	bls.n	800ed96 <tcp_eff_send_mss_netif+0x4e>
 800ed8c:	8afa      	ldrh	r2, [r7, #22]
 800ed8e:	8abb      	ldrh	r3, [r7, #20]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	e000      	b.n	800ed98 <tcp_eff_send_mss_netif+0x50>
 800ed96:	2300      	movs	r3, #0
 800ed98:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ed9a:	8a7a      	ldrh	r2, [r7, #18]
 800ed9c:	89fb      	ldrh	r3, [r7, #14]
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	bf28      	it	cs
 800eda2:	4613      	movcs	r3, r2
 800eda4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eda6:	89fb      	ldrh	r3, [r7, #14]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	0801e7d8 	.word	0x0801e7d8
 800edb4:	0801eee4 	.word	0x0801eee4
 800edb8:	0801e81c 	.word	0x0801e81c

0800edbc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d119      	bne.n	800ee04 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800edd0:	4b10      	ldr	r3, [pc, #64]	; (800ee14 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800edd2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800edd6:	4910      	ldr	r1, [pc, #64]	; (800ee18 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800edd8:	4810      	ldr	r0, [pc, #64]	; (800ee1c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800edda:	f00d f845 	bl	801be68 <iprintf>

  while (pcb != NULL) {
 800edde:	e011      	b.n	800ee04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d108      	bne.n	800edfe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f7fe fd9e 	bl	800d934 <tcp_abort>
      pcb = next;
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	60fb      	str	r3, [r7, #12]
 800edfc:	e002      	b.n	800ee04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1ea      	bne.n	800ede0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ee0a:	bf00      	nop
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	0801e7d8 	.word	0x0801e7d8
 800ee18:	0801ef0c 	.word	0x0801ef0c
 800ee1c:	0801e81c 	.word	0x0801e81c

0800ee20 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d02a      	beq.n	800ee86 <tcp_netif_ip_addr_changed+0x66>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d026      	beq.n	800ee86 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ee38:	4b15      	ldr	r3, [pc, #84]	; (800ee90 <tcp_netif_ip_addr_changed+0x70>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f7ff ffbc 	bl	800edbc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ee44:	4b13      	ldr	r3, [pc, #76]	; (800ee94 <tcp_netif_ip_addr_changed+0x74>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4619      	mov	r1, r3
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7ff ffb6 	bl	800edbc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d017      	beq.n	800ee86 <tcp_netif_ip_addr_changed+0x66>
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d013      	beq.n	800ee86 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee5e:	4b0e      	ldr	r3, [pc, #56]	; (800ee98 <tcp_netif_ip_addr_changed+0x78>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	e00c      	b.n	800ee80 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d103      	bne.n	800ee7a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	60fb      	str	r3, [r7, #12]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d1ef      	bne.n	800ee66 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ee86:	bf00      	nop
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	2000c550 	.word	0x2000c550
 800ee94:	2000c55c 	.word	0x2000c55c
 800ee98:	2000c558 	.word	0x2000c558

0800ee9c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d007      	beq.n	800eebc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fb71 	bl	800e598 <tcp_segs_free>
    pcb->ooseq = NULL;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eec4:	b590      	push	{r4, r7, lr}
 800eec6:	b08d      	sub	sp, #52	; 0x34
 800eec8:	af04      	add	r7, sp, #16
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d105      	bne.n	800eee0 <tcp_input+0x1c>
 800eed4:	4b9b      	ldr	r3, [pc, #620]	; (800f144 <tcp_input+0x280>)
 800eed6:	2283      	movs	r2, #131	; 0x83
 800eed8:	499b      	ldr	r1, [pc, #620]	; (800f148 <tcp_input+0x284>)
 800eeda:	489c      	ldr	r0, [pc, #624]	; (800f14c <tcp_input+0x288>)
 800eedc:	f00c ffc4 	bl	801be68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	4a9a      	ldr	r2, [pc, #616]	; (800f150 <tcp_input+0x28c>)
 800eee6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	895b      	ldrh	r3, [r3, #10]
 800eeec:	2b13      	cmp	r3, #19
 800eeee:	f240 83c4 	bls.w	800f67a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eef2:	4b98      	ldr	r3, [pc, #608]	; (800f154 <tcp_input+0x290>)
 800eef4:	695a      	ldr	r2, [r3, #20]
 800eef6:	4b97      	ldr	r3, [pc, #604]	; (800f154 <tcp_input+0x290>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4619      	mov	r1, r3
 800eefc:	4610      	mov	r0, r2
 800eefe:	f008 fb31 	bl	8017564 <ip4_addr_isbroadcast_u32>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f040 83ba 	bne.w	800f67e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ef0a:	4b92      	ldr	r3, [pc, #584]	; (800f154 <tcp_input+0x290>)
 800ef0c:	695b      	ldr	r3, [r3, #20]
 800ef0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ef12:	2be0      	cmp	r3, #224	; 0xe0
 800ef14:	f000 83b3 	beq.w	800f67e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ef18:	4b8d      	ldr	r3, [pc, #564]	; (800f150 <tcp_input+0x28c>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	899b      	ldrh	r3, [r3, #12]
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fc fb2b 	bl	800b57c <lwip_htons>
 800ef26:	4603      	mov	r3, r0
 800ef28:	0b1b      	lsrs	r3, r3, #12
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ef32:	7cbb      	ldrb	r3, [r7, #18]
 800ef34:	2b13      	cmp	r3, #19
 800ef36:	f240 83a2 	bls.w	800f67e <tcp_input+0x7ba>
 800ef3a:	7cbb      	ldrb	r3, [r7, #18]
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	891b      	ldrh	r3, [r3, #8]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	f200 839b 	bhi.w	800f67e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ef48:	7cbb      	ldrb	r3, [r7, #18]
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	3b14      	subs	r3, #20
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	4b81      	ldr	r3, [pc, #516]	; (800f158 <tcp_input+0x294>)
 800ef52:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ef54:	4b81      	ldr	r3, [pc, #516]	; (800f15c <tcp_input+0x298>)
 800ef56:	2200      	movs	r2, #0
 800ef58:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	895a      	ldrh	r2, [r3, #10]
 800ef5e:	7cbb      	ldrb	r3, [r7, #18]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d309      	bcc.n	800ef7a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ef66:	4b7c      	ldr	r3, [pc, #496]	; (800f158 <tcp_input+0x294>)
 800ef68:	881a      	ldrh	r2, [r3, #0]
 800ef6a:	4b7d      	ldr	r3, [pc, #500]	; (800f160 <tcp_input+0x29c>)
 800ef6c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ef6e:	7cbb      	ldrb	r3, [r7, #18]
 800ef70:	4619      	mov	r1, r3
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7fd fe30 	bl	800cbd8 <pbuf_remove_header>
 800ef78:	e04e      	b.n	800f018 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d105      	bne.n	800ef8e <tcp_input+0xca>
 800ef82:	4b70      	ldr	r3, [pc, #448]	; (800f144 <tcp_input+0x280>)
 800ef84:	22c2      	movs	r2, #194	; 0xc2
 800ef86:	4977      	ldr	r1, [pc, #476]	; (800f164 <tcp_input+0x2a0>)
 800ef88:	4870      	ldr	r0, [pc, #448]	; (800f14c <tcp_input+0x288>)
 800ef8a:	f00c ff6d 	bl	801be68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ef8e:	2114      	movs	r1, #20
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7fd fe21 	bl	800cbd8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	895a      	ldrh	r2, [r3, #10]
 800ef9a:	4b71      	ldr	r3, [pc, #452]	; (800f160 <tcp_input+0x29c>)
 800ef9c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ef9e:	4b6e      	ldr	r3, [pc, #440]	; (800f158 <tcp_input+0x294>)
 800efa0:	881a      	ldrh	r2, [r3, #0]
 800efa2:	4b6f      	ldr	r3, [pc, #444]	; (800f160 <tcp_input+0x29c>)
 800efa4:	881b      	ldrh	r3, [r3, #0]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800efaa:	4b6d      	ldr	r3, [pc, #436]	; (800f160 <tcp_input+0x29c>)
 800efac:	881b      	ldrh	r3, [r3, #0]
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7fd fe11 	bl	800cbd8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	895b      	ldrh	r3, [r3, #10]
 800efbc:	8a3a      	ldrh	r2, [r7, #16]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	f200 835f 	bhi.w	800f682 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	4a64      	ldr	r2, [pc, #400]	; (800f15c <tcp_input+0x298>)
 800efcc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	8a3a      	ldrh	r2, [r7, #16]
 800efd4:	4611      	mov	r1, r2
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fd fdfe 	bl	800cbd8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	891a      	ldrh	r2, [r3, #8]
 800efe0:	8a3b      	ldrh	r3, [r7, #16]
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	895b      	ldrh	r3, [r3, #10]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d005      	beq.n	800effe <tcp_input+0x13a>
 800eff2:	4b54      	ldr	r3, [pc, #336]	; (800f144 <tcp_input+0x280>)
 800eff4:	22df      	movs	r2, #223	; 0xdf
 800eff6:	495c      	ldr	r1, [pc, #368]	; (800f168 <tcp_input+0x2a4>)
 800eff8:	4854      	ldr	r0, [pc, #336]	; (800f14c <tcp_input+0x288>)
 800effa:	f00c ff35 	bl	801be68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	891a      	ldrh	r2, [r3, #8]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	891b      	ldrh	r3, [r3, #8]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d005      	beq.n	800f018 <tcp_input+0x154>
 800f00c:	4b4d      	ldr	r3, [pc, #308]	; (800f144 <tcp_input+0x280>)
 800f00e:	22e0      	movs	r2, #224	; 0xe0
 800f010:	4956      	ldr	r1, [pc, #344]	; (800f16c <tcp_input+0x2a8>)
 800f012:	484e      	ldr	r0, [pc, #312]	; (800f14c <tcp_input+0x288>)
 800f014:	f00c ff28 	bl	801be68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f018:	4b4d      	ldr	r3, [pc, #308]	; (800f150 <tcp_input+0x28c>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	b29a      	uxth	r2, r3
 800f020:	4b4b      	ldr	r3, [pc, #300]	; (800f150 <tcp_input+0x28c>)
 800f022:	681c      	ldr	r4, [r3, #0]
 800f024:	4610      	mov	r0, r2
 800f026:	f7fc faa9 	bl	800b57c <lwip_htons>
 800f02a:	4603      	mov	r3, r0
 800f02c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f02e:	4b48      	ldr	r3, [pc, #288]	; (800f150 <tcp_input+0x28c>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	885b      	ldrh	r3, [r3, #2]
 800f034:	b29a      	uxth	r2, r3
 800f036:	4b46      	ldr	r3, [pc, #280]	; (800f150 <tcp_input+0x28c>)
 800f038:	681c      	ldr	r4, [r3, #0]
 800f03a:	4610      	mov	r0, r2
 800f03c:	f7fc fa9e 	bl	800b57c <lwip_htons>
 800f040:	4603      	mov	r3, r0
 800f042:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f044:	4b42      	ldr	r3, [pc, #264]	; (800f150 <tcp_input+0x28c>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	685a      	ldr	r2, [r3, #4]
 800f04a:	4b41      	ldr	r3, [pc, #260]	; (800f150 <tcp_input+0x28c>)
 800f04c:	681c      	ldr	r4, [r3, #0]
 800f04e:	4610      	mov	r0, r2
 800f050:	f7fc faa9 	bl	800b5a6 <lwip_htonl>
 800f054:	4603      	mov	r3, r0
 800f056:	6063      	str	r3, [r4, #4]
 800f058:	6863      	ldr	r3, [r4, #4]
 800f05a:	4a45      	ldr	r2, [pc, #276]	; (800f170 <tcp_input+0x2ac>)
 800f05c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f05e:	4b3c      	ldr	r3, [pc, #240]	; (800f150 <tcp_input+0x28c>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689a      	ldr	r2, [r3, #8]
 800f064:	4b3a      	ldr	r3, [pc, #232]	; (800f150 <tcp_input+0x28c>)
 800f066:	681c      	ldr	r4, [r3, #0]
 800f068:	4610      	mov	r0, r2
 800f06a:	f7fc fa9c 	bl	800b5a6 <lwip_htonl>
 800f06e:	4603      	mov	r3, r0
 800f070:	60a3      	str	r3, [r4, #8]
 800f072:	68a3      	ldr	r3, [r4, #8]
 800f074:	4a3f      	ldr	r2, [pc, #252]	; (800f174 <tcp_input+0x2b0>)
 800f076:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f078:	4b35      	ldr	r3, [pc, #212]	; (800f150 <tcp_input+0x28c>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	89db      	ldrh	r3, [r3, #14]
 800f07e:	b29a      	uxth	r2, r3
 800f080:	4b33      	ldr	r3, [pc, #204]	; (800f150 <tcp_input+0x28c>)
 800f082:	681c      	ldr	r4, [r3, #0]
 800f084:	4610      	mov	r0, r2
 800f086:	f7fc fa79 	bl	800b57c <lwip_htons>
 800f08a:	4603      	mov	r3, r0
 800f08c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f08e:	4b30      	ldr	r3, [pc, #192]	; (800f150 <tcp_input+0x28c>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	899b      	ldrh	r3, [r3, #12]
 800f094:	b29b      	uxth	r3, r3
 800f096:	4618      	mov	r0, r3
 800f098:	f7fc fa70 	bl	800b57c <lwip_htons>
 800f09c:	4603      	mov	r3, r0
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0a4:	b2da      	uxtb	r2, r3
 800f0a6:	4b34      	ldr	r3, [pc, #208]	; (800f178 <tcp_input+0x2b4>)
 800f0a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	891a      	ldrh	r2, [r3, #8]
 800f0ae:	4b33      	ldr	r3, [pc, #204]	; (800f17c <tcp_input+0x2b8>)
 800f0b0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f0b2:	4b31      	ldr	r3, [pc, #196]	; (800f178 <tcp_input+0x2b4>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	f003 0303 	and.w	r3, r3, #3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00c      	beq.n	800f0d8 <tcp_input+0x214>
    tcplen++;
 800f0be:	4b2f      	ldr	r3, [pc, #188]	; (800f17c <tcp_input+0x2b8>)
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	4b2d      	ldr	r3, [pc, #180]	; (800f17c <tcp_input+0x2b8>)
 800f0c8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	891a      	ldrh	r2, [r3, #8]
 800f0ce:	4b2b      	ldr	r3, [pc, #172]	; (800f17c <tcp_input+0x2b8>)
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	f200 82d7 	bhi.w	800f686 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0dc:	4b28      	ldr	r3, [pc, #160]	; (800f180 <tcp_input+0x2bc>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	61fb      	str	r3, [r7, #28]
 800f0e2:	e09d      	b.n	800f220 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	7d1b      	ldrb	r3, [r3, #20]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d105      	bne.n	800f0f8 <tcp_input+0x234>
 800f0ec:	4b15      	ldr	r3, [pc, #84]	; (800f144 <tcp_input+0x280>)
 800f0ee:	22fb      	movs	r2, #251	; 0xfb
 800f0f0:	4924      	ldr	r1, [pc, #144]	; (800f184 <tcp_input+0x2c0>)
 800f0f2:	4816      	ldr	r0, [pc, #88]	; (800f14c <tcp_input+0x288>)
 800f0f4:	f00c feb8 	bl	801be68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	7d1b      	ldrb	r3, [r3, #20]
 800f0fc:	2b0a      	cmp	r3, #10
 800f0fe:	d105      	bne.n	800f10c <tcp_input+0x248>
 800f100:	4b10      	ldr	r3, [pc, #64]	; (800f144 <tcp_input+0x280>)
 800f102:	22fc      	movs	r2, #252	; 0xfc
 800f104:	4920      	ldr	r1, [pc, #128]	; (800f188 <tcp_input+0x2c4>)
 800f106:	4811      	ldr	r0, [pc, #68]	; (800f14c <tcp_input+0x288>)
 800f108:	f00c feae 	bl	801be68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	7d1b      	ldrb	r3, [r3, #20]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d105      	bne.n	800f120 <tcp_input+0x25c>
 800f114:	4b0b      	ldr	r3, [pc, #44]	; (800f144 <tcp_input+0x280>)
 800f116:	22fd      	movs	r2, #253	; 0xfd
 800f118:	491c      	ldr	r1, [pc, #112]	; (800f18c <tcp_input+0x2c8>)
 800f11a:	480c      	ldr	r0, [pc, #48]	; (800f14c <tcp_input+0x288>)
 800f11c:	f00c fea4 	bl	801be68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	7a1b      	ldrb	r3, [r3, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d033      	beq.n	800f190 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	7a1a      	ldrb	r2, [r3, #8]
 800f12c:	4b09      	ldr	r3, [pc, #36]	; (800f154 <tcp_input+0x290>)
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f134:	3301      	adds	r3, #1
 800f136:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f138:	429a      	cmp	r2, r3
 800f13a:	d029      	beq.n	800f190 <tcp_input+0x2cc>
      prev = pcb;
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	61bb      	str	r3, [r7, #24]
      continue;
 800f140:	e06b      	b.n	800f21a <tcp_input+0x356>
 800f142:	bf00      	nop
 800f144:	0801ef40 	.word	0x0801ef40
 800f148:	0801ef74 	.word	0x0801ef74
 800f14c:	0801ef8c 	.word	0x0801ef8c
 800f150:	20008400 	.word	0x20008400
 800f154:	20008dfc 	.word	0x20008dfc
 800f158:	20008404 	.word	0x20008404
 800f15c:	20008408 	.word	0x20008408
 800f160:	20008406 	.word	0x20008406
 800f164:	0801efb4 	.word	0x0801efb4
 800f168:	0801efc4 	.word	0x0801efc4
 800f16c:	0801efd0 	.word	0x0801efd0
 800f170:	20008410 	.word	0x20008410
 800f174:	20008414 	.word	0x20008414
 800f178:	2000841c 	.word	0x2000841c
 800f17c:	2000841a 	.word	0x2000841a
 800f180:	2000c550 	.word	0x2000c550
 800f184:	0801eff0 	.word	0x0801eff0
 800f188:	0801f018 	.word	0x0801f018
 800f18c:	0801f044 	.word	0x0801f044
    }

    if (pcb->remote_port == tcphdr->src &&
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	8b1a      	ldrh	r2, [r3, #24]
 800f194:	4b94      	ldr	r3, [pc, #592]	; (800f3e8 <tcp_input+0x524>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d13a      	bne.n	800f216 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	8ada      	ldrh	r2, [r3, #22]
 800f1a4:	4b90      	ldr	r3, [pc, #576]	; (800f3e8 <tcp_input+0x524>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	885b      	ldrh	r3, [r3, #2]
 800f1aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d132      	bne.n	800f216 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	685a      	ldr	r2, [r3, #4]
 800f1b4:	4b8d      	ldr	r3, [pc, #564]	; (800f3ec <tcp_input+0x528>)
 800f1b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d12c      	bne.n	800f216 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	4b8a      	ldr	r3, [pc, #552]	; (800f3ec <tcp_input+0x528>)
 800f1c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d126      	bne.n	800f216 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	69fa      	ldr	r2, [r7, #28]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d106      	bne.n	800f1e0 <tcp_input+0x31c>
 800f1d2:	4b87      	ldr	r3, [pc, #540]	; (800f3f0 <tcp_input+0x52c>)
 800f1d4:	f240 120d 	movw	r2, #269	; 0x10d
 800f1d8:	4986      	ldr	r1, [pc, #536]	; (800f3f4 <tcp_input+0x530>)
 800f1da:	4887      	ldr	r0, [pc, #540]	; (800f3f8 <tcp_input+0x534>)
 800f1dc:	f00c fe44 	bl	801be68 <iprintf>
      if (prev != NULL) {
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00a      	beq.n	800f1fc <tcp_input+0x338>
        prev->next = pcb->next;
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	68da      	ldr	r2, [r3, #12]
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f1ee:	4b83      	ldr	r3, [pc, #524]	; (800f3fc <tcp_input+0x538>)
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f1f6:	4a81      	ldr	r2, [pc, #516]	; (800f3fc <tcp_input+0x538>)
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	69fa      	ldr	r2, [r7, #28]
 800f202:	429a      	cmp	r2, r3
 800f204:	d111      	bne.n	800f22a <tcp_input+0x366>
 800f206:	4b7a      	ldr	r3, [pc, #488]	; (800f3f0 <tcp_input+0x52c>)
 800f208:	f240 1215 	movw	r2, #277	; 0x115
 800f20c:	497c      	ldr	r1, [pc, #496]	; (800f400 <tcp_input+0x53c>)
 800f20e:	487a      	ldr	r0, [pc, #488]	; (800f3f8 <tcp_input+0x534>)
 800f210:	f00c fe2a 	bl	801be68 <iprintf>
      break;
 800f214:	e009      	b.n	800f22a <tcp_input+0x366>
    }
    prev = pcb;
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	61fb      	str	r3, [r7, #28]
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	2b00      	cmp	r3, #0
 800f224:	f47f af5e 	bne.w	800f0e4 <tcp_input+0x220>
 800f228:	e000      	b.n	800f22c <tcp_input+0x368>
      break;
 800f22a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f040 8095 	bne.w	800f35e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f234:	4b73      	ldr	r3, [pc, #460]	; (800f404 <tcp_input+0x540>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	61fb      	str	r3, [r7, #28]
 800f23a:	e03f      	b.n	800f2bc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
 800f240:	2b0a      	cmp	r3, #10
 800f242:	d006      	beq.n	800f252 <tcp_input+0x38e>
 800f244:	4b6a      	ldr	r3, [pc, #424]	; (800f3f0 <tcp_input+0x52c>)
 800f246:	f240 121f 	movw	r2, #287	; 0x11f
 800f24a:	496f      	ldr	r1, [pc, #444]	; (800f408 <tcp_input+0x544>)
 800f24c:	486a      	ldr	r0, [pc, #424]	; (800f3f8 <tcp_input+0x534>)
 800f24e:	f00c fe0b 	bl	801be68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	7a1b      	ldrb	r3, [r3, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d009      	beq.n	800f26e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	7a1a      	ldrb	r2, [r3, #8]
 800f25e:	4b63      	ldr	r3, [pc, #396]	; (800f3ec <tcp_input+0x528>)
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f266:	3301      	adds	r3, #1
 800f268:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d122      	bne.n	800f2b4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	8b1a      	ldrh	r2, [r3, #24]
 800f272:	4b5d      	ldr	r3, [pc, #372]	; (800f3e8 <tcp_input+0x524>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	881b      	ldrh	r3, [r3, #0]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d11b      	bne.n	800f2b6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	8ada      	ldrh	r2, [r3, #22]
 800f282:	4b59      	ldr	r3, [pc, #356]	; (800f3e8 <tcp_input+0x524>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	885b      	ldrh	r3, [r3, #2]
 800f288:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d113      	bne.n	800f2b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	685a      	ldr	r2, [r3, #4]
 800f292:	4b56      	ldr	r3, [pc, #344]	; (800f3ec <tcp_input+0x528>)
 800f294:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f296:	429a      	cmp	r2, r3
 800f298:	d10d      	bne.n	800f2b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	4b53      	ldr	r3, [pc, #332]	; (800f3ec <tcp_input+0x528>)
 800f2a0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d107      	bne.n	800f2b6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f2a6:	69f8      	ldr	r0, [r7, #28]
 800f2a8:	f000 fb52 	bl	800f950 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7fd fd4b 	bl	800cd48 <pbuf_free>
        return;
 800f2b2:	e1ee      	b.n	800f692 <tcp_input+0x7ce>
        continue;
 800f2b4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	61fb      	str	r3, [r7, #28]
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1bc      	bne.n	800f23c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f2c6:	4b51      	ldr	r3, [pc, #324]	; (800f40c <tcp_input+0x548>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	617b      	str	r3, [r7, #20]
 800f2cc:	e02a      	b.n	800f324 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	7a1b      	ldrb	r3, [r3, #8]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d00c      	beq.n	800f2f0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	7a1a      	ldrb	r2, [r3, #8]
 800f2da:	4b44      	ldr	r3, [pc, #272]	; (800f3ec <tcp_input+0x528>)
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d002      	beq.n	800f2f0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	61bb      	str	r3, [r7, #24]
        continue;
 800f2ee:	e016      	b.n	800f31e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	8ada      	ldrh	r2, [r3, #22]
 800f2f4:	4b3c      	ldr	r3, [pc, #240]	; (800f3e8 <tcp_input+0x524>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	885b      	ldrh	r3, [r3, #2]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d10c      	bne.n	800f31a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	4b39      	ldr	r3, [pc, #228]	; (800f3ec <tcp_input+0x528>)
 800f306:	695b      	ldr	r3, [r3, #20]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d00f      	beq.n	800f32c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00d      	beq.n	800f32e <tcp_input+0x46a>
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d009      	beq.n	800f32e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	617b      	str	r3, [r7, #20]
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1d1      	bne.n	800f2ce <tcp_input+0x40a>
 800f32a:	e000      	b.n	800f32e <tcp_input+0x46a>
            break;
 800f32c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d014      	beq.n	800f35e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00a      	beq.n	800f350 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	68da      	ldr	r2, [r3, #12]
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f342:	4b32      	ldr	r3, [pc, #200]	; (800f40c <tcp_input+0x548>)
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f34a:	4a30      	ldr	r2, [pc, #192]	; (800f40c <tcp_input+0x548>)
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f350:	6978      	ldr	r0, [r7, #20]
 800f352:	f000 f9ff 	bl	800f754 <tcp_listen_input>
      }
      pbuf_free(p);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7fd fcf6 	bl	800cd48 <pbuf_free>
      return;
 800f35c:	e199      	b.n	800f692 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	2b00      	cmp	r3, #0
 800f362:	f000 8160 	beq.w	800f626 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f366:	4b2a      	ldr	r3, [pc, #168]	; (800f410 <tcp_input+0x54c>)
 800f368:	2200      	movs	r2, #0
 800f36a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	891a      	ldrh	r2, [r3, #8]
 800f370:	4b27      	ldr	r3, [pc, #156]	; (800f410 <tcp_input+0x54c>)
 800f372:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f374:	4a26      	ldr	r2, [pc, #152]	; (800f410 <tcp_input+0x54c>)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f37a:	4b1b      	ldr	r3, [pc, #108]	; (800f3e8 <tcp_input+0x524>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a24      	ldr	r2, [pc, #144]	; (800f410 <tcp_input+0x54c>)
 800f380:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f382:	4b24      	ldr	r3, [pc, #144]	; (800f414 <tcp_input+0x550>)
 800f384:	2200      	movs	r2, #0
 800f386:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f388:	4b23      	ldr	r3, [pc, #140]	; (800f418 <tcp_input+0x554>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f38e:	4b23      	ldr	r3, [pc, #140]	; (800f41c <tcp_input+0x558>)
 800f390:	2200      	movs	r2, #0
 800f392:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f394:	4b22      	ldr	r3, [pc, #136]	; (800f420 <tcp_input+0x55c>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	f003 0308 	and.w	r3, r3, #8
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d006      	beq.n	800f3ae <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	7b5b      	ldrb	r3, [r3, #13]
 800f3a4:	f043 0301 	orr.w	r3, r3, #1
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d038      	beq.n	800f428 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f3b6:	69f8      	ldr	r0, [r7, #28]
 800f3b8:	f7ff f872 	bl	800e4a0 <tcp_process_refused_data>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	f113 0f0d 	cmn.w	r3, #13
 800f3c2:	d007      	beq.n	800f3d4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d02d      	beq.n	800f428 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f3cc:	4b15      	ldr	r3, [pc, #84]	; (800f424 <tcp_input+0x560>)
 800f3ce:	881b      	ldrh	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d029      	beq.n	800f428 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f040 8104 	bne.w	800f5e6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f3de:	69f8      	ldr	r0, [r7, #28]
 800f3e0:	f003 fe26 	bl	8013030 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f3e4:	e0ff      	b.n	800f5e6 <tcp_input+0x722>
 800f3e6:	bf00      	nop
 800f3e8:	20008400 	.word	0x20008400
 800f3ec:	20008dfc 	.word	0x20008dfc
 800f3f0:	0801ef40 	.word	0x0801ef40
 800f3f4:	0801f06c 	.word	0x0801f06c
 800f3f8:	0801ef8c 	.word	0x0801ef8c
 800f3fc:	2000c550 	.word	0x2000c550
 800f400:	0801f098 	.word	0x0801f098
 800f404:	2000c560 	.word	0x2000c560
 800f408:	0801f0c4 	.word	0x0801f0c4
 800f40c:	2000c558 	.word	0x2000c558
 800f410:	200083f0 	.word	0x200083f0
 800f414:	20008420 	.word	0x20008420
 800f418:	2000841d 	.word	0x2000841d
 800f41c:	20008418 	.word	0x20008418
 800f420:	2000841c 	.word	0x2000841c
 800f424:	2000841a 	.word	0x2000841a
      }
    }
    tcp_input_pcb = pcb;
 800f428:	4a9b      	ldr	r2, [pc, #620]	; (800f698 <tcp_input+0x7d4>)
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f42e:	69f8      	ldr	r0, [r7, #28]
 800f430:	f000 fb0a 	bl	800fa48 <tcp_process>
 800f434:	4603      	mov	r3, r0
 800f436:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f438:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f43c:	f113 0f0d 	cmn.w	r3, #13
 800f440:	f000 80d3 	beq.w	800f5ea <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f444:	4b95      	ldr	r3, [pc, #596]	; (800f69c <tcp_input+0x7d8>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f003 0308 	and.w	r3, r3, #8
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d015      	beq.n	800f47c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f456:	2b00      	cmp	r3, #0
 800f458:	d008      	beq.n	800f46c <tcp_input+0x5a8>
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f460:	69fa      	ldr	r2, [r7, #28]
 800f462:	6912      	ldr	r2, [r2, #16]
 800f464:	f06f 010d 	mvn.w	r1, #13
 800f468:	4610      	mov	r0, r2
 800f46a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f46c:	69f9      	ldr	r1, [r7, #28]
 800f46e:	488c      	ldr	r0, [pc, #560]	; (800f6a0 <tcp_input+0x7dc>)
 800f470:	f7ff fbb0 	bl	800ebd4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f474:	69f8      	ldr	r0, [r7, #28]
 800f476:	f7fd ff23 	bl	800d2c0 <tcp_free>
 800f47a:	e0c1      	b.n	800f600 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f47c:	2300      	movs	r3, #0
 800f47e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f480:	4b88      	ldr	r3, [pc, #544]	; (800f6a4 <tcp_input+0x7e0>)
 800f482:	881b      	ldrh	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d01d      	beq.n	800f4c4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f488:	4b86      	ldr	r3, [pc, #536]	; (800f6a4 <tcp_input+0x7e0>)
 800f48a:	881b      	ldrh	r3, [r3, #0]
 800f48c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00a      	beq.n	800f4ae <tcp_input+0x5ea>
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f49e:	69fa      	ldr	r2, [r7, #28]
 800f4a0:	6910      	ldr	r0, [r2, #16]
 800f4a2:	89fa      	ldrh	r2, [r7, #14]
 800f4a4:	69f9      	ldr	r1, [r7, #28]
 800f4a6:	4798      	blx	r3
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	74fb      	strb	r3, [r7, #19]
 800f4ac:	e001      	b.n	800f4b2 <tcp_input+0x5ee>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f4b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4b6:	f113 0f0d 	cmn.w	r3, #13
 800f4ba:	f000 8098 	beq.w	800f5ee <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f4be:	4b79      	ldr	r3, [pc, #484]	; (800f6a4 <tcp_input+0x7e0>)
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f4c4:	69f8      	ldr	r0, [r7, #28]
 800f4c6:	f000 f905 	bl	800f6d4 <tcp_input_delayed_close>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f040 8090 	bne.w	800f5f2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f4d2:	4b75      	ldr	r3, [pc, #468]	; (800f6a8 <tcp_input+0x7e4>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d041      	beq.n	800f55e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d006      	beq.n	800f4f0 <tcp_input+0x62c>
 800f4e2:	4b72      	ldr	r3, [pc, #456]	; (800f6ac <tcp_input+0x7e8>)
 800f4e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f4e8:	4971      	ldr	r1, [pc, #452]	; (800f6b0 <tcp_input+0x7ec>)
 800f4ea:	4872      	ldr	r0, [pc, #456]	; (800f6b4 <tcp_input+0x7f0>)
 800f4ec:	f00c fcbc 	bl	801be68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	8b5b      	ldrh	r3, [r3, #26]
 800f4f4:	f003 0310 	and.w	r3, r3, #16
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d008      	beq.n	800f50e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f4fc:	4b6a      	ldr	r3, [pc, #424]	; (800f6a8 <tcp_input+0x7e4>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4618      	mov	r0, r3
 800f502:	f7fd fc21 	bl	800cd48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f506:	69f8      	ldr	r0, [r7, #28]
 800f508:	f7fe fa14 	bl	800d934 <tcp_abort>
            goto aborted;
 800f50c:	e078      	b.n	800f600 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00c      	beq.n	800f532 <tcp_input+0x66e>
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	6918      	ldr	r0, [r3, #16]
 800f522:	4b61      	ldr	r3, [pc, #388]	; (800f6a8 <tcp_input+0x7e4>)
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	2300      	movs	r3, #0
 800f528:	69f9      	ldr	r1, [r7, #28]
 800f52a:	47a0      	blx	r4
 800f52c:	4603      	mov	r3, r0
 800f52e:	74fb      	strb	r3, [r7, #19]
 800f530:	e008      	b.n	800f544 <tcp_input+0x680>
 800f532:	4b5d      	ldr	r3, [pc, #372]	; (800f6a8 <tcp_input+0x7e4>)
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	2300      	movs	r3, #0
 800f538:	69f9      	ldr	r1, [r7, #28]
 800f53a:	2000      	movs	r0, #0
 800f53c:	f7ff f884 	bl	800e648 <tcp_recv_null>
 800f540:	4603      	mov	r3, r0
 800f542:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f544:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f548:	f113 0f0d 	cmn.w	r3, #13
 800f54c:	d053      	beq.n	800f5f6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f54e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d003      	beq.n	800f55e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f556:	4b54      	ldr	r3, [pc, #336]	; (800f6a8 <tcp_input+0x7e4>)
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f55e:	4b4f      	ldr	r3, [pc, #316]	; (800f69c <tcp_input+0x7d8>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	f003 0320 	and.w	r3, r3, #32
 800f566:	2b00      	cmp	r3, #0
 800f568:	d030      	beq.n	800f5cc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d009      	beq.n	800f586 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f576:	7b5a      	ldrb	r2, [r3, #13]
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f57c:	f042 0220 	orr.w	r2, r2, #32
 800f580:	b2d2      	uxtb	r2, r2
 800f582:	735a      	strb	r2, [r3, #13]
 800f584:	e022      	b.n	800f5cc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f58a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f58e:	d005      	beq.n	800f59c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f594:	3301      	adds	r3, #1
 800f596:	b29a      	uxth	r2, r3
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00b      	beq.n	800f5be <tcp_input+0x6fa>
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	6918      	ldr	r0, [r3, #16]
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	69f9      	ldr	r1, [r7, #28]
 800f5b6:	47a0      	blx	r4
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	74fb      	strb	r3, [r7, #19]
 800f5bc:	e001      	b.n	800f5c2 <tcp_input+0x6fe>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5c6:	f113 0f0d 	cmn.w	r3, #13
 800f5ca:	d016      	beq.n	800f5fa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f5cc:	4b32      	ldr	r3, [pc, #200]	; (800f698 <tcp_input+0x7d4>)
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f5d2:	69f8      	ldr	r0, [r7, #28]
 800f5d4:	f000 f87e 	bl	800f6d4 <tcp_input_delayed_close>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10f      	bne.n	800f5fe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f5de:	69f8      	ldr	r0, [r7, #28]
 800f5e0:	f002 ff10 	bl	8012404 <tcp_output>
 800f5e4:	e00c      	b.n	800f600 <tcp_input+0x73c>
        goto aborted;
 800f5e6:	bf00      	nop
 800f5e8:	e00a      	b.n	800f600 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f5ea:	bf00      	nop
 800f5ec:	e008      	b.n	800f600 <tcp_input+0x73c>
              goto aborted;
 800f5ee:	bf00      	nop
 800f5f0:	e006      	b.n	800f600 <tcp_input+0x73c>
          goto aborted;
 800f5f2:	bf00      	nop
 800f5f4:	e004      	b.n	800f600 <tcp_input+0x73c>
            goto aborted;
 800f5f6:	bf00      	nop
 800f5f8:	e002      	b.n	800f600 <tcp_input+0x73c>
              goto aborted;
 800f5fa:	bf00      	nop
 800f5fc:	e000      	b.n	800f600 <tcp_input+0x73c>
          goto aborted;
 800f5fe:	bf00      	nop
    tcp_input_pcb = NULL;
 800f600:	4b25      	ldr	r3, [pc, #148]	; (800f698 <tcp_input+0x7d4>)
 800f602:	2200      	movs	r2, #0
 800f604:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f606:	4b28      	ldr	r3, [pc, #160]	; (800f6a8 <tcp_input+0x7e4>)
 800f608:	2200      	movs	r2, #0
 800f60a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f60c:	4b2a      	ldr	r3, [pc, #168]	; (800f6b8 <tcp_input+0x7f4>)
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d03d      	beq.n	800f690 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800f614:	4b28      	ldr	r3, [pc, #160]	; (800f6b8 <tcp_input+0x7f4>)
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fd fb95 	bl	800cd48 <pbuf_free>
      inseg.p = NULL;
 800f61e:	4b26      	ldr	r3, [pc, #152]	; (800f6b8 <tcp_input+0x7f4>)
 800f620:	2200      	movs	r2, #0
 800f622:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f624:	e034      	b.n	800f690 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f626:	4b25      	ldr	r3, [pc, #148]	; (800f6bc <tcp_input+0x7f8>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	899b      	ldrh	r3, [r3, #12]
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fb ffa4 	bl	800b57c <lwip_htons>
 800f634:	4603      	mov	r3, r0
 800f636:	b2db      	uxtb	r3, r3
 800f638:	f003 0304 	and.w	r3, r3, #4
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d118      	bne.n	800f672 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f640:	4b1f      	ldr	r3, [pc, #124]	; (800f6c0 <tcp_input+0x7fc>)
 800f642:	6819      	ldr	r1, [r3, #0]
 800f644:	4b1f      	ldr	r3, [pc, #124]	; (800f6c4 <tcp_input+0x800>)
 800f646:	881b      	ldrh	r3, [r3, #0]
 800f648:	461a      	mov	r2, r3
 800f64a:	4b1f      	ldr	r3, [pc, #124]	; (800f6c8 <tcp_input+0x804>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f650:	4b1a      	ldr	r3, [pc, #104]	; (800f6bc <tcp_input+0x7f8>)
 800f652:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f654:	885b      	ldrh	r3, [r3, #2]
 800f656:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f658:	4a18      	ldr	r2, [pc, #96]	; (800f6bc <tcp_input+0x7f8>)
 800f65a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f65c:	8812      	ldrh	r2, [r2, #0]
 800f65e:	b292      	uxth	r2, r2
 800f660:	9202      	str	r2, [sp, #8]
 800f662:	9301      	str	r3, [sp, #4]
 800f664:	4b19      	ldr	r3, [pc, #100]	; (800f6cc <tcp_input+0x808>)
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	4b19      	ldr	r3, [pc, #100]	; (800f6d0 <tcp_input+0x80c>)
 800f66a:	4602      	mov	r2, r0
 800f66c:	2000      	movs	r0, #0
 800f66e:	f003 fc8d 	bl	8012f8c <tcp_rst>
    pbuf_free(p);
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7fd fb68 	bl	800cd48 <pbuf_free>
  return;
 800f678:	e00a      	b.n	800f690 <tcp_input+0x7cc>
    goto dropped;
 800f67a:	bf00      	nop
 800f67c:	e004      	b.n	800f688 <tcp_input+0x7c4>
dropped:
 800f67e:	bf00      	nop
 800f680:	e002      	b.n	800f688 <tcp_input+0x7c4>
      goto dropped;
 800f682:	bf00      	nop
 800f684:	e000      	b.n	800f688 <tcp_input+0x7c4>
      goto dropped;
 800f686:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7fd fb5d 	bl	800cd48 <pbuf_free>
 800f68e:	e000      	b.n	800f692 <tcp_input+0x7ce>
  return;
 800f690:	bf00      	nop
}
 800f692:	3724      	adds	r7, #36	; 0x24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd90      	pop	{r4, r7, pc}
 800f698:	2000c564 	.word	0x2000c564
 800f69c:	2000841d 	.word	0x2000841d
 800f6a0:	2000c550 	.word	0x2000c550
 800f6a4:	20008418 	.word	0x20008418
 800f6a8:	20008420 	.word	0x20008420
 800f6ac:	0801ef40 	.word	0x0801ef40
 800f6b0:	0801f0f4 	.word	0x0801f0f4
 800f6b4:	0801ef8c 	.word	0x0801ef8c
 800f6b8:	200083f0 	.word	0x200083f0
 800f6bc:	20008400 	.word	0x20008400
 800f6c0:	20008414 	.word	0x20008414
 800f6c4:	2000841a 	.word	0x2000841a
 800f6c8:	20008410 	.word	0x20008410
 800f6cc:	20008e0c 	.word	0x20008e0c
 800f6d0:	20008e10 	.word	0x20008e10

0800f6d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d106      	bne.n	800f6f0 <tcp_input_delayed_close+0x1c>
 800f6e2:	4b17      	ldr	r3, [pc, #92]	; (800f740 <tcp_input_delayed_close+0x6c>)
 800f6e4:	f240 225a 	movw	r2, #602	; 0x25a
 800f6e8:	4916      	ldr	r1, [pc, #88]	; (800f744 <tcp_input_delayed_close+0x70>)
 800f6ea:	4817      	ldr	r0, [pc, #92]	; (800f748 <tcp_input_delayed_close+0x74>)
 800f6ec:	f00c fbbc 	bl	801be68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f6f0:	4b16      	ldr	r3, [pc, #88]	; (800f74c <tcp_input_delayed_close+0x78>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	f003 0310 	and.w	r3, r3, #16
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d01c      	beq.n	800f736 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	8b5b      	ldrh	r3, [r3, #26]
 800f700:	f003 0310 	and.w	r3, r3, #16
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10d      	bne.n	800f724 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d008      	beq.n	800f724 <tcp_input_delayed_close+0x50>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	6912      	ldr	r2, [r2, #16]
 800f71c:	f06f 010e 	mvn.w	r1, #14
 800f720:	4610      	mov	r0, r2
 800f722:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f724:	6879      	ldr	r1, [r7, #4]
 800f726:	480a      	ldr	r0, [pc, #40]	; (800f750 <tcp_input_delayed_close+0x7c>)
 800f728:	f7ff fa54 	bl	800ebd4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7fd fdc7 	bl	800d2c0 <tcp_free>
    return 1;
 800f732:	2301      	movs	r3, #1
 800f734:	e000      	b.n	800f738 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f736:	2300      	movs	r3, #0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	0801ef40 	.word	0x0801ef40
 800f744:	0801f110 	.word	0x0801f110
 800f748:	0801ef8c 	.word	0x0801ef8c
 800f74c:	2000841d 	.word	0x2000841d
 800f750:	2000c550 	.word	0x2000c550

0800f754 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f754:	b590      	push	{r4, r7, lr}
 800f756:	b08b      	sub	sp, #44	; 0x2c
 800f758:	af04      	add	r7, sp, #16
 800f75a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f75c:	4b6f      	ldr	r3, [pc, #444]	; (800f91c <tcp_listen_input+0x1c8>)
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	f003 0304 	and.w	r3, r3, #4
 800f764:	2b00      	cmp	r3, #0
 800f766:	f040 80d3 	bne.w	800f910 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d106      	bne.n	800f77e <tcp_listen_input+0x2a>
 800f770:	4b6b      	ldr	r3, [pc, #428]	; (800f920 <tcp_listen_input+0x1cc>)
 800f772:	f240 2281 	movw	r2, #641	; 0x281
 800f776:	496b      	ldr	r1, [pc, #428]	; (800f924 <tcp_listen_input+0x1d0>)
 800f778:	486b      	ldr	r0, [pc, #428]	; (800f928 <tcp_listen_input+0x1d4>)
 800f77a:	f00c fb75 	bl	801be68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f77e:	4b67      	ldr	r3, [pc, #412]	; (800f91c <tcp_listen_input+0x1c8>)
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	f003 0310 	and.w	r3, r3, #16
 800f786:	2b00      	cmp	r3, #0
 800f788:	d019      	beq.n	800f7be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f78a:	4b68      	ldr	r3, [pc, #416]	; (800f92c <tcp_listen_input+0x1d8>)
 800f78c:	6819      	ldr	r1, [r3, #0]
 800f78e:	4b68      	ldr	r3, [pc, #416]	; (800f930 <tcp_listen_input+0x1dc>)
 800f790:	881b      	ldrh	r3, [r3, #0]
 800f792:	461a      	mov	r2, r3
 800f794:	4b67      	ldr	r3, [pc, #412]	; (800f934 <tcp_listen_input+0x1e0>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f79a:	4b67      	ldr	r3, [pc, #412]	; (800f938 <tcp_listen_input+0x1e4>)
 800f79c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f79e:	885b      	ldrh	r3, [r3, #2]
 800f7a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7a2:	4a65      	ldr	r2, [pc, #404]	; (800f938 <tcp_listen_input+0x1e4>)
 800f7a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7a6:	8812      	ldrh	r2, [r2, #0]
 800f7a8:	b292      	uxth	r2, r2
 800f7aa:	9202      	str	r2, [sp, #8]
 800f7ac:	9301      	str	r3, [sp, #4]
 800f7ae:	4b63      	ldr	r3, [pc, #396]	; (800f93c <tcp_listen_input+0x1e8>)
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	4b63      	ldr	r3, [pc, #396]	; (800f940 <tcp_listen_input+0x1ec>)
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f003 fbe8 	bl	8012f8c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f7bc:	e0aa      	b.n	800f914 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800f7be:	4b57      	ldr	r3, [pc, #348]	; (800f91c <tcp_listen_input+0x1c8>)
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	f003 0302 	and.w	r3, r3, #2
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f000 80a4 	beq.w	800f914 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	7d5b      	ldrb	r3, [r3, #21]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7ff f85d 	bl	800e890 <tcp_alloc>
 800f7d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d111      	bne.n	800f802 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	699b      	ldr	r3, [r3, #24]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00a      	beq.n	800f7fc <tcp_listen_input+0xa8>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	6910      	ldr	r0, [r2, #16]
 800f7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	4798      	blx	r3
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	73bb      	strb	r3, [r7, #14]
      return;
 800f7fa:	e08c      	b.n	800f916 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f7fc:	23f0      	movs	r3, #240	; 0xf0
 800f7fe:	73bb      	strb	r3, [r7, #14]
      return;
 800f800:	e089      	b.n	800f916 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f802:	4b50      	ldr	r3, [pc, #320]	; (800f944 <tcp_listen_input+0x1f0>)
 800f804:	695a      	ldr	r2, [r3, #20]
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f80a:	4b4e      	ldr	r3, [pc, #312]	; (800f944 <tcp_listen_input+0x1f0>)
 800f80c:	691a      	ldr	r2, [r3, #16]
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	8ada      	ldrh	r2, [r3, #22]
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f81a:	4b47      	ldr	r3, [pc, #284]	; (800f938 <tcp_listen_input+0x1e4>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	881b      	ldrh	r3, [r3, #0]
 800f820:	b29a      	uxth	r2, r3
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2203      	movs	r2, #3
 800f82a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f82c:	4b41      	ldr	r3, [pc, #260]	; (800f934 <tcp_listen_input+0x1e0>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	1c5a      	adds	r2, r3, #1
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f83e:	6978      	ldr	r0, [r7, #20]
 800f840:	f7ff fa5c 	bl	800ecfc <tcp_next_iss>
 800f844:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	693a      	ldr	r2, [r7, #16]
 800f84a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	693a      	ldr	r2, [r7, #16]
 800f850:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	693a      	ldr	r2, [r7, #16]
 800f856:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	693a      	ldr	r2, [r7, #16]
 800f85c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f85e:	4b35      	ldr	r3, [pc, #212]	; (800f934 <tcp_listen_input+0x1e0>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	1e5a      	subs	r2, r3, #1
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	691a      	ldr	r2, [r3, #16]
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	7a5b      	ldrb	r3, [r3, #9]
 800f87a:	f003 030c 	and.w	r3, r3, #12
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	7a1a      	ldrb	r2, [r3, #8]
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f88c:	4b2e      	ldr	r3, [pc, #184]	; (800f948 <tcp_listen_input+0x1f4>)
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	60da      	str	r2, [r3, #12]
 800f894:	4a2c      	ldr	r2, [pc, #176]	; (800f948 <tcp_listen_input+0x1f4>)
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	6013      	str	r3, [r2, #0]
 800f89a:	f003 fd39 	bl	8013310 <tcp_timer_needed>
 800f89e:	4b2b      	ldr	r3, [pc, #172]	; (800f94c <tcp_listen_input+0x1f8>)
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f8a4:	6978      	ldr	r0, [r7, #20]
 800f8a6:	f001 fd8f 	bl	80113c8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f8aa:	4b23      	ldr	r3, [pc, #140]	; (800f938 <tcp_listen_input+0x1e4>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	89db      	ldrh	r3, [r3, #14]
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f007 fb97 	bl	8017000 <ip4_route>
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7ff fa34 	bl	800ed48 <tcp_eff_send_mss_netif>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f8e8:	2112      	movs	r1, #18
 800f8ea:	6978      	ldr	r0, [r7, #20]
 800f8ec:	f002 fc9c 	bl	8012228 <tcp_enqueue_flags>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d004      	beq.n	800f906 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	6978      	ldr	r0, [r7, #20]
 800f900:	f7fd ff5a 	bl	800d7b8 <tcp_abandon>
      return;
 800f904:	e007      	b.n	800f916 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800f906:	6978      	ldr	r0, [r7, #20]
 800f908:	f002 fd7c 	bl	8012404 <tcp_output>
  return;
 800f90c:	bf00      	nop
 800f90e:	e001      	b.n	800f914 <tcp_listen_input+0x1c0>
    return;
 800f910:	bf00      	nop
 800f912:	e000      	b.n	800f916 <tcp_listen_input+0x1c2>
  return;
 800f914:	bf00      	nop
}
 800f916:	371c      	adds	r7, #28
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd90      	pop	{r4, r7, pc}
 800f91c:	2000841c 	.word	0x2000841c
 800f920:	0801ef40 	.word	0x0801ef40
 800f924:	0801f138 	.word	0x0801f138
 800f928:	0801ef8c 	.word	0x0801ef8c
 800f92c:	20008414 	.word	0x20008414
 800f930:	2000841a 	.word	0x2000841a
 800f934:	20008410 	.word	0x20008410
 800f938:	20008400 	.word	0x20008400
 800f93c:	20008e0c 	.word	0x20008e0c
 800f940:	20008e10 	.word	0x20008e10
 800f944:	20008dfc 	.word	0x20008dfc
 800f948:	2000c550 	.word	0x2000c550
 800f94c:	2000c54c 	.word	0x2000c54c

0800f950 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af04      	add	r7, sp, #16
 800f956:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f958:	4b30      	ldr	r3, [pc, #192]	; (800fa1c <tcp_timewait_input+0xcc>)
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	f003 0304 	and.w	r3, r3, #4
 800f960:	2b00      	cmp	r3, #0
 800f962:	d154      	bne.n	800fa0e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d106      	bne.n	800f978 <tcp_timewait_input+0x28>
 800f96a:	4b2d      	ldr	r3, [pc, #180]	; (800fa20 <tcp_timewait_input+0xd0>)
 800f96c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f970:	492c      	ldr	r1, [pc, #176]	; (800fa24 <tcp_timewait_input+0xd4>)
 800f972:	482d      	ldr	r0, [pc, #180]	; (800fa28 <tcp_timewait_input+0xd8>)
 800f974:	f00c fa78 	bl	801be68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f978:	4b28      	ldr	r3, [pc, #160]	; (800fa1c <tcp_timewait_input+0xcc>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	f003 0302 	and.w	r3, r3, #2
 800f980:	2b00      	cmp	r3, #0
 800f982:	d02a      	beq.n	800f9da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f984:	4b29      	ldr	r3, [pc, #164]	; (800fa2c <tcp_timewait_input+0xdc>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	db2d      	blt.n	800f9ee <tcp_timewait_input+0x9e>
 800f992:	4b26      	ldr	r3, [pc, #152]	; (800fa2c <tcp_timewait_input+0xdc>)
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99a:	6879      	ldr	r1, [r7, #4]
 800f99c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f99e:	440b      	add	r3, r1
 800f9a0:	1ad3      	subs	r3, r2, r3
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	dc23      	bgt.n	800f9ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9a6:	4b22      	ldr	r3, [pc, #136]	; (800fa30 <tcp_timewait_input+0xe0>)
 800f9a8:	6819      	ldr	r1, [r3, #0]
 800f9aa:	4b22      	ldr	r3, [pc, #136]	; (800fa34 <tcp_timewait_input+0xe4>)
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	4b1e      	ldr	r3, [pc, #120]	; (800fa2c <tcp_timewait_input+0xdc>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9b6:	4b20      	ldr	r3, [pc, #128]	; (800fa38 <tcp_timewait_input+0xe8>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9ba:	885b      	ldrh	r3, [r3, #2]
 800f9bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9be:	4a1e      	ldr	r2, [pc, #120]	; (800fa38 <tcp_timewait_input+0xe8>)
 800f9c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c2:	8812      	ldrh	r2, [r2, #0]
 800f9c4:	b292      	uxth	r2, r2
 800f9c6:	9202      	str	r2, [sp, #8]
 800f9c8:	9301      	str	r3, [sp, #4]
 800f9ca:	4b1c      	ldr	r3, [pc, #112]	; (800fa3c <tcp_timewait_input+0xec>)
 800f9cc:	9300      	str	r3, [sp, #0]
 800f9ce:	4b1c      	ldr	r3, [pc, #112]	; (800fa40 <tcp_timewait_input+0xf0>)
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f003 fada 	bl	8012f8c <tcp_rst>
      return;
 800f9d8:	e01c      	b.n	800fa14 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800f9da:	4b10      	ldr	r3, [pc, #64]	; (800fa1c <tcp_timewait_input+0xcc>)
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	f003 0301 	and.w	r3, r3, #1
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d003      	beq.n	800f9ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f9e6:	4b17      	ldr	r3, [pc, #92]	; (800fa44 <tcp_timewait_input+0xf4>)
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f9ee:	4b11      	ldr	r3, [pc, #68]	; (800fa34 <tcp_timewait_input+0xe4>)
 800f9f0:	881b      	ldrh	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d00d      	beq.n	800fa12 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	8b5b      	ldrh	r3, [r3, #26]
 800f9fa:	f043 0302 	orr.w	r3, r3, #2
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f002 fcfd 	bl	8012404 <tcp_output>
  }
  return;
 800fa0a:	bf00      	nop
 800fa0c:	e001      	b.n	800fa12 <tcp_timewait_input+0xc2>
    return;
 800fa0e:	bf00      	nop
 800fa10:	e000      	b.n	800fa14 <tcp_timewait_input+0xc4>
  return;
 800fa12:	bf00      	nop
}
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	2000841c 	.word	0x2000841c
 800fa20:	0801ef40 	.word	0x0801ef40
 800fa24:	0801f158 	.word	0x0801f158
 800fa28:	0801ef8c 	.word	0x0801ef8c
 800fa2c:	20008410 	.word	0x20008410
 800fa30:	20008414 	.word	0x20008414
 800fa34:	2000841a 	.word	0x2000841a
 800fa38:	20008400 	.word	0x20008400
 800fa3c:	20008e0c 	.word	0x20008e0c
 800fa40:	20008e10 	.word	0x20008e10
 800fa44:	2000c554 	.word	0x2000c554

0800fa48 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fa48:	b590      	push	{r4, r7, lr}
 800fa4a:	b08d      	sub	sp, #52	; 0x34
 800fa4c:	af04      	add	r7, sp, #16
 800fa4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fa50:	2300      	movs	r3, #0
 800fa52:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fa54:	2300      	movs	r3, #0
 800fa56:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d106      	bne.n	800fa6c <tcp_process+0x24>
 800fa5e:	4ba5      	ldr	r3, [pc, #660]	; (800fcf4 <tcp_process+0x2ac>)
 800fa60:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fa64:	49a4      	ldr	r1, [pc, #656]	; (800fcf8 <tcp_process+0x2b0>)
 800fa66:	48a5      	ldr	r0, [pc, #660]	; (800fcfc <tcp_process+0x2b4>)
 800fa68:	f00c f9fe 	bl	801be68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fa6c:	4ba4      	ldr	r3, [pc, #656]	; (800fd00 <tcp_process+0x2b8>)
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	f003 0304 	and.w	r3, r3, #4
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d04e      	beq.n	800fb16 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	7d1b      	ldrb	r3, [r3, #20]
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d108      	bne.n	800fa92 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa84:	4b9f      	ldr	r3, [pc, #636]	; (800fd04 <tcp_process+0x2bc>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d123      	bne.n	800fad4 <tcp_process+0x8c>
        acceptable = 1;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	76fb      	strb	r3, [r7, #27]
 800fa90:	e020      	b.n	800fad4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa96:	4b9c      	ldr	r3, [pc, #624]	; (800fd08 <tcp_process+0x2c0>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d102      	bne.n	800faa4 <tcp_process+0x5c>
        acceptable = 1;
 800fa9e:	2301      	movs	r3, #1
 800faa0:	76fb      	strb	r3, [r7, #27]
 800faa2:	e017      	b.n	800fad4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800faa4:	4b98      	ldr	r3, [pc, #608]	; (800fd08 <tcp_process+0x2c0>)
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faac:	1ad3      	subs	r3, r2, r3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	db10      	blt.n	800fad4 <tcp_process+0x8c>
 800fab2:	4b95      	ldr	r3, [pc, #596]	; (800fd08 <tcp_process+0x2c0>)
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faba:	6879      	ldr	r1, [r7, #4]
 800fabc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fabe:	440b      	add	r3, r1
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	dc06      	bgt.n	800fad4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	8b5b      	ldrh	r3, [r3, #26]
 800faca:	f043 0302 	orr.w	r3, r3, #2
 800face:	b29a      	uxth	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fad4:	7efb      	ldrb	r3, [r7, #27]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d01b      	beq.n	800fb12 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	7d1b      	ldrb	r3, [r3, #20]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <tcp_process+0xa8>
 800fae2:	4b84      	ldr	r3, [pc, #528]	; (800fcf4 <tcp_process+0x2ac>)
 800fae4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fae8:	4988      	ldr	r1, [pc, #544]	; (800fd0c <tcp_process+0x2c4>)
 800faea:	4884      	ldr	r0, [pc, #528]	; (800fcfc <tcp_process+0x2b4>)
 800faec:	f00c f9bc 	bl	801be68 <iprintf>
      recv_flags |= TF_RESET;
 800faf0:	4b87      	ldr	r3, [pc, #540]	; (800fd10 <tcp_process+0x2c8>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	f043 0308 	orr.w	r3, r3, #8
 800faf8:	b2da      	uxtb	r2, r3
 800fafa:	4b85      	ldr	r3, [pc, #532]	; (800fd10 <tcp_process+0x2c8>)
 800fafc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	8b5b      	ldrh	r3, [r3, #26]
 800fb02:	f023 0301 	bic.w	r3, r3, #1
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fb0c:	f06f 030d 	mvn.w	r3, #13
 800fb10:	e37a      	b.n	8010208 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	e378      	b.n	8010208 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fb16:	4b7a      	ldr	r3, [pc, #488]	; (800fd00 <tcp_process+0x2b8>)
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	f003 0302 	and.w	r3, r3, #2
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d010      	beq.n	800fb44 <tcp_process+0xfc>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	7d1b      	ldrb	r3, [r3, #20]
 800fb26:	2b02      	cmp	r3, #2
 800fb28:	d00c      	beq.n	800fb44 <tcp_process+0xfc>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	7d1b      	ldrb	r3, [r3, #20]
 800fb2e:	2b03      	cmp	r3, #3
 800fb30:	d008      	beq.n	800fb44 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	8b5b      	ldrh	r3, [r3, #26]
 800fb36:	f043 0302 	orr.w	r3, r3, #2
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fb40:	2300      	movs	r3, #0
 800fb42:	e361      	b.n	8010208 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	8b5b      	ldrh	r3, [r3, #26]
 800fb48:	f003 0310 	and.w	r3, r3, #16
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d103      	bne.n	800fb58 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fb50:	4b70      	ldr	r3, [pc, #448]	; (800fd14 <tcp_process+0x2cc>)
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f001 fc2d 	bl	80113c8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	7d1b      	ldrb	r3, [r3, #20]
 800fb72:	3b02      	subs	r3, #2
 800fb74:	2b07      	cmp	r3, #7
 800fb76:	f200 8337 	bhi.w	80101e8 <tcp_process+0x7a0>
 800fb7a:	a201      	add	r2, pc, #4	; (adr r2, 800fb80 <tcp_process+0x138>)
 800fb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb80:	0800fba1 	.word	0x0800fba1
 800fb84:	0800fdd1 	.word	0x0800fdd1
 800fb88:	0800ff49 	.word	0x0800ff49
 800fb8c:	0800ff73 	.word	0x0800ff73
 800fb90:	08010097 	.word	0x08010097
 800fb94:	0800ff49 	.word	0x0800ff49
 800fb98:	08010123 	.word	0x08010123
 800fb9c:	080101b3 	.word	0x080101b3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fba0:	4b57      	ldr	r3, [pc, #348]	; (800fd00 <tcp_process+0x2b8>)
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	f003 0310 	and.w	r3, r3, #16
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f000 80e4 	beq.w	800fd76 <tcp_process+0x32e>
 800fbae:	4b54      	ldr	r3, [pc, #336]	; (800fd00 <tcp_process+0x2b8>)
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	f003 0302 	and.w	r3, r3, #2
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	f000 80dd 	beq.w	800fd76 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbc0:	1c5a      	adds	r2, r3, #1
 800fbc2:	4b50      	ldr	r3, [pc, #320]	; (800fd04 <tcp_process+0x2bc>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	f040 80d5 	bne.w	800fd76 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fbcc:	4b4e      	ldr	r3, [pc, #312]	; (800fd08 <tcp_process+0x2c0>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	1c5a      	adds	r2, r3, #1
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fbde:	4b49      	ldr	r3, [pc, #292]	; (800fd04 <tcp_process+0x2bc>)
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fbe6:	4b4c      	ldr	r3, [pc, #304]	; (800fd18 <tcp_process+0x2d0>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	89db      	ldrh	r3, [r3, #14]
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fc00:	4b41      	ldr	r3, [pc, #260]	; (800fd08 <tcp_process+0x2c0>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	1e5a      	subs	r2, r3, #1
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2204      	movs	r2, #4
 800fc0e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	3304      	adds	r3, #4
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f007 f9f1 	bl	8017000 <ip4_route>
 800fc1e:	4601      	mov	r1, r0
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	3304      	adds	r3, #4
 800fc24:	461a      	mov	r2, r3
 800fc26:	4620      	mov	r0, r4
 800fc28:	f7ff f88e 	bl	800ed48 <tcp_eff_send_mss_netif>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	461a      	mov	r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc38:	009a      	lsls	r2, r3, #2
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	f241 111c 	movw	r1, #4380	; 0x111c
 800fc44:	428b      	cmp	r3, r1
 800fc46:	bf38      	it	cc
 800fc48:	460b      	movcc	r3, r1
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d204      	bcs.n	800fc58 <tcp_process+0x210>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	e00d      	b.n	800fc74 <tcp_process+0x22c>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc5c:	005b      	lsls	r3, r3, #1
 800fc5e:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d904      	bls.n	800fc70 <tcp_process+0x228>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	e001      	b.n	800fc74 <tcp_process+0x22c>
 800fc70:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d106      	bne.n	800fc92 <tcp_process+0x24a>
 800fc84:	4b1b      	ldr	r3, [pc, #108]	; (800fcf4 <tcp_process+0x2ac>)
 800fc86:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fc8a:	4924      	ldr	r1, [pc, #144]	; (800fd1c <tcp_process+0x2d4>)
 800fc8c:	481b      	ldr	r0, [pc, #108]	; (800fcfc <tcp_process+0x2b4>)
 800fc8e:	f00c f8eb 	bl	801be68 <iprintf>
        --pcb->snd_queuelen;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc98:	3b01      	subs	r3, #1
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fca6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d111      	bne.n	800fcd2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcb2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d106      	bne.n	800fcc8 <tcp_process+0x280>
 800fcba:	4b0e      	ldr	r3, [pc, #56]	; (800fcf4 <tcp_process+0x2ac>)
 800fcbc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fcc0:	4917      	ldr	r1, [pc, #92]	; (800fd20 <tcp_process+0x2d8>)
 800fcc2:	480e      	ldr	r0, [pc, #56]	; (800fcfc <tcp_process+0x2b4>)
 800fcc4:	f00c f8d0 	bl	801be68 <iprintf>
          pcb->unsent = rseg->next;
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	66da      	str	r2, [r3, #108]	; 0x6c
 800fcd0:	e003      	b.n	800fcda <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	681a      	ldr	r2, [r3, #0]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fcda:	69f8      	ldr	r0, [r7, #28]
 800fcdc:	f7fe fc70 	bl	800e5c0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d11d      	bne.n	800fd24 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcee:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcf0:	e01f      	b.n	800fd32 <tcp_process+0x2ea>
 800fcf2:	bf00      	nop
 800fcf4:	0801ef40 	.word	0x0801ef40
 800fcf8:	0801f178 	.word	0x0801f178
 800fcfc:	0801ef8c 	.word	0x0801ef8c
 800fd00:	2000841c 	.word	0x2000841c
 800fd04:	20008414 	.word	0x20008414
 800fd08:	20008410 	.word	0x20008410
 800fd0c:	0801f194 	.word	0x0801f194
 800fd10:	2000841d 	.word	0x2000841d
 800fd14:	2000c554 	.word	0x2000c554
 800fd18:	20008400 	.word	0x20008400
 800fd1c:	0801f1b4 	.word	0x0801f1b4
 800fd20:	0801f1cc 	.word	0x0801f1cc
        } else {
          pcb->rtime = 0;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00a      	beq.n	800fd52 <tcp_process+0x30a>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	6910      	ldr	r0, [r2, #16]
 800fd46:	2200      	movs	r2, #0
 800fd48:	6879      	ldr	r1, [r7, #4]
 800fd4a:	4798      	blx	r3
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	76bb      	strb	r3, [r7, #26]
 800fd50:	e001      	b.n	800fd56 <tcp_process+0x30e>
 800fd52:	2300      	movs	r3, #0
 800fd54:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fd56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd5a:	f113 0f0d 	cmn.w	r3, #13
 800fd5e:	d102      	bne.n	800fd66 <tcp_process+0x31e>
          return ERR_ABRT;
 800fd60:	f06f 030c 	mvn.w	r3, #12
 800fd64:	e250      	b.n	8010208 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	8b5b      	ldrh	r3, [r3, #26]
 800fd6a:	f043 0302 	orr.w	r3, r3, #2
 800fd6e:	b29a      	uxth	r2, r3
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fd74:	e23a      	b.n	80101ec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fd76:	4b9d      	ldr	r3, [pc, #628]	; (800ffec <tcp_process+0x5a4>)
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	f003 0310 	and.w	r3, r3, #16
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f000 8234 	beq.w	80101ec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd84:	4b9a      	ldr	r3, [pc, #616]	; (800fff0 <tcp_process+0x5a8>)
 800fd86:	6819      	ldr	r1, [r3, #0]
 800fd88:	4b9a      	ldr	r3, [pc, #616]	; (800fff4 <tcp_process+0x5ac>)
 800fd8a:	881b      	ldrh	r3, [r3, #0]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	4b9a      	ldr	r3, [pc, #616]	; (800fff8 <tcp_process+0x5b0>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd94:	4b99      	ldr	r3, [pc, #612]	; (800fffc <tcp_process+0x5b4>)
 800fd96:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd98:	885b      	ldrh	r3, [r3, #2]
 800fd9a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd9c:	4a97      	ldr	r2, [pc, #604]	; (800fffc <tcp_process+0x5b4>)
 800fd9e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda0:	8812      	ldrh	r2, [r2, #0]
 800fda2:	b292      	uxth	r2, r2
 800fda4:	9202      	str	r2, [sp, #8]
 800fda6:	9301      	str	r3, [sp, #4]
 800fda8:	4b95      	ldr	r3, [pc, #596]	; (8010000 <tcp_process+0x5b8>)
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	4b95      	ldr	r3, [pc, #596]	; (8010004 <tcp_process+0x5bc>)
 800fdae:	4602      	mov	r2, r0
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f003 f8eb 	bl	8012f8c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fdbc:	2b05      	cmp	r3, #5
 800fdbe:	f200 8215 	bhi.w	80101ec <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f002 feab 	bl	8012b24 <tcp_rexmit_rto>
      break;
 800fdce:	e20d      	b.n	80101ec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fdd0:	4b86      	ldr	r3, [pc, #536]	; (800ffec <tcp_process+0x5a4>)
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	f003 0310 	and.w	r3, r3, #16
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	f000 80a1 	beq.w	800ff20 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fdde:	4b84      	ldr	r3, [pc, #528]	; (800fff0 <tcp_process+0x5a8>)
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	3b01      	subs	r3, #1
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	db7e      	blt.n	800feec <tcp_process+0x4a4>
 800fdee:	4b80      	ldr	r3, [pc, #512]	; (800fff0 <tcp_process+0x5a8>)
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdf6:	1ad3      	subs	r3, r2, r3
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	dc77      	bgt.n	800feec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2204      	movs	r2, #4
 800fe00:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d102      	bne.n	800fe10 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fe0a:	23fa      	movs	r3, #250	; 0xfa
 800fe0c:	76bb      	strb	r3, [r7, #26]
 800fe0e:	e01d      	b.n	800fe4c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe14:	699b      	ldr	r3, [r3, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d106      	bne.n	800fe28 <tcp_process+0x3e0>
 800fe1a:	4b7b      	ldr	r3, [pc, #492]	; (8010008 <tcp_process+0x5c0>)
 800fe1c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fe20:	497a      	ldr	r1, [pc, #488]	; (801000c <tcp_process+0x5c4>)
 800fe22:	487b      	ldr	r0, [pc, #492]	; (8010010 <tcp_process+0x5c8>)
 800fe24:	f00c f820 	bl	801be68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe2c:	699b      	ldr	r3, [r3, #24]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00a      	beq.n	800fe48 <tcp_process+0x400>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe36:	699b      	ldr	r3, [r3, #24]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	6910      	ldr	r0, [r2, #16]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	6879      	ldr	r1, [r7, #4]
 800fe40:	4798      	blx	r3
 800fe42:	4603      	mov	r3, r0
 800fe44:	76bb      	strb	r3, [r7, #26]
 800fe46:	e001      	b.n	800fe4c <tcp_process+0x404>
 800fe48:	23f0      	movs	r3, #240	; 0xf0
 800fe4a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fe4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d00a      	beq.n	800fe6a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fe54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe58:	f113 0f0d 	cmn.w	r3, #13
 800fe5c:	d002      	beq.n	800fe64 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7fd fd68 	bl	800d934 <tcp_abort>
            }
            return ERR_ABRT;
 800fe64:	f06f 030c 	mvn.w	r3, #12
 800fe68:	e1ce      	b.n	8010208 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 fae0 	bl	8010430 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fe70:	4b68      	ldr	r3, [pc, #416]	; (8010014 <tcp_process+0x5cc>)
 800fe72:	881b      	ldrh	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d005      	beq.n	800fe84 <tcp_process+0x43c>
            recv_acked--;
 800fe78:	4b66      	ldr	r3, [pc, #408]	; (8010014 <tcp_process+0x5cc>)
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	3b01      	subs	r3, #1
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	4b64      	ldr	r3, [pc, #400]	; (8010014 <tcp_process+0x5cc>)
 800fe82:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe88:	009a      	lsls	r2, r3, #2
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	f241 111c 	movw	r1, #4380	; 0x111c
 800fe94:	428b      	cmp	r3, r1
 800fe96:	bf38      	it	cc
 800fe98:	460b      	movcc	r3, r1
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d204      	bcs.n	800fea8 <tcp_process+0x460>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	e00d      	b.n	800fec4 <tcp_process+0x47c>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	f241 121c 	movw	r2, #4380	; 0x111c
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d904      	bls.n	800fec0 <tcp_process+0x478>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feba:	005b      	lsls	r3, r3, #1
 800febc:	b29b      	uxth	r3, r3
 800febe:	e001      	b.n	800fec4 <tcp_process+0x47c>
 800fec0:	f241 131c 	movw	r3, #4380	; 0x111c
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800feca:	4b53      	ldr	r3, [pc, #332]	; (8010018 <tcp_process+0x5d0>)
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	f003 0320 	and.w	r3, r3, #32
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d037      	beq.n	800ff46 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	8b5b      	ldrh	r3, [r3, #26]
 800feda:	f043 0302 	orr.w	r3, r3, #2
 800fede:	b29a      	uxth	r2, r3
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2207      	movs	r2, #7
 800fee8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800feea:	e02c      	b.n	800ff46 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feec:	4b40      	ldr	r3, [pc, #256]	; (800fff0 <tcp_process+0x5a8>)
 800feee:	6819      	ldr	r1, [r3, #0]
 800fef0:	4b40      	ldr	r3, [pc, #256]	; (800fff4 <tcp_process+0x5ac>)
 800fef2:	881b      	ldrh	r3, [r3, #0]
 800fef4:	461a      	mov	r2, r3
 800fef6:	4b40      	ldr	r3, [pc, #256]	; (800fff8 <tcp_process+0x5b0>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fefc:	4b3f      	ldr	r3, [pc, #252]	; (800fffc <tcp_process+0x5b4>)
 800fefe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff00:	885b      	ldrh	r3, [r3, #2]
 800ff02:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff04:	4a3d      	ldr	r2, [pc, #244]	; (800fffc <tcp_process+0x5b4>)
 800ff06:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff08:	8812      	ldrh	r2, [r2, #0]
 800ff0a:	b292      	uxth	r2, r2
 800ff0c:	9202      	str	r2, [sp, #8]
 800ff0e:	9301      	str	r3, [sp, #4]
 800ff10:	4b3b      	ldr	r3, [pc, #236]	; (8010000 <tcp_process+0x5b8>)
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	4b3b      	ldr	r3, [pc, #236]	; (8010004 <tcp_process+0x5bc>)
 800ff16:	4602      	mov	r2, r0
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f003 f837 	bl	8012f8c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ff1e:	e167      	b.n	80101f0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ff20:	4b32      	ldr	r3, [pc, #200]	; (800ffec <tcp_process+0x5a4>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	f003 0302 	and.w	r3, r3, #2
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 8161 	beq.w	80101f0 <tcp_process+0x7a8>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff32:	1e5a      	subs	r2, r3, #1
 800ff34:	4b30      	ldr	r3, [pc, #192]	; (800fff8 <tcp_process+0x5b0>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	f040 8159 	bne.w	80101f0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f002 fe12 	bl	8012b68 <tcp_rexmit>
      break;
 800ff44:	e154      	b.n	80101f0 <tcp_process+0x7a8>
 800ff46:	e153      	b.n	80101f0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 fa71 	bl	8010430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ff4e:	4b32      	ldr	r3, [pc, #200]	; (8010018 <tcp_process+0x5d0>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	f003 0320 	and.w	r3, r3, #32
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f000 814c 	beq.w	80101f4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	8b5b      	ldrh	r3, [r3, #26]
 800ff60:	f043 0302 	orr.w	r3, r3, #2
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2207      	movs	r2, #7
 800ff6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff70:	e140      	b.n	80101f4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fa5c 	bl	8010430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ff78:	4b27      	ldr	r3, [pc, #156]	; (8010018 <tcp_process+0x5d0>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	f003 0320 	and.w	r3, r3, #32
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d071      	beq.n	8010068 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff84:	4b19      	ldr	r3, [pc, #100]	; (800ffec <tcp_process+0x5a4>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f003 0310 	and.w	r3, r3, #16
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d060      	beq.n	8010052 <tcp_process+0x60a>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff94:	4b16      	ldr	r3, [pc, #88]	; (800fff0 <tcp_process+0x5a8>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d15a      	bne.n	8010052 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d156      	bne.n	8010052 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	8b5b      	ldrh	r3, [r3, #26]
 800ffa8:	f043 0302 	orr.w	r3, r3, #2
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7fe fdbe 	bl	800eb34 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ffb8:	4b18      	ldr	r3, [pc, #96]	; (801001c <tcp_process+0x5d4>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d105      	bne.n	800ffce <tcp_process+0x586>
 800ffc2:	4b16      	ldr	r3, [pc, #88]	; (801001c <tcp_process+0x5d4>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	4a14      	ldr	r2, [pc, #80]	; (801001c <tcp_process+0x5d4>)
 800ffca:	6013      	str	r3, [r2, #0]
 800ffcc:	e02e      	b.n	801002c <tcp_process+0x5e4>
 800ffce:	4b13      	ldr	r3, [pc, #76]	; (801001c <tcp_process+0x5d4>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	617b      	str	r3, [r7, #20]
 800ffd4:	e027      	b.n	8010026 <tcp_process+0x5de>
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d11f      	bne.n	8010020 <tcp_process+0x5d8>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	68da      	ldr	r2, [r3, #12]
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	60da      	str	r2, [r3, #12]
 800ffe8:	e020      	b.n	801002c <tcp_process+0x5e4>
 800ffea:	bf00      	nop
 800ffec:	2000841c 	.word	0x2000841c
 800fff0:	20008414 	.word	0x20008414
 800fff4:	2000841a 	.word	0x2000841a
 800fff8:	20008410 	.word	0x20008410
 800fffc:	20008400 	.word	0x20008400
 8010000:	20008e0c 	.word	0x20008e0c
 8010004:	20008e10 	.word	0x20008e10
 8010008:	0801ef40 	.word	0x0801ef40
 801000c:	0801f1e0 	.word	0x0801f1e0
 8010010:	0801ef8c 	.word	0x0801ef8c
 8010014:	20008418 	.word	0x20008418
 8010018:	2000841d 	.word	0x2000841d
 801001c:	2000c550 	.word	0x2000c550
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	617b      	str	r3, [r7, #20]
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d1d4      	bne.n	800ffd6 <tcp_process+0x58e>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	60da      	str	r2, [r3, #12]
 8010032:	4b77      	ldr	r3, [pc, #476]	; (8010210 <tcp_process+0x7c8>)
 8010034:	2201      	movs	r2, #1
 8010036:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	220a      	movs	r2, #10
 801003c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801003e:	4b75      	ldr	r3, [pc, #468]	; (8010214 <tcp_process+0x7cc>)
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	60da      	str	r2, [r3, #12]
 8010046:	4a73      	ldr	r2, [pc, #460]	; (8010214 <tcp_process+0x7cc>)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6013      	str	r3, [r2, #0]
 801004c:	f003 f960 	bl	8013310 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010050:	e0d2      	b.n	80101f8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	8b5b      	ldrh	r3, [r3, #26]
 8010056:	f043 0302 	orr.w	r3, r3, #2
 801005a:	b29a      	uxth	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2208      	movs	r2, #8
 8010064:	751a      	strb	r2, [r3, #20]
      break;
 8010066:	e0c7      	b.n	80101f8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010068:	4b6b      	ldr	r3, [pc, #428]	; (8010218 <tcp_process+0x7d0>)
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	f003 0310 	and.w	r3, r3, #16
 8010070:	2b00      	cmp	r3, #0
 8010072:	f000 80c1 	beq.w	80101f8 <tcp_process+0x7b0>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801007a:	4b68      	ldr	r3, [pc, #416]	; (801021c <tcp_process+0x7d4>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	429a      	cmp	r2, r3
 8010080:	f040 80ba 	bne.w	80101f8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010088:	2b00      	cmp	r3, #0
 801008a:	f040 80b5 	bne.w	80101f8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2206      	movs	r2, #6
 8010092:	751a      	strb	r2, [r3, #20]
      break;
 8010094:	e0b0      	b.n	80101f8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 f9ca 	bl	8010430 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801009c:	4b60      	ldr	r3, [pc, #384]	; (8010220 <tcp_process+0x7d8>)
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	f003 0320 	and.w	r3, r3, #32
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 80a9 	beq.w	80101fc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	8b5b      	ldrh	r3, [r3, #26]
 80100ae:	f043 0302 	orr.w	r3, r3, #2
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f7fe fd3b 	bl	800eb34 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80100be:	4b59      	ldr	r3, [pc, #356]	; (8010224 <tcp_process+0x7dc>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d105      	bne.n	80100d4 <tcp_process+0x68c>
 80100c8:	4b56      	ldr	r3, [pc, #344]	; (8010224 <tcp_process+0x7dc>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	4a55      	ldr	r2, [pc, #340]	; (8010224 <tcp_process+0x7dc>)
 80100d0:	6013      	str	r3, [r2, #0]
 80100d2:	e013      	b.n	80100fc <tcp_process+0x6b4>
 80100d4:	4b53      	ldr	r3, [pc, #332]	; (8010224 <tcp_process+0x7dc>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	613b      	str	r3, [r7, #16]
 80100da:	e00c      	b.n	80100f6 <tcp_process+0x6ae>
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	68db      	ldr	r3, [r3, #12]
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d104      	bne.n	80100f0 <tcp_process+0x6a8>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	68da      	ldr	r2, [r3, #12]
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	60da      	str	r2, [r3, #12]
 80100ee:	e005      	b.n	80100fc <tcp_process+0x6b4>
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	613b      	str	r3, [r7, #16]
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1ef      	bne.n	80100dc <tcp_process+0x694>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	60da      	str	r2, [r3, #12]
 8010102:	4b43      	ldr	r3, [pc, #268]	; (8010210 <tcp_process+0x7c8>)
 8010104:	2201      	movs	r2, #1
 8010106:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	220a      	movs	r2, #10
 801010c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801010e:	4b41      	ldr	r3, [pc, #260]	; (8010214 <tcp_process+0x7cc>)
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	60da      	str	r2, [r3, #12]
 8010116:	4a3f      	ldr	r2, [pc, #252]	; (8010214 <tcp_process+0x7cc>)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6013      	str	r3, [r2, #0]
 801011c:	f003 f8f8 	bl	8013310 <tcp_timer_needed>
      }
      break;
 8010120:	e06c      	b.n	80101fc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 f984 	bl	8010430 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010128:	4b3b      	ldr	r3, [pc, #236]	; (8010218 <tcp_process+0x7d0>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	f003 0310 	and.w	r3, r3, #16
 8010130:	2b00      	cmp	r3, #0
 8010132:	d065      	beq.n	8010200 <tcp_process+0x7b8>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010138:	4b38      	ldr	r3, [pc, #224]	; (801021c <tcp_process+0x7d4>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	429a      	cmp	r2, r3
 801013e:	d15f      	bne.n	8010200 <tcp_process+0x7b8>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010144:	2b00      	cmp	r3, #0
 8010146:	d15b      	bne.n	8010200 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7fe fcf3 	bl	800eb34 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801014e:	4b35      	ldr	r3, [pc, #212]	; (8010224 <tcp_process+0x7dc>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	429a      	cmp	r2, r3
 8010156:	d105      	bne.n	8010164 <tcp_process+0x71c>
 8010158:	4b32      	ldr	r3, [pc, #200]	; (8010224 <tcp_process+0x7dc>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	4a31      	ldr	r2, [pc, #196]	; (8010224 <tcp_process+0x7dc>)
 8010160:	6013      	str	r3, [r2, #0]
 8010162:	e013      	b.n	801018c <tcp_process+0x744>
 8010164:	4b2f      	ldr	r3, [pc, #188]	; (8010224 <tcp_process+0x7dc>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	60fb      	str	r3, [r7, #12]
 801016a:	e00c      	b.n	8010186 <tcp_process+0x73e>
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	429a      	cmp	r2, r3
 8010174:	d104      	bne.n	8010180 <tcp_process+0x738>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	68da      	ldr	r2, [r3, #12]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	60da      	str	r2, [r3, #12]
 801017e:	e005      	b.n	801018c <tcp_process+0x744>
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	60fb      	str	r3, [r7, #12]
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d1ef      	bne.n	801016c <tcp_process+0x724>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	60da      	str	r2, [r3, #12]
 8010192:	4b1f      	ldr	r3, [pc, #124]	; (8010210 <tcp_process+0x7c8>)
 8010194:	2201      	movs	r2, #1
 8010196:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	220a      	movs	r2, #10
 801019c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801019e:	4b1d      	ldr	r3, [pc, #116]	; (8010214 <tcp_process+0x7cc>)
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	60da      	str	r2, [r3, #12]
 80101a6:	4a1b      	ldr	r2, [pc, #108]	; (8010214 <tcp_process+0x7cc>)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6013      	str	r3, [r2, #0]
 80101ac:	f003 f8b0 	bl	8013310 <tcp_timer_needed>
      }
      break;
 80101b0:	e026      	b.n	8010200 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 f93c 	bl	8010430 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80101b8:	4b17      	ldr	r3, [pc, #92]	; (8010218 <tcp_process+0x7d0>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	f003 0310 	and.w	r3, r3, #16
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d01f      	beq.n	8010204 <tcp_process+0x7bc>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101c8:	4b14      	ldr	r3, [pc, #80]	; (801021c <tcp_process+0x7d4>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d119      	bne.n	8010204 <tcp_process+0x7bc>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d115      	bne.n	8010204 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80101d8:	4b11      	ldr	r3, [pc, #68]	; (8010220 <tcp_process+0x7d8>)
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	f043 0310 	orr.w	r3, r3, #16
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	4b0f      	ldr	r3, [pc, #60]	; (8010220 <tcp_process+0x7d8>)
 80101e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80101e6:	e00d      	b.n	8010204 <tcp_process+0x7bc>
    default:
      break;
 80101e8:	bf00      	nop
 80101ea:	e00c      	b.n	8010206 <tcp_process+0x7be>
      break;
 80101ec:	bf00      	nop
 80101ee:	e00a      	b.n	8010206 <tcp_process+0x7be>
      break;
 80101f0:	bf00      	nop
 80101f2:	e008      	b.n	8010206 <tcp_process+0x7be>
      break;
 80101f4:	bf00      	nop
 80101f6:	e006      	b.n	8010206 <tcp_process+0x7be>
      break;
 80101f8:	bf00      	nop
 80101fa:	e004      	b.n	8010206 <tcp_process+0x7be>
      break;
 80101fc:	bf00      	nop
 80101fe:	e002      	b.n	8010206 <tcp_process+0x7be>
      break;
 8010200:	bf00      	nop
 8010202:	e000      	b.n	8010206 <tcp_process+0x7be>
      break;
 8010204:	bf00      	nop
  }
  return ERR_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3724      	adds	r7, #36	; 0x24
 801020c:	46bd      	mov	sp, r7
 801020e:	bd90      	pop	{r4, r7, pc}
 8010210:	2000c54c 	.word	0x2000c54c
 8010214:	2000c560 	.word	0x2000c560
 8010218:	2000841c 	.word	0x2000841c
 801021c:	20008414 	.word	0x20008414
 8010220:	2000841d 	.word	0x2000841d
 8010224:	2000c550 	.word	0x2000c550

08010228 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010228:	b590      	push	{r4, r7, lr}
 801022a:	b085      	sub	sp, #20
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d106      	bne.n	8010246 <tcp_oos_insert_segment+0x1e>
 8010238:	4b3b      	ldr	r3, [pc, #236]	; (8010328 <tcp_oos_insert_segment+0x100>)
 801023a:	f240 421f 	movw	r2, #1055	; 0x41f
 801023e:	493b      	ldr	r1, [pc, #236]	; (801032c <tcp_oos_insert_segment+0x104>)
 8010240:	483b      	ldr	r0, [pc, #236]	; (8010330 <tcp_oos_insert_segment+0x108>)
 8010242:	f00b fe11 	bl	801be68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	899b      	ldrh	r3, [r3, #12]
 801024c:	b29b      	uxth	r3, r3
 801024e:	4618      	mov	r0, r3
 8010250:	f7fb f994 	bl	800b57c <lwip_htons>
 8010254:	4603      	mov	r3, r0
 8010256:	b2db      	uxtb	r3, r3
 8010258:	f003 0301 	and.w	r3, r3, #1
 801025c:	2b00      	cmp	r3, #0
 801025e:	d028      	beq.n	80102b2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010260:	6838      	ldr	r0, [r7, #0]
 8010262:	f7fe f999 	bl	800e598 <tcp_segs_free>
    next = NULL;
 8010266:	2300      	movs	r3, #0
 8010268:	603b      	str	r3, [r7, #0]
 801026a:	e056      	b.n	801031a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	899b      	ldrh	r3, [r3, #12]
 8010272:	b29b      	uxth	r3, r3
 8010274:	4618      	mov	r0, r3
 8010276:	f7fb f981 	bl	800b57c <lwip_htons>
 801027a:	4603      	mov	r3, r0
 801027c:	b2db      	uxtb	r3, r3
 801027e:	f003 0301 	and.w	r3, r3, #1
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00d      	beq.n	80102a2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	899b      	ldrh	r3, [r3, #12]
 801028c:	b29c      	uxth	r4, r3
 801028e:	2001      	movs	r0, #1
 8010290:	f7fb f974 	bl	800b57c <lwip_htons>
 8010294:	4603      	mov	r3, r0
 8010296:	461a      	mov	r2, r3
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	4322      	orrs	r2, r4
 801029e:	b292      	uxth	r2, r2
 80102a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	f7fe f987 	bl	800e5c0 <tcp_seg_free>
    while (next &&
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00e      	beq.n	80102d6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	891b      	ldrh	r3, [r3, #8]
 80102bc:	461a      	mov	r2, r3
 80102be:	4b1d      	ldr	r3, [pc, #116]	; (8010334 <tcp_oos_insert_segment+0x10c>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	441a      	add	r2, r3
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	6839      	ldr	r1, [r7, #0]
 80102cc:	8909      	ldrh	r1, [r1, #8]
 80102ce:	440b      	add	r3, r1
 80102d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	daca      	bge.n	801026c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d01e      	beq.n	801031a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	891b      	ldrh	r3, [r3, #8]
 80102e0:	461a      	mov	r2, r3
 80102e2:	4b14      	ldr	r3, [pc, #80]	; (8010334 <tcp_oos_insert_segment+0x10c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	441a      	add	r2, r3
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	dd12      	ble.n	801031a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	4b0d      	ldr	r3, [pc, #52]	; (8010334 <tcp_oos_insert_segment+0x10c>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	b29b      	uxth	r3, r3
 8010302:	1ad3      	subs	r3, r2, r3
 8010304:	b29a      	uxth	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	685a      	ldr	r2, [r3, #4]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	891b      	ldrh	r3, [r3, #8]
 8010312:	4619      	mov	r1, r3
 8010314:	4610      	mov	r0, r2
 8010316:	f7fc fb5f 	bl	800c9d8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	683a      	ldr	r2, [r7, #0]
 801031e:	601a      	str	r2, [r3, #0]
}
 8010320:	bf00      	nop
 8010322:	3714      	adds	r7, #20
 8010324:	46bd      	mov	sp, r7
 8010326:	bd90      	pop	{r4, r7, pc}
 8010328:	0801ef40 	.word	0x0801ef40
 801032c:	0801f200 	.word	0x0801f200
 8010330:	0801ef8c 	.word	0x0801ef8c
 8010334:	20008410 	.word	0x20008410

08010338 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010338:	b5b0      	push	{r4, r5, r7, lr}
 801033a:	b086      	sub	sp, #24
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
 8010344:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010346:	e03e      	b.n	80103c6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	4618      	mov	r0, r3
 8010358:	f7fc fd84 	bl	800ce64 <pbuf_clen>
 801035c:	4603      	mov	r3, r0
 801035e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010366:	8a7a      	ldrh	r2, [r7, #18]
 8010368:	429a      	cmp	r2, r3
 801036a:	d906      	bls.n	801037a <tcp_free_acked_segments+0x42>
 801036c:	4b2a      	ldr	r3, [pc, #168]	; (8010418 <tcp_free_acked_segments+0xe0>)
 801036e:	f240 4257 	movw	r2, #1111	; 0x457
 8010372:	492a      	ldr	r1, [pc, #168]	; (801041c <tcp_free_acked_segments+0xe4>)
 8010374:	482a      	ldr	r0, [pc, #168]	; (8010420 <tcp_free_acked_segments+0xe8>)
 8010376:	f00b fd77 	bl	801be68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010380:	8a7b      	ldrh	r3, [r7, #18]
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	b29a      	uxth	r2, r3
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	891a      	ldrh	r2, [r3, #8]
 8010390:	4b24      	ldr	r3, [pc, #144]	; (8010424 <tcp_free_acked_segments+0xec>)
 8010392:	881b      	ldrh	r3, [r3, #0]
 8010394:	4413      	add	r3, r2
 8010396:	b29a      	uxth	r2, r3
 8010398:	4b22      	ldr	r3, [pc, #136]	; (8010424 <tcp_free_acked_segments+0xec>)
 801039a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801039c:	6978      	ldr	r0, [r7, #20]
 801039e:	f7fe f90f 	bl	800e5c0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00c      	beq.n	80103c6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d109      	bne.n	80103c6 <tcp_free_acked_segments+0x8e>
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d106      	bne.n	80103c6 <tcp_free_acked_segments+0x8e>
 80103b8:	4b17      	ldr	r3, [pc, #92]	; (8010418 <tcp_free_acked_segments+0xe0>)
 80103ba:	f240 4262 	movw	r2, #1122	; 0x462
 80103be:	491a      	ldr	r1, [pc, #104]	; (8010428 <tcp_free_acked_segments+0xf0>)
 80103c0:	4817      	ldr	r0, [pc, #92]	; (8010420 <tcp_free_acked_segments+0xe8>)
 80103c2:	f00b fd51 	bl	801be68 <iprintf>
  while (seg_list != NULL &&
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d020      	beq.n	801040e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fb f8e7 	bl	800b5a6 <lwip_htonl>
 80103d8:	4604      	mov	r4, r0
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	891b      	ldrh	r3, [r3, #8]
 80103de:	461d      	mov	r5, r3
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	899b      	ldrh	r3, [r3, #12]
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fb f8c7 	bl	800b57c <lwip_htons>
 80103ee:	4603      	mov	r3, r0
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	f003 0303 	and.w	r3, r3, #3
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <tcp_free_acked_segments+0xc6>
 80103fa:	2301      	movs	r3, #1
 80103fc:	e000      	b.n	8010400 <tcp_free_acked_segments+0xc8>
 80103fe:	2300      	movs	r3, #0
 8010400:	442b      	add	r3, r5
 8010402:	18e2      	adds	r2, r4, r3
 8010404:	4b09      	ldr	r3, [pc, #36]	; (801042c <tcp_free_acked_segments+0xf4>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801040a:	2b00      	cmp	r3, #0
 801040c:	dd9c      	ble.n	8010348 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801040e:	68bb      	ldr	r3, [r7, #8]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3718      	adds	r7, #24
 8010414:	46bd      	mov	sp, r7
 8010416:	bdb0      	pop	{r4, r5, r7, pc}
 8010418:	0801ef40 	.word	0x0801ef40
 801041c:	0801f228 	.word	0x0801f228
 8010420:	0801ef8c 	.word	0x0801ef8c
 8010424:	20008418 	.word	0x20008418
 8010428:	0801f250 	.word	0x0801f250
 801042c:	20008414 	.word	0x20008414

08010430 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010430:	b5b0      	push	{r4, r5, r7, lr}
 8010432:	b094      	sub	sp, #80	; 0x50
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d106      	bne.n	8010450 <tcp_receive+0x20>
 8010442:	4ba6      	ldr	r3, [pc, #664]	; (80106dc <tcp_receive+0x2ac>)
 8010444:	f240 427b 	movw	r2, #1147	; 0x47b
 8010448:	49a5      	ldr	r1, [pc, #660]	; (80106e0 <tcp_receive+0x2b0>)
 801044a:	48a6      	ldr	r0, [pc, #664]	; (80106e4 <tcp_receive+0x2b4>)
 801044c:	f00b fd0c 	bl	801be68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7d1b      	ldrb	r3, [r3, #20]
 8010454:	2b03      	cmp	r3, #3
 8010456:	d806      	bhi.n	8010466 <tcp_receive+0x36>
 8010458:	4ba0      	ldr	r3, [pc, #640]	; (80106dc <tcp_receive+0x2ac>)
 801045a:	f240 427c 	movw	r2, #1148	; 0x47c
 801045e:	49a2      	ldr	r1, [pc, #648]	; (80106e8 <tcp_receive+0x2b8>)
 8010460:	48a0      	ldr	r0, [pc, #640]	; (80106e4 <tcp_receive+0x2b4>)
 8010462:	f00b fd01 	bl	801be68 <iprintf>

  if (flags & TCP_ACK) {
 8010466:	4ba1      	ldr	r3, [pc, #644]	; (80106ec <tcp_receive+0x2bc>)
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	f003 0310 	and.w	r3, r3, #16
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 8263 	beq.w	801093a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801047a:	461a      	mov	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010480:	4413      	add	r3, r2
 8010482:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010488:	4b99      	ldr	r3, [pc, #612]	; (80106f0 <tcp_receive+0x2c0>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	1ad3      	subs	r3, r2, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	db1b      	blt.n	80104ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010496:	4b96      	ldr	r3, [pc, #600]	; (80106f0 <tcp_receive+0x2c0>)
 8010498:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801049a:	429a      	cmp	r2, r3
 801049c:	d106      	bne.n	80104ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80104a2:	4b94      	ldr	r3, [pc, #592]	; (80106f4 <tcp_receive+0x2c4>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	db0e      	blt.n	80104ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80104b0:	4b90      	ldr	r3, [pc, #576]	; (80106f4 <tcp_receive+0x2c4>)
 80104b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d125      	bne.n	8010504 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80104b8:	4b8f      	ldr	r3, [pc, #572]	; (80106f8 <tcp_receive+0x2c8>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	89db      	ldrh	r3, [r3, #14]
 80104be:	b29a      	uxth	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d91c      	bls.n	8010504 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80104ca:	4b8b      	ldr	r3, [pc, #556]	; (80106f8 <tcp_receive+0x2c8>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	89db      	ldrh	r3, [r3, #14]
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d205      	bcs.n	80104f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80104f4:	4b7e      	ldr	r3, [pc, #504]	; (80106f0 <tcp_receive+0x2c0>)
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80104fc:	4b7d      	ldr	r3, [pc, #500]	; (80106f4 <tcp_receive+0x2c4>)
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010504:	4b7b      	ldr	r3, [pc, #492]	; (80106f4 <tcp_receive+0x2c4>)
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	2b00      	cmp	r3, #0
 8010510:	dc58      	bgt.n	80105c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010512:	4b7a      	ldr	r3, [pc, #488]	; (80106fc <tcp_receive+0x2cc>)
 8010514:	881b      	ldrh	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d14b      	bne.n	80105b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010524:	4413      	add	r3, r2
 8010526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010528:	429a      	cmp	r2, r3
 801052a:	d142      	bne.n	80105b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010532:	2b00      	cmp	r3, #0
 8010534:	db3d      	blt.n	80105b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801053a:	4b6e      	ldr	r3, [pc, #440]	; (80106f4 <tcp_receive+0x2c4>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	429a      	cmp	r2, r3
 8010540:	d137      	bne.n	80105b2 <tcp_receive+0x182>
              found_dupack = 1;
 8010542:	2301      	movs	r3, #1
 8010544:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801054c:	2bff      	cmp	r3, #255	; 0xff
 801054e:	d007      	beq.n	8010560 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010556:	3301      	adds	r3, #1
 8010558:	b2da      	uxtb	r2, r3
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010566:	2b03      	cmp	r3, #3
 8010568:	d91b      	bls.n	80105a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010574:	4413      	add	r3, r2
 8010576:	b29a      	uxth	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801057e:	429a      	cmp	r2, r3
 8010580:	d30a      	bcc.n	8010598 <tcp_receive+0x168>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801058c:	4413      	add	r3, r2
 801058e:	b29a      	uxth	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010596:	e004      	b.n	80105a2 <tcp_receive+0x172>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801059e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105a8:	2b02      	cmp	r3, #2
 80105aa:	d902      	bls.n	80105b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f002 fb47 	bl	8012c40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80105b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f040 8160 	bne.w	801087a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80105c2:	e15a      	b.n	801087a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105c4:	4b4b      	ldr	r3, [pc, #300]	; (80106f4 <tcp_receive+0x2c4>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105cc:	1ad3      	subs	r3, r2, r3
 80105ce:	3b01      	subs	r3, #1
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f2c0 814d 	blt.w	8010870 <tcp_receive+0x440>
 80105d6:	4b47      	ldr	r3, [pc, #284]	; (80106f4 <tcp_receive+0x2c4>)
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f300 8145 	bgt.w	8010870 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	8b5b      	ldrh	r3, [r3, #26]
 80105ea:	f003 0304 	and.w	r3, r3, #4
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d010      	beq.n	8010614 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	8b5b      	ldrh	r3, [r3, #26]
 80105f6:	f023 0304 	bic.w	r3, r3, #4
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010622:	10db      	asrs	r3, r3, #3
 8010624:	b21b      	sxth	r3, r3
 8010626:	b29a      	uxth	r2, r3
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801062e:	b29b      	uxth	r3, r3
 8010630:	4413      	add	r3, r2
 8010632:	b29b      	uxth	r3, r3
 8010634:	b21a      	sxth	r2, r3
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801063c:	4b2d      	ldr	r3, [pc, #180]	; (80106f4 <tcp_receive+0x2c4>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	b29a      	uxth	r2, r3
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010646:	b29b      	uxth	r3, r3
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010654:	4b27      	ldr	r3, [pc, #156]	; (80106f4 <tcp_receive+0x2c4>)
 8010656:	681a      	ldr	r2, [r3, #0]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	7d1b      	ldrb	r3, [r3, #20]
 8010660:	2b03      	cmp	r3, #3
 8010662:	f240 8096 	bls.w	8010792 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010672:	429a      	cmp	r2, r3
 8010674:	d244      	bcs.n	8010700 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	8b5b      	ldrh	r3, [r3, #26]
 801067a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801067e:	2b00      	cmp	r3, #0
 8010680:	d001      	beq.n	8010686 <tcp_receive+0x256>
 8010682:	2301      	movs	r3, #1
 8010684:	e000      	b.n	8010688 <tcp_receive+0x258>
 8010686:	2302      	movs	r3, #2
 8010688:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801068c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010690:	b29a      	uxth	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010696:	fb12 f303 	smulbb	r3, r2, r3
 801069a:	b29b      	uxth	r3, r3
 801069c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801069e:	4293      	cmp	r3, r2
 80106a0:	bf28      	it	cs
 80106a2:	4613      	movcs	r3, r2
 80106a4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106ae:	4413      	add	r3, r2
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d309      	bcc.n	80106d0 <tcp_receive+0x2a0>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106c4:	4413      	add	r3, r2
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80106ce:	e060      	b.n	8010792 <tcp_receive+0x362>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80106da:	e05a      	b.n	8010792 <tcp_receive+0x362>
 80106dc:	0801ef40 	.word	0x0801ef40
 80106e0:	0801f270 	.word	0x0801f270
 80106e4:	0801ef8c 	.word	0x0801ef8c
 80106e8:	0801f28c 	.word	0x0801f28c
 80106ec:	2000841c 	.word	0x2000841c
 80106f0:	20008410 	.word	0x20008410
 80106f4:	20008414 	.word	0x20008414
 80106f8:	20008400 	.word	0x20008400
 80106fc:	2000841a 	.word	0x2000841a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010708:	4413      	add	r3, r2
 801070a:	b29a      	uxth	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010712:	429a      	cmp	r2, r3
 8010714:	d309      	bcc.n	801072a <tcp_receive+0x2fa>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801071c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801071e:	4413      	add	r3, r2
 8010720:	b29a      	uxth	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010728:	e004      	b.n	8010734 <tcp_receive+0x304>
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010740:	429a      	cmp	r2, r3
 8010742:	d326      	bcc.n	8010792 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	b29a      	uxth	r2, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010764:	4413      	add	r3, r2
 8010766:	b29a      	uxth	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801076e:	429a      	cmp	r2, r3
 8010770:	d30a      	bcc.n	8010788 <tcp_receive+0x358>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801077c:	4413      	add	r3, r2
 801077e:	b29a      	uxth	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010786:	e004      	b.n	8010792 <tcp_receive+0x362>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801078e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801079a:	4a98      	ldr	r2, [pc, #608]	; (80109fc <tcp_receive+0x5cc>)
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7ff fdcb 	bl	8010338 <tcp_free_acked_segments>
 80107a2:	4602      	mov	r2, r0
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107b0:	4a93      	ldr	r2, [pc, #588]	; (8010a00 <tcp_receive+0x5d0>)
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7ff fdc0 	bl	8010338 <tcp_free_acked_segments>
 80107b8:	4602      	mov	r2, r0
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d104      	bne.n	80107d0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80107ce:	e002      	b.n	80107d6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d103      	bne.n	80107ec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80107f2:	4b84      	ldr	r3, [pc, #528]	; (8010a04 <tcp_receive+0x5d4>)
 80107f4:	881b      	ldrh	r3, [r3, #0]
 80107f6:	4413      	add	r3, r2
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	8b5b      	ldrh	r3, [r3, #26]
 8010804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010808:	2b00      	cmp	r3, #0
 801080a:	d035      	beq.n	8010878 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010810:	2b00      	cmp	r3, #0
 8010812:	d118      	bne.n	8010846 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00c      	beq.n	8010836 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	f7fa febc 	bl	800b5a6 <lwip_htonl>
 801082e:	4603      	mov	r3, r0
 8010830:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010832:	2b00      	cmp	r3, #0
 8010834:	dc20      	bgt.n	8010878 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	8b5b      	ldrh	r3, [r3, #26]
 801083a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801083e:	b29a      	uxth	r2, r3
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010844:	e018      	b.n	8010878 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	4618      	mov	r0, r3
 8010854:	f7fa fea7 	bl	800b5a6 <lwip_htonl>
 8010858:	4603      	mov	r3, r0
 801085a:	1ae3      	subs	r3, r4, r3
 801085c:	2b00      	cmp	r3, #0
 801085e:	dc0b      	bgt.n	8010878 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	8b5b      	ldrh	r3, [r3, #26]
 8010864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010868:	b29a      	uxth	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801086e:	e003      	b.n	8010878 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f002 fbdd 	bl	8013030 <tcp_send_empty_ack>
 8010876:	e000      	b.n	801087a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010878:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801087e:	2b00      	cmp	r3, #0
 8010880:	d05b      	beq.n	801093a <tcp_receive+0x50a>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010886:	4b60      	ldr	r3, [pc, #384]	; (8010a08 <tcp_receive+0x5d8>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	1ad3      	subs	r3, r2, r3
 801088c:	2b00      	cmp	r3, #0
 801088e:	da54      	bge.n	801093a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010890:	4b5e      	ldr	r3, [pc, #376]	; (8010a0c <tcp_receive+0x5dc>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	b29a      	uxth	r2, r3
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801089a:	b29b      	uxth	r3, r3
 801089c:	1ad3      	subs	r3, r2, r3
 801089e:	b29b      	uxth	r3, r3
 80108a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80108a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108ae:	10db      	asrs	r3, r3, #3
 80108b0:	b21b      	sxth	r3, r3
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80108c8:	4413      	add	r3, r2
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	b21a      	sxth	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80108d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	da05      	bge.n	80108e6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80108da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80108de:	425b      	negs	r3, r3
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80108e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80108f0:	109b      	asrs	r3, r3, #2
 80108f2:	b21b      	sxth	r3, r3
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010904:	b29a      	uxth	r2, r3
 8010906:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801090a:	4413      	add	r3, r2
 801090c:	b29b      	uxth	r3, r3
 801090e:	b21a      	sxth	r2, r3
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801091a:	10db      	asrs	r3, r3, #3
 801091c:	b21b      	sxth	r3, r3
 801091e:	b29a      	uxth	r2, r3
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010926:	b29b      	uxth	r3, r3
 8010928:	4413      	add	r3, r2
 801092a:	b29b      	uxth	r3, r3
 801092c:	b21a      	sxth	r2, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801093a:	4b35      	ldr	r3, [pc, #212]	; (8010a10 <tcp_receive+0x5e0>)
 801093c:	881b      	ldrh	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	f000 84e1 	beq.w	8011306 <tcp_receive+0xed6>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	7d1b      	ldrb	r3, [r3, #20]
 8010948:	2b06      	cmp	r3, #6
 801094a:	f200 84dc 	bhi.w	8011306 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010952:	4b30      	ldr	r3, [pc, #192]	; (8010a14 <tcp_receive+0x5e4>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	3b01      	subs	r3, #1
 801095a:	2b00      	cmp	r3, #0
 801095c:	f2c0 808e 	blt.w	8010a7c <tcp_receive+0x64c>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010964:	4b2a      	ldr	r3, [pc, #168]	; (8010a10 <tcp_receive+0x5e0>)
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	4619      	mov	r1, r3
 801096a:	4b2a      	ldr	r3, [pc, #168]	; (8010a14 <tcp_receive+0x5e4>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	440b      	add	r3, r1
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	3301      	adds	r3, #1
 8010974:	2b00      	cmp	r3, #0
 8010976:	f300 8081 	bgt.w	8010a7c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801097a:	4b27      	ldr	r3, [pc, #156]	; (8010a18 <tcp_receive+0x5e8>)
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010984:	4b23      	ldr	r3, [pc, #140]	; (8010a14 <tcp_receive+0x5e4>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801098c:	4b22      	ldr	r3, [pc, #136]	; (8010a18 <tcp_receive+0x5e8>)
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d106      	bne.n	80109a2 <tcp_receive+0x572>
 8010994:	4b21      	ldr	r3, [pc, #132]	; (8010a1c <tcp_receive+0x5ec>)
 8010996:	f240 5294 	movw	r2, #1428	; 0x594
 801099a:	4921      	ldr	r1, [pc, #132]	; (8010a20 <tcp_receive+0x5f0>)
 801099c:	4821      	ldr	r0, [pc, #132]	; (8010a24 <tcp_receive+0x5f4>)
 801099e:	f00b fa63 	bl	801be68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80109a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80109a8:	4293      	cmp	r3, r2
 80109aa:	d906      	bls.n	80109ba <tcp_receive+0x58a>
 80109ac:	4b1b      	ldr	r3, [pc, #108]	; (8010a1c <tcp_receive+0x5ec>)
 80109ae:	f240 5295 	movw	r2, #1429	; 0x595
 80109b2:	491d      	ldr	r1, [pc, #116]	; (8010a28 <tcp_receive+0x5f8>)
 80109b4:	481b      	ldr	r0, [pc, #108]	; (8010a24 <tcp_receive+0x5f4>)
 80109b6:	f00b fa57 	bl	801be68 <iprintf>
      off = (u16_t)off32;
 80109ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80109c0:	4b15      	ldr	r3, [pc, #84]	; (8010a18 <tcp_receive+0x5e8>)
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	891b      	ldrh	r3, [r3, #8]
 80109c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d906      	bls.n	80109dc <tcp_receive+0x5ac>
 80109ce:	4b13      	ldr	r3, [pc, #76]	; (8010a1c <tcp_receive+0x5ec>)
 80109d0:	f240 5297 	movw	r2, #1431	; 0x597
 80109d4:	4915      	ldr	r1, [pc, #84]	; (8010a2c <tcp_receive+0x5fc>)
 80109d6:	4813      	ldr	r0, [pc, #76]	; (8010a24 <tcp_receive+0x5f4>)
 80109d8:	f00b fa46 	bl	801be68 <iprintf>
      inseg.len -= off;
 80109dc:	4b0e      	ldr	r3, [pc, #56]	; (8010a18 <tcp_receive+0x5e8>)
 80109de:	891a      	ldrh	r2, [r3, #8]
 80109e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109e4:	1ad3      	subs	r3, r2, r3
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	4b0b      	ldr	r3, [pc, #44]	; (8010a18 <tcp_receive+0x5e8>)
 80109ea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80109ec:	4b0a      	ldr	r3, [pc, #40]	; (8010a18 <tcp_receive+0x5e8>)
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	891a      	ldrh	r2, [r3, #8]
 80109f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109f6:	1ad3      	subs	r3, r2, r3
 80109f8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80109fa:	e029      	b.n	8010a50 <tcp_receive+0x620>
 80109fc:	0801f2a8 	.word	0x0801f2a8
 8010a00:	0801f2b0 	.word	0x0801f2b0
 8010a04:	20008418 	.word	0x20008418
 8010a08:	20008414 	.word	0x20008414
 8010a0c:	2000c554 	.word	0x2000c554
 8010a10:	2000841a 	.word	0x2000841a
 8010a14:	20008410 	.word	0x20008410
 8010a18:	200083f0 	.word	0x200083f0
 8010a1c:	0801ef40 	.word	0x0801ef40
 8010a20:	0801f2b8 	.word	0x0801f2b8
 8010a24:	0801ef8c 	.word	0x0801ef8c
 8010a28:	0801f2c8 	.word	0x0801f2c8
 8010a2c:	0801f2d8 	.word	0x0801f2d8
        off -= p->len;
 8010a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a32:	895b      	ldrh	r3, [r3, #10]
 8010a34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a42:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a46:	2200      	movs	r2, #0
 8010a48:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a52:	895b      	ldrh	r3, [r3, #10]
 8010a54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d8e9      	bhi.n	8010a30 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010a5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a60:	4619      	mov	r1, r3
 8010a62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010a64:	f7fc f8b8 	bl	800cbd8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6c:	4a91      	ldr	r2, [pc, #580]	; (8010cb4 <tcp_receive+0x884>)
 8010a6e:	6013      	str	r3, [r2, #0]
 8010a70:	4b91      	ldr	r3, [pc, #580]	; (8010cb8 <tcp_receive+0x888>)
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	4a8f      	ldr	r2, [pc, #572]	; (8010cb4 <tcp_receive+0x884>)
 8010a76:	6812      	ldr	r2, [r2, #0]
 8010a78:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a7a:	e00d      	b.n	8010a98 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010a7c:	4b8d      	ldr	r3, [pc, #564]	; (8010cb4 <tcp_receive+0x884>)
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	da06      	bge.n	8010a98 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8b5b      	ldrh	r3, [r3, #26]
 8010a8e:	f043 0302 	orr.w	r3, r3, #2
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a98:	4b86      	ldr	r3, [pc, #536]	; (8010cb4 <tcp_receive+0x884>)
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa0:	1ad3      	subs	r3, r2, r3
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f2c0 842a 	blt.w	80112fc <tcp_receive+0xecc>
 8010aa8:	4b82      	ldr	r3, [pc, #520]	; (8010cb4 <tcp_receive+0x884>)
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ab0:	6879      	ldr	r1, [r7, #4]
 8010ab2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ab4:	440b      	add	r3, r1
 8010ab6:	1ad3      	subs	r3, r2, r3
 8010ab8:	3301      	adds	r3, #1
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f300 841e 	bgt.w	80112fc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ac4:	4b7b      	ldr	r3, [pc, #492]	; (8010cb4 <tcp_receive+0x884>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	f040 829a 	bne.w	8011002 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010ace:	4b7a      	ldr	r3, [pc, #488]	; (8010cb8 <tcp_receive+0x888>)
 8010ad0:	891c      	ldrh	r4, [r3, #8]
 8010ad2:	4b79      	ldr	r3, [pc, #484]	; (8010cb8 <tcp_receive+0x888>)
 8010ad4:	68db      	ldr	r3, [r3, #12]
 8010ad6:	899b      	ldrh	r3, [r3, #12]
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fa fd4e 	bl	800b57c <lwip_htons>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	f003 0303 	and.w	r3, r3, #3
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d001      	beq.n	8010af0 <tcp_receive+0x6c0>
 8010aec:	2301      	movs	r3, #1
 8010aee:	e000      	b.n	8010af2 <tcp_receive+0x6c2>
 8010af0:	2300      	movs	r3, #0
 8010af2:	4423      	add	r3, r4
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	4b71      	ldr	r3, [pc, #452]	; (8010cbc <tcp_receive+0x88c>)
 8010af8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010afe:	4b6f      	ldr	r3, [pc, #444]	; (8010cbc <tcp_receive+0x88c>)
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d275      	bcs.n	8010bf2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b06:	4b6c      	ldr	r3, [pc, #432]	; (8010cb8 <tcp_receive+0x888>)
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	899b      	ldrh	r3, [r3, #12]
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7fa fd34 	bl	800b57c <lwip_htons>
 8010b14:	4603      	mov	r3, r0
 8010b16:	b2db      	uxtb	r3, r3
 8010b18:	f003 0301 	and.w	r3, r3, #1
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d01f      	beq.n	8010b60 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010b20:	4b65      	ldr	r3, [pc, #404]	; (8010cb8 <tcp_receive+0x888>)
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	899b      	ldrh	r3, [r3, #12]
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	b21b      	sxth	r3, r3
 8010b2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b2e:	b21c      	sxth	r4, r3
 8010b30:	4b61      	ldr	r3, [pc, #388]	; (8010cb8 <tcp_receive+0x888>)
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	899b      	ldrh	r3, [r3, #12]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fa fd1f 	bl	800b57c <lwip_htons>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fa fd16 	bl	800b57c <lwip_htons>
 8010b50:	4603      	mov	r3, r0
 8010b52:	b21b      	sxth	r3, r3
 8010b54:	4323      	orrs	r3, r4
 8010b56:	b21a      	sxth	r2, r3
 8010b58:	4b57      	ldr	r3, [pc, #348]	; (8010cb8 <tcp_receive+0x888>)
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	b292      	uxth	r2, r2
 8010b5e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b64:	4b54      	ldr	r3, [pc, #336]	; (8010cb8 <tcp_receive+0x888>)
 8010b66:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010b68:	4b53      	ldr	r3, [pc, #332]	; (8010cb8 <tcp_receive+0x888>)
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	899b      	ldrh	r3, [r3, #12]
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7fa fd03 	bl	800b57c <lwip_htons>
 8010b76:	4603      	mov	r3, r0
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	f003 0302 	and.w	r3, r3, #2
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d005      	beq.n	8010b8e <tcp_receive+0x75e>
            inseg.len -= 1;
 8010b82:	4b4d      	ldr	r3, [pc, #308]	; (8010cb8 <tcp_receive+0x888>)
 8010b84:	891b      	ldrh	r3, [r3, #8]
 8010b86:	3b01      	subs	r3, #1
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	4b4b      	ldr	r3, [pc, #300]	; (8010cb8 <tcp_receive+0x888>)
 8010b8c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010b8e:	4b4a      	ldr	r3, [pc, #296]	; (8010cb8 <tcp_receive+0x888>)
 8010b90:	685a      	ldr	r2, [r3, #4]
 8010b92:	4b49      	ldr	r3, [pc, #292]	; (8010cb8 <tcp_receive+0x888>)
 8010b94:	891b      	ldrh	r3, [r3, #8]
 8010b96:	4619      	mov	r1, r3
 8010b98:	4610      	mov	r0, r2
 8010b9a:	f7fb ff1d 	bl	800c9d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010b9e:	4b46      	ldr	r3, [pc, #280]	; (8010cb8 <tcp_receive+0x888>)
 8010ba0:	891c      	ldrh	r4, [r3, #8]
 8010ba2:	4b45      	ldr	r3, [pc, #276]	; (8010cb8 <tcp_receive+0x888>)
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	899b      	ldrh	r3, [r3, #12]
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7fa fce6 	bl	800b57c <lwip_htons>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	f003 0303 	and.w	r3, r3, #3
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d001      	beq.n	8010bc0 <tcp_receive+0x790>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e000      	b.n	8010bc2 <tcp_receive+0x792>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	4423      	add	r3, r4
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	4b3d      	ldr	r3, [pc, #244]	; (8010cbc <tcp_receive+0x88c>)
 8010bc8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010bca:	4b3c      	ldr	r3, [pc, #240]	; (8010cbc <tcp_receive+0x88c>)
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	4b38      	ldr	r3, [pc, #224]	; (8010cb4 <tcp_receive+0x884>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	441a      	add	r2, r3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bda:	6879      	ldr	r1, [r7, #4]
 8010bdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bde:	440b      	add	r3, r1
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d006      	beq.n	8010bf2 <tcp_receive+0x7c2>
 8010be4:	4b36      	ldr	r3, [pc, #216]	; (8010cc0 <tcp_receive+0x890>)
 8010be6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8010bea:	4936      	ldr	r1, [pc, #216]	; (8010cc4 <tcp_receive+0x894>)
 8010bec:	4836      	ldr	r0, [pc, #216]	; (8010cc8 <tcp_receive+0x898>)
 8010bee:	f00b f93b 	bl	801be68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f000 80e7 	beq.w	8010dca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010bfc:	4b2e      	ldr	r3, [pc, #184]	; (8010cb8 <tcp_receive+0x888>)
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	899b      	ldrh	r3, [r3, #12]
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fa fcb9 	bl	800b57c <lwip_htons>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	f003 0301 	and.w	r3, r3, #1
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d010      	beq.n	8010c38 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010c16:	e00a      	b.n	8010c2e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c1c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7fd fcc9 	bl	800e5c0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d1f0      	bne.n	8010c18 <tcp_receive+0x7e8>
 8010c36:	e0c8      	b.n	8010dca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010c3e:	e052      	b.n	8010ce6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c42:	68db      	ldr	r3, [r3, #12]
 8010c44:	899b      	ldrh	r3, [r3, #12]
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fa fc97 	bl	800b57c <lwip_htons>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d03d      	beq.n	8010cd6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010c5a:	4b17      	ldr	r3, [pc, #92]	; (8010cb8 <tcp_receive+0x888>)
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	899b      	ldrh	r3, [r3, #12]
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fa fc8a 	bl	800b57c <lwip_htons>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d130      	bne.n	8010cd6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010c74:	4b10      	ldr	r3, [pc, #64]	; (8010cb8 <tcp_receive+0x888>)
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	899b      	ldrh	r3, [r3, #12]
 8010c7a:	b29c      	uxth	r4, r3
 8010c7c:	2001      	movs	r0, #1
 8010c7e:	f7fa fc7d 	bl	800b57c <lwip_htons>
 8010c82:	4603      	mov	r3, r0
 8010c84:	461a      	mov	r2, r3
 8010c86:	4b0c      	ldr	r3, [pc, #48]	; (8010cb8 <tcp_receive+0x888>)
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	4322      	orrs	r2, r4
 8010c8c:	b292      	uxth	r2, r2
 8010c8e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010c90:	4b09      	ldr	r3, [pc, #36]	; (8010cb8 <tcp_receive+0x888>)
 8010c92:	891c      	ldrh	r4, [r3, #8]
 8010c94:	4b08      	ldr	r3, [pc, #32]	; (8010cb8 <tcp_receive+0x888>)
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	899b      	ldrh	r3, [r3, #12]
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fa fc6d 	bl	800b57c <lwip_htons>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	f003 0303 	and.w	r3, r3, #3
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00e      	beq.n	8010ccc <tcp_receive+0x89c>
 8010cae:	2301      	movs	r3, #1
 8010cb0:	e00d      	b.n	8010cce <tcp_receive+0x89e>
 8010cb2:	bf00      	nop
 8010cb4:	20008410 	.word	0x20008410
 8010cb8:	200083f0 	.word	0x200083f0
 8010cbc:	2000841a 	.word	0x2000841a
 8010cc0:	0801ef40 	.word	0x0801ef40
 8010cc4:	0801f2e8 	.word	0x0801f2e8
 8010cc8:	0801ef8c 	.word	0x0801ef8c
 8010ccc:	2300      	movs	r3, #0
 8010cce:	4423      	add	r3, r4
 8010cd0:	b29a      	uxth	r2, r3
 8010cd2:	4b98      	ldr	r3, [pc, #608]	; (8010f34 <tcp_receive+0xb04>)
 8010cd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cd8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010ce0:	6938      	ldr	r0, [r7, #16]
 8010ce2:	f7fd fc6d 	bl	800e5c0 <tcp_seg_free>
            while (next &&
 8010ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d00e      	beq.n	8010d0a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010cec:	4b91      	ldr	r3, [pc, #580]	; (8010f34 <tcp_receive+0xb04>)
 8010cee:	881b      	ldrh	r3, [r3, #0]
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	4b91      	ldr	r3, [pc, #580]	; (8010f38 <tcp_receive+0xb08>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	441a      	add	r2, r3
 8010cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d00:	8909      	ldrh	r1, [r1, #8]
 8010d02:	440b      	add	r3, r1
 8010d04:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	da9a      	bge.n	8010c40 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d059      	beq.n	8010dc4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010d10:	4b88      	ldr	r3, [pc, #544]	; (8010f34 <tcp_receive+0xb04>)
 8010d12:	881b      	ldrh	r3, [r3, #0]
 8010d14:	461a      	mov	r2, r3
 8010d16:	4b88      	ldr	r3, [pc, #544]	; (8010f38 <tcp_receive+0xb08>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	441a      	add	r2, r3
 8010d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	dd4d      	ble.n	8010dc4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	4b81      	ldr	r3, [pc, #516]	; (8010f38 <tcp_receive+0xb08>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	1ad3      	subs	r3, r2, r3
 8010d38:	b29a      	uxth	r2, r3
 8010d3a:	4b80      	ldr	r3, [pc, #512]	; (8010f3c <tcp_receive+0xb0c>)
 8010d3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d3e:	4b7f      	ldr	r3, [pc, #508]	; (8010f3c <tcp_receive+0xb0c>)
 8010d40:	68db      	ldr	r3, [r3, #12]
 8010d42:	899b      	ldrh	r3, [r3, #12]
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fa fc18 	bl	800b57c <lwip_htons>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	f003 0302 	and.w	r3, r3, #2
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d005      	beq.n	8010d64 <tcp_receive+0x934>
                inseg.len -= 1;
 8010d58:	4b78      	ldr	r3, [pc, #480]	; (8010f3c <tcp_receive+0xb0c>)
 8010d5a:	891b      	ldrh	r3, [r3, #8]
 8010d5c:	3b01      	subs	r3, #1
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	4b76      	ldr	r3, [pc, #472]	; (8010f3c <tcp_receive+0xb0c>)
 8010d62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010d64:	4b75      	ldr	r3, [pc, #468]	; (8010f3c <tcp_receive+0xb0c>)
 8010d66:	685a      	ldr	r2, [r3, #4]
 8010d68:	4b74      	ldr	r3, [pc, #464]	; (8010f3c <tcp_receive+0xb0c>)
 8010d6a:	891b      	ldrh	r3, [r3, #8]
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	4610      	mov	r0, r2
 8010d70:	f7fb fe32 	bl	800c9d8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010d74:	4b71      	ldr	r3, [pc, #452]	; (8010f3c <tcp_receive+0xb0c>)
 8010d76:	891c      	ldrh	r4, [r3, #8]
 8010d78:	4b70      	ldr	r3, [pc, #448]	; (8010f3c <tcp_receive+0xb0c>)
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	899b      	ldrh	r3, [r3, #12]
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fa fbfb 	bl	800b57c <lwip_htons>
 8010d86:	4603      	mov	r3, r0
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	f003 0303 	and.w	r3, r3, #3
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d001      	beq.n	8010d96 <tcp_receive+0x966>
 8010d92:	2301      	movs	r3, #1
 8010d94:	e000      	b.n	8010d98 <tcp_receive+0x968>
 8010d96:	2300      	movs	r3, #0
 8010d98:	4423      	add	r3, r4
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	4b65      	ldr	r3, [pc, #404]	; (8010f34 <tcp_receive+0xb04>)
 8010d9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010da0:	4b64      	ldr	r3, [pc, #400]	; (8010f34 <tcp_receive+0xb04>)
 8010da2:	881b      	ldrh	r3, [r3, #0]
 8010da4:	461a      	mov	r2, r3
 8010da6:	4b64      	ldr	r3, [pc, #400]	; (8010f38 <tcp_receive+0xb08>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	441a      	add	r2, r3
 8010dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d006      	beq.n	8010dc4 <tcp_receive+0x994>
 8010db6:	4b62      	ldr	r3, [pc, #392]	; (8010f40 <tcp_receive+0xb10>)
 8010db8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8010dbc:	4961      	ldr	r1, [pc, #388]	; (8010f44 <tcp_receive+0xb14>)
 8010dbe:	4862      	ldr	r0, [pc, #392]	; (8010f48 <tcp_receive+0xb18>)
 8010dc0:	f00b f852 	bl	801be68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dc8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010dca:	4b5a      	ldr	r3, [pc, #360]	; (8010f34 <tcp_receive+0xb04>)
 8010dcc:	881b      	ldrh	r3, [r3, #0]
 8010dce:	461a      	mov	r2, r3
 8010dd0:	4b59      	ldr	r3, [pc, #356]	; (8010f38 <tcp_receive+0xb08>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	441a      	add	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010dde:	4b55      	ldr	r3, [pc, #340]	; (8010f34 <tcp_receive+0xb04>)
 8010de0:	881b      	ldrh	r3, [r3, #0]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d206      	bcs.n	8010df4 <tcp_receive+0x9c4>
 8010de6:	4b56      	ldr	r3, [pc, #344]	; (8010f40 <tcp_receive+0xb10>)
 8010de8:	f240 6207 	movw	r2, #1543	; 0x607
 8010dec:	4957      	ldr	r1, [pc, #348]	; (8010f4c <tcp_receive+0xb1c>)
 8010dee:	4856      	ldr	r0, [pc, #344]	; (8010f48 <tcp_receive+0xb18>)
 8010df0:	f00b f83a 	bl	801be68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010df8:	4b4e      	ldr	r3, [pc, #312]	; (8010f34 <tcp_receive+0xb04>)
 8010dfa:	881b      	ldrh	r3, [r3, #0]
 8010dfc:	1ad3      	subs	r3, r2, r3
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f7fc fda1 	bl	800d94c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010e0a:	4b4c      	ldr	r3, [pc, #304]	; (8010f3c <tcp_receive+0xb0c>)
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	891b      	ldrh	r3, [r3, #8]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d006      	beq.n	8010e22 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010e14:	4b49      	ldr	r3, [pc, #292]	; (8010f3c <tcp_receive+0xb0c>)
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	4a4d      	ldr	r2, [pc, #308]	; (8010f50 <tcp_receive+0xb20>)
 8010e1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010e1c:	4b47      	ldr	r3, [pc, #284]	; (8010f3c <tcp_receive+0xb0c>)
 8010e1e:	2200      	movs	r2, #0
 8010e20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e22:	4b46      	ldr	r3, [pc, #280]	; (8010f3c <tcp_receive+0xb0c>)
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	899b      	ldrh	r3, [r3, #12]
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fa fba6 	bl	800b57c <lwip_htons>
 8010e30:	4603      	mov	r3, r0
 8010e32:	b2db      	uxtb	r3, r3
 8010e34:	f003 0301 	and.w	r3, r3, #1
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	f000 80b8 	beq.w	8010fae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010e3e:	4b45      	ldr	r3, [pc, #276]	; (8010f54 <tcp_receive+0xb24>)
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	f043 0320 	orr.w	r3, r3, #32
 8010e46:	b2da      	uxtb	r2, r3
 8010e48:	4b42      	ldr	r3, [pc, #264]	; (8010f54 <tcp_receive+0xb24>)
 8010e4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010e4c:	e0af      	b.n	8010fae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	4a36      	ldr	r2, [pc, #216]	; (8010f38 <tcp_receive+0xb08>)
 8010e5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	891b      	ldrh	r3, [r3, #8]
 8010e64:	461c      	mov	r4, r3
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	899b      	ldrh	r3, [r3, #12]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fa fb84 	bl	800b57c <lwip_htons>
 8010e74:	4603      	mov	r3, r0
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	f003 0303 	and.w	r3, r3, #3
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d001      	beq.n	8010e84 <tcp_receive+0xa54>
 8010e80:	2301      	movs	r3, #1
 8010e82:	e000      	b.n	8010e86 <tcp_receive+0xa56>
 8010e84:	2300      	movs	r3, #0
 8010e86:	191a      	adds	r2, r3, r4
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8c:	441a      	add	r2, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e96:	461c      	mov	r4, r3
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	891b      	ldrh	r3, [r3, #8]
 8010e9c:	461d      	mov	r5, r3
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	899b      	ldrh	r3, [r3, #12]
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fa fb68 	bl	800b57c <lwip_htons>
 8010eac:	4603      	mov	r3, r0
 8010eae:	b2db      	uxtb	r3, r3
 8010eb0:	f003 0303 	and.w	r3, r3, #3
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d001      	beq.n	8010ebc <tcp_receive+0xa8c>
 8010eb8:	2301      	movs	r3, #1
 8010eba:	e000      	b.n	8010ebe <tcp_receive+0xa8e>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	442b      	add	r3, r5
 8010ec0:	429c      	cmp	r4, r3
 8010ec2:	d206      	bcs.n	8010ed2 <tcp_receive+0xaa2>
 8010ec4:	4b1e      	ldr	r3, [pc, #120]	; (8010f40 <tcp_receive+0xb10>)
 8010ec6:	f240 622c 	movw	r2, #1580	; 0x62c
 8010eca:	4923      	ldr	r1, [pc, #140]	; (8010f58 <tcp_receive+0xb28>)
 8010ecc:	481e      	ldr	r0, [pc, #120]	; (8010f48 <tcp_receive+0xb18>)
 8010ece:	f00a ffcb 	bl	801be68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	891b      	ldrh	r3, [r3, #8]
 8010ed6:	461c      	mov	r4, r3
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	899b      	ldrh	r3, [r3, #12]
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fa fb4b 	bl	800b57c <lwip_htons>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	f003 0303 	and.w	r3, r3, #3
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d001      	beq.n	8010ef6 <tcp_receive+0xac6>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e000      	b.n	8010ef8 <tcp_receive+0xac8>
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	1919      	adds	r1, r3, r4
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010efe:	b28b      	uxth	r3, r1
 8010f00:	1ad3      	subs	r3, r2, r3
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7fc fd1f 	bl	800d94c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	891b      	ldrh	r3, [r3, #8]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d028      	beq.n	8010f6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010f18:	4b0d      	ldr	r3, [pc, #52]	; (8010f50 <tcp_receive+0xb20>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d01d      	beq.n	8010f5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010f20:	4b0b      	ldr	r3, [pc, #44]	; (8010f50 <tcp_receive+0xb20>)
 8010f22:	681a      	ldr	r2, [r3, #0]
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4610      	mov	r0, r2
 8010f2c:	f7fb ffda 	bl	800cee4 <pbuf_cat>
 8010f30:	e018      	b.n	8010f64 <tcp_receive+0xb34>
 8010f32:	bf00      	nop
 8010f34:	2000841a 	.word	0x2000841a
 8010f38:	20008410 	.word	0x20008410
 8010f3c:	200083f0 	.word	0x200083f0
 8010f40:	0801ef40 	.word	0x0801ef40
 8010f44:	0801f320 	.word	0x0801f320
 8010f48:	0801ef8c 	.word	0x0801ef8c
 8010f4c:	0801f35c 	.word	0x0801f35c
 8010f50:	20008420 	.word	0x20008420
 8010f54:	2000841d 	.word	0x2000841d
 8010f58:	0801f37c 	.word	0x0801f37c
            } else {
              recv_data = cseg->p;
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	4a70      	ldr	r2, [pc, #448]	; (8011124 <tcp_receive+0xcf4>)
 8010f62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	2200      	movs	r2, #0
 8010f68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	68db      	ldr	r3, [r3, #12]
 8010f6e:	899b      	ldrh	r3, [r3, #12]
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7fa fb02 	bl	800b57c <lwip_htons>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	f003 0301 	and.w	r3, r3, #1
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d00d      	beq.n	8010fa0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010f84:	4b68      	ldr	r3, [pc, #416]	; (8011128 <tcp_receive+0xcf8>)
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	f043 0320 	orr.w	r3, r3, #32
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	4b66      	ldr	r3, [pc, #408]	; (8011128 <tcp_receive+0xcf8>)
 8010f90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	7d1b      	ldrb	r3, [r3, #20]
 8010f96:	2b04      	cmp	r3, #4
 8010f98:	d102      	bne.n	8010fa0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2207      	movs	r2, #7
 8010f9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010fa8:	68b8      	ldr	r0, [r7, #8]
 8010faa:	f7fd fb09 	bl	800e5c0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d008      	beq.n	8010fc8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	685a      	ldr	r2, [r3, #4]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	f43f af43 	beq.w	8010e4e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	8b5b      	ldrh	r3, [r3, #26]
 8010fcc:	f003 0301 	and.w	r3, r3, #1
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00e      	beq.n	8010ff2 <tcp_receive+0xbc2>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	8b5b      	ldrh	r3, [r3, #26]
 8010fd8:	f023 0301 	bic.w	r3, r3, #1
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	835a      	strh	r2, [r3, #26]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	8b5b      	ldrh	r3, [r3, #26]
 8010fe6:	f043 0302 	orr.w	r3, r3, #2
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010ff0:	e188      	b.n	8011304 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	8b5b      	ldrh	r3, [r3, #26]
 8010ff6:	f043 0301 	orr.w	r3, r3, #1
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011000:	e180      	b.n	8011304 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011006:	2b00      	cmp	r3, #0
 8011008:	d106      	bne.n	8011018 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801100a:	4848      	ldr	r0, [pc, #288]	; (801112c <tcp_receive+0xcfc>)
 801100c:	f7fd faf0 	bl	800e5f0 <tcp_seg_copy>
 8011010:	4602      	mov	r2, r0
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	675a      	str	r2, [r3, #116]	; 0x74
 8011016:	e16d      	b.n	80112f4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011018:	2300      	movs	r3, #0
 801101a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011020:	63bb      	str	r3, [r7, #56]	; 0x38
 8011022:	e157      	b.n	80112d4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	4b41      	ldr	r3, [pc, #260]	; (8011130 <tcp_receive+0xd00>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	429a      	cmp	r2, r3
 8011030:	d11d      	bne.n	801106e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011032:	4b3e      	ldr	r3, [pc, #248]	; (801112c <tcp_receive+0xcfc>)
 8011034:	891a      	ldrh	r2, [r3, #8]
 8011036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011038:	891b      	ldrh	r3, [r3, #8]
 801103a:	429a      	cmp	r2, r3
 801103c:	f240 814f 	bls.w	80112de <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011040:	483a      	ldr	r0, [pc, #232]	; (801112c <tcp_receive+0xcfc>)
 8011042:	f7fd fad5 	bl	800e5f0 <tcp_seg_copy>
 8011046:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	2b00      	cmp	r3, #0
 801104c:	f000 8149 	beq.w	80112e2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011052:	2b00      	cmp	r3, #0
 8011054:	d003      	beq.n	801105e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011058:	697a      	ldr	r2, [r7, #20]
 801105a:	601a      	str	r2, [r3, #0]
 801105c:	e002      	b.n	8011064 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	697a      	ldr	r2, [r7, #20]
 8011062:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011064:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011066:	6978      	ldr	r0, [r7, #20]
 8011068:	f7ff f8de 	bl	8010228 <tcp_oos_insert_segment>
                }
                break;
 801106c:	e139      	b.n	80112e2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011070:	2b00      	cmp	r3, #0
 8011072:	d117      	bne.n	80110a4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011074:	4b2e      	ldr	r3, [pc, #184]	; (8011130 <tcp_receive+0xd00>)
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	1ad3      	subs	r3, r2, r3
 8011080:	2b00      	cmp	r3, #0
 8011082:	da57      	bge.n	8011134 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011084:	4829      	ldr	r0, [pc, #164]	; (801112c <tcp_receive+0xcfc>)
 8011086:	f7fd fab3 	bl	800e5f0 <tcp_seg_copy>
 801108a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801108c:	69bb      	ldr	r3, [r7, #24]
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 8129 	beq.w	80112e6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	69ba      	ldr	r2, [r7, #24]
 8011098:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801109a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801109c:	69b8      	ldr	r0, [r7, #24]
 801109e:	f7ff f8c3 	bl	8010228 <tcp_oos_insert_segment>
                  }
                  break;
 80110a2:	e120      	b.n	80112e6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80110a4:	4b22      	ldr	r3, [pc, #136]	; (8011130 <tcp_receive+0xd00>)
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	1ad3      	subs	r3, r2, r3
 80110b0:	3b01      	subs	r3, #1
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	db3e      	blt.n	8011134 <tcp_receive+0xd04>
 80110b6:	4b1e      	ldr	r3, [pc, #120]	; (8011130 <tcp_receive+0xd00>)
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	3301      	adds	r3, #1
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	dc35      	bgt.n	8011134 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80110c8:	4818      	ldr	r0, [pc, #96]	; (801112c <tcp_receive+0xcfc>)
 80110ca:	f7fd fa91 	bl	800e5f0 <tcp_seg_copy>
 80110ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f000 8109 	beq.w	80112ea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80110d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110e0:	8912      	ldrh	r2, [r2, #8]
 80110e2:	441a      	add	r2, r3
 80110e4:	4b12      	ldr	r3, [pc, #72]	; (8011130 <tcp_receive+0xd00>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	dd12      	ble.n	8011114 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80110ee:	4b10      	ldr	r3, [pc, #64]	; (8011130 <tcp_receive+0xd00>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	1ad3      	subs	r3, r2, r3
 80110fe:	b29a      	uxth	r2, r3
 8011100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011102:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011106:	685a      	ldr	r2, [r3, #4]
 8011108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801110a:	891b      	ldrh	r3, [r3, #8]
 801110c:	4619      	mov	r1, r3
 801110e:	4610      	mov	r0, r2
 8011110:	f7fb fc62 	bl	800c9d8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011116:	69fa      	ldr	r2, [r7, #28]
 8011118:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801111a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801111c:	69f8      	ldr	r0, [r7, #28]
 801111e:	f7ff f883 	bl	8010228 <tcp_oos_insert_segment>
                  }
                  break;
 8011122:	e0e2      	b.n	80112ea <tcp_receive+0xeba>
 8011124:	20008420 	.word	0x20008420
 8011128:	2000841d 	.word	0x2000841d
 801112c:	200083f0 	.word	0x200083f0
 8011130:	20008410 	.word	0x20008410
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011136:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	f040 80c6 	bne.w	80112ce <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011142:	4b80      	ldr	r3, [pc, #512]	; (8011344 <tcp_receive+0xf14>)
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801114e:	2b00      	cmp	r3, #0
 8011150:	f340 80bd 	ble.w	80112ce <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	899b      	ldrh	r3, [r3, #12]
 801115a:	b29b      	uxth	r3, r3
 801115c:	4618      	mov	r0, r3
 801115e:	f7fa fa0d 	bl	800b57c <lwip_htons>
 8011162:	4603      	mov	r3, r0
 8011164:	b2db      	uxtb	r3, r3
 8011166:	f003 0301 	and.w	r3, r3, #1
 801116a:	2b00      	cmp	r3, #0
 801116c:	f040 80bf 	bne.w	80112ee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011170:	4875      	ldr	r0, [pc, #468]	; (8011348 <tcp_receive+0xf18>)
 8011172:	f7fd fa3d 	bl	800e5f0 <tcp_seg_copy>
 8011176:	4602      	mov	r2, r0
 8011178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	f000 80b6 	beq.w	80112f2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801118e:	8912      	ldrh	r2, [r2, #8]
 8011190:	441a      	add	r2, r3
 8011192:	4b6c      	ldr	r3, [pc, #432]	; (8011344 <tcp_receive+0xf14>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	1ad3      	subs	r3, r2, r3
 8011198:	2b00      	cmp	r3, #0
 801119a:	dd12      	ble.n	80111c2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801119c:	4b69      	ldr	r3, [pc, #420]	; (8011344 <tcp_receive+0xf14>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	1ad3      	subs	r3, r2, r3
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80111b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b4:	685a      	ldr	r2, [r3, #4]
 80111b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b8:	891b      	ldrh	r3, [r3, #8]
 80111ba:	4619      	mov	r1, r3
 80111bc:	4610      	mov	r0, r2
 80111be:	f7fb fc0b 	bl	800c9d8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80111c2:	4b62      	ldr	r3, [pc, #392]	; (801134c <tcp_receive+0xf1c>)
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	461a      	mov	r2, r3
 80111c8:	4b5e      	ldr	r3, [pc, #376]	; (8011344 <tcp_receive+0xf14>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	441a      	add	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d2:	6879      	ldr	r1, [r7, #4]
 80111d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111d6:	440b      	add	r3, r1
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f340 8089 	ble.w	80112f2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80111e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	899b      	ldrh	r3, [r3, #12]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fa f9c6 	bl	800b57c <lwip_htons>
 80111f0:	4603      	mov	r3, r0
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	f003 0301 	and.w	r3, r3, #1
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d022      	beq.n	8011242 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80111fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	899b      	ldrh	r3, [r3, #12]
 8011204:	b29b      	uxth	r3, r3
 8011206:	b21b      	sxth	r3, r3
 8011208:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801120c:	b21c      	sxth	r4, r3
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	899b      	ldrh	r3, [r3, #12]
 8011216:	b29b      	uxth	r3, r3
 8011218:	4618      	mov	r0, r3
 801121a:	f7fa f9af 	bl	800b57c <lwip_htons>
 801121e:	4603      	mov	r3, r0
 8011220:	b2db      	uxtb	r3, r3
 8011222:	b29b      	uxth	r3, r3
 8011224:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011228:	b29b      	uxth	r3, r3
 801122a:	4618      	mov	r0, r3
 801122c:	f7fa f9a6 	bl	800b57c <lwip_htons>
 8011230:	4603      	mov	r3, r0
 8011232:	b21b      	sxth	r3, r3
 8011234:	4323      	orrs	r3, r4
 8011236:	b21a      	sxth	r2, r3
 8011238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	b292      	uxth	r2, r2
 8011240:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011246:	b29a      	uxth	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801124c:	4413      	add	r3, r2
 801124e:	b299      	uxth	r1, r3
 8011250:	4b3c      	ldr	r3, [pc, #240]	; (8011344 <tcp_receive+0xf14>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	b29a      	uxth	r2, r3
 8011256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	1a8a      	subs	r2, r1, r2
 801125c:	b292      	uxth	r2, r2
 801125e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	685a      	ldr	r2, [r3, #4]
 8011266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	891b      	ldrh	r3, [r3, #8]
 801126c:	4619      	mov	r1, r3
 801126e:	4610      	mov	r0, r2
 8011270:	f7fb fbb2 	bl	800c9d8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	891c      	ldrh	r4, [r3, #8]
 801127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	899b      	ldrh	r3, [r3, #12]
 8011282:	b29b      	uxth	r3, r3
 8011284:	4618      	mov	r0, r3
 8011286:	f7fa f979 	bl	800b57c <lwip_htons>
 801128a:	4603      	mov	r3, r0
 801128c:	b2db      	uxtb	r3, r3
 801128e:	f003 0303 	and.w	r3, r3, #3
 8011292:	2b00      	cmp	r3, #0
 8011294:	d001      	beq.n	801129a <tcp_receive+0xe6a>
 8011296:	2301      	movs	r3, #1
 8011298:	e000      	b.n	801129c <tcp_receive+0xe6c>
 801129a:	2300      	movs	r3, #0
 801129c:	4423      	add	r3, r4
 801129e:	b29a      	uxth	r2, r3
 80112a0:	4b2a      	ldr	r3, [pc, #168]	; (801134c <tcp_receive+0xf1c>)
 80112a2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80112a4:	4b29      	ldr	r3, [pc, #164]	; (801134c <tcp_receive+0xf1c>)
 80112a6:	881b      	ldrh	r3, [r3, #0]
 80112a8:	461a      	mov	r2, r3
 80112aa:	4b26      	ldr	r3, [pc, #152]	; (8011344 <tcp_receive+0xf14>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	441a      	add	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b4:	6879      	ldr	r1, [r7, #4]
 80112b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112b8:	440b      	add	r3, r1
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d019      	beq.n	80112f2 <tcp_receive+0xec2>
 80112be:	4b24      	ldr	r3, [pc, #144]	; (8011350 <tcp_receive+0xf20>)
 80112c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80112c4:	4923      	ldr	r1, [pc, #140]	; (8011354 <tcp_receive+0xf24>)
 80112c6:	4824      	ldr	r0, [pc, #144]	; (8011358 <tcp_receive+0xf28>)
 80112c8:	f00a fdce 	bl	801be68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80112cc:	e011      	b.n	80112f2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80112ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80112d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	f47f aea4 	bne.w	8011024 <tcp_receive+0xbf4>
 80112dc:	e00a      	b.n	80112f4 <tcp_receive+0xec4>
                break;
 80112de:	bf00      	nop
 80112e0:	e008      	b.n	80112f4 <tcp_receive+0xec4>
                break;
 80112e2:	bf00      	nop
 80112e4:	e006      	b.n	80112f4 <tcp_receive+0xec4>
                  break;
 80112e6:	bf00      	nop
 80112e8:	e004      	b.n	80112f4 <tcp_receive+0xec4>
                  break;
 80112ea:	bf00      	nop
 80112ec:	e002      	b.n	80112f4 <tcp_receive+0xec4>
                  break;
 80112ee:	bf00      	nop
 80112f0:	e000      	b.n	80112f4 <tcp_receive+0xec4>
                break;
 80112f2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f001 fe9b 	bl	8013030 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80112fa:	e003      	b.n	8011304 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f001 fe97 	bl	8013030 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011302:	e01a      	b.n	801133a <tcp_receive+0xf0a>
 8011304:	e019      	b.n	801133a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011306:	4b0f      	ldr	r3, [pc, #60]	; (8011344 <tcp_receive+0xf14>)
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	2b00      	cmp	r3, #0
 8011312:	db0a      	blt.n	801132a <tcp_receive+0xefa>
 8011314:	4b0b      	ldr	r3, [pc, #44]	; (8011344 <tcp_receive+0xf14>)
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011320:	440b      	add	r3, r1
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	3301      	adds	r3, #1
 8011326:	2b00      	cmp	r3, #0
 8011328:	dd07      	ble.n	801133a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	8b5b      	ldrh	r3, [r3, #26]
 801132e:	f043 0302 	orr.w	r3, r3, #2
 8011332:	b29a      	uxth	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011338:	e7ff      	b.n	801133a <tcp_receive+0xf0a>
 801133a:	bf00      	nop
 801133c:	3750      	adds	r7, #80	; 0x50
 801133e:	46bd      	mov	sp, r7
 8011340:	bdb0      	pop	{r4, r5, r7, pc}
 8011342:	bf00      	nop
 8011344:	20008410 	.word	0x20008410
 8011348:	200083f0 	.word	0x200083f0
 801134c:	2000841a 	.word	0x2000841a
 8011350:	0801ef40 	.word	0x0801ef40
 8011354:	0801f2e8 	.word	0x0801f2e8
 8011358:	0801ef8c 	.word	0x0801ef8c

0801135c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801135c:	b480      	push	{r7}
 801135e:	b083      	sub	sp, #12
 8011360:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011362:	4b15      	ldr	r3, [pc, #84]	; (80113b8 <tcp_get_next_optbyte+0x5c>)
 8011364:	881b      	ldrh	r3, [r3, #0]
 8011366:	1c5a      	adds	r2, r3, #1
 8011368:	b291      	uxth	r1, r2
 801136a:	4a13      	ldr	r2, [pc, #76]	; (80113b8 <tcp_get_next_optbyte+0x5c>)
 801136c:	8011      	strh	r1, [r2, #0]
 801136e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011370:	4b12      	ldr	r3, [pc, #72]	; (80113bc <tcp_get_next_optbyte+0x60>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d004      	beq.n	8011382 <tcp_get_next_optbyte+0x26>
 8011378:	4b11      	ldr	r3, [pc, #68]	; (80113c0 <tcp_get_next_optbyte+0x64>)
 801137a:	881b      	ldrh	r3, [r3, #0]
 801137c:	88fa      	ldrh	r2, [r7, #6]
 801137e:	429a      	cmp	r2, r3
 8011380:	d208      	bcs.n	8011394 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011382:	4b10      	ldr	r3, [pc, #64]	; (80113c4 <tcp_get_next_optbyte+0x68>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	3314      	adds	r3, #20
 8011388:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801138a:	88fb      	ldrh	r3, [r7, #6]
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	4413      	add	r3, r2
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	e00b      	b.n	80113ac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011394:	88fb      	ldrh	r3, [r7, #6]
 8011396:	b2da      	uxtb	r2, r3
 8011398:	4b09      	ldr	r3, [pc, #36]	; (80113c0 <tcp_get_next_optbyte+0x64>)
 801139a:	881b      	ldrh	r3, [r3, #0]
 801139c:	b2db      	uxtb	r3, r3
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80113a2:	4b06      	ldr	r3, [pc, #24]	; (80113bc <tcp_get_next_optbyte+0x60>)
 80113a4:	681a      	ldr	r2, [r3, #0]
 80113a6:	797b      	ldrb	r3, [r7, #5]
 80113a8:	4413      	add	r3, r2
 80113aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	370c      	adds	r7, #12
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr
 80113b8:	2000840c 	.word	0x2000840c
 80113bc:	20008408 	.word	0x20008408
 80113c0:	20008406 	.word	0x20008406
 80113c4:	20008400 	.word	0x20008400

080113c8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b084      	sub	sp, #16
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d106      	bne.n	80113e4 <tcp_parseopt+0x1c>
 80113d6:	4b31      	ldr	r3, [pc, #196]	; (801149c <tcp_parseopt+0xd4>)
 80113d8:	f240 727d 	movw	r2, #1917	; 0x77d
 80113dc:	4930      	ldr	r1, [pc, #192]	; (80114a0 <tcp_parseopt+0xd8>)
 80113de:	4831      	ldr	r0, [pc, #196]	; (80114a4 <tcp_parseopt+0xdc>)
 80113e0:	f00a fd42 	bl	801be68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80113e4:	4b30      	ldr	r3, [pc, #192]	; (80114a8 <tcp_parseopt+0xe0>)
 80113e6:	881b      	ldrh	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d053      	beq.n	8011494 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80113ec:	4b2f      	ldr	r3, [pc, #188]	; (80114ac <tcp_parseopt+0xe4>)
 80113ee:	2200      	movs	r2, #0
 80113f0:	801a      	strh	r2, [r3, #0]
 80113f2:	e043      	b.n	801147c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80113f4:	f7ff ffb2 	bl	801135c <tcp_get_next_optbyte>
 80113f8:	4603      	mov	r3, r0
 80113fa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d03c      	beq.n	801147c <tcp_parseopt+0xb4>
 8011402:	2b02      	cmp	r3, #2
 8011404:	d002      	beq.n	801140c <tcp_parseopt+0x44>
 8011406:	2b00      	cmp	r3, #0
 8011408:	d03f      	beq.n	801148a <tcp_parseopt+0xc2>
 801140a:	e026      	b.n	801145a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801140c:	f7ff ffa6 	bl	801135c <tcp_get_next_optbyte>
 8011410:	4603      	mov	r3, r0
 8011412:	2b04      	cmp	r3, #4
 8011414:	d13b      	bne.n	801148e <tcp_parseopt+0xc6>
 8011416:	4b25      	ldr	r3, [pc, #148]	; (80114ac <tcp_parseopt+0xe4>)
 8011418:	881b      	ldrh	r3, [r3, #0]
 801141a:	3302      	adds	r3, #2
 801141c:	4a22      	ldr	r2, [pc, #136]	; (80114a8 <tcp_parseopt+0xe0>)
 801141e:	8812      	ldrh	r2, [r2, #0]
 8011420:	4293      	cmp	r3, r2
 8011422:	dc34      	bgt.n	801148e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011424:	f7ff ff9a 	bl	801135c <tcp_get_next_optbyte>
 8011428:	4603      	mov	r3, r0
 801142a:	b29b      	uxth	r3, r3
 801142c:	021b      	lsls	r3, r3, #8
 801142e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011430:	f7ff ff94 	bl	801135c <tcp_get_next_optbyte>
 8011434:	4603      	mov	r3, r0
 8011436:	b29a      	uxth	r2, r3
 8011438:	89bb      	ldrh	r3, [r7, #12]
 801143a:	4313      	orrs	r3, r2
 801143c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801143e:	89bb      	ldrh	r3, [r7, #12]
 8011440:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011444:	d804      	bhi.n	8011450 <tcp_parseopt+0x88>
 8011446:	89bb      	ldrh	r3, [r7, #12]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d001      	beq.n	8011450 <tcp_parseopt+0x88>
 801144c:	89ba      	ldrh	r2, [r7, #12]
 801144e:	e001      	b.n	8011454 <tcp_parseopt+0x8c>
 8011450:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011458:	e010      	b.n	801147c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801145a:	f7ff ff7f 	bl	801135c <tcp_get_next_optbyte>
 801145e:	4603      	mov	r3, r0
 8011460:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011462:	7afb      	ldrb	r3, [r7, #11]
 8011464:	2b01      	cmp	r3, #1
 8011466:	d914      	bls.n	8011492 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011468:	7afb      	ldrb	r3, [r7, #11]
 801146a:	b29a      	uxth	r2, r3
 801146c:	4b0f      	ldr	r3, [pc, #60]	; (80114ac <tcp_parseopt+0xe4>)
 801146e:	881b      	ldrh	r3, [r3, #0]
 8011470:	4413      	add	r3, r2
 8011472:	b29b      	uxth	r3, r3
 8011474:	3b02      	subs	r3, #2
 8011476:	b29a      	uxth	r2, r3
 8011478:	4b0c      	ldr	r3, [pc, #48]	; (80114ac <tcp_parseopt+0xe4>)
 801147a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801147c:	4b0b      	ldr	r3, [pc, #44]	; (80114ac <tcp_parseopt+0xe4>)
 801147e:	881a      	ldrh	r2, [r3, #0]
 8011480:	4b09      	ldr	r3, [pc, #36]	; (80114a8 <tcp_parseopt+0xe0>)
 8011482:	881b      	ldrh	r3, [r3, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d3b5      	bcc.n	80113f4 <tcp_parseopt+0x2c>
 8011488:	e004      	b.n	8011494 <tcp_parseopt+0xcc>
          return;
 801148a:	bf00      	nop
 801148c:	e002      	b.n	8011494 <tcp_parseopt+0xcc>
            return;
 801148e:	bf00      	nop
 8011490:	e000      	b.n	8011494 <tcp_parseopt+0xcc>
            return;
 8011492:	bf00      	nop
      }
    }
  }
}
 8011494:	3710      	adds	r7, #16
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	0801ef40 	.word	0x0801ef40
 80114a0:	0801f3a4 	.word	0x0801f3a4
 80114a4:	0801ef8c 	.word	0x0801ef8c
 80114a8:	20008404 	.word	0x20008404
 80114ac:	2000840c 	.word	0x2000840c

080114b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80114b0:	b480      	push	{r7}
 80114b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80114b4:	4b05      	ldr	r3, [pc, #20]	; (80114cc <tcp_trigger_input_pcb_close+0x1c>)
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	f043 0310 	orr.w	r3, r3, #16
 80114bc:	b2da      	uxtb	r2, r3
 80114be:	4b03      	ldr	r3, [pc, #12]	; (80114cc <tcp_trigger_input_pcb_close+0x1c>)
 80114c0:	701a      	strb	r2, [r3, #0]
}
 80114c2:	bf00      	nop
 80114c4:	46bd      	mov	sp, r7
 80114c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ca:	4770      	bx	lr
 80114cc:	2000841d 	.word	0x2000841d

080114d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d00a      	beq.n	80114f8 <tcp_route+0x28>
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	7a1b      	ldrb	r3, [r3, #8]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d006      	beq.n	80114f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	7a1b      	ldrb	r3, [r3, #8]
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fb f86e 	bl	800c5d0 <netif_get_by_index>
 80114f4:	4603      	mov	r3, r0
 80114f6:	e003      	b.n	8011500 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f005 fd81 	bl	8017000 <ip4_route>
 80114fe:	4603      	mov	r3, r0
  }
}
 8011500:	4618      	mov	r0, r3
 8011502:	3710      	adds	r7, #16
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011508:	b590      	push	{r4, r7, lr}
 801150a:	b087      	sub	sp, #28
 801150c:	af00      	add	r7, sp, #0
 801150e:	60f8      	str	r0, [r7, #12]
 8011510:	60b9      	str	r1, [r7, #8]
 8011512:	603b      	str	r3, [r7, #0]
 8011514:	4613      	mov	r3, r2
 8011516:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d105      	bne.n	801152a <tcp_create_segment+0x22>
 801151e:	4b44      	ldr	r3, [pc, #272]	; (8011630 <tcp_create_segment+0x128>)
 8011520:	22a3      	movs	r2, #163	; 0xa3
 8011522:	4944      	ldr	r1, [pc, #272]	; (8011634 <tcp_create_segment+0x12c>)
 8011524:	4844      	ldr	r0, [pc, #272]	; (8011638 <tcp_create_segment+0x130>)
 8011526:	f00a fc9f 	bl	801be68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d105      	bne.n	801153c <tcp_create_segment+0x34>
 8011530:	4b3f      	ldr	r3, [pc, #252]	; (8011630 <tcp_create_segment+0x128>)
 8011532:	22a4      	movs	r2, #164	; 0xa4
 8011534:	4941      	ldr	r1, [pc, #260]	; (801163c <tcp_create_segment+0x134>)
 8011536:	4840      	ldr	r0, [pc, #256]	; (8011638 <tcp_create_segment+0x130>)
 8011538:	f00a fc96 	bl	801be68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801153c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	b2db      	uxtb	r3, r3
 8011544:	f003 0304 	and.w	r3, r3, #4
 8011548:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801154a:	2003      	movs	r0, #3
 801154c:	f7fa fccc 	bl	800bee8 <memp_malloc>
 8011550:	6138      	str	r0, [r7, #16]
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d104      	bne.n	8011562 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011558:	68b8      	ldr	r0, [r7, #8]
 801155a:	f7fb fbf5 	bl	800cd48 <pbuf_free>
    return NULL;
 801155e:	2300      	movs	r3, #0
 8011560:	e061      	b.n	8011626 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011568:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	2200      	movs	r2, #0
 801156e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	68ba      	ldr	r2, [r7, #8]
 8011574:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	891a      	ldrh	r2, [r3, #8]
 801157a:	7dfb      	ldrb	r3, [r7, #23]
 801157c:	b29b      	uxth	r3, r3
 801157e:	429a      	cmp	r2, r3
 8011580:	d205      	bcs.n	801158e <tcp_create_segment+0x86>
 8011582:	4b2b      	ldr	r3, [pc, #172]	; (8011630 <tcp_create_segment+0x128>)
 8011584:	22b0      	movs	r2, #176	; 0xb0
 8011586:	492e      	ldr	r1, [pc, #184]	; (8011640 <tcp_create_segment+0x138>)
 8011588:	482b      	ldr	r0, [pc, #172]	; (8011638 <tcp_create_segment+0x130>)
 801158a:	f00a fc6d 	bl	801be68 <iprintf>
  seg->len = p->tot_len - optlen;
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	891a      	ldrh	r2, [r3, #8]
 8011592:	7dfb      	ldrb	r3, [r7, #23]
 8011594:	b29b      	uxth	r3, r3
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	b29a      	uxth	r2, r3
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801159e:	2114      	movs	r1, #20
 80115a0:	68b8      	ldr	r0, [r7, #8]
 80115a2:	f7fb fb09 	bl	800cbb8 <pbuf_add_header>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d004      	beq.n	80115b6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80115ac:	6938      	ldr	r0, [r7, #16]
 80115ae:	f7fd f807 	bl	800e5c0 <tcp_seg_free>
    return NULL;
 80115b2:	2300      	movs	r3, #0
 80115b4:	e037      	b.n	8011626 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	685b      	ldr	r3, [r3, #4]
 80115ba:	685a      	ldr	r2, [r3, #4]
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	8ada      	ldrh	r2, [r3, #22]
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	68dc      	ldr	r4, [r3, #12]
 80115c8:	4610      	mov	r0, r2
 80115ca:	f7f9 ffd7 	bl	800b57c <lwip_htons>
 80115ce:	4603      	mov	r3, r0
 80115d0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	8b1a      	ldrh	r2, [r3, #24]
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	68dc      	ldr	r4, [r3, #12]
 80115da:	4610      	mov	r0, r2
 80115dc:	f7f9 ffce 	bl	800b57c <lwip_htons>
 80115e0:	4603      	mov	r3, r0
 80115e2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	68dc      	ldr	r4, [r3, #12]
 80115e8:	6838      	ldr	r0, [r7, #0]
 80115ea:	f7f9 ffdc 	bl	800b5a6 <lwip_htonl>
 80115ee:	4603      	mov	r3, r0
 80115f0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80115f2:	7dfb      	ldrb	r3, [r7, #23]
 80115f4:	089b      	lsrs	r3, r3, #2
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	3305      	adds	r3, #5
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	031b      	lsls	r3, r3, #12
 8011600:	b29a      	uxth	r2, r3
 8011602:	79fb      	ldrb	r3, [r7, #7]
 8011604:	b29b      	uxth	r3, r3
 8011606:	4313      	orrs	r3, r2
 8011608:	b29a      	uxth	r2, r3
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	68dc      	ldr	r4, [r3, #12]
 801160e:	4610      	mov	r0, r2
 8011610:	f7f9 ffb4 	bl	800b57c <lwip_htons>
 8011614:	4603      	mov	r3, r0
 8011616:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	68db      	ldr	r3, [r3, #12]
 801161c:	2200      	movs	r2, #0
 801161e:	749a      	strb	r2, [r3, #18]
 8011620:	2200      	movs	r2, #0
 8011622:	74da      	strb	r2, [r3, #19]
  return seg;
 8011624:	693b      	ldr	r3, [r7, #16]
}
 8011626:	4618      	mov	r0, r3
 8011628:	371c      	adds	r7, #28
 801162a:	46bd      	mov	sp, r7
 801162c:	bd90      	pop	{r4, r7, pc}
 801162e:	bf00      	nop
 8011630:	0801f3c0 	.word	0x0801f3c0
 8011634:	0801f3f4 	.word	0x0801f3f4
 8011638:	0801f414 	.word	0x0801f414
 801163c:	0801f43c 	.word	0x0801f43c
 8011640:	0801f460 	.word	0x0801f460

08011644 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b086      	sub	sp, #24
 8011648:	af00      	add	r7, sp, #0
 801164a:	607b      	str	r3, [r7, #4]
 801164c:	4603      	mov	r3, r0
 801164e:	73fb      	strb	r3, [r7, #15]
 8011650:	460b      	mov	r3, r1
 8011652:	81bb      	strh	r3, [r7, #12]
 8011654:	4613      	mov	r3, r2
 8011656:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011658:	89bb      	ldrh	r3, [r7, #12]
 801165a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d105      	bne.n	801166e <tcp_pbuf_prealloc+0x2a>
 8011662:	4b30      	ldr	r3, [pc, #192]	; (8011724 <tcp_pbuf_prealloc+0xe0>)
 8011664:	22e8      	movs	r2, #232	; 0xe8
 8011666:	4930      	ldr	r1, [pc, #192]	; (8011728 <tcp_pbuf_prealloc+0xe4>)
 8011668:	4830      	ldr	r0, [pc, #192]	; (801172c <tcp_pbuf_prealloc+0xe8>)
 801166a:	f00a fbfd 	bl	801be68 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801166e:	6a3b      	ldr	r3, [r7, #32]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d105      	bne.n	8011680 <tcp_pbuf_prealloc+0x3c>
 8011674:	4b2b      	ldr	r3, [pc, #172]	; (8011724 <tcp_pbuf_prealloc+0xe0>)
 8011676:	22e9      	movs	r2, #233	; 0xe9
 8011678:	492d      	ldr	r1, [pc, #180]	; (8011730 <tcp_pbuf_prealloc+0xec>)
 801167a:	482c      	ldr	r0, [pc, #176]	; (801172c <tcp_pbuf_prealloc+0xe8>)
 801167c:	f00a fbf4 	bl	801be68 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011680:	89ba      	ldrh	r2, [r7, #12]
 8011682:	897b      	ldrh	r3, [r7, #10]
 8011684:	429a      	cmp	r2, r3
 8011686:	d221      	bcs.n	80116cc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011688:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801168c:	f003 0302 	and.w	r3, r3, #2
 8011690:	2b00      	cmp	r3, #0
 8011692:	d111      	bne.n	80116b8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	8b5b      	ldrh	r3, [r3, #26]
 8011698:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801169c:	2b00      	cmp	r3, #0
 801169e:	d115      	bne.n	80116cc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80116a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d007      	beq.n	80116b8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80116a8:	6a3b      	ldr	r3, [r7, #32]
 80116aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d103      	bne.n	80116b8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80116b0:	6a3b      	ldr	r3, [r7, #32]
 80116b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d009      	beq.n	80116cc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80116b8:	89bb      	ldrh	r3, [r7, #12]
 80116ba:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80116be:	f023 0203 	bic.w	r2, r3, #3
 80116c2:	897b      	ldrh	r3, [r7, #10]
 80116c4:	4293      	cmp	r3, r2
 80116c6:	bf28      	it	cs
 80116c8:	4613      	movcs	r3, r2
 80116ca:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80116cc:	8af9      	ldrh	r1, [r7, #22]
 80116ce:	7bfb      	ldrb	r3, [r7, #15]
 80116d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fb f825 	bl	800c724 <pbuf_alloc>
 80116da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d101      	bne.n	80116e6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80116e2:	2300      	movs	r3, #0
 80116e4:	e019      	b.n	801171a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d006      	beq.n	80116fc <tcp_pbuf_prealloc+0xb8>
 80116ee:	4b0d      	ldr	r3, [pc, #52]	; (8011724 <tcp_pbuf_prealloc+0xe0>)
 80116f0:	f240 120b 	movw	r2, #267	; 0x10b
 80116f4:	490f      	ldr	r1, [pc, #60]	; (8011734 <tcp_pbuf_prealloc+0xf0>)
 80116f6:	480d      	ldr	r0, [pc, #52]	; (801172c <tcp_pbuf_prealloc+0xe8>)
 80116f8:	f00a fbb6 	bl	801be68 <iprintf>
  *oversize = p->len - length;
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	895a      	ldrh	r2, [r3, #10]
 8011700:	89bb      	ldrh	r3, [r7, #12]
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	b29a      	uxth	r2, r3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	89ba      	ldrh	r2, [r7, #12]
 801170e:	811a      	strh	r2, [r3, #8]
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	891a      	ldrh	r2, [r3, #8]
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	815a      	strh	r2, [r3, #10]
  return p;
 8011718:	693b      	ldr	r3, [r7, #16]
}
 801171a:	4618      	mov	r0, r3
 801171c:	3718      	adds	r7, #24
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
 8011722:	bf00      	nop
 8011724:	0801f3c0 	.word	0x0801f3c0
 8011728:	0801f478 	.word	0x0801f478
 801172c:	0801f414 	.word	0x0801f414
 8011730:	0801f49c 	.word	0x0801f49c
 8011734:	0801f4bc 	.word	0x0801f4bc

08011738 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	460b      	mov	r3, r1
 8011742:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d106      	bne.n	8011758 <tcp_write_checks+0x20>
 801174a:	4b33      	ldr	r3, [pc, #204]	; (8011818 <tcp_write_checks+0xe0>)
 801174c:	f240 1233 	movw	r2, #307	; 0x133
 8011750:	4932      	ldr	r1, [pc, #200]	; (801181c <tcp_write_checks+0xe4>)
 8011752:	4833      	ldr	r0, [pc, #204]	; (8011820 <tcp_write_checks+0xe8>)
 8011754:	f00a fb88 	bl	801be68 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	7d1b      	ldrb	r3, [r3, #20]
 801175c:	2b04      	cmp	r3, #4
 801175e:	d00e      	beq.n	801177e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011764:	2b07      	cmp	r3, #7
 8011766:	d00a      	beq.n	801177e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801176c:	2b02      	cmp	r3, #2
 801176e:	d006      	beq.n	801177e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011774:	2b03      	cmp	r3, #3
 8011776:	d002      	beq.n	801177e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011778:	f06f 030a 	mvn.w	r3, #10
 801177c:	e048      	b.n	8011810 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801177e:	887b      	ldrh	r3, [r7, #2]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d101      	bne.n	8011788 <tcp_write_checks+0x50>
    return ERR_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	e043      	b.n	8011810 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801178e:	887a      	ldrh	r2, [r7, #2]
 8011790:	429a      	cmp	r2, r3
 8011792:	d909      	bls.n	80117a8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	8b5b      	ldrh	r3, [r3, #26]
 8011798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801179c:	b29a      	uxth	r2, r3
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80117a2:	f04f 33ff 	mov.w	r3, #4294967295
 80117a6:	e033      	b.n	8011810 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117ae:	2b08      	cmp	r3, #8
 80117b0:	d909      	bls.n	80117c6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	8b5b      	ldrh	r3, [r3, #26]
 80117b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80117c0:	f04f 33ff 	mov.w	r3, #4294967295
 80117c4:	e024      	b.n	8011810 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d00f      	beq.n	80117f0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d11a      	bne.n	801180e <tcp_write_checks+0xd6>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d116      	bne.n	801180e <tcp_write_checks+0xd6>
 80117e0:	4b0d      	ldr	r3, [pc, #52]	; (8011818 <tcp_write_checks+0xe0>)
 80117e2:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80117e6:	490f      	ldr	r1, [pc, #60]	; (8011824 <tcp_write_checks+0xec>)
 80117e8:	480d      	ldr	r0, [pc, #52]	; (8011820 <tcp_write_checks+0xe8>)
 80117ea:	f00a fb3d 	bl	801be68 <iprintf>
 80117ee:	e00e      	b.n	801180e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d103      	bne.n	8011800 <tcp_write_checks+0xc8>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d006      	beq.n	801180e <tcp_write_checks+0xd6>
 8011800:	4b05      	ldr	r3, [pc, #20]	; (8011818 <tcp_write_checks+0xe0>)
 8011802:	f240 1259 	movw	r2, #345	; 0x159
 8011806:	4908      	ldr	r1, [pc, #32]	; (8011828 <tcp_write_checks+0xf0>)
 8011808:	4805      	ldr	r0, [pc, #20]	; (8011820 <tcp_write_checks+0xe8>)
 801180a:	f00a fb2d 	bl	801be68 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801180e:	2300      	movs	r3, #0
}
 8011810:	4618      	mov	r0, r3
 8011812:	3708      	adds	r7, #8
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	0801f3c0 	.word	0x0801f3c0
 801181c:	0801f4d0 	.word	0x0801f4d0
 8011820:	0801f414 	.word	0x0801f414
 8011824:	0801f4f0 	.word	0x0801f4f0
 8011828:	0801f52c 	.word	0x0801f52c

0801182c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801182c:	b590      	push	{r4, r7, lr}
 801182e:	b09b      	sub	sp, #108	; 0x6c
 8011830:	af04      	add	r7, sp, #16
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	4611      	mov	r1, r2
 8011838:	461a      	mov	r2, r3
 801183a:	460b      	mov	r3, r1
 801183c:	80fb      	strh	r3, [r7, #6]
 801183e:	4613      	mov	r3, r2
 8011840:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011842:	2300      	movs	r3, #0
 8011844:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011846:	2300      	movs	r3, #0
 8011848:	653b      	str	r3, [r7, #80]	; 0x50
 801184a:	2300      	movs	r3, #0
 801184c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801184e:	2300      	movs	r3, #0
 8011850:	64bb      	str	r3, [r7, #72]	; 0x48
 8011852:	2300      	movs	r3, #0
 8011854:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011856:	2300      	movs	r3, #0
 8011858:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801185c:	2300      	movs	r3, #0
 801185e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011866:	2300      	movs	r3, #0
 8011868:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801186a:	2300      	movs	r3, #0
 801186c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d109      	bne.n	8011888 <tcp_write+0x5c>
 8011874:	4ba5      	ldr	r3, [pc, #660]	; (8011b0c <tcp_write+0x2e0>)
 8011876:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801187a:	49a5      	ldr	r1, [pc, #660]	; (8011b10 <tcp_write+0x2e4>)
 801187c:	48a5      	ldr	r0, [pc, #660]	; (8011b14 <tcp_write+0x2e8>)
 801187e:	f00a faf3 	bl	801be68 <iprintf>
 8011882:	f06f 030f 	mvn.w	r3, #15
 8011886:	e32c      	b.n	8011ee2 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801188e:	085b      	lsrs	r3, r3, #1
 8011890:	b29a      	uxth	r2, r3
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011896:	4293      	cmp	r3, r2
 8011898:	bf28      	it	cs
 801189a:	4613      	movcs	r3, r2
 801189c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801189e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d102      	bne.n	80118aa <tcp_write+0x7e>
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a8:	e000      	b.n	80118ac <tcp_write+0x80>
 80118aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80118ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d109      	bne.n	80118c8 <tcp_write+0x9c>
 80118b4:	4b95      	ldr	r3, [pc, #596]	; (8011b0c <tcp_write+0x2e0>)
 80118b6:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80118ba:	4997      	ldr	r1, [pc, #604]	; (8011b18 <tcp_write+0x2ec>)
 80118bc:	4895      	ldr	r0, [pc, #596]	; (8011b14 <tcp_write+0x2e8>)
 80118be:	f00a fad3 	bl	801be68 <iprintf>
 80118c2:	f06f 030f 	mvn.w	r3, #15
 80118c6:	e30c      	b.n	8011ee2 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80118c8:	88fb      	ldrh	r3, [r7, #6]
 80118ca:	4619      	mov	r1, r3
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f7ff ff33 	bl	8011738 <tcp_write_checks>
 80118d2:	4603      	mov	r3, r0
 80118d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80118d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d002      	beq.n	80118e6 <tcp_write+0xba>
    return err;
 80118e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80118e4:	e2fd      	b.n	8011ee2 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118f0:	2300      	movs	r3, #0
 80118f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 80f7 	beq.w	8011aee <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011904:	653b      	str	r3, [r7, #80]	; 0x50
 8011906:	e002      	b.n	801190e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801190e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1f8      	bne.n	8011908 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011918:	7a9b      	ldrb	r3, [r3, #10]
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	b29b      	uxth	r3, r3
 801191e:	f003 0304 	and.w	r3, r3, #4
 8011922:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011924:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011928:	891b      	ldrh	r3, [r3, #8]
 801192a:	4619      	mov	r1, r3
 801192c:	8c3b      	ldrh	r3, [r7, #32]
 801192e:	440b      	add	r3, r1
 8011930:	429a      	cmp	r2, r3
 8011932:	da06      	bge.n	8011942 <tcp_write+0x116>
 8011934:	4b75      	ldr	r3, [pc, #468]	; (8011b0c <tcp_write+0x2e0>)
 8011936:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801193a:	4978      	ldr	r1, [pc, #480]	; (8011b1c <tcp_write+0x2f0>)
 801193c:	4875      	ldr	r0, [pc, #468]	; (8011b14 <tcp_write+0x2e8>)
 801193e:	f00a fa93 	bl	801be68 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011944:	891a      	ldrh	r2, [r3, #8]
 8011946:	8c3b      	ldrh	r3, [r7, #32]
 8011948:	4413      	add	r3, r2
 801194a:	b29b      	uxth	r3, r3
 801194c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801194e:	1ad3      	subs	r3, r2, r3
 8011950:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011958:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801195a:	8a7b      	ldrh	r3, [r7, #18]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d027      	beq.n	80119b0 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011960:	8a7b      	ldrh	r3, [r7, #18]
 8011962:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011964:	429a      	cmp	r2, r3
 8011966:	d206      	bcs.n	8011976 <tcp_write+0x14a>
 8011968:	4b68      	ldr	r3, [pc, #416]	; (8011b0c <tcp_write+0x2e0>)
 801196a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801196e:	496c      	ldr	r1, [pc, #432]	; (8011b20 <tcp_write+0x2f4>)
 8011970:	4868      	ldr	r0, [pc, #416]	; (8011b14 <tcp_write+0x2e8>)
 8011972:	f00a fa79 	bl	801be68 <iprintf>
      seg = last_unsent;
 8011976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011978:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801197a:	8a7b      	ldrh	r3, [r7, #18]
 801197c:	88fa      	ldrh	r2, [r7, #6]
 801197e:	429a      	cmp	r2, r3
 8011980:	d901      	bls.n	8011986 <tcp_write+0x15a>
 8011982:	8a7b      	ldrh	r3, [r7, #18]
 8011984:	e000      	b.n	8011988 <tcp_write+0x15c>
 8011986:	88fb      	ldrh	r3, [r7, #6]
 8011988:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801198a:	4293      	cmp	r3, r2
 801198c:	bfa8      	it	ge
 801198e:	4613      	movge	r3, r2
 8011990:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011992:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011996:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011998:	4413      	add	r3, r2
 801199a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801199e:	8a7a      	ldrh	r2, [r7, #18]
 80119a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119a2:	1ad3      	subs	r3, r2, r3
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80119a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80119aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119ac:	1ad3      	subs	r3, r2, r3
 80119ae:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80119b0:	8a7b      	ldrh	r3, [r7, #18]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d00b      	beq.n	80119ce <tcp_write+0x1a2>
 80119b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119ba:	88fb      	ldrh	r3, [r7, #6]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d006      	beq.n	80119ce <tcp_write+0x1a2>
 80119c0:	4b52      	ldr	r3, [pc, #328]	; (8011b0c <tcp_write+0x2e0>)
 80119c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119c6:	4957      	ldr	r1, [pc, #348]	; (8011b24 <tcp_write+0x2f8>)
 80119c8:	4852      	ldr	r0, [pc, #328]	; (8011b14 <tcp_write+0x2e8>)
 80119ca:	f00a fa4d 	bl	801be68 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80119ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119d2:	88fb      	ldrh	r3, [r7, #6]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	f080 8168 	bcs.w	8011caa <tcp_write+0x47e>
 80119da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f000 8164 	beq.w	8011caa <tcp_write+0x47e>
 80119e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119e4:	891b      	ldrh	r3, [r3, #8]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	f000 815f 	beq.w	8011caa <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80119ec:	88fa      	ldrh	r2, [r7, #6]
 80119ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119f2:	1ad2      	subs	r2, r2, r3
 80119f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80119f6:	4293      	cmp	r3, r2
 80119f8:	bfa8      	it	ge
 80119fa:	4613      	movge	r3, r2
 80119fc:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80119fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a00:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011a02:	797b      	ldrb	r3, [r7, #5]
 8011a04:	f003 0301 	and.w	r3, r3, #1
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d027      	beq.n	8011a5c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011a0c:	f107 0012 	add.w	r0, r7, #18
 8011a10:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011a12:	8bf9      	ldrh	r1, [r7, #30]
 8011a14:	2301      	movs	r3, #1
 8011a16:	9302      	str	r3, [sp, #8]
 8011a18:	797b      	ldrb	r3, [r7, #5]
 8011a1a:	9301      	str	r3, [sp, #4]
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	9300      	str	r3, [sp, #0]
 8011a20:	4603      	mov	r3, r0
 8011a22:	2000      	movs	r0, #0
 8011a24:	f7ff fe0e 	bl	8011644 <tcp_pbuf_prealloc>
 8011a28:	6578      	str	r0, [r7, #84]	; 0x54
 8011a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f000 8226 	beq.w	8011e7e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a34:	6858      	ldr	r0, [r3, #4]
 8011a36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a3a:	68ba      	ldr	r2, [r7, #8]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	8bfa      	ldrh	r2, [r7, #30]
 8011a40:	4619      	mov	r1, r3
 8011a42:	f00a f9fe 	bl	801be42 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011a46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011a48:	f7fb fa0c 	bl	800ce64 <pbuf_clen>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	461a      	mov	r2, r3
 8011a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011a54:	4413      	add	r3, r2
 8011a56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011a5a:	e041      	b.n	8011ae0 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	637b      	str	r3, [r7, #52]	; 0x34
 8011a62:	e002      	b.n	8011a6a <tcp_write+0x23e>
 8011a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	637b      	str	r3, [r7, #52]	; 0x34
 8011a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d1f8      	bne.n	8011a64 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a74:	7b1b      	ldrb	r3, [r3, #12]
 8011a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d115      	bne.n	8011aaa <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a84:	8952      	ldrh	r2, [r2, #10]
 8011a86:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011a88:	68ba      	ldr	r2, [r7, #8]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d10d      	bne.n	8011aaa <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d006      	beq.n	8011aa4 <tcp_write+0x278>
 8011a96:	4b1d      	ldr	r3, [pc, #116]	; (8011b0c <tcp_write+0x2e0>)
 8011a98:	f240 2231 	movw	r2, #561	; 0x231
 8011a9c:	4922      	ldr	r1, [pc, #136]	; (8011b28 <tcp_write+0x2fc>)
 8011a9e:	481d      	ldr	r0, [pc, #116]	; (8011b14 <tcp_write+0x2e8>)
 8011aa0:	f00a f9e2 	bl	801be68 <iprintf>
          extendlen = seglen;
 8011aa4:	8bfb      	ldrh	r3, [r7, #30]
 8011aa6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011aa8:	e01a      	b.n	8011ae0 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011aaa:	8bfb      	ldrh	r3, [r7, #30]
 8011aac:	2201      	movs	r2, #1
 8011aae:	4619      	mov	r1, r3
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	f7fa fe37 	bl	800c724 <pbuf_alloc>
 8011ab6:	6578      	str	r0, [r7, #84]	; 0x54
 8011ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	f000 81e1 	beq.w	8011e82 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011ac0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	441a      	add	r2, r3
 8011ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aca:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011acc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011ace:	f7fb f9c9 	bl	800ce64 <pbuf_clen>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ada:	4413      	add	r3, r2
 8011adc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011ae0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ae4:	8bfb      	ldrh	r3, [r7, #30]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011aec:	e0dd      	b.n	8011caa <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	f000 80d8 	beq.w	8011caa <tcp_write+0x47e>
 8011afa:	4b04      	ldr	r3, [pc, #16]	; (8011b0c <tcp_write+0x2e0>)
 8011afc:	f240 224b 	movw	r2, #587	; 0x24b
 8011b00:	490a      	ldr	r1, [pc, #40]	; (8011b2c <tcp_write+0x300>)
 8011b02:	4804      	ldr	r0, [pc, #16]	; (8011b14 <tcp_write+0x2e8>)
 8011b04:	f00a f9b0 	bl	801be68 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011b08:	e0cf      	b.n	8011caa <tcp_write+0x47e>
 8011b0a:	bf00      	nop
 8011b0c:	0801f3c0 	.word	0x0801f3c0
 8011b10:	0801f560 	.word	0x0801f560
 8011b14:	0801f414 	.word	0x0801f414
 8011b18:	0801f578 	.word	0x0801f578
 8011b1c:	0801f5ac 	.word	0x0801f5ac
 8011b20:	0801f5c4 	.word	0x0801f5c4
 8011b24:	0801f5e4 	.word	0x0801f5e4
 8011b28:	0801f604 	.word	0x0801f604
 8011b2c:	0801f630 	.word	0x0801f630
    struct pbuf *p;
    u16_t left = len - pos;
 8011b30:	88fa      	ldrh	r2, [r7, #6]
 8011b32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011b3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b42:	1ad3      	subs	r3, r2, r3
 8011b44:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011b46:	8b7a      	ldrh	r2, [r7, #26]
 8011b48:	8bbb      	ldrh	r3, [r7, #28]
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	bf28      	it	cs
 8011b4e:	4613      	movcs	r3, r2
 8011b50:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011b52:	797b      	ldrb	r3, [r7, #5]
 8011b54:	f003 0301 	and.w	r3, r3, #1
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d036      	beq.n	8011bca <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011b5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b60:	b29a      	uxth	r2, r3
 8011b62:	8b3b      	ldrh	r3, [r7, #24]
 8011b64:	4413      	add	r3, r2
 8011b66:	b299      	uxth	r1, r3
 8011b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	bf0c      	ite	eq
 8011b6e:	2301      	moveq	r3, #1
 8011b70:	2300      	movne	r3, #0
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	f107 0012 	add.w	r0, r7, #18
 8011b78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b7a:	9302      	str	r3, [sp, #8]
 8011b7c:	797b      	ldrb	r3, [r7, #5]
 8011b7e:	9301      	str	r3, [sp, #4]
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	9300      	str	r3, [sp, #0]
 8011b84:	4603      	mov	r3, r0
 8011b86:	2036      	movs	r0, #54	; 0x36
 8011b88:	f7ff fd5c 	bl	8011644 <tcp_pbuf_prealloc>
 8011b8c:	6338      	str	r0, [r7, #48]	; 0x30
 8011b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	f000 8178 	beq.w	8011e86 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b98:	895b      	ldrh	r3, [r3, #10]
 8011b9a:	8b3a      	ldrh	r2, [r7, #24]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d906      	bls.n	8011bae <tcp_write+0x382>
 8011ba0:	4b8c      	ldr	r3, [pc, #560]	; (8011dd4 <tcp_write+0x5a8>)
 8011ba2:	f240 2267 	movw	r2, #615	; 0x267
 8011ba6:	498c      	ldr	r1, [pc, #560]	; (8011dd8 <tcp_write+0x5ac>)
 8011ba8:	488c      	ldr	r0, [pc, #560]	; (8011ddc <tcp_write+0x5b0>)
 8011baa:	f00a f95d 	bl	801be68 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb0:	685a      	ldr	r2, [r3, #4]
 8011bb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011bb6:	18d0      	adds	r0, r2, r3
 8011bb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	8b3a      	ldrh	r2, [r7, #24]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	f00a f93d 	bl	801be42 <memcpy>
 8011bc8:	e02f      	b.n	8011c2a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011bca:	8a7b      	ldrh	r3, [r7, #18]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d006      	beq.n	8011bde <tcp_write+0x3b2>
 8011bd0:	4b80      	ldr	r3, [pc, #512]	; (8011dd4 <tcp_write+0x5a8>)
 8011bd2:	f240 2271 	movw	r2, #625	; 0x271
 8011bd6:	4982      	ldr	r1, [pc, #520]	; (8011de0 <tcp_write+0x5b4>)
 8011bd8:	4880      	ldr	r0, [pc, #512]	; (8011ddc <tcp_write+0x5b0>)
 8011bda:	f00a f945 	bl	801be68 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011bde:	8b3b      	ldrh	r3, [r7, #24]
 8011be0:	2201      	movs	r2, #1
 8011be2:	4619      	mov	r1, r3
 8011be4:	2036      	movs	r0, #54	; 0x36
 8011be6:	f7fa fd9d 	bl	800c724 <pbuf_alloc>
 8011bea:	6178      	str	r0, [r7, #20]
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f000 814b 	beq.w	8011e8a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011bf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bf8:	68ba      	ldr	r2, [r7, #8]
 8011bfa:	441a      	add	r2, r3
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011c00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	2036      	movs	r0, #54	; 0x36
 8011c0e:	f7fa fd89 	bl	800c724 <pbuf_alloc>
 8011c12:	6338      	str	r0, [r7, #48]	; 0x30
 8011c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d103      	bne.n	8011c22 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011c1a:	6978      	ldr	r0, [r7, #20]
 8011c1c:	f7fb f894 	bl	800cd48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011c20:	e136      	b.n	8011e90 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011c22:	6979      	ldr	r1, [r7, #20]
 8011c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c26:	f7fb f95d 	bl	800cee4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c2c:	f7fb f91a 	bl	800ce64 <pbuf_clen>
 8011c30:	4603      	mov	r3, r0
 8011c32:	461a      	mov	r2, r3
 8011c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c38:	4413      	add	r3, r2
 8011c3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011c3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c42:	2b09      	cmp	r3, #9
 8011c44:	d903      	bls.n	8011c4e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c48:	f7fb f87e 	bl	800cd48 <pbuf_free>
      goto memerr;
 8011c4c:	e120      	b.n	8011e90 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011c52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c56:	441a      	add	r2, r3
 8011c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	2200      	movs	r2, #0
 8011c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c64:	68f8      	ldr	r0, [r7, #12]
 8011c66:	f7ff fc4f 	bl	8011508 <tcp_create_segment>
 8011c6a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f000 810d 	beq.w	8011e8e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d102      	bne.n	8011c80 <tcp_write+0x454>
      queue = seg;
 8011c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8011c7e:	e00c      	b.n	8011c9a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d106      	bne.n	8011c94 <tcp_write+0x468>
 8011c86:	4b53      	ldr	r3, [pc, #332]	; (8011dd4 <tcp_write+0x5a8>)
 8011c88:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011c8c:	4955      	ldr	r1, [pc, #340]	; (8011de4 <tcp_write+0x5b8>)
 8011c8e:	4853      	ldr	r0, [pc, #332]	; (8011ddc <tcp_write+0x5b0>)
 8011c90:	f00a f8ea 	bl	801be68 <iprintf>
      prev_seg->next = seg;
 8011c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c98:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c9c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011c9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ca2:	8b3b      	ldrh	r3, [r7, #24]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011caa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cae:	88fb      	ldrh	r3, [r7, #6]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	f4ff af3d 	bcc.w	8011b30 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011cb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d02c      	beq.n	8011d16 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cc2:	e01e      	b.n	8011d02 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc6:	891a      	ldrh	r2, [r3, #8]
 8011cc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cca:	4413      	add	r3, r2
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d110      	bne.n	8011cfc <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ce0:	8952      	ldrh	r2, [r2, #10]
 8011ce2:	4413      	add	r3, r2
 8011ce4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011ce6:	68b9      	ldr	r1, [r7, #8]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f00a f8aa 	bl	801be42 <memcpy>
        p->len += oversize_used;
 8011cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf0:	895a      	ldrh	r2, [r3, #10]
 8011cf2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cf4:	4413      	add	r3, r2
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d1dd      	bne.n	8011cc4 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8011d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d0a:	891a      	ldrh	r2, [r3, #8]
 8011d0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d0e:	4413      	add	r3, r2
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d14:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011d16:	8a7a      	ldrh	r2, [r7, #18]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d018      	beq.n	8011d56 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d106      	bne.n	8011d38 <tcp_write+0x50c>
 8011d2a:	4b2a      	ldr	r3, [pc, #168]	; (8011dd4 <tcp_write+0x5a8>)
 8011d2c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8011d30:	492d      	ldr	r1, [pc, #180]	; (8011de8 <tcp_write+0x5bc>)
 8011d32:	482a      	ldr	r0, [pc, #168]	; (8011ddc <tcp_write+0x5b0>)
 8011d34:	f00a f898 	bl	801be68 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7fb f8d0 	bl	800cee4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d46:	891a      	ldrh	r2, [r3, #8]
 8011d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d4a:	891b      	ldrh	r3, [r3, #8]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d52:	811a      	strh	r2, [r3, #8]
 8011d54:	e037      	b.n	8011dc6 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8011d56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d034      	beq.n	8011dc6 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d003      	beq.n	8011d6a <tcp_write+0x53e>
 8011d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d106      	bne.n	8011d78 <tcp_write+0x54c>
 8011d6a:	4b1a      	ldr	r3, [pc, #104]	; (8011dd4 <tcp_write+0x5a8>)
 8011d6c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011d70:	491e      	ldr	r1, [pc, #120]	; (8011dec <tcp_write+0x5c0>)
 8011d72:	481a      	ldr	r0, [pc, #104]	; (8011ddc <tcp_write+0x5b0>)
 8011d74:	f00a f878 	bl	801be68 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d7e:	e009      	b.n	8011d94 <tcp_write+0x568>
      p->tot_len += extendlen;
 8011d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d82:	891a      	ldrh	r2, [r3, #8]
 8011d84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d86:	4413      	add	r3, r2
 8011d88:	b29a      	uxth	r2, r3
 8011d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d1f1      	bne.n	8011d80 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9e:	891a      	ldrh	r2, [r3, #8]
 8011da0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011da2:	4413      	add	r3, r2
 8011da4:	b29a      	uxth	r2, r3
 8011da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dac:	895a      	ldrh	r2, [r3, #10]
 8011dae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011db0:	4413      	add	r3, r2
 8011db2:	b29a      	uxth	r2, r3
 8011db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dba:	891a      	ldrh	r2, [r3, #8]
 8011dbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011dbe:	4413      	add	r3, r2
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dc4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d111      	bne.n	8011df0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dd0:	66da      	str	r2, [r3, #108]	; 0x6c
 8011dd2:	e010      	b.n	8011df6 <tcp_write+0x5ca>
 8011dd4:	0801f3c0 	.word	0x0801f3c0
 8011dd8:	0801f660 	.word	0x0801f660
 8011ddc:	0801f414 	.word	0x0801f414
 8011de0:	0801f6a0 	.word	0x0801f6a0
 8011de4:	0801f6b0 	.word	0x0801f6b0
 8011de8:	0801f6c4 	.word	0x0801f6c4
 8011dec:	0801f6fc 	.word	0x0801f6fc
  } else {
    last_unsent->next = queue;
 8011df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011df4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011dfa:	88fb      	ldrh	r3, [r7, #6]
 8011dfc:	441a      	add	r2, r3
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011e08:	88fb      	ldrh	r3, [r7, #6]
 8011e0a:	1ad3      	subs	r3, r2, r3
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011e1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00e      	beq.n	8011e46 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10a      	bne.n	8011e46 <tcp_write+0x61a>
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d106      	bne.n	8011e46 <tcp_write+0x61a>
 8011e38:	4b2c      	ldr	r3, [pc, #176]	; (8011eec <tcp_write+0x6c0>)
 8011e3a:	f240 3213 	movw	r2, #787	; 0x313
 8011e3e:	492c      	ldr	r1, [pc, #176]	; (8011ef0 <tcp_write+0x6c4>)
 8011e40:	482c      	ldr	r0, [pc, #176]	; (8011ef4 <tcp_write+0x6c8>)
 8011e42:	f00a f811 	bl	801be68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d016      	beq.n	8011e7a <tcp_write+0x64e>
 8011e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d012      	beq.n	8011e7a <tcp_write+0x64e>
 8011e54:	797b      	ldrb	r3, [r7, #5]
 8011e56:	f003 0302 	and.w	r3, r3, #2
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d10d      	bne.n	8011e7a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	899b      	ldrh	r3, [r3, #12]
 8011e64:	b29c      	uxth	r4, r3
 8011e66:	2008      	movs	r0, #8
 8011e68:	f7f9 fb88 	bl	800b57c <lwip_htons>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	461a      	mov	r2, r3
 8011e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	4322      	orrs	r2, r4
 8011e76:	b292      	uxth	r2, r2
 8011e78:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	e031      	b.n	8011ee2 <tcp_write+0x6b6>
          goto memerr;
 8011e7e:	bf00      	nop
 8011e80:	e006      	b.n	8011e90 <tcp_write+0x664>
            goto memerr;
 8011e82:	bf00      	nop
 8011e84:	e004      	b.n	8011e90 <tcp_write+0x664>
        goto memerr;
 8011e86:	bf00      	nop
 8011e88:	e002      	b.n	8011e90 <tcp_write+0x664>
        goto memerr;
 8011e8a:	bf00      	nop
 8011e8c:	e000      	b.n	8011e90 <tcp_write+0x664>
      goto memerr;
 8011e8e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	8b5b      	ldrh	r3, [r3, #26]
 8011e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e98:	b29a      	uxth	r2, r3
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d002      	beq.n	8011eaa <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011ea4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011ea6:	f7fa ff4f 	bl	800cd48 <pbuf_free>
  }
  if (queue != NULL) {
 8011eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d002      	beq.n	8011eb6 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8011eb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011eb2:	f7fc fb71 	bl	800e598 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d00e      	beq.n	8011ede <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d10a      	bne.n	8011ede <tcp_write+0x6b2>
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d106      	bne.n	8011ede <tcp_write+0x6b2>
 8011ed0:	4b06      	ldr	r3, [pc, #24]	; (8011eec <tcp_write+0x6c0>)
 8011ed2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8011ed6:	4906      	ldr	r1, [pc, #24]	; (8011ef0 <tcp_write+0x6c4>)
 8011ed8:	4806      	ldr	r0, [pc, #24]	; (8011ef4 <tcp_write+0x6c8>)
 8011eda:	f009 ffc5 	bl	801be68 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	375c      	adds	r7, #92	; 0x5c
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd90      	pop	{r4, r7, pc}
 8011eea:	bf00      	nop
 8011eec:	0801f3c0 	.word	0x0801f3c0
 8011ef0:	0801f734 	.word	0x0801f734
 8011ef4:	0801f414 	.word	0x0801f414

08011ef8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011ef8:	b590      	push	{r4, r7, lr}
 8011efa:	b08b      	sub	sp, #44	; 0x2c
 8011efc:	af02      	add	r7, sp, #8
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011f04:	2300      	movs	r3, #0
 8011f06:	61fb      	str	r3, [r7, #28]
 8011f08:	2300      	movs	r3, #0
 8011f0a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <tcp_split_unsent_seg+0x2c>
 8011f16:	4b95      	ldr	r3, [pc, #596]	; (801216c <tcp_split_unsent_seg+0x274>)
 8011f18:	f240 324b 	movw	r2, #843	; 0x34b
 8011f1c:	4994      	ldr	r1, [pc, #592]	; (8012170 <tcp_split_unsent_seg+0x278>)
 8011f1e:	4895      	ldr	r0, [pc, #596]	; (8012174 <tcp_split_unsent_seg+0x27c>)
 8011f20:	f009 ffa2 	bl	801be68 <iprintf>

  useg = pcb->unsent;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f28:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d102      	bne.n	8011f36 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011f30:	f04f 33ff 	mov.w	r3, #4294967295
 8011f34:	e116      	b.n	8012164 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011f36:	887b      	ldrh	r3, [r7, #2]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d109      	bne.n	8011f50 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011f3c:	4b8b      	ldr	r3, [pc, #556]	; (801216c <tcp_split_unsent_seg+0x274>)
 8011f3e:	f240 3253 	movw	r2, #851	; 0x353
 8011f42:	498d      	ldr	r1, [pc, #564]	; (8012178 <tcp_split_unsent_seg+0x280>)
 8011f44:	488b      	ldr	r0, [pc, #556]	; (8012174 <tcp_split_unsent_seg+0x27c>)
 8011f46:	f009 ff8f 	bl	801be68 <iprintf>
    return ERR_VAL;
 8011f4a:	f06f 0305 	mvn.w	r3, #5
 8011f4e:	e109      	b.n	8012164 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	891b      	ldrh	r3, [r3, #8]
 8011f54:	887a      	ldrh	r2, [r7, #2]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d301      	bcc.n	8011f5e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	e102      	b.n	8012164 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f62:	887a      	ldrh	r2, [r7, #2]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d906      	bls.n	8011f76 <tcp_split_unsent_seg+0x7e>
 8011f68:	4b80      	ldr	r3, [pc, #512]	; (801216c <tcp_split_unsent_seg+0x274>)
 8011f6a:	f240 325b 	movw	r2, #859	; 0x35b
 8011f6e:	4983      	ldr	r1, [pc, #524]	; (801217c <tcp_split_unsent_seg+0x284>)
 8011f70:	4880      	ldr	r0, [pc, #512]	; (8012174 <tcp_split_unsent_seg+0x27c>)
 8011f72:	f009 ff79 	bl	801be68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	891b      	ldrh	r3, [r3, #8]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d106      	bne.n	8011f8c <tcp_split_unsent_seg+0x94>
 8011f7e:	4b7b      	ldr	r3, [pc, #492]	; (801216c <tcp_split_unsent_seg+0x274>)
 8011f80:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011f84:	497e      	ldr	r1, [pc, #504]	; (8012180 <tcp_split_unsent_seg+0x288>)
 8011f86:	487b      	ldr	r0, [pc, #492]	; (8012174 <tcp_split_unsent_seg+0x27c>)
 8011f88:	f009 ff6e 	bl	801be68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	7a9b      	ldrb	r3, [r3, #10]
 8011f90:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011f92:	7bfb      	ldrb	r3, [r7, #15]
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	f003 0304 	and.w	r3, r3, #4
 8011f9c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	891a      	ldrh	r2, [r3, #8]
 8011fa2:	887b      	ldrh	r3, [r7, #2]
 8011fa4:	1ad3      	subs	r3, r2, r3
 8011fa6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011fa8:	7bbb      	ldrb	r3, [r7, #14]
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	89bb      	ldrh	r3, [r7, #12]
 8011fae:	4413      	add	r3, r2
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	2036      	movs	r0, #54	; 0x36
 8011fba:	f7fa fbb3 	bl	800c724 <pbuf_alloc>
 8011fbe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	f000 80b7 	beq.w	8012136 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	891a      	ldrh	r2, [r3, #8]
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	891b      	ldrh	r3, [r3, #8]
 8011fd2:	1ad3      	subs	r3, r2, r3
 8011fd4:	b29a      	uxth	r2, r3
 8011fd6:	887b      	ldrh	r3, [r7, #2]
 8011fd8:	4413      	add	r3, r2
 8011fda:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	6858      	ldr	r0, [r3, #4]
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	685a      	ldr	r2, [r3, #4]
 8011fe4:	7bbb      	ldrb	r3, [r7, #14]
 8011fe6:	18d1      	adds	r1, r2, r3
 8011fe8:	897b      	ldrh	r3, [r7, #10]
 8011fea:	89ba      	ldrh	r2, [r7, #12]
 8011fec:	f7fb f8b2 	bl	800d154 <pbuf_copy_partial>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	89bb      	ldrh	r3, [r7, #12]
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	f040 809f 	bne.w	801213a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	899b      	ldrh	r3, [r3, #12]
 8012002:	b29b      	uxth	r3, r3
 8012004:	4618      	mov	r0, r3
 8012006:	f7f9 fab9 	bl	800b57c <lwip_htons>
 801200a:	4603      	mov	r3, r0
 801200c:	b2db      	uxtb	r3, r3
 801200e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012012:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012014:	2300      	movs	r3, #0
 8012016:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012018:	7efb      	ldrb	r3, [r7, #27]
 801201a:	f003 0308 	and.w	r3, r3, #8
 801201e:	2b00      	cmp	r3, #0
 8012020:	d007      	beq.n	8012032 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012022:	7efb      	ldrb	r3, [r7, #27]
 8012024:	f023 0308 	bic.w	r3, r3, #8
 8012028:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801202a:	7ebb      	ldrb	r3, [r7, #26]
 801202c:	f043 0308 	orr.w	r3, r3, #8
 8012030:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012032:	7efb      	ldrb	r3, [r7, #27]
 8012034:	f003 0301 	and.w	r3, r3, #1
 8012038:	2b00      	cmp	r3, #0
 801203a:	d007      	beq.n	801204c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801203c:	7efb      	ldrb	r3, [r7, #27]
 801203e:	f023 0301 	bic.w	r3, r3, #1
 8012042:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012044:	7ebb      	ldrb	r3, [r7, #26]
 8012046:	f043 0301 	orr.w	r3, r3, #1
 801204a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	68db      	ldr	r3, [r3, #12]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	4618      	mov	r0, r3
 8012054:	f7f9 faa7 	bl	800b5a6 <lwip_htonl>
 8012058:	4602      	mov	r2, r0
 801205a:	887b      	ldrh	r3, [r7, #2]
 801205c:	18d1      	adds	r1, r2, r3
 801205e:	7eba      	ldrb	r2, [r7, #26]
 8012060:	7bfb      	ldrb	r3, [r7, #15]
 8012062:	9300      	str	r3, [sp, #0]
 8012064:	460b      	mov	r3, r1
 8012066:	6939      	ldr	r1, [r7, #16]
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f7ff fa4d 	bl	8011508 <tcp_create_segment>
 801206e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d063      	beq.n	801213e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	4618      	mov	r0, r3
 801207c:	f7fa fef2 	bl	800ce64 <pbuf_clen>
 8012080:	4603      	mov	r3, r0
 8012082:	461a      	mov	r2, r3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801208a:	1a9b      	subs	r3, r3, r2
 801208c:	b29a      	uxth	r2, r3
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	6858      	ldr	r0, [r3, #4]
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	891a      	ldrh	r2, [r3, #8]
 801209e:	89bb      	ldrh	r3, [r7, #12]
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	4619      	mov	r1, r3
 80120a6:	f7fa fc97 	bl	800c9d8 <pbuf_realloc>
  useg->len -= remainder;
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	891a      	ldrh	r2, [r3, #8]
 80120ae:	89bb      	ldrh	r3, [r7, #12]
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	b29a      	uxth	r2, r3
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	899b      	ldrh	r3, [r3, #12]
 80120be:	b29c      	uxth	r4, r3
 80120c0:	7efb      	ldrb	r3, [r7, #27]
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7f9 fa59 	bl	800b57c <lwip_htons>
 80120ca:	4603      	mov	r3, r0
 80120cc:	461a      	mov	r2, r3
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	4322      	orrs	r2, r4
 80120d4:	b292      	uxth	r2, r2
 80120d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	4618      	mov	r0, r3
 80120de:	f7fa fec1 	bl	800ce64 <pbuf_clen>
 80120e2:	4603      	mov	r3, r0
 80120e4:	461a      	mov	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120ec:	4413      	add	r3, r2
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80120f6:	69fb      	ldr	r3, [r7, #28]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7fa feb2 	bl	800ce64 <pbuf_clen>
 8012100:	4603      	mov	r3, r0
 8012102:	461a      	mov	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801210a:	4413      	add	r3, r2
 801210c:	b29a      	uxth	r2, r3
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	69fa      	ldr	r2, [r7, #28]
 8012120:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d103      	bne.n	8012132 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2200      	movs	r2, #0
 801212e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012132:	2300      	movs	r3, #0
 8012134:	e016      	b.n	8012164 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012136:	bf00      	nop
 8012138:	e002      	b.n	8012140 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801213a:	bf00      	nop
 801213c:	e000      	b.n	8012140 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801213e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d006      	beq.n	8012154 <tcp_split_unsent_seg+0x25c>
 8012146:	4b09      	ldr	r3, [pc, #36]	; (801216c <tcp_split_unsent_seg+0x274>)
 8012148:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801214c:	490d      	ldr	r1, [pc, #52]	; (8012184 <tcp_split_unsent_seg+0x28c>)
 801214e:	4809      	ldr	r0, [pc, #36]	; (8012174 <tcp_split_unsent_seg+0x27c>)
 8012150:	f009 fe8a 	bl	801be68 <iprintf>
  if (p != NULL) {
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d002      	beq.n	8012160 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801215a:	6938      	ldr	r0, [r7, #16]
 801215c:	f7fa fdf4 	bl	800cd48 <pbuf_free>
  }

  return ERR_MEM;
 8012160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012164:	4618      	mov	r0, r3
 8012166:	3724      	adds	r7, #36	; 0x24
 8012168:	46bd      	mov	sp, r7
 801216a:	bd90      	pop	{r4, r7, pc}
 801216c:	0801f3c0 	.word	0x0801f3c0
 8012170:	0801f754 	.word	0x0801f754
 8012174:	0801f414 	.word	0x0801f414
 8012178:	0801f778 	.word	0x0801f778
 801217c:	0801f79c 	.word	0x0801f79c
 8012180:	0801f7ac 	.word	0x0801f7ac
 8012184:	0801f7bc 	.word	0x0801f7bc

08012188 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012188:	b590      	push	{r4, r7, lr}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d106      	bne.n	80121a4 <tcp_send_fin+0x1c>
 8012196:	4b21      	ldr	r3, [pc, #132]	; (801221c <tcp_send_fin+0x94>)
 8012198:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801219c:	4920      	ldr	r1, [pc, #128]	; (8012220 <tcp_send_fin+0x98>)
 801219e:	4821      	ldr	r0, [pc, #132]	; (8012224 <tcp_send_fin+0x9c>)
 80121a0:	f009 fe62 	bl	801be68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d02e      	beq.n	801220a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121b0:	60fb      	str	r3, [r7, #12]
 80121b2:	e002      	b.n	80121ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d1f8      	bne.n	80121b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	899b      	ldrh	r3, [r3, #12]
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7f9 f9d6 	bl	800b57c <lwip_htons>
 80121d0:	4603      	mov	r3, r0
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	f003 0307 	and.w	r3, r3, #7
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d116      	bne.n	801220a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	899b      	ldrh	r3, [r3, #12]
 80121e2:	b29c      	uxth	r4, r3
 80121e4:	2001      	movs	r0, #1
 80121e6:	f7f9 f9c9 	bl	800b57c <lwip_htons>
 80121ea:	4603      	mov	r3, r0
 80121ec:	461a      	mov	r2, r3
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	4322      	orrs	r2, r4
 80121f4:	b292      	uxth	r2, r2
 80121f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	8b5b      	ldrh	r3, [r3, #26]
 80121fc:	f043 0320 	orr.w	r3, r3, #32
 8012200:	b29a      	uxth	r2, r3
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	e004      	b.n	8012214 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801220a:	2101      	movs	r1, #1
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 f80b 	bl	8012228 <tcp_enqueue_flags>
 8012212:	4603      	mov	r3, r0
}
 8012214:	4618      	mov	r0, r3
 8012216:	3714      	adds	r7, #20
 8012218:	46bd      	mov	sp, r7
 801221a:	bd90      	pop	{r4, r7, pc}
 801221c:	0801f3c0 	.word	0x0801f3c0
 8012220:	0801f7c8 	.word	0x0801f7c8
 8012224:	0801f414 	.word	0x0801f414

08012228 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b08a      	sub	sp, #40	; 0x28
 801222c:	af02      	add	r7, sp, #8
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	460b      	mov	r3, r1
 8012232:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012234:	2300      	movs	r3, #0
 8012236:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012238:	2300      	movs	r3, #0
 801223a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801223c:	78fb      	ldrb	r3, [r7, #3]
 801223e:	f003 0303 	and.w	r3, r3, #3
 8012242:	2b00      	cmp	r3, #0
 8012244:	d106      	bne.n	8012254 <tcp_enqueue_flags+0x2c>
 8012246:	4b67      	ldr	r3, [pc, #412]	; (80123e4 <tcp_enqueue_flags+0x1bc>)
 8012248:	f240 4212 	movw	r2, #1042	; 0x412
 801224c:	4966      	ldr	r1, [pc, #408]	; (80123e8 <tcp_enqueue_flags+0x1c0>)
 801224e:	4867      	ldr	r0, [pc, #412]	; (80123ec <tcp_enqueue_flags+0x1c4>)
 8012250:	f009 fe0a 	bl	801be68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d106      	bne.n	8012268 <tcp_enqueue_flags+0x40>
 801225a:	4b62      	ldr	r3, [pc, #392]	; (80123e4 <tcp_enqueue_flags+0x1bc>)
 801225c:	f240 4213 	movw	r2, #1043	; 0x413
 8012260:	4963      	ldr	r1, [pc, #396]	; (80123f0 <tcp_enqueue_flags+0x1c8>)
 8012262:	4862      	ldr	r0, [pc, #392]	; (80123ec <tcp_enqueue_flags+0x1c4>)
 8012264:	f009 fe00 	bl	801be68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012268:	78fb      	ldrb	r3, [r7, #3]
 801226a:	f003 0302 	and.w	r3, r3, #2
 801226e:	2b00      	cmp	r3, #0
 8012270:	d001      	beq.n	8012276 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012272:	2301      	movs	r3, #1
 8012274:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012276:	7ffb      	ldrb	r3, [r7, #31]
 8012278:	009b      	lsls	r3, r3, #2
 801227a:	b2db      	uxtb	r3, r3
 801227c:	f003 0304 	and.w	r3, r3, #4
 8012280:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012282:	7dfb      	ldrb	r3, [r7, #23]
 8012284:	b29b      	uxth	r3, r3
 8012286:	f44f 7220 	mov.w	r2, #640	; 0x280
 801228a:	4619      	mov	r1, r3
 801228c:	2036      	movs	r0, #54	; 0x36
 801228e:	f7fa fa49 	bl	800c724 <pbuf_alloc>
 8012292:	6138      	str	r0, [r7, #16]
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d109      	bne.n	80122ae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	8b5b      	ldrh	r3, [r3, #26]
 801229e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80122a8:	f04f 33ff 	mov.w	r3, #4294967295
 80122ac:	e095      	b.n	80123da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	895a      	ldrh	r2, [r3, #10]
 80122b2:	7dfb      	ldrb	r3, [r7, #23]
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d206      	bcs.n	80122c8 <tcp_enqueue_flags+0xa0>
 80122ba:	4b4a      	ldr	r3, [pc, #296]	; (80123e4 <tcp_enqueue_flags+0x1bc>)
 80122bc:	f240 423a 	movw	r2, #1082	; 0x43a
 80122c0:	494c      	ldr	r1, [pc, #304]	; (80123f4 <tcp_enqueue_flags+0x1cc>)
 80122c2:	484a      	ldr	r0, [pc, #296]	; (80123ec <tcp_enqueue_flags+0x1c4>)
 80122c4:	f009 fdd0 	bl	801be68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80122cc:	78fa      	ldrb	r2, [r7, #3]
 80122ce:	7ffb      	ldrb	r3, [r7, #31]
 80122d0:	9300      	str	r3, [sp, #0]
 80122d2:	460b      	mov	r3, r1
 80122d4:	6939      	ldr	r1, [r7, #16]
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7ff f916 	bl	8011508 <tcp_create_segment>
 80122dc:	60f8      	str	r0, [r7, #12]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d109      	bne.n	80122f8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	8b5b      	ldrh	r3, [r3, #26]
 80122e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122ec:	b29a      	uxth	r2, r3
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80122f2:	f04f 33ff 	mov.w	r3, #4294967295
 80122f6:	e070      	b.n	80123da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	68db      	ldr	r3, [r3, #12]
 80122fc:	f003 0303 	and.w	r3, r3, #3
 8012300:	2b00      	cmp	r3, #0
 8012302:	d006      	beq.n	8012312 <tcp_enqueue_flags+0xea>
 8012304:	4b37      	ldr	r3, [pc, #220]	; (80123e4 <tcp_enqueue_flags+0x1bc>)
 8012306:	f240 4242 	movw	r2, #1090	; 0x442
 801230a:	493b      	ldr	r1, [pc, #236]	; (80123f8 <tcp_enqueue_flags+0x1d0>)
 801230c:	4837      	ldr	r0, [pc, #220]	; (80123ec <tcp_enqueue_flags+0x1c4>)
 801230e:	f009 fdab 	bl	801be68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	891b      	ldrh	r3, [r3, #8]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d006      	beq.n	8012328 <tcp_enqueue_flags+0x100>
 801231a:	4b32      	ldr	r3, [pc, #200]	; (80123e4 <tcp_enqueue_flags+0x1bc>)
 801231c:	f240 4243 	movw	r2, #1091	; 0x443
 8012320:	4936      	ldr	r1, [pc, #216]	; (80123fc <tcp_enqueue_flags+0x1d4>)
 8012322:	4832      	ldr	r0, [pc, #200]	; (80123ec <tcp_enqueue_flags+0x1c4>)
 8012324:	f009 fda0 	bl	801be68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801232c:	2b00      	cmp	r3, #0
 801232e:	d103      	bne.n	8012338 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	66da      	str	r2, [r3, #108]	; 0x6c
 8012336:	e00d      	b.n	8012354 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801233c:	61bb      	str	r3, [r7, #24]
 801233e:	e002      	b.n	8012346 <tcp_enqueue_flags+0x11e>
 8012340:	69bb      	ldr	r3, [r7, #24]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	61bb      	str	r3, [r7, #24]
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d1f8      	bne.n	8012340 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	68fa      	ldr	r2, [r7, #12]
 8012352:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801235c:	78fb      	ldrb	r3, [r7, #3]
 801235e:	f003 0302 	and.w	r3, r3, #2
 8012362:	2b00      	cmp	r3, #0
 8012364:	d104      	bne.n	8012370 <tcp_enqueue_flags+0x148>
 8012366:	78fb      	ldrb	r3, [r7, #3]
 8012368:	f003 0301 	and.w	r3, r3, #1
 801236c:	2b00      	cmp	r3, #0
 801236e:	d004      	beq.n	801237a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012374:	1c5a      	adds	r2, r3, #1
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801237a:	78fb      	ldrb	r3, [r7, #3]
 801237c:	f003 0301 	and.w	r3, r3, #1
 8012380:	2b00      	cmp	r3, #0
 8012382:	d006      	beq.n	8012392 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	8b5b      	ldrh	r3, [r3, #26]
 8012388:	f043 0320 	orr.w	r3, r3, #32
 801238c:	b29a      	uxth	r2, r3
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	4618      	mov	r0, r3
 8012398:	f7fa fd64 	bl	800ce64 <pbuf_clen>
 801239c:	4603      	mov	r3, r0
 801239e:	461a      	mov	r2, r3
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123a6:	4413      	add	r3, r2
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00e      	beq.n	80123d8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d10a      	bne.n	80123d8 <tcp_enqueue_flags+0x1b0>
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <tcp_enqueue_flags+0x1b0>
 80123ca:	4b06      	ldr	r3, [pc, #24]	; (80123e4 <tcp_enqueue_flags+0x1bc>)
 80123cc:	f240 4266 	movw	r2, #1126	; 0x466
 80123d0:	490b      	ldr	r1, [pc, #44]	; (8012400 <tcp_enqueue_flags+0x1d8>)
 80123d2:	4806      	ldr	r0, [pc, #24]	; (80123ec <tcp_enqueue_flags+0x1c4>)
 80123d4:	f009 fd48 	bl	801be68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80123d8:	2300      	movs	r3, #0
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3720      	adds	r7, #32
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	0801f3c0 	.word	0x0801f3c0
 80123e8:	0801f7e4 	.word	0x0801f7e4
 80123ec:	0801f414 	.word	0x0801f414
 80123f0:	0801f83c 	.word	0x0801f83c
 80123f4:	0801f85c 	.word	0x0801f85c
 80123f8:	0801f898 	.word	0x0801f898
 80123fc:	0801f8b0 	.word	0x0801f8b0
 8012400:	0801f8dc 	.word	0x0801f8dc

08012404 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012404:	b5b0      	push	{r4, r5, r7, lr}
 8012406:	b08a      	sub	sp, #40	; 0x28
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d106      	bne.n	8012420 <tcp_output+0x1c>
 8012412:	4ba0      	ldr	r3, [pc, #640]	; (8012694 <tcp_output+0x290>)
 8012414:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012418:	499f      	ldr	r1, [pc, #636]	; (8012698 <tcp_output+0x294>)
 801241a:	48a0      	ldr	r0, [pc, #640]	; (801269c <tcp_output+0x298>)
 801241c:	f009 fd24 	bl	801be68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	7d1b      	ldrb	r3, [r3, #20]
 8012424:	2b01      	cmp	r3, #1
 8012426:	d106      	bne.n	8012436 <tcp_output+0x32>
 8012428:	4b9a      	ldr	r3, [pc, #616]	; (8012694 <tcp_output+0x290>)
 801242a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801242e:	499c      	ldr	r1, [pc, #624]	; (80126a0 <tcp_output+0x29c>)
 8012430:	489a      	ldr	r0, [pc, #616]	; (801269c <tcp_output+0x298>)
 8012432:	f009 fd19 	bl	801be68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012436:	4b9b      	ldr	r3, [pc, #620]	; (80126a4 <tcp_output+0x2a0>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	429a      	cmp	r2, r3
 801243e:	d101      	bne.n	8012444 <tcp_output+0x40>
    return ERR_OK;
 8012440:	2300      	movs	r3, #0
 8012442:	e1d2      	b.n	80127ea <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012450:	429a      	cmp	r2, r3
 8012452:	d203      	bcs.n	801245c <tcp_output+0x58>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801245a:	e002      	b.n	8012462 <tcp_output+0x5e>
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012462:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012468:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246c:	2b00      	cmp	r3, #0
 801246e:	d10b      	bne.n	8012488 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	8b5b      	ldrh	r3, [r3, #26]
 8012474:	f003 0302 	and.w	r3, r3, #2
 8012478:	2b00      	cmp	r3, #0
 801247a:	f000 81a9 	beq.w	80127d0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f000 fdd6 	bl	8013030 <tcp_send_empty_ack>
 8012484:	4603      	mov	r3, r0
 8012486:	e1b0      	b.n	80127ea <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012488:	6879      	ldr	r1, [r7, #4]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	3304      	adds	r3, #4
 801248e:	461a      	mov	r2, r3
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7ff f81d 	bl	80114d0 <tcp_route>
 8012496:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d102      	bne.n	80124a4 <tcp_output+0xa0>
    return ERR_RTE;
 801249e:	f06f 0303 	mvn.w	r3, #3
 80124a2:	e1a2      	b.n	80127ea <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d003      	beq.n	80124b2 <tcp_output+0xae>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d111      	bne.n	80124d6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d002      	beq.n	80124be <tcp_output+0xba>
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	3304      	adds	r3, #4
 80124bc:	e000      	b.n	80124c0 <tcp_output+0xbc>
 80124be:	2300      	movs	r3, #0
 80124c0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d102      	bne.n	80124ce <tcp_output+0xca>
      return ERR_RTE;
 80124c8:	f06f 0303 	mvn.w	r3, #3
 80124cc:	e18d      	b.n	80127ea <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80124d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	f7f9 f862 	bl	800b5a6 <lwip_htonl>
 80124e2:	4602      	mov	r2, r0
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124e8:	1ad3      	subs	r3, r2, r3
 80124ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124ec:	8912      	ldrh	r2, [r2, #8]
 80124ee:	4413      	add	r3, r2
 80124f0:	69ba      	ldr	r2, [r7, #24]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d227      	bcs.n	8012546 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124fc:	461a      	mov	r2, r3
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	4293      	cmp	r3, r2
 8012502:	d114      	bne.n	801252e <tcp_output+0x12a>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012508:	2b00      	cmp	r3, #0
 801250a:	d110      	bne.n	801252e <tcp_output+0x12a>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012512:	2b00      	cmp	r3, #0
 8012514:	d10b      	bne.n	801252e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2200      	movs	r2, #0
 801251a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2201      	movs	r2, #1
 8012522:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2200      	movs	r2, #0
 801252a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	8b5b      	ldrh	r3, [r3, #26]
 8012532:	f003 0302 	and.w	r3, r3, #2
 8012536:	2b00      	cmp	r3, #0
 8012538:	f000 814c 	beq.w	80127d4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 fd77 	bl	8013030 <tcp_send_empty_ack>
 8012542:	4603      	mov	r3, r0
 8012544:	e151      	b.n	80127ea <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012552:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	2b00      	cmp	r3, #0
 8012558:	f000 811b 	beq.w	8012792 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801255c:	e002      	b.n	8012564 <tcp_output+0x160>
 801255e:	6a3b      	ldr	r3, [r7, #32]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	623b      	str	r3, [r7, #32]
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d1f8      	bne.n	801255e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801256c:	e111      	b.n	8012792 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	899b      	ldrh	r3, [r3, #12]
 8012574:	b29b      	uxth	r3, r3
 8012576:	4618      	mov	r0, r3
 8012578:	f7f9 f800 	bl	800b57c <lwip_htons>
 801257c:	4603      	mov	r3, r0
 801257e:	b2db      	uxtb	r3, r3
 8012580:	f003 0304 	and.w	r3, r3, #4
 8012584:	2b00      	cmp	r3, #0
 8012586:	d006      	beq.n	8012596 <tcp_output+0x192>
 8012588:	4b42      	ldr	r3, [pc, #264]	; (8012694 <tcp_output+0x290>)
 801258a:	f240 5237 	movw	r2, #1335	; 0x537
 801258e:	4946      	ldr	r1, [pc, #280]	; (80126a8 <tcp_output+0x2a4>)
 8012590:	4842      	ldr	r0, [pc, #264]	; (801269c <tcp_output+0x298>)
 8012592:	f009 fc69 	bl	801be68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801259a:	2b00      	cmp	r3, #0
 801259c:	d01f      	beq.n	80125de <tcp_output+0x1da>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	8b5b      	ldrh	r3, [r3, #26]
 80125a2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d119      	bne.n	80125de <tcp_output+0x1da>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d00b      	beq.n	80125ca <tcp_output+0x1c6>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d110      	bne.n	80125de <tcp_output+0x1da>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125c0:	891a      	ldrh	r2, [r3, #8]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d209      	bcs.n	80125de <tcp_output+0x1da>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d004      	beq.n	80125de <tcp_output+0x1da>
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125da:	2b08      	cmp	r3, #8
 80125dc:	d901      	bls.n	80125e2 <tcp_output+0x1de>
 80125de:	2301      	movs	r3, #1
 80125e0:	e000      	b.n	80125e4 <tcp_output+0x1e0>
 80125e2:	2300      	movs	r3, #0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d106      	bne.n	80125f6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	8b5b      	ldrh	r3, [r3, #26]
 80125ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	f000 80e3 	beq.w	80127bc <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	7d1b      	ldrb	r3, [r3, #20]
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d00d      	beq.n	801261a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80125fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	899b      	ldrh	r3, [r3, #12]
 8012604:	b29c      	uxth	r4, r3
 8012606:	2010      	movs	r0, #16
 8012608:	f7f8 ffb8 	bl	800b57c <lwip_htons>
 801260c:	4603      	mov	r3, r0
 801260e:	461a      	mov	r2, r3
 8012610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	4322      	orrs	r2, r4
 8012616:	b292      	uxth	r2, r2
 8012618:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801261a:	697a      	ldr	r2, [r7, #20]
 801261c:	6879      	ldr	r1, [r7, #4]
 801261e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012620:	f000 f908 	bl	8012834 <tcp_output_segment>
 8012624:	4603      	mov	r3, r0
 8012626:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d009      	beq.n	8012644 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	8b5b      	ldrh	r3, [r3, #26]
 8012634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012638:	b29a      	uxth	r2, r3
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	835a      	strh	r2, [r3, #26]
      return err;
 801263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012642:	e0d2      	b.n	80127ea <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	7d1b      	ldrb	r3, [r3, #20]
 8012650:	2b02      	cmp	r3, #2
 8012652:	d006      	beq.n	8012662 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	8b5b      	ldrh	r3, [r3, #26]
 8012658:	f023 0303 	bic.w	r3, r3, #3
 801265c:	b29a      	uxth	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012664:	68db      	ldr	r3, [r3, #12]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4618      	mov	r0, r3
 801266a:	f7f8 ff9c 	bl	800b5a6 <lwip_htonl>
 801266e:	4604      	mov	r4, r0
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	891b      	ldrh	r3, [r3, #8]
 8012674:	461d      	mov	r5, r3
 8012676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	899b      	ldrh	r3, [r3, #12]
 801267c:	b29b      	uxth	r3, r3
 801267e:	4618      	mov	r0, r3
 8012680:	f7f8 ff7c 	bl	800b57c <lwip_htons>
 8012684:	4603      	mov	r3, r0
 8012686:	b2db      	uxtb	r3, r3
 8012688:	f003 0303 	and.w	r3, r3, #3
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00d      	beq.n	80126ac <tcp_output+0x2a8>
 8012690:	2301      	movs	r3, #1
 8012692:	e00c      	b.n	80126ae <tcp_output+0x2aa>
 8012694:	0801f3c0 	.word	0x0801f3c0
 8012698:	0801f904 	.word	0x0801f904
 801269c:	0801f414 	.word	0x0801f414
 80126a0:	0801f91c 	.word	0x0801f91c
 80126a4:	2000c564 	.word	0x2000c564
 80126a8:	0801f944 	.word	0x0801f944
 80126ac:	2300      	movs	r3, #0
 80126ae:	442b      	add	r3, r5
 80126b0:	4423      	add	r3, r4
 80126b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	2b00      	cmp	r3, #0
 80126be:	da02      	bge.n	80126c6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c8:	891b      	ldrh	r3, [r3, #8]
 80126ca:	461c      	mov	r4, r3
 80126cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	899b      	ldrh	r3, [r3, #12]
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7f8 ff51 	bl	800b57c <lwip_htons>
 80126da:	4603      	mov	r3, r0
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	f003 0303 	and.w	r3, r3, #3
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <tcp_output+0x2e6>
 80126e6:	2301      	movs	r3, #1
 80126e8:	e000      	b.n	80126ec <tcp_output+0x2e8>
 80126ea:	2300      	movs	r3, #0
 80126ec:	4423      	add	r3, r4
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d049      	beq.n	8012786 <tcp_output+0x382>
      seg->next = NULL;
 80126f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f4:	2200      	movs	r2, #0
 80126f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d105      	bne.n	801270c <tcp_output+0x308>
        pcb->unacked = seg;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012704:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012708:	623b      	str	r3, [r7, #32]
 801270a:	e03f      	b.n	801278c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270e:	68db      	ldr	r3, [r3, #12]
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	4618      	mov	r0, r3
 8012714:	f7f8 ff47 	bl	800b5a6 <lwip_htonl>
 8012718:	4604      	mov	r4, r0
 801271a:	6a3b      	ldr	r3, [r7, #32]
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	4618      	mov	r0, r3
 8012722:	f7f8 ff40 	bl	800b5a6 <lwip_htonl>
 8012726:	4603      	mov	r3, r0
 8012728:	1ae3      	subs	r3, r4, r3
 801272a:	2b00      	cmp	r3, #0
 801272c:	da24      	bge.n	8012778 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	3370      	adds	r3, #112	; 0x70
 8012732:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012734:	e002      	b.n	801273c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d011      	beq.n	8012768 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	f7f8 ff2a 	bl	800b5a6 <lwip_htonl>
 8012752:	4604      	mov	r4, r0
 8012754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	4618      	mov	r0, r3
 801275c:	f7f8 ff23 	bl	800b5a6 <lwip_htonl>
 8012760:	4603      	mov	r3, r0
 8012762:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012764:	2b00      	cmp	r3, #0
 8012766:	dbe6      	blt.n	8012736 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012774:	601a      	str	r2, [r3, #0]
 8012776:	e009      	b.n	801278c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012778:	6a3b      	ldr	r3, [r7, #32]
 801277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801277c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801277e:	6a3b      	ldr	r3, [r7, #32]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	623b      	str	r3, [r7, #32]
 8012784:	e002      	b.n	801278c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012788:	f7fb ff1a 	bl	800e5c0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012790:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012794:	2b00      	cmp	r3, #0
 8012796:	d012      	beq.n	80127be <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f8 ff01 	bl	800b5a6 <lwip_htonl>
 80127a4:	4602      	mov	r2, r0
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127ae:	8912      	ldrh	r2, [r2, #8]
 80127b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80127b2:	69ba      	ldr	r2, [r7, #24]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	f4bf aeda 	bcs.w	801256e <tcp_output+0x16a>
 80127ba:	e000      	b.n	80127be <tcp_output+0x3ba>
      break;
 80127bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d108      	bne.n	80127d8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2200      	movs	r2, #0
 80127ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80127ce:	e004      	b.n	80127da <tcp_output+0x3d6>
    goto output_done;
 80127d0:	bf00      	nop
 80127d2:	e002      	b.n	80127da <tcp_output+0x3d6>
    goto output_done;
 80127d4:	bf00      	nop
 80127d6:	e000      	b.n	80127da <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80127d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	8b5b      	ldrh	r3, [r3, #26]
 80127de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80127e8:	2300      	movs	r3, #0
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3728      	adds	r7, #40	; 0x28
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bdb0      	pop	{r4, r5, r7, pc}
 80127f2:	bf00      	nop

080127f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d106      	bne.n	8012810 <tcp_output_segment_busy+0x1c>
 8012802:	4b09      	ldr	r3, [pc, #36]	; (8012828 <tcp_output_segment_busy+0x34>)
 8012804:	f240 529a 	movw	r2, #1434	; 0x59a
 8012808:	4908      	ldr	r1, [pc, #32]	; (801282c <tcp_output_segment_busy+0x38>)
 801280a:	4809      	ldr	r0, [pc, #36]	; (8012830 <tcp_output_segment_busy+0x3c>)
 801280c:	f009 fb2c 	bl	801be68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	7b9b      	ldrb	r3, [r3, #14]
 8012816:	2b01      	cmp	r3, #1
 8012818:	d001      	beq.n	801281e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801281a:	2301      	movs	r3, #1
 801281c:	e000      	b.n	8012820 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801281e:	2300      	movs	r3, #0
}
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	0801f3c0 	.word	0x0801f3c0
 801282c:	0801f95c 	.word	0x0801f95c
 8012830:	0801f414 	.word	0x0801f414

08012834 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012834:	b5b0      	push	{r4, r5, r7, lr}
 8012836:	b08c      	sub	sp, #48	; 0x30
 8012838:	af04      	add	r7, sp, #16
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d106      	bne.n	8012854 <tcp_output_segment+0x20>
 8012846:	4b64      	ldr	r3, [pc, #400]	; (80129d8 <tcp_output_segment+0x1a4>)
 8012848:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801284c:	4963      	ldr	r1, [pc, #396]	; (80129dc <tcp_output_segment+0x1a8>)
 801284e:	4864      	ldr	r0, [pc, #400]	; (80129e0 <tcp_output_segment+0x1ac>)
 8012850:	f009 fb0a 	bl	801be68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d106      	bne.n	8012868 <tcp_output_segment+0x34>
 801285a:	4b5f      	ldr	r3, [pc, #380]	; (80129d8 <tcp_output_segment+0x1a4>)
 801285c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012860:	4960      	ldr	r1, [pc, #384]	; (80129e4 <tcp_output_segment+0x1b0>)
 8012862:	485f      	ldr	r0, [pc, #380]	; (80129e0 <tcp_output_segment+0x1ac>)
 8012864:	f009 fb00 	bl	801be68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d106      	bne.n	801287c <tcp_output_segment+0x48>
 801286e:	4b5a      	ldr	r3, [pc, #360]	; (80129d8 <tcp_output_segment+0x1a4>)
 8012870:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012874:	495c      	ldr	r1, [pc, #368]	; (80129e8 <tcp_output_segment+0x1b4>)
 8012876:	485a      	ldr	r0, [pc, #360]	; (80129e0 <tcp_output_segment+0x1ac>)
 8012878:	f009 faf6 	bl	801be68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801287c:	68f8      	ldr	r0, [r7, #12]
 801287e:	f7ff ffb9 	bl	80127f4 <tcp_output_segment_busy>
 8012882:	4603      	mov	r3, r0
 8012884:	2b00      	cmp	r3, #0
 8012886:	d001      	beq.n	801288c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012888:	2300      	movs	r3, #0
 801288a:	e0a0      	b.n	80129ce <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	68dc      	ldr	r4, [r3, #12]
 8012894:	4610      	mov	r0, r2
 8012896:	f7f8 fe86 	bl	800b5a6 <lwip_htonl>
 801289a:	4603      	mov	r3, r0
 801289c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	68dc      	ldr	r4, [r3, #12]
 80128a6:	4610      	mov	r0, r2
 80128a8:	f7f8 fe68 	bl	800b57c <lwip_htons>
 80128ac:	4603      	mov	r3, r0
 80128ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b4:	68ba      	ldr	r2, [r7, #8]
 80128b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80128b8:	441a      	add	r2, r3
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	3314      	adds	r3, #20
 80128c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	7a9b      	ldrb	r3, [r3, #10]
 80128ca:	f003 0301 	and.w	r3, r3, #1
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d015      	beq.n	80128fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	3304      	adds	r3, #4
 80128d6:	461a      	mov	r2, r3
 80128d8:	6879      	ldr	r1, [r7, #4]
 80128da:	f44f 7006 	mov.w	r0, #536	; 0x218
 80128de:	f7fc fa33 	bl	800ed48 <tcp_eff_send_mss_netif>
 80128e2:	4603      	mov	r3, r0
 80128e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80128e6:	8b7b      	ldrh	r3, [r7, #26]
 80128e8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7f8 fe5a 	bl	800b5a6 <lwip_htonl>
 80128f2:	4602      	mov	r2, r0
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	3304      	adds	r3, #4
 80128fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012904:	2b00      	cmp	r3, #0
 8012906:	da02      	bge.n	801290e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	2200      	movs	r2, #0
 801290c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012912:	2b00      	cmp	r3, #0
 8012914:	d10c      	bne.n	8012930 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012916:	4b35      	ldr	r3, [pc, #212]	; (80129ec <tcp_output_segment+0x1b8>)
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	68db      	ldr	r3, [r3, #12]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	4618      	mov	r0, r3
 8012926:	f7f8 fe3e 	bl	800b5a6 <lwip_htonl>
 801292a:	4602      	mov	r2, r0
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	68db      	ldr	r3, [r3, #12]
 8012934:	461a      	mov	r2, r3
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	8959      	ldrh	r1, [r3, #10]
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	8b3a      	ldrh	r2, [r7, #24]
 801294c:	1a8a      	subs	r2, r1, r2
 801294e:	b292      	uxth	r2, r2
 8012950:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	8919      	ldrh	r1, [r3, #8]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	8b3a      	ldrh	r2, [r7, #24]
 801295e:	1a8a      	subs	r2, r1, r2
 8012960:	b292      	uxth	r2, r2
 8012962:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	68fa      	ldr	r2, [r7, #12]
 801296a:	68d2      	ldr	r2, [r2, #12]
 801296c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	68db      	ldr	r3, [r3, #12]
 8012972:	2200      	movs	r2, #0
 8012974:	741a      	strb	r2, [r3, #16]
 8012976:	2200      	movs	r2, #0
 8012978:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	68db      	ldr	r3, [r3, #12]
 801297e:	f103 0214 	add.w	r2, r3, #20
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	7a9b      	ldrb	r3, [r3, #10]
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	f003 0304 	and.w	r3, r3, #4
 801298c:	4413      	add	r3, r2
 801298e:	69fa      	ldr	r2, [r7, #28]
 8012990:	429a      	cmp	r2, r3
 8012992:	d006      	beq.n	80129a2 <tcp_output_segment+0x16e>
 8012994:	4b10      	ldr	r3, [pc, #64]	; (80129d8 <tcp_output_segment+0x1a4>)
 8012996:	f240 621c 	movw	r2, #1564	; 0x61c
 801299a:	4915      	ldr	r1, [pc, #84]	; (80129f0 <tcp_output_segment+0x1bc>)
 801299c:	4810      	ldr	r0, [pc, #64]	; (80129e0 <tcp_output_segment+0x1ac>)
 801299e:	f009 fa63 	bl	801be68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	6858      	ldr	r0, [r3, #4]
 80129a6:	68b9      	ldr	r1, [r7, #8]
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	1d1c      	adds	r4, r3, #4
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	7add      	ldrb	r5, [r3, #11]
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	7a9b      	ldrb	r3, [r3, #10]
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	9202      	str	r2, [sp, #8]
 80129b8:	2206      	movs	r2, #6
 80129ba:	9201      	str	r2, [sp, #4]
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	462b      	mov	r3, r5
 80129c0:	4622      	mov	r2, r4
 80129c2:	f004 fcf7 	bl	80173b4 <ip4_output_if>
 80129c6:	4603      	mov	r3, r0
 80129c8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80129ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3720      	adds	r7, #32
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bdb0      	pop	{r4, r5, r7, pc}
 80129d6:	bf00      	nop
 80129d8:	0801f3c0 	.word	0x0801f3c0
 80129dc:	0801f984 	.word	0x0801f984
 80129e0:	0801f414 	.word	0x0801f414
 80129e4:	0801f9a4 	.word	0x0801f9a4
 80129e8:	0801f9c4 	.word	0x0801f9c4
 80129ec:	2000c554 	.word	0x2000c554
 80129f0:	0801f9e8 	.word	0x0801f9e8

080129f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80129f4:	b5b0      	push	{r4, r5, r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d106      	bne.n	8012a10 <tcp_rexmit_rto_prepare+0x1c>
 8012a02:	4b31      	ldr	r3, [pc, #196]	; (8012ac8 <tcp_rexmit_rto_prepare+0xd4>)
 8012a04:	f240 6263 	movw	r2, #1635	; 0x663
 8012a08:	4930      	ldr	r1, [pc, #192]	; (8012acc <tcp_rexmit_rto_prepare+0xd8>)
 8012a0a:	4831      	ldr	r0, [pc, #196]	; (8012ad0 <tcp_rexmit_rto_prepare+0xdc>)
 8012a0c:	f009 fa2c 	bl	801be68 <iprintf>

  if (pcb->unacked == NULL) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d102      	bne.n	8012a1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012a18:	f06f 0305 	mvn.w	r3, #5
 8012a1c:	e050      	b.n	8012ac0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a22:	60fb      	str	r3, [r7, #12]
 8012a24:	e00b      	b.n	8012a3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012a26:	68f8      	ldr	r0, [r7, #12]
 8012a28:	f7ff fee4 	bl	80127f4 <tcp_output_segment_busy>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d002      	beq.n	8012a38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012a32:	f06f 0305 	mvn.w	r3, #5
 8012a36:	e043      	b.n	8012ac0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	60fb      	str	r3, [r7, #12]
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d1ef      	bne.n	8012a26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012a46:	68f8      	ldr	r0, [r7, #12]
 8012a48:	f7ff fed4 	bl	80127f4 <tcp_output_segment_busy>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d002      	beq.n	8012a58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012a52:	f06f 0305 	mvn.w	r3, #5
 8012a56:	e033      	b.n	8012ac0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	8b5b      	ldrh	r3, [r3, #26]
 8012a72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7f8 fd8f 	bl	800b5a6 <lwip_htonl>
 8012a88:	4604      	mov	r4, r0
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	891b      	ldrh	r3, [r3, #8]
 8012a8e:	461d      	mov	r5, r3
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	899b      	ldrh	r3, [r3, #12]
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7f8 fd6f 	bl	800b57c <lwip_htons>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	f003 0303 	and.w	r3, r3, #3
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d001      	beq.n	8012aae <tcp_rexmit_rto_prepare+0xba>
 8012aaa:	2301      	movs	r3, #1
 8012aac:	e000      	b.n	8012ab0 <tcp_rexmit_rto_prepare+0xbc>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	442b      	add	r3, r5
 8012ab2:	18e2      	adds	r2, r4, r3
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2200      	movs	r2, #0
 8012abc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012abe:	2300      	movs	r3, #0
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3710      	adds	r7, #16
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ac8:	0801f3c0 	.word	0x0801f3c0
 8012acc:	0801f9fc 	.word	0x0801f9fc
 8012ad0:	0801f414 	.word	0x0801f414

08012ad4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <tcp_rexmit_rto_commit+0x1c>
 8012ae2:	4b0d      	ldr	r3, [pc, #52]	; (8012b18 <tcp_rexmit_rto_commit+0x44>)
 8012ae4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ae8:	490c      	ldr	r1, [pc, #48]	; (8012b1c <tcp_rexmit_rto_commit+0x48>)
 8012aea:	480d      	ldr	r0, [pc, #52]	; (8012b20 <tcp_rexmit_rto_commit+0x4c>)
 8012aec:	f009 f9bc 	bl	801be68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012af6:	2bff      	cmp	r3, #255	; 0xff
 8012af8:	d007      	beq.n	8012b0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b00:	3301      	adds	r3, #1
 8012b02:	b2da      	uxtb	r2, r3
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f7ff fc7a 	bl	8012404 <tcp_output>
}
 8012b10:	bf00      	nop
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	0801f3c0 	.word	0x0801f3c0
 8012b1c:	0801fa20 	.word	0x0801fa20
 8012b20:	0801f414 	.word	0x0801f414

08012b24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d106      	bne.n	8012b40 <tcp_rexmit_rto+0x1c>
 8012b32:	4b0a      	ldr	r3, [pc, #40]	; (8012b5c <tcp_rexmit_rto+0x38>)
 8012b34:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012b38:	4909      	ldr	r1, [pc, #36]	; (8012b60 <tcp_rexmit_rto+0x3c>)
 8012b3a:	480a      	ldr	r0, [pc, #40]	; (8012b64 <tcp_rexmit_rto+0x40>)
 8012b3c:	f009 f994 	bl	801be68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f7ff ff57 	bl	80129f4 <tcp_rexmit_rto_prepare>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d102      	bne.n	8012b52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f7ff ffc1 	bl	8012ad4 <tcp_rexmit_rto_commit>
  }
}
 8012b52:	bf00      	nop
 8012b54:	3708      	adds	r7, #8
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	0801f3c0 	.word	0x0801f3c0
 8012b60:	0801fa44 	.word	0x0801fa44
 8012b64:	0801f414 	.word	0x0801f414

08012b68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012b68:	b590      	push	{r4, r7, lr}
 8012b6a:	b085      	sub	sp, #20
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d106      	bne.n	8012b84 <tcp_rexmit+0x1c>
 8012b76:	4b2f      	ldr	r3, [pc, #188]	; (8012c34 <tcp_rexmit+0xcc>)
 8012b78:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012b7c:	492e      	ldr	r1, [pc, #184]	; (8012c38 <tcp_rexmit+0xd0>)
 8012b7e:	482f      	ldr	r0, [pc, #188]	; (8012c3c <tcp_rexmit+0xd4>)
 8012b80:	f009 f972 	bl	801be68 <iprintf>

  if (pcb->unacked == NULL) {
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d102      	bne.n	8012b92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012b8c:	f06f 0305 	mvn.w	r3, #5
 8012b90:	e04c      	b.n	8012c2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012b98:	68b8      	ldr	r0, [r7, #8]
 8012b9a:	f7ff fe2b 	bl	80127f4 <tcp_output_segment_busy>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012ba4:	f06f 0305 	mvn.w	r3, #5
 8012ba8:	e040      	b.n	8012c2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	336c      	adds	r3, #108	; 0x6c
 8012bb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012bb8:	e002      	b.n	8012bc0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d011      	beq.n	8012bec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7f8 fce8 	bl	800b5a6 <lwip_htonl>
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	68db      	ldr	r3, [r3, #12]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7f8 fce1 	bl	800b5a6 <lwip_htonl>
 8012be4:	4603      	mov	r3, r0
 8012be6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	dbe6      	blt.n	8012bba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	68ba      	ldr	r2, [r7, #8]
 8012bf8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d103      	bne.n	8012c0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2200      	movs	r2, #0
 8012c06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c10:	2bff      	cmp	r3, #255	; 0xff
 8012c12:	d007      	beq.n	8012c24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	b2da      	uxtb	r2, r3
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2200      	movs	r2, #0
 8012c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012c2a:	2300      	movs	r3, #0
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3714      	adds	r7, #20
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd90      	pop	{r4, r7, pc}
 8012c34:	0801f3c0 	.word	0x0801f3c0
 8012c38:	0801fa60 	.word	0x0801fa60
 8012c3c:	0801f414 	.word	0x0801f414

08012c40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d106      	bne.n	8012c5c <tcp_rexmit_fast+0x1c>
 8012c4e:	4b2e      	ldr	r3, [pc, #184]	; (8012d08 <tcp_rexmit_fast+0xc8>)
 8012c50:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012c54:	492d      	ldr	r1, [pc, #180]	; (8012d0c <tcp_rexmit_fast+0xcc>)
 8012c56:	482e      	ldr	r0, [pc, #184]	; (8012d10 <tcp_rexmit_fast+0xd0>)
 8012c58:	f009 f906 	bl	801be68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d04d      	beq.n	8012d00 <tcp_rexmit_fast+0xc0>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	8b5b      	ldrh	r3, [r3, #26]
 8012c68:	f003 0304 	and.w	r3, r3, #4
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d147      	bne.n	8012d00 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7ff ff79 	bl	8012b68 <tcp_rexmit>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d141      	bne.n	8012d00 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d207      	bcs.n	8012c9c <tcp_rexmit_fast+0x5c>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c92:	0fda      	lsrs	r2, r3, #31
 8012c94:	4413      	add	r3, r2
 8012c96:	105b      	asrs	r3, r3, #1
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	e006      	b.n	8012caa <tcp_rexmit_fast+0x6a>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ca2:	0fda      	lsrs	r2, r3, #31
 8012ca4:	4413      	add	r3, r2
 8012ca6:	105b      	asrs	r3, r3, #1
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d206      	bcs.n	8012cd0 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cc6:	005b      	lsls	r3, r3, #1
 8012cc8:	b29a      	uxth	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cda:	4619      	mov	r1, r3
 8012cdc:	0049      	lsls	r1, r1, #1
 8012cde:	440b      	add	r3, r1
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	4413      	add	r3, r2
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	8b5b      	ldrh	r3, [r3, #26]
 8012cf0:	f043 0304 	orr.w	r3, r3, #4
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012d00:	bf00      	nop
 8012d02:	3708      	adds	r7, #8
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	0801f3c0 	.word	0x0801f3c0
 8012d0c:	0801fa78 	.word	0x0801fa78
 8012d10:	0801f414 	.word	0x0801f414

08012d14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b086      	sub	sp, #24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	607b      	str	r3, [r7, #4]
 8012d1e:	460b      	mov	r3, r1
 8012d20:	817b      	strh	r3, [r7, #10]
 8012d22:	4613      	mov	r3, r2
 8012d24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012d26:	897a      	ldrh	r2, [r7, #10]
 8012d28:	893b      	ldrh	r3, [r7, #8]
 8012d2a:	4413      	add	r3, r2
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	3314      	adds	r3, #20
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d36:	4619      	mov	r1, r3
 8012d38:	2022      	movs	r0, #34	; 0x22
 8012d3a:	f7f9 fcf3 	bl	800c724 <pbuf_alloc>
 8012d3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d04e      	beq.n	8012de4 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	895b      	ldrh	r3, [r3, #10]
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	897b      	ldrh	r3, [r7, #10]
 8012d4e:	3314      	adds	r3, #20
 8012d50:	429a      	cmp	r2, r3
 8012d52:	da06      	bge.n	8012d62 <tcp_output_alloc_header_common+0x4e>
 8012d54:	4b26      	ldr	r3, [pc, #152]	; (8012df0 <tcp_output_alloc_header_common+0xdc>)
 8012d56:	f240 7224 	movw	r2, #1828	; 0x724
 8012d5a:	4926      	ldr	r1, [pc, #152]	; (8012df4 <tcp_output_alloc_header_common+0xe0>)
 8012d5c:	4826      	ldr	r0, [pc, #152]	; (8012df8 <tcp_output_alloc_header_common+0xe4>)
 8012d5e:	f009 f883 	bl	801be68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012d68:	8c3b      	ldrh	r3, [r7, #32]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7f8 fc06 	bl	800b57c <lwip_htons>
 8012d70:	4603      	mov	r3, r0
 8012d72:	461a      	mov	r2, r3
 8012d74:	693b      	ldr	r3, [r7, #16]
 8012d76:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7f8 fbfe 	bl	800b57c <lwip_htons>
 8012d80:	4603      	mov	r3, r0
 8012d82:	461a      	mov	r2, r3
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012d8e:	68f8      	ldr	r0, [r7, #12]
 8012d90:	f7f8 fc09 	bl	800b5a6 <lwip_htonl>
 8012d94:	4602      	mov	r2, r0
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012d9a:	897b      	ldrh	r3, [r7, #10]
 8012d9c:	089b      	lsrs	r3, r3, #2
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	3305      	adds	r3, #5
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	031b      	lsls	r3, r3, #12
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012dac:	b29b      	uxth	r3, r3
 8012dae:	4313      	orrs	r3, r2
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7f8 fbe2 	bl	800b57c <lwip_htons>
 8012db8:	4603      	mov	r3, r0
 8012dba:	461a      	mov	r2, r3
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012dc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7f8 fbda 	bl	800b57c <lwip_htons>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	461a      	mov	r2, r3
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	741a      	strb	r2, [r3, #16]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	749a      	strb	r2, [r3, #18]
 8012de0:	2200      	movs	r2, #0
 8012de2:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012de4:	697b      	ldr	r3, [r7, #20]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3718      	adds	r7, #24
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	0801f3c0 	.word	0x0801f3c0
 8012df4:	0801fa98 	.word	0x0801fa98
 8012df8:	0801f414 	.word	0x0801f414

08012dfc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012dfc:	b5b0      	push	{r4, r5, r7, lr}
 8012dfe:	b08a      	sub	sp, #40	; 0x28
 8012e00:	af04      	add	r7, sp, #16
 8012e02:	60f8      	str	r0, [r7, #12]
 8012e04:	607b      	str	r3, [r7, #4]
 8012e06:	460b      	mov	r3, r1
 8012e08:	817b      	strh	r3, [r7, #10]
 8012e0a:	4613      	mov	r3, r2
 8012e0c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d106      	bne.n	8012e22 <tcp_output_alloc_header+0x26>
 8012e14:	4b15      	ldr	r3, [pc, #84]	; (8012e6c <tcp_output_alloc_header+0x70>)
 8012e16:	f240 7242 	movw	r2, #1858	; 0x742
 8012e1a:	4915      	ldr	r1, [pc, #84]	; (8012e70 <tcp_output_alloc_header+0x74>)
 8012e1c:	4815      	ldr	r0, [pc, #84]	; (8012e74 <tcp_output_alloc_header+0x78>)
 8012e1e:	f009 f823 	bl	801be68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	8adb      	ldrh	r3, [r3, #22]
 8012e2a:	68fa      	ldr	r2, [r7, #12]
 8012e2c:	8b12      	ldrh	r2, [r2, #24]
 8012e2e:	68f9      	ldr	r1, [r7, #12]
 8012e30:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012e32:	893d      	ldrh	r5, [r7, #8]
 8012e34:	897c      	ldrh	r4, [r7, #10]
 8012e36:	9103      	str	r1, [sp, #12]
 8012e38:	2110      	movs	r1, #16
 8012e3a:	9102      	str	r1, [sp, #8]
 8012e3c:	9201      	str	r2, [sp, #4]
 8012e3e:	9300      	str	r3, [sp, #0]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	462a      	mov	r2, r5
 8012e44:	4621      	mov	r1, r4
 8012e46:	f7ff ff65 	bl	8012d14 <tcp_output_alloc_header_common>
 8012e4a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d006      	beq.n	8012e60 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e56:	68fa      	ldr	r2, [r7, #12]
 8012e58:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012e5a:	441a      	add	r2, r3
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012e60:	697b      	ldr	r3, [r7, #20]
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3718      	adds	r7, #24
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bdb0      	pop	{r4, r5, r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	0801f3c0 	.word	0x0801f3c0
 8012e70:	0801fac8 	.word	0x0801fac8
 8012e74:	0801f414 	.word	0x0801f414

08012e78 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b088      	sub	sp, #32
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	60f8      	str	r0, [r7, #12]
 8012e80:	60b9      	str	r1, [r7, #8]
 8012e82:	4611      	mov	r1, r2
 8012e84:	461a      	mov	r2, r3
 8012e86:	460b      	mov	r3, r1
 8012e88:	71fb      	strb	r3, [r7, #7]
 8012e8a:	4613      	mov	r3, r2
 8012e8c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d106      	bne.n	8012ea6 <tcp_output_fill_options+0x2e>
 8012e98:	4b13      	ldr	r3, [pc, #76]	; (8012ee8 <tcp_output_fill_options+0x70>)
 8012e9a:	f240 7256 	movw	r2, #1878	; 0x756
 8012e9e:	4913      	ldr	r1, [pc, #76]	; (8012eec <tcp_output_fill_options+0x74>)
 8012ea0:	4813      	ldr	r0, [pc, #76]	; (8012ef0 <tcp_output_fill_options+0x78>)
 8012ea2:	f008 ffe1 	bl	801be68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012eac:	69bb      	ldr	r3, [r7, #24]
 8012eae:	3314      	adds	r3, #20
 8012eb0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	f103 0214 	add.w	r2, r3, #20
 8012eb8:	8bfb      	ldrh	r3, [r7, #30]
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	79fb      	ldrb	r3, [r7, #7]
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	f003 0304 	and.w	r3, r3, #4
 8012ec6:	440b      	add	r3, r1
 8012ec8:	4413      	add	r3, r2
 8012eca:	697a      	ldr	r2, [r7, #20]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d006      	beq.n	8012ede <tcp_output_fill_options+0x66>
 8012ed0:	4b05      	ldr	r3, [pc, #20]	; (8012ee8 <tcp_output_fill_options+0x70>)
 8012ed2:	f240 7275 	movw	r2, #1909	; 0x775
 8012ed6:	4907      	ldr	r1, [pc, #28]	; (8012ef4 <tcp_output_fill_options+0x7c>)
 8012ed8:	4805      	ldr	r0, [pc, #20]	; (8012ef0 <tcp_output_fill_options+0x78>)
 8012eda:	f008 ffc5 	bl	801be68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012ede:	bf00      	nop
 8012ee0:	3720      	adds	r7, #32
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	0801f3c0 	.word	0x0801f3c0
 8012eec:	0801faf0 	.word	0x0801faf0
 8012ef0:	0801f414 	.word	0x0801f414
 8012ef4:	0801f9e8 	.word	0x0801f9e8

08012ef8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b08a      	sub	sp, #40	; 0x28
 8012efc:	af04      	add	r7, sp, #16
 8012efe:	60f8      	str	r0, [r7, #12]
 8012f00:	60b9      	str	r1, [r7, #8]
 8012f02:	607a      	str	r2, [r7, #4]
 8012f04:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d106      	bne.n	8012f1a <tcp_output_control_segment+0x22>
 8012f0c:	4b1c      	ldr	r3, [pc, #112]	; (8012f80 <tcp_output_control_segment+0x88>)
 8012f0e:	f240 7287 	movw	r2, #1927	; 0x787
 8012f12:	491c      	ldr	r1, [pc, #112]	; (8012f84 <tcp_output_control_segment+0x8c>)
 8012f14:	481c      	ldr	r0, [pc, #112]	; (8012f88 <tcp_output_control_segment+0x90>)
 8012f16:	f008 ffa7 	bl	801be68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012f1a:	683a      	ldr	r2, [r7, #0]
 8012f1c:	6879      	ldr	r1, [r7, #4]
 8012f1e:	68f8      	ldr	r0, [r7, #12]
 8012f20:	f7fe fad6 	bl	80114d0 <tcp_route>
 8012f24:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d102      	bne.n	8012f32 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012f2c:	23fc      	movs	r3, #252	; 0xfc
 8012f2e:	75fb      	strb	r3, [r7, #23]
 8012f30:	e01c      	b.n	8012f6c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d006      	beq.n	8012f46 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	7adb      	ldrb	r3, [r3, #11]
 8012f3c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	7a9b      	ldrb	r3, [r3, #10]
 8012f42:	757b      	strb	r3, [r7, #21]
 8012f44:	e003      	b.n	8012f4e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012f46:	23ff      	movs	r3, #255	; 0xff
 8012f48:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012f4e:	7dba      	ldrb	r2, [r7, #22]
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	9302      	str	r3, [sp, #8]
 8012f54:	2306      	movs	r3, #6
 8012f56:	9301      	str	r3, [sp, #4]
 8012f58:	7d7b      	ldrb	r3, [r7, #21]
 8012f5a:	9300      	str	r3, [sp, #0]
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	683a      	ldr	r2, [r7, #0]
 8012f60:	6879      	ldr	r1, [r7, #4]
 8012f62:	68b8      	ldr	r0, [r7, #8]
 8012f64:	f004 fa26 	bl	80173b4 <ip4_output_if>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012f6c:	68b8      	ldr	r0, [r7, #8]
 8012f6e:	f7f9 feeb 	bl	800cd48 <pbuf_free>
  return err;
 8012f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3718      	adds	r7, #24
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}
 8012f7e:	bf00      	nop
 8012f80:	0801f3c0 	.word	0x0801f3c0
 8012f84:	0801fb18 	.word	0x0801fb18
 8012f88:	0801f414 	.word	0x0801f414

08012f8c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012f8c:	b590      	push	{r4, r7, lr}
 8012f8e:	b08b      	sub	sp, #44	; 0x2c
 8012f90:	af04      	add	r7, sp, #16
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
 8012f98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d106      	bne.n	8012fae <tcp_rst+0x22>
 8012fa0:	4b1f      	ldr	r3, [pc, #124]	; (8013020 <tcp_rst+0x94>)
 8012fa2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012fa6:	491f      	ldr	r1, [pc, #124]	; (8013024 <tcp_rst+0x98>)
 8012fa8:	481f      	ldr	r0, [pc, #124]	; (8013028 <tcp_rst+0x9c>)
 8012faa:	f008 ff5d 	bl	801be68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d106      	bne.n	8012fc2 <tcp_rst+0x36>
 8012fb4:	4b1a      	ldr	r3, [pc, #104]	; (8013020 <tcp_rst+0x94>)
 8012fb6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012fba:	491c      	ldr	r1, [pc, #112]	; (801302c <tcp_rst+0xa0>)
 8012fbc:	481a      	ldr	r0, [pc, #104]	; (8013028 <tcp_rst+0x9c>)
 8012fbe:	f008 ff53 	bl	801be68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012fc6:	f246 0308 	movw	r3, #24584	; 0x6008
 8012fca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012fcc:	7dfb      	ldrb	r3, [r7, #23]
 8012fce:	b29c      	uxth	r4, r3
 8012fd0:	68b8      	ldr	r0, [r7, #8]
 8012fd2:	f7f8 fae8 	bl	800b5a6 <lwip_htonl>
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	8abb      	ldrh	r3, [r7, #20]
 8012fda:	9303      	str	r3, [sp, #12]
 8012fdc:	2314      	movs	r3, #20
 8012fde:	9302      	str	r3, [sp, #8]
 8012fe0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012fe2:	9301      	str	r3, [sp, #4]
 8012fe4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012fe6:	9300      	str	r3, [sp, #0]
 8012fe8:	4613      	mov	r3, r2
 8012fea:	2200      	movs	r2, #0
 8012fec:	4621      	mov	r1, r4
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7ff fe90 	bl	8012d14 <tcp_output_alloc_header_common>
 8012ff4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d00c      	beq.n	8013016 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ffc:	7dfb      	ldrb	r3, [r7, #23]
 8012ffe:	2200      	movs	r2, #0
 8013000:	6939      	ldr	r1, [r7, #16]
 8013002:	68f8      	ldr	r0, [r7, #12]
 8013004:	f7ff ff38 	bl	8012e78 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801300a:	683a      	ldr	r2, [r7, #0]
 801300c:	6939      	ldr	r1, [r7, #16]
 801300e:	68f8      	ldr	r0, [r7, #12]
 8013010:	f7ff ff72 	bl	8012ef8 <tcp_output_control_segment>
 8013014:	e000      	b.n	8013018 <tcp_rst+0x8c>
    return;
 8013016:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013018:	371c      	adds	r7, #28
 801301a:	46bd      	mov	sp, r7
 801301c:	bd90      	pop	{r4, r7, pc}
 801301e:	bf00      	nop
 8013020:	0801f3c0 	.word	0x0801f3c0
 8013024:	0801fb44 	.word	0x0801fb44
 8013028:	0801f414 	.word	0x0801f414
 801302c:	0801fb60 	.word	0x0801fb60

08013030 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b087      	sub	sp, #28
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013038:	2300      	movs	r3, #0
 801303a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801303c:	2300      	movs	r3, #0
 801303e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d106      	bne.n	8013054 <tcp_send_empty_ack+0x24>
 8013046:	4b28      	ldr	r3, [pc, #160]	; (80130e8 <tcp_send_empty_ack+0xb8>)
 8013048:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801304c:	4927      	ldr	r1, [pc, #156]	; (80130ec <tcp_send_empty_ack+0xbc>)
 801304e:	4828      	ldr	r0, [pc, #160]	; (80130f0 <tcp_send_empty_ack+0xc0>)
 8013050:	f008 ff0a 	bl	801be68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013054:	7dfb      	ldrb	r3, [r7, #23]
 8013056:	009b      	lsls	r3, r3, #2
 8013058:	b2db      	uxtb	r3, r3
 801305a:	f003 0304 	and.w	r3, r3, #4
 801305e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013060:	7d7b      	ldrb	r3, [r7, #21]
 8013062:	b29c      	uxth	r4, r3
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013068:	4618      	mov	r0, r3
 801306a:	f7f8 fa9c 	bl	800b5a6 <lwip_htonl>
 801306e:	4603      	mov	r3, r0
 8013070:	2200      	movs	r2, #0
 8013072:	4621      	mov	r1, r4
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7ff fec1 	bl	8012dfc <tcp_output_alloc_header>
 801307a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d109      	bne.n	8013096 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	8b5b      	ldrh	r3, [r3, #26]
 8013086:	f043 0303 	orr.w	r3, r3, #3
 801308a:	b29a      	uxth	r2, r3
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013090:	f06f 0301 	mvn.w	r3, #1
 8013094:	e023      	b.n	80130de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013096:	7dbb      	ldrb	r3, [r7, #22]
 8013098:	7dfa      	ldrb	r2, [r7, #23]
 801309a:	6939      	ldr	r1, [r7, #16]
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f7ff feeb 	bl	8012e78 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80130a2:	687a      	ldr	r2, [r7, #4]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	3304      	adds	r3, #4
 80130a8:	6939      	ldr	r1, [r7, #16]
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	f7ff ff24 	bl	8012ef8 <tcp_output_control_segment>
 80130b0:	4603      	mov	r3, r0
 80130b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80130b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d007      	beq.n	80130cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	8b5b      	ldrh	r3, [r3, #26]
 80130c0:	f043 0303 	orr.w	r3, r3, #3
 80130c4:	b29a      	uxth	r2, r3
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	835a      	strh	r2, [r3, #26]
 80130ca:	e006      	b.n	80130da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	8b5b      	ldrh	r3, [r3, #26]
 80130d0:	f023 0303 	bic.w	r3, r3, #3
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80130da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130de:	4618      	mov	r0, r3
 80130e0:	371c      	adds	r7, #28
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd90      	pop	{r4, r7, pc}
 80130e6:	bf00      	nop
 80130e8:	0801f3c0 	.word	0x0801f3c0
 80130ec:	0801fb7c 	.word	0x0801fb7c
 80130f0:	0801f414 	.word	0x0801f414

080130f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80130f4:	b590      	push	{r4, r7, lr}
 80130f6:	b087      	sub	sp, #28
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80130fc:	2300      	movs	r3, #0
 80130fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d106      	bne.n	8013114 <tcp_keepalive+0x20>
 8013106:	4b18      	ldr	r3, [pc, #96]	; (8013168 <tcp_keepalive+0x74>)
 8013108:	f640 0224 	movw	r2, #2084	; 0x824
 801310c:	4917      	ldr	r1, [pc, #92]	; (801316c <tcp_keepalive+0x78>)
 801310e:	4818      	ldr	r0, [pc, #96]	; (8013170 <tcp_keepalive+0x7c>)
 8013110:	f008 feaa 	bl	801be68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013114:	7dfb      	ldrb	r3, [r7, #23]
 8013116:	b29c      	uxth	r4, r3
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801311c:	3b01      	subs	r3, #1
 801311e:	4618      	mov	r0, r3
 8013120:	f7f8 fa41 	bl	800b5a6 <lwip_htonl>
 8013124:	4603      	mov	r3, r0
 8013126:	2200      	movs	r2, #0
 8013128:	4621      	mov	r1, r4
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f7ff fe66 	bl	8012dfc <tcp_output_alloc_header>
 8013130:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d102      	bne.n	801313e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013138:	f04f 33ff 	mov.w	r3, #4294967295
 801313c:	e010      	b.n	8013160 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801313e:	7dfb      	ldrb	r3, [r7, #23]
 8013140:	2200      	movs	r2, #0
 8013142:	6939      	ldr	r1, [r7, #16]
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f7ff fe97 	bl	8012e78 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	3304      	adds	r3, #4
 8013150:	6939      	ldr	r1, [r7, #16]
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7ff fed0 	bl	8012ef8 <tcp_output_control_segment>
 8013158:	4603      	mov	r3, r0
 801315a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801315c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013160:	4618      	mov	r0, r3
 8013162:	371c      	adds	r7, #28
 8013164:	46bd      	mov	sp, r7
 8013166:	bd90      	pop	{r4, r7, pc}
 8013168:	0801f3c0 	.word	0x0801f3c0
 801316c:	0801fb9c 	.word	0x0801fb9c
 8013170:	0801f414 	.word	0x0801f414

08013174 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013174:	b590      	push	{r4, r7, lr}
 8013176:	b08b      	sub	sp, #44	; 0x2c
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801317c:	2300      	movs	r3, #0
 801317e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d106      	bne.n	8013196 <tcp_zero_window_probe+0x22>
 8013188:	4b4c      	ldr	r3, [pc, #304]	; (80132bc <tcp_zero_window_probe+0x148>)
 801318a:	f640 024f 	movw	r2, #2127	; 0x84f
 801318e:	494c      	ldr	r1, [pc, #304]	; (80132c0 <tcp_zero_window_probe+0x14c>)
 8013190:	484c      	ldr	r0, [pc, #304]	; (80132c4 <tcp_zero_window_probe+0x150>)
 8013192:	f008 fe69 	bl	801be68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801319a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801319c:	6a3b      	ldr	r3, [r7, #32]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d101      	bne.n	80131a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80131a2:	2300      	movs	r3, #0
 80131a4:	e086      	b.n	80132b4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80131ac:	2bff      	cmp	r3, #255	; 0xff
 80131ae:	d007      	beq.n	80131c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80131b6:	3301      	adds	r3, #1
 80131b8:	b2da      	uxtb	r2, r3
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80131c0:	6a3b      	ldr	r3, [r7, #32]
 80131c2:	68db      	ldr	r3, [r3, #12]
 80131c4:	899b      	ldrh	r3, [r3, #12]
 80131c6:	b29b      	uxth	r3, r3
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7f8 f9d7 	bl	800b57c <lwip_htons>
 80131ce:	4603      	mov	r3, r0
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	f003 0301 	and.w	r3, r3, #1
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d005      	beq.n	80131e6 <tcp_zero_window_probe+0x72>
 80131da:	6a3b      	ldr	r3, [r7, #32]
 80131dc:	891b      	ldrh	r3, [r3, #8]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d101      	bne.n	80131e6 <tcp_zero_window_probe+0x72>
 80131e2:	2301      	movs	r3, #1
 80131e4:	e000      	b.n	80131e8 <tcp_zero_window_probe+0x74>
 80131e6:	2300      	movs	r3, #0
 80131e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80131ea:	7ffb      	ldrb	r3, [r7, #31]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	bf0c      	ite	eq
 80131f0:	2301      	moveq	r3, #1
 80131f2:	2300      	movne	r3, #0
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80131f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131fc:	b299      	uxth	r1, r3
 80131fe:	6a3b      	ldr	r3, [r7, #32]
 8013200:	68db      	ldr	r3, [r3, #12]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	8bba      	ldrh	r2, [r7, #28]
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7ff fdf8 	bl	8012dfc <tcp_output_alloc_header>
 801320c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d102      	bne.n	801321a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013214:	f04f 33ff 	mov.w	r3, #4294967295
 8013218:	e04c      	b.n	80132b4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013220:	7ffb      	ldrb	r3, [r7, #31]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d011      	beq.n	801324a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	899b      	ldrh	r3, [r3, #12]
 801322a:	b29b      	uxth	r3, r3
 801322c:	b21b      	sxth	r3, r3
 801322e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013232:	b21c      	sxth	r4, r3
 8013234:	2011      	movs	r0, #17
 8013236:	f7f8 f9a1 	bl	800b57c <lwip_htons>
 801323a:	4603      	mov	r3, r0
 801323c:	b21b      	sxth	r3, r3
 801323e:	4323      	orrs	r3, r4
 8013240:	b21b      	sxth	r3, r3
 8013242:	b29a      	uxth	r2, r3
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	819a      	strh	r2, [r3, #12]
 8013248:	e010      	b.n	801326c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801324a:	69bb      	ldr	r3, [r7, #24]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	3314      	adds	r3, #20
 8013250:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013252:	6a3b      	ldr	r3, [r7, #32]
 8013254:	6858      	ldr	r0, [r3, #4]
 8013256:	6a3b      	ldr	r3, [r7, #32]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	891a      	ldrh	r2, [r3, #8]
 801325c:	6a3b      	ldr	r3, [r7, #32]
 801325e:	891b      	ldrh	r3, [r3, #8]
 8013260:	1ad3      	subs	r3, r2, r3
 8013262:	b29b      	uxth	r3, r3
 8013264:	2201      	movs	r2, #1
 8013266:	6939      	ldr	r1, [r7, #16]
 8013268:	f7f9 ff74 	bl	800d154 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801326c:	6a3b      	ldr	r3, [r7, #32]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	4618      	mov	r0, r3
 8013274:	f7f8 f997 	bl	800b5a6 <lwip_htonl>
 8013278:	4603      	mov	r3, r0
 801327a:	3301      	adds	r3, #1
 801327c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	1ad3      	subs	r3, r2, r3
 8013286:	2b00      	cmp	r3, #0
 8013288:	da02      	bge.n	8013290 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013294:	2200      	movs	r2, #0
 8013296:	69b9      	ldr	r1, [r7, #24]
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7ff fded 	bl	8012e78 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801329e:	687a      	ldr	r2, [r7, #4]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3304      	adds	r3, #4
 80132a4:	69b9      	ldr	r1, [r7, #24]
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f7ff fe26 	bl	8012ef8 <tcp_output_control_segment>
 80132ac:	4603      	mov	r3, r0
 80132ae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80132b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	372c      	adds	r7, #44	; 0x2c
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd90      	pop	{r4, r7, pc}
 80132bc:	0801f3c0 	.word	0x0801f3c0
 80132c0:	0801fbb8 	.word	0x0801fbb8
 80132c4:	0801f414 	.word	0x0801f414

080132c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80132d0:	f7fa f82e 	bl	800d330 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80132d4:	4b0a      	ldr	r3, [pc, #40]	; (8013300 <tcpip_tcp_timer+0x38>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d103      	bne.n	80132e4 <tcpip_tcp_timer+0x1c>
 80132dc:	4b09      	ldr	r3, [pc, #36]	; (8013304 <tcpip_tcp_timer+0x3c>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d005      	beq.n	80132f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80132e4:	2200      	movs	r2, #0
 80132e6:	4908      	ldr	r1, [pc, #32]	; (8013308 <tcpip_tcp_timer+0x40>)
 80132e8:	20fa      	movs	r0, #250	; 0xfa
 80132ea:	f000 f8f1 	bl	80134d0 <sys_timeout>
 80132ee:	e002      	b.n	80132f6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80132f0:	4b06      	ldr	r3, [pc, #24]	; (801330c <tcpip_tcp_timer+0x44>)
 80132f2:	2200      	movs	r2, #0
 80132f4:	601a      	str	r2, [r3, #0]
  }
}
 80132f6:	bf00      	nop
 80132f8:	3708      	adds	r7, #8
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	2000c550 	.word	0x2000c550
 8013304:	2000c560 	.word	0x2000c560
 8013308:	080132c9 	.word	0x080132c9
 801330c:	2000842c 	.word	0x2000842c

08013310 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013314:	4b0a      	ldr	r3, [pc, #40]	; (8013340 <tcp_timer_needed+0x30>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d10f      	bne.n	801333c <tcp_timer_needed+0x2c>
 801331c:	4b09      	ldr	r3, [pc, #36]	; (8013344 <tcp_timer_needed+0x34>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d103      	bne.n	801332c <tcp_timer_needed+0x1c>
 8013324:	4b08      	ldr	r3, [pc, #32]	; (8013348 <tcp_timer_needed+0x38>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d007      	beq.n	801333c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801332c:	4b04      	ldr	r3, [pc, #16]	; (8013340 <tcp_timer_needed+0x30>)
 801332e:	2201      	movs	r2, #1
 8013330:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013332:	2200      	movs	r2, #0
 8013334:	4905      	ldr	r1, [pc, #20]	; (801334c <tcp_timer_needed+0x3c>)
 8013336:	20fa      	movs	r0, #250	; 0xfa
 8013338:	f000 f8ca 	bl	80134d0 <sys_timeout>
  }
}
 801333c:	bf00      	nop
 801333e:	bd80      	pop	{r7, pc}
 8013340:	2000842c 	.word	0x2000842c
 8013344:	2000c550 	.word	0x2000c550
 8013348:	2000c560 	.word	0x2000c560
 801334c:	080132c9 	.word	0x080132c9

08013350 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b086      	sub	sp, #24
 8013354:	af00      	add	r7, sp, #0
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801335c:	200a      	movs	r0, #10
 801335e:	f7f8 fdc3 	bl	800bee8 <memp_malloc>
 8013362:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d109      	bne.n	801337e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d151      	bne.n	8013414 <sys_timeout_abs+0xc4>
 8013370:	4b2a      	ldr	r3, [pc, #168]	; (801341c <sys_timeout_abs+0xcc>)
 8013372:	22be      	movs	r2, #190	; 0xbe
 8013374:	492a      	ldr	r1, [pc, #168]	; (8013420 <sys_timeout_abs+0xd0>)
 8013376:	482b      	ldr	r0, [pc, #172]	; (8013424 <sys_timeout_abs+0xd4>)
 8013378:	f008 fd76 	bl	801be68 <iprintf>
    return;
 801337c:	e04a      	b.n	8013414 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801337e:	693b      	ldr	r3, [r7, #16]
 8013380:	2200      	movs	r2, #0
 8013382:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	68ba      	ldr	r2, [r7, #8]
 8013388:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	68fa      	ldr	r2, [r7, #12]
 8013394:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013396:	4b24      	ldr	r3, [pc, #144]	; (8013428 <sys_timeout_abs+0xd8>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d103      	bne.n	80133a6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801339e:	4a22      	ldr	r2, [pc, #136]	; (8013428 <sys_timeout_abs+0xd8>)
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	6013      	str	r3, [r2, #0]
    return;
 80133a4:	e037      	b.n	8013416 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	685a      	ldr	r2, [r3, #4]
 80133aa:	4b1f      	ldr	r3, [pc, #124]	; (8013428 <sys_timeout_abs+0xd8>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	0fdb      	lsrs	r3, r3, #31
 80133b4:	f003 0301 	and.w	r3, r3, #1
 80133b8:	b2db      	uxtb	r3, r3
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d007      	beq.n	80133ce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80133be:	4b1a      	ldr	r3, [pc, #104]	; (8013428 <sys_timeout_abs+0xd8>)
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80133c6:	4a18      	ldr	r2, [pc, #96]	; (8013428 <sys_timeout_abs+0xd8>)
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	6013      	str	r3, [r2, #0]
 80133cc:	e023      	b.n	8013416 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80133ce:	4b16      	ldr	r3, [pc, #88]	; (8013428 <sys_timeout_abs+0xd8>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	617b      	str	r3, [r7, #20]
 80133d4:	e01a      	b.n	801340c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d00b      	beq.n	80133f6 <sys_timeout_abs+0xa6>
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	685a      	ldr	r2, [r3, #4]
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	1ad3      	subs	r3, r2, r3
 80133ea:	0fdb      	lsrs	r3, r3, #31
 80133ec:	f003 0301 	and.w	r3, r3, #1
 80133f0:	b2db      	uxtb	r3, r3
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d007      	beq.n	8013406 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	693a      	ldr	r2, [r7, #16]
 8013402:	601a      	str	r2, [r3, #0]
        break;
 8013404:	e007      	b.n	8013416 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	617b      	str	r3, [r7, #20]
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d1e1      	bne.n	80133d6 <sys_timeout_abs+0x86>
 8013412:	e000      	b.n	8013416 <sys_timeout_abs+0xc6>
    return;
 8013414:	bf00      	nop
      }
    }
  }
}
 8013416:	3718      	adds	r7, #24
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	0801fbdc 	.word	0x0801fbdc
 8013420:	0801fc10 	.word	0x0801fc10
 8013424:	0801fc50 	.word	0x0801fc50
 8013428:	20008424 	.word	0x20008424

0801342c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b086      	sub	sp, #24
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	4798      	blx	r3

  now = sys_now();
 801343e:	f007 fd99 	bl	801af74 <sys_now>
 8013442:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	681a      	ldr	r2, [r3, #0]
 8013448:	4b0f      	ldr	r3, [pc, #60]	; (8013488 <lwip_cyclic_timer+0x5c>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4413      	add	r3, r2
 801344e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013450:	68fa      	ldr	r2, [r7, #12]
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	1ad3      	subs	r3, r2, r3
 8013456:	0fdb      	lsrs	r3, r3, #31
 8013458:	f003 0301 	and.w	r3, r3, #1
 801345c:	b2db      	uxtb	r3, r3
 801345e:	2b00      	cmp	r3, #0
 8013460:	d009      	beq.n	8013476 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	4413      	add	r3, r2
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	4907      	ldr	r1, [pc, #28]	; (801348c <lwip_cyclic_timer+0x60>)
 801346e:	4618      	mov	r0, r3
 8013470:	f7ff ff6e 	bl	8013350 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013474:	e004      	b.n	8013480 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013476:	687a      	ldr	r2, [r7, #4]
 8013478:	4904      	ldr	r1, [pc, #16]	; (801348c <lwip_cyclic_timer+0x60>)
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	f7ff ff68 	bl	8013350 <sys_timeout_abs>
}
 8013480:	bf00      	nop
 8013482:	3718      	adds	r7, #24
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	20008428 	.word	0x20008428
 801348c:	0801342d 	.word	0x0801342d

08013490 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013496:	2301      	movs	r3, #1
 8013498:	607b      	str	r3, [r7, #4]
 801349a:	e00e      	b.n	80134ba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801349c:	4a0a      	ldr	r2, [pc, #40]	; (80134c8 <sys_timeouts_init+0x38>)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	00db      	lsls	r3, r3, #3
 80134a8:	4a07      	ldr	r2, [pc, #28]	; (80134c8 <sys_timeouts_init+0x38>)
 80134aa:	4413      	add	r3, r2
 80134ac:	461a      	mov	r2, r3
 80134ae:	4907      	ldr	r1, [pc, #28]	; (80134cc <sys_timeouts_init+0x3c>)
 80134b0:	f000 f80e 	bl	80134d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	3301      	adds	r3, #1
 80134b8:	607b      	str	r3, [r7, #4]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2b04      	cmp	r3, #4
 80134be:	d9ed      	bls.n	801349c <sys_timeouts_init+0xc>
  }
}
 80134c0:	bf00      	nop
 80134c2:	3708      	adds	r7, #8
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	08020f20 	.word	0x08020f20
 80134cc:	0801342d 	.word	0x0801342d

080134d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b086      	sub	sp, #24
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	60b9      	str	r1, [r7, #8]
 80134da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80134e2:	d306      	bcc.n	80134f2 <sys_timeout+0x22>
 80134e4:	4b0a      	ldr	r3, [pc, #40]	; (8013510 <sys_timeout+0x40>)
 80134e6:	f240 1229 	movw	r2, #297	; 0x129
 80134ea:	490a      	ldr	r1, [pc, #40]	; (8013514 <sys_timeout+0x44>)
 80134ec:	480a      	ldr	r0, [pc, #40]	; (8013518 <sys_timeout+0x48>)
 80134ee:	f008 fcbb 	bl	801be68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80134f2:	f007 fd3f 	bl	801af74 <sys_now>
 80134f6:	4602      	mov	r2, r0
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	4413      	add	r3, r2
 80134fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	68b9      	ldr	r1, [r7, #8]
 8013502:	6978      	ldr	r0, [r7, #20]
 8013504:	f7ff ff24 	bl	8013350 <sys_timeout_abs>
#endif
}
 8013508:	bf00      	nop
 801350a:	3718      	adds	r7, #24
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	0801fbdc 	.word	0x0801fbdc
 8013514:	0801fc78 	.word	0x0801fc78
 8013518:	0801fc50 	.word	0x0801fc50

0801351c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b084      	sub	sp, #16
 8013520:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013522:	f007 fd27 	bl	801af74 <sys_now>
 8013526:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013528:	4b17      	ldr	r3, [pc, #92]	; (8013588 <sys_check_timeouts+0x6c>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d022      	beq.n	801357a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	68fa      	ldr	r2, [r7, #12]
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	0fdb      	lsrs	r3, r3, #31
 801353e:	f003 0301 	and.w	r3, r3, #1
 8013542:	b2db      	uxtb	r3, r3
 8013544:	2b00      	cmp	r3, #0
 8013546:	d11a      	bne.n	801357e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4a0e      	ldr	r2, [pc, #56]	; (8013588 <sys_check_timeouts+0x6c>)
 801354e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	689b      	ldr	r3, [r3, #8]
 8013554:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	4a0a      	ldr	r2, [pc, #40]	; (801358c <sys_check_timeouts+0x70>)
 8013562:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013564:	68b9      	ldr	r1, [r7, #8]
 8013566:	200a      	movs	r0, #10
 8013568:	f7f8 fd10 	bl	800bf8c <memp_free>
    if (handler != NULL) {
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d0da      	beq.n	8013528 <sys_check_timeouts+0xc>
      handler(arg);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6838      	ldr	r0, [r7, #0]
 8013576:	4798      	blx	r3
  do {
 8013578:	e7d6      	b.n	8013528 <sys_check_timeouts+0xc>
      return;
 801357a:	bf00      	nop
 801357c:	e000      	b.n	8013580 <sys_check_timeouts+0x64>
      return;
 801357e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013580:	3710      	adds	r7, #16
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	20008424 	.word	0x20008424
 801358c:	20008428 	.word	0x20008428

08013590 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013596:	4b16      	ldr	r3, [pc, #88]	; (80135f0 <sys_timeouts_sleeptime+0x60>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d102      	bne.n	80135a4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801359e:	f04f 33ff 	mov.w	r3, #4294967295
 80135a2:	e020      	b.n	80135e6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80135a4:	f007 fce6 	bl	801af74 <sys_now>
 80135a8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80135aa:	4b11      	ldr	r3, [pc, #68]	; (80135f0 <sys_timeouts_sleeptime+0x60>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	685a      	ldr	r2, [r3, #4]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	1ad3      	subs	r3, r2, r3
 80135b4:	0fdb      	lsrs	r3, r3, #31
 80135b6:	f003 0301 	and.w	r3, r3, #1
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80135c0:	2300      	movs	r3, #0
 80135c2:	e010      	b.n	80135e6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80135c4:	4b0a      	ldr	r3, [pc, #40]	; (80135f0 <sys_timeouts_sleeptime+0x60>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	685a      	ldr	r2, [r3, #4]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	1ad3      	subs	r3, r2, r3
 80135ce:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	da06      	bge.n	80135e4 <sys_timeouts_sleeptime+0x54>
 80135d6:	4b07      	ldr	r3, [pc, #28]	; (80135f4 <sys_timeouts_sleeptime+0x64>)
 80135d8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80135dc:	4906      	ldr	r1, [pc, #24]	; (80135f8 <sys_timeouts_sleeptime+0x68>)
 80135de:	4807      	ldr	r0, [pc, #28]	; (80135fc <sys_timeouts_sleeptime+0x6c>)
 80135e0:	f008 fc42 	bl	801be68 <iprintf>
    return ret;
 80135e4:	683b      	ldr	r3, [r7, #0]
  }
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3708      	adds	r7, #8
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	20008424 	.word	0x20008424
 80135f4:	0801fbdc 	.word	0x0801fbdc
 80135f8:	0801fcb0 	.word	0x0801fcb0
 80135fc:	0801fc50 	.word	0x0801fc50

08013600 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013604:	f008 fcac 	bl	801bf60 <rand>
 8013608:	4603      	mov	r3, r0
 801360a:	b29b      	uxth	r3, r3
 801360c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013610:	b29b      	uxth	r3, r3
 8013612:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013616:	b29a      	uxth	r2, r3
 8013618:	4b01      	ldr	r3, [pc, #4]	; (8013620 <udp_init+0x20>)
 801361a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801361c:	bf00      	nop
 801361e:	bd80      	pop	{r7, pc}
 8013620:	20000014 	.word	0x20000014

08013624 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013624:	b480      	push	{r7}
 8013626:	b083      	sub	sp, #12
 8013628:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801362a:	2300      	movs	r3, #0
 801362c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801362e:	4b17      	ldr	r3, [pc, #92]	; (801368c <udp_new_port+0x68>)
 8013630:	881b      	ldrh	r3, [r3, #0]
 8013632:	1c5a      	adds	r2, r3, #1
 8013634:	b291      	uxth	r1, r2
 8013636:	4a15      	ldr	r2, [pc, #84]	; (801368c <udp_new_port+0x68>)
 8013638:	8011      	strh	r1, [r2, #0]
 801363a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801363e:	4293      	cmp	r3, r2
 8013640:	d103      	bne.n	801364a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013642:	4b12      	ldr	r3, [pc, #72]	; (801368c <udp_new_port+0x68>)
 8013644:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013648:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801364a:	4b11      	ldr	r3, [pc, #68]	; (8013690 <udp_new_port+0x6c>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	603b      	str	r3, [r7, #0]
 8013650:	e011      	b.n	8013676 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	8a5a      	ldrh	r2, [r3, #18]
 8013656:	4b0d      	ldr	r3, [pc, #52]	; (801368c <udp_new_port+0x68>)
 8013658:	881b      	ldrh	r3, [r3, #0]
 801365a:	429a      	cmp	r2, r3
 801365c:	d108      	bne.n	8013670 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801365e:	88fb      	ldrh	r3, [r7, #6]
 8013660:	3301      	adds	r3, #1
 8013662:	80fb      	strh	r3, [r7, #6]
 8013664:	88fb      	ldrh	r3, [r7, #6]
 8013666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801366a:	d3e0      	bcc.n	801362e <udp_new_port+0xa>
        return 0;
 801366c:	2300      	movs	r3, #0
 801366e:	e007      	b.n	8013680 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	603b      	str	r3, [r7, #0]
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d1ea      	bne.n	8013652 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801367c:	4b03      	ldr	r3, [pc, #12]	; (801368c <udp_new_port+0x68>)
 801367e:	881b      	ldrh	r3, [r3, #0]
}
 8013680:	4618      	mov	r0, r3
 8013682:	370c      	adds	r7, #12
 8013684:	46bd      	mov	sp, r7
 8013686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368a:	4770      	bx	lr
 801368c:	20000014 	.word	0x20000014
 8013690:	2000c568 	.word	0x2000c568

08013694 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	4613      	mov	r3, r2
 80136a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d105      	bne.n	80136b4 <udp_input_local_match+0x20>
 80136a8:	4b27      	ldr	r3, [pc, #156]	; (8013748 <udp_input_local_match+0xb4>)
 80136aa:	2287      	movs	r2, #135	; 0x87
 80136ac:	4927      	ldr	r1, [pc, #156]	; (801374c <udp_input_local_match+0xb8>)
 80136ae:	4828      	ldr	r0, [pc, #160]	; (8013750 <udp_input_local_match+0xbc>)
 80136b0:	f008 fbda 	bl	801be68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d105      	bne.n	80136c6 <udp_input_local_match+0x32>
 80136ba:	4b23      	ldr	r3, [pc, #140]	; (8013748 <udp_input_local_match+0xb4>)
 80136bc:	2288      	movs	r2, #136	; 0x88
 80136be:	4925      	ldr	r1, [pc, #148]	; (8013754 <udp_input_local_match+0xc0>)
 80136c0:	4823      	ldr	r0, [pc, #140]	; (8013750 <udp_input_local_match+0xbc>)
 80136c2:	f008 fbd1 	bl	801be68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	7a1b      	ldrb	r3, [r3, #8]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d00b      	beq.n	80136e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	7a1a      	ldrb	r2, [r3, #8]
 80136d2:	4b21      	ldr	r3, [pc, #132]	; (8013758 <udp_input_local_match+0xc4>)
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80136da:	3301      	adds	r3, #1
 80136dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80136de:	429a      	cmp	r2, r3
 80136e0:	d001      	beq.n	80136e6 <udp_input_local_match+0x52>
    return 0;
 80136e2:	2300      	movs	r3, #0
 80136e4:	e02b      	b.n	801373e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80136e6:	79fb      	ldrb	r3, [r7, #7]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d018      	beq.n	801371e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d013      	beq.n	801371a <udp_input_local_match+0x86>
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00f      	beq.n	801371a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80136fa:	4b17      	ldr	r3, [pc, #92]	; (8013758 <udp_input_local_match+0xc4>)
 80136fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80136fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013702:	d00a      	beq.n	801371a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	4b13      	ldr	r3, [pc, #76]	; (8013758 <udp_input_local_match+0xc4>)
 801370a:	695b      	ldr	r3, [r3, #20]
 801370c:	405a      	eors	r2, r3
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	3308      	adds	r3, #8
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013716:	2b00      	cmp	r3, #0
 8013718:	d110      	bne.n	801373c <udp_input_local_match+0xa8>
          return 1;
 801371a:	2301      	movs	r3, #1
 801371c:	e00f      	b.n	801373e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d009      	beq.n	8013738 <udp_input_local_match+0xa4>
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d005      	beq.n	8013738 <udp_input_local_match+0xa4>
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	4b09      	ldr	r3, [pc, #36]	; (8013758 <udp_input_local_match+0xc4>)
 8013732:	695b      	ldr	r3, [r3, #20]
 8013734:	429a      	cmp	r2, r3
 8013736:	d101      	bne.n	801373c <udp_input_local_match+0xa8>
        return 1;
 8013738:	2301      	movs	r3, #1
 801373a:	e000      	b.n	801373e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	3710      	adds	r7, #16
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	0801fcc4 	.word	0x0801fcc4
 801374c:	0801fcf4 	.word	0x0801fcf4
 8013750:	0801fd18 	.word	0x0801fd18
 8013754:	0801fd40 	.word	0x0801fd40
 8013758:	20008dfc 	.word	0x20008dfc

0801375c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801375c:	b590      	push	{r4, r7, lr}
 801375e:	b08d      	sub	sp, #52	; 0x34
 8013760:	af02      	add	r7, sp, #8
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d105      	bne.n	801377c <udp_input+0x20>
 8013770:	4b7c      	ldr	r3, [pc, #496]	; (8013964 <udp_input+0x208>)
 8013772:	22cf      	movs	r2, #207	; 0xcf
 8013774:	497c      	ldr	r1, [pc, #496]	; (8013968 <udp_input+0x20c>)
 8013776:	487d      	ldr	r0, [pc, #500]	; (801396c <udp_input+0x210>)
 8013778:	f008 fb76 	bl	801be68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d105      	bne.n	801378e <udp_input+0x32>
 8013782:	4b78      	ldr	r3, [pc, #480]	; (8013964 <udp_input+0x208>)
 8013784:	22d0      	movs	r2, #208	; 0xd0
 8013786:	497a      	ldr	r1, [pc, #488]	; (8013970 <udp_input+0x214>)
 8013788:	4878      	ldr	r0, [pc, #480]	; (801396c <udp_input+0x210>)
 801378a:	f008 fb6d 	bl	801be68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	895b      	ldrh	r3, [r3, #10]
 8013792:	2b07      	cmp	r3, #7
 8013794:	d803      	bhi.n	801379e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7f9 fad6 	bl	800cd48 <pbuf_free>
    goto end;
 801379c:	e0de      	b.n	801395c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80137a4:	4b73      	ldr	r3, [pc, #460]	; (8013974 <udp_input+0x218>)
 80137a6:	695a      	ldr	r2, [r3, #20]
 80137a8:	4b72      	ldr	r3, [pc, #456]	; (8013974 <udp_input+0x218>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	4619      	mov	r1, r3
 80137ae:	4610      	mov	r0, r2
 80137b0:	f003 fed8 	bl	8017564 <ip4_addr_isbroadcast_u32>
 80137b4:	4603      	mov	r3, r0
 80137b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	881b      	ldrh	r3, [r3, #0]
 80137bc:	b29b      	uxth	r3, r3
 80137be:	4618      	mov	r0, r3
 80137c0:	f7f7 fedc 	bl	800b57c <lwip_htons>
 80137c4:	4603      	mov	r3, r0
 80137c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	885b      	ldrh	r3, [r3, #2]
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7f7 fed4 	bl	800b57c <lwip_htons>
 80137d4:	4603      	mov	r3, r0
 80137d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80137d8:	2300      	movs	r3, #0
 80137da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80137dc:	2300      	movs	r3, #0
 80137de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80137e0:	2300      	movs	r3, #0
 80137e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137e4:	4b64      	ldr	r3, [pc, #400]	; (8013978 <udp_input+0x21c>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	627b      	str	r3, [r7, #36]	; 0x24
 80137ea:	e054      	b.n	8013896 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80137ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ee:	8a5b      	ldrh	r3, [r3, #18]
 80137f0:	89fa      	ldrh	r2, [r7, #14]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d14a      	bne.n	801388c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80137f6:	7cfb      	ldrb	r3, [r7, #19]
 80137f8:	461a      	mov	r2, r3
 80137fa:	6839      	ldr	r1, [r7, #0]
 80137fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137fe:	f7ff ff49 	bl	8013694 <udp_input_local_match>
 8013802:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013804:	2b00      	cmp	r3, #0
 8013806:	d041      	beq.n	801388c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380a:	7c1b      	ldrb	r3, [r3, #16]
 801380c:	f003 0304 	and.w	r3, r3, #4
 8013810:	2b00      	cmp	r3, #0
 8013812:	d11d      	bne.n	8013850 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013814:	69fb      	ldr	r3, [r7, #28]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d102      	bne.n	8013820 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381c:	61fb      	str	r3, [r7, #28]
 801381e:	e017      	b.n	8013850 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013820:	7cfb      	ldrb	r3, [r7, #19]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d014      	beq.n	8013850 <udp_input+0xf4>
 8013826:	4b53      	ldr	r3, [pc, #332]	; (8013974 <udp_input+0x218>)
 8013828:	695b      	ldr	r3, [r3, #20]
 801382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801382e:	d10f      	bne.n	8013850 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	3304      	adds	r3, #4
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	429a      	cmp	r2, r3
 801383c:	d008      	beq.n	8013850 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	3304      	adds	r3, #4
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	429a      	cmp	r2, r3
 801384a:	d101      	bne.n	8013850 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	8a9b      	ldrh	r3, [r3, #20]
 8013854:	8a3a      	ldrh	r2, [r7, #16]
 8013856:	429a      	cmp	r2, r3
 8013858:	d118      	bne.n	801388c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801385e:	2b00      	cmp	r3, #0
 8013860:	d005      	beq.n	801386e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013864:	685a      	ldr	r2, [r3, #4]
 8013866:	4b43      	ldr	r3, [pc, #268]	; (8013974 <udp_input+0x218>)
 8013868:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801386a:	429a      	cmp	r2, r3
 801386c:	d10e      	bne.n	801388c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801386e:	6a3b      	ldr	r3, [r7, #32]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d014      	beq.n	801389e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013876:	68da      	ldr	r2, [r3, #12]
 8013878:	6a3b      	ldr	r3, [r7, #32]
 801387a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801387c:	4b3e      	ldr	r3, [pc, #248]	; (8013978 <udp_input+0x21c>)
 801387e:	681a      	ldr	r2, [r3, #0]
 8013880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013882:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013884:	4a3c      	ldr	r2, [pc, #240]	; (8013978 <udp_input+0x21c>)
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801388a:	e008      	b.n	801389e <udp_input+0x142>
      }
    }

    prev = pcb;
 801388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013892:	68db      	ldr	r3, [r3, #12]
 8013894:	627b      	str	r3, [r7, #36]	; 0x24
 8013896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013898:	2b00      	cmp	r3, #0
 801389a:	d1a7      	bne.n	80137ec <udp_input+0x90>
 801389c:	e000      	b.n	80138a0 <udp_input+0x144>
        break;
 801389e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80138a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d101      	bne.n	80138aa <udp_input+0x14e>
    pcb = uncon_pcb;
 80138a6:	69fb      	ldr	r3, [r7, #28]
 80138a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80138aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <udp_input+0x15a>
    for_us = 1;
 80138b0:	2301      	movs	r3, #1
 80138b2:	76fb      	strb	r3, [r7, #27]
 80138b4:	e00a      	b.n	80138cc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	3304      	adds	r3, #4
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	4b2d      	ldr	r3, [pc, #180]	; (8013974 <udp_input+0x218>)
 80138be:	695b      	ldr	r3, [r3, #20]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	bf0c      	ite	eq
 80138c4:	2301      	moveq	r3, #1
 80138c6:	2300      	movne	r3, #0
 80138c8:	b2db      	uxtb	r3, r3
 80138ca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80138cc:	7efb      	ldrb	r3, [r7, #27]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d041      	beq.n	8013956 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80138d2:	2108      	movs	r1, #8
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7f9 f97f 	bl	800cbd8 <pbuf_remove_header>
 80138da:	4603      	mov	r3, r0
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00a      	beq.n	80138f6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80138e0:	4b20      	ldr	r3, [pc, #128]	; (8013964 <udp_input+0x208>)
 80138e2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80138e6:	4925      	ldr	r1, [pc, #148]	; (801397c <udp_input+0x220>)
 80138e8:	4820      	ldr	r0, [pc, #128]	; (801396c <udp_input+0x210>)
 80138ea:	f008 fabd 	bl	801be68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f7f9 fa2a 	bl	800cd48 <pbuf_free>
      goto end;
 80138f4:	e032      	b.n	801395c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80138f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d012      	beq.n	8013922 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80138fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fe:	699b      	ldr	r3, [r3, #24]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d00a      	beq.n	801391a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013906:	699c      	ldr	r4, [r3, #24]
 8013908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390a:	69d8      	ldr	r0, [r3, #28]
 801390c:	8a3b      	ldrh	r3, [r7, #16]
 801390e:	9300      	str	r3, [sp, #0]
 8013910:	4b1b      	ldr	r3, [pc, #108]	; (8013980 <udp_input+0x224>)
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013916:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013918:	e021      	b.n	801395e <udp_input+0x202>
        pbuf_free(p);
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7f9 fa14 	bl	800cd48 <pbuf_free>
        goto end;
 8013920:	e01c      	b.n	801395c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013922:	7cfb      	ldrb	r3, [r7, #19]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d112      	bne.n	801394e <udp_input+0x1f2>
 8013928:	4b12      	ldr	r3, [pc, #72]	; (8013974 <udp_input+0x218>)
 801392a:	695b      	ldr	r3, [r3, #20]
 801392c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013930:	2be0      	cmp	r3, #224	; 0xe0
 8013932:	d00c      	beq.n	801394e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013934:	4b0f      	ldr	r3, [pc, #60]	; (8013974 <udp_input+0x218>)
 8013936:	899b      	ldrh	r3, [r3, #12]
 8013938:	3308      	adds	r3, #8
 801393a:	b29b      	uxth	r3, r3
 801393c:	b21b      	sxth	r3, r3
 801393e:	4619      	mov	r1, r3
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7f9 f9bc 	bl	800ccbe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013946:	2103      	movs	r1, #3
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f003 facf 	bl	8016eec <icmp_dest_unreach>
      pbuf_free(p);
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f7f9 f9fa 	bl	800cd48 <pbuf_free>
  return;
 8013954:	e003      	b.n	801395e <udp_input+0x202>
    pbuf_free(p);
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	f7f9 f9f6 	bl	800cd48 <pbuf_free>
  return;
 801395c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801395e:	372c      	adds	r7, #44	; 0x2c
 8013960:	46bd      	mov	sp, r7
 8013962:	bd90      	pop	{r4, r7, pc}
 8013964:	0801fcc4 	.word	0x0801fcc4
 8013968:	0801fd68 	.word	0x0801fd68
 801396c:	0801fd18 	.word	0x0801fd18
 8013970:	0801fd80 	.word	0x0801fd80
 8013974:	20008dfc 	.word	0x20008dfc
 8013978:	2000c568 	.word	0x2000c568
 801397c:	0801fd9c 	.word	0x0801fd9c
 8013980:	20008e0c 	.word	0x20008e0c

08013984 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d109      	bne.n	80139a8 <udp_send+0x24>
 8013994:	4b11      	ldr	r3, [pc, #68]	; (80139dc <udp_send+0x58>)
 8013996:	f240 12d5 	movw	r2, #469	; 0x1d5
 801399a:	4911      	ldr	r1, [pc, #68]	; (80139e0 <udp_send+0x5c>)
 801399c:	4811      	ldr	r0, [pc, #68]	; (80139e4 <udp_send+0x60>)
 801399e:	f008 fa63 	bl	801be68 <iprintf>
 80139a2:	f06f 030f 	mvn.w	r3, #15
 80139a6:	e015      	b.n	80139d4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d109      	bne.n	80139c2 <udp_send+0x3e>
 80139ae:	4b0b      	ldr	r3, [pc, #44]	; (80139dc <udp_send+0x58>)
 80139b0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80139b4:	490c      	ldr	r1, [pc, #48]	; (80139e8 <udp_send+0x64>)
 80139b6:	480b      	ldr	r0, [pc, #44]	; (80139e4 <udp_send+0x60>)
 80139b8:	f008 fa56 	bl	801be68 <iprintf>
 80139bc:	f06f 030f 	mvn.w	r3, #15
 80139c0:	e008      	b.n	80139d4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	1d1a      	adds	r2, r3, #4
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	8a9b      	ldrh	r3, [r3, #20]
 80139ca:	6839      	ldr	r1, [r7, #0]
 80139cc:	6878      	ldr	r0, [r7, #4]
 80139ce:	f000 f80d 	bl	80139ec <udp_sendto>
 80139d2:	4603      	mov	r3, r0
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3708      	adds	r7, #8
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	0801fcc4 	.word	0x0801fcc4
 80139e0:	0801fdb8 	.word	0x0801fdb8
 80139e4:	0801fd18 	.word	0x0801fd18
 80139e8:	0801fdd0 	.word	0x0801fdd0

080139ec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b088      	sub	sp, #32
 80139f0:	af02      	add	r7, sp, #8
 80139f2:	60f8      	str	r0, [r7, #12]
 80139f4:	60b9      	str	r1, [r7, #8]
 80139f6:	607a      	str	r2, [r7, #4]
 80139f8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d109      	bne.n	8013a14 <udp_sendto+0x28>
 8013a00:	4b23      	ldr	r3, [pc, #140]	; (8013a90 <udp_sendto+0xa4>)
 8013a02:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013a06:	4923      	ldr	r1, [pc, #140]	; (8013a94 <udp_sendto+0xa8>)
 8013a08:	4823      	ldr	r0, [pc, #140]	; (8013a98 <udp_sendto+0xac>)
 8013a0a:	f008 fa2d 	bl	801be68 <iprintf>
 8013a0e:	f06f 030f 	mvn.w	r3, #15
 8013a12:	e038      	b.n	8013a86 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d109      	bne.n	8013a2e <udp_sendto+0x42>
 8013a1a:	4b1d      	ldr	r3, [pc, #116]	; (8013a90 <udp_sendto+0xa4>)
 8013a1c:	f240 2219 	movw	r2, #537	; 0x219
 8013a20:	491e      	ldr	r1, [pc, #120]	; (8013a9c <udp_sendto+0xb0>)
 8013a22:	481d      	ldr	r0, [pc, #116]	; (8013a98 <udp_sendto+0xac>)
 8013a24:	f008 fa20 	bl	801be68 <iprintf>
 8013a28:	f06f 030f 	mvn.w	r3, #15
 8013a2c:	e02b      	b.n	8013a86 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d109      	bne.n	8013a48 <udp_sendto+0x5c>
 8013a34:	4b16      	ldr	r3, [pc, #88]	; (8013a90 <udp_sendto+0xa4>)
 8013a36:	f240 221a 	movw	r2, #538	; 0x21a
 8013a3a:	4919      	ldr	r1, [pc, #100]	; (8013aa0 <udp_sendto+0xb4>)
 8013a3c:	4816      	ldr	r0, [pc, #88]	; (8013a98 <udp_sendto+0xac>)
 8013a3e:	f008 fa13 	bl	801be68 <iprintf>
 8013a42:	f06f 030f 	mvn.w	r3, #15
 8013a46:	e01e      	b.n	8013a86 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	7a1b      	ldrb	r3, [r3, #8]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d006      	beq.n	8013a5e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	7a1b      	ldrb	r3, [r3, #8]
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7f8 fdbb 	bl	800c5d0 <netif_get_by_index>
 8013a5a:	6178      	str	r0, [r7, #20]
 8013a5c:	e003      	b.n	8013a66 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f003 face 	bl	8017000 <ip4_route>
 8013a64:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d102      	bne.n	8013a72 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013a6c:	f06f 0303 	mvn.w	r3, #3
 8013a70:	e009      	b.n	8013a86 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013a72:	887a      	ldrh	r2, [r7, #2]
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	9300      	str	r3, [sp, #0]
 8013a78:	4613      	mov	r3, r2
 8013a7a:	687a      	ldr	r2, [r7, #4]
 8013a7c:	68b9      	ldr	r1, [r7, #8]
 8013a7e:	68f8      	ldr	r0, [r7, #12]
 8013a80:	f000 f810 	bl	8013aa4 <udp_sendto_if>
 8013a84:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	3718      	adds	r7, #24
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	0801fcc4 	.word	0x0801fcc4
 8013a94:	0801fde8 	.word	0x0801fde8
 8013a98:	0801fd18 	.word	0x0801fd18
 8013a9c:	0801fe00 	.word	0x0801fe00
 8013aa0:	0801fe1c 	.word	0x0801fe1c

08013aa4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b088      	sub	sp, #32
 8013aa8:	af02      	add	r7, sp, #8
 8013aaa:	60f8      	str	r0, [r7, #12]
 8013aac:	60b9      	str	r1, [r7, #8]
 8013aae:	607a      	str	r2, [r7, #4]
 8013ab0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d109      	bne.n	8013acc <udp_sendto_if+0x28>
 8013ab8:	4b2e      	ldr	r3, [pc, #184]	; (8013b74 <udp_sendto_if+0xd0>)
 8013aba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013abe:	492e      	ldr	r1, [pc, #184]	; (8013b78 <udp_sendto_if+0xd4>)
 8013ac0:	482e      	ldr	r0, [pc, #184]	; (8013b7c <udp_sendto_if+0xd8>)
 8013ac2:	f008 f9d1 	bl	801be68 <iprintf>
 8013ac6:	f06f 030f 	mvn.w	r3, #15
 8013aca:	e04f      	b.n	8013b6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d109      	bne.n	8013ae6 <udp_sendto_if+0x42>
 8013ad2:	4b28      	ldr	r3, [pc, #160]	; (8013b74 <udp_sendto_if+0xd0>)
 8013ad4:	f240 2281 	movw	r2, #641	; 0x281
 8013ad8:	4929      	ldr	r1, [pc, #164]	; (8013b80 <udp_sendto_if+0xdc>)
 8013ada:	4828      	ldr	r0, [pc, #160]	; (8013b7c <udp_sendto_if+0xd8>)
 8013adc:	f008 f9c4 	bl	801be68 <iprintf>
 8013ae0:	f06f 030f 	mvn.w	r3, #15
 8013ae4:	e042      	b.n	8013b6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d109      	bne.n	8013b00 <udp_sendto_if+0x5c>
 8013aec:	4b21      	ldr	r3, [pc, #132]	; (8013b74 <udp_sendto_if+0xd0>)
 8013aee:	f240 2282 	movw	r2, #642	; 0x282
 8013af2:	4924      	ldr	r1, [pc, #144]	; (8013b84 <udp_sendto_if+0xe0>)
 8013af4:	4821      	ldr	r0, [pc, #132]	; (8013b7c <udp_sendto_if+0xd8>)
 8013af6:	f008 f9b7 	bl	801be68 <iprintf>
 8013afa:	f06f 030f 	mvn.w	r3, #15
 8013afe:	e035      	b.n	8013b6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013b00:	6a3b      	ldr	r3, [r7, #32]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d109      	bne.n	8013b1a <udp_sendto_if+0x76>
 8013b06:	4b1b      	ldr	r3, [pc, #108]	; (8013b74 <udp_sendto_if+0xd0>)
 8013b08:	f240 2283 	movw	r2, #643	; 0x283
 8013b0c:	491e      	ldr	r1, [pc, #120]	; (8013b88 <udp_sendto_if+0xe4>)
 8013b0e:	481b      	ldr	r0, [pc, #108]	; (8013b7c <udp_sendto_if+0xd8>)
 8013b10:	f008 f9aa 	bl	801be68 <iprintf>
 8013b14:	f06f 030f 	mvn.w	r3, #15
 8013b18:	e028      	b.n	8013b6c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d009      	beq.n	8013b34 <udp_sendto_if+0x90>
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d005      	beq.n	8013b34 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b30:	2be0      	cmp	r3, #224	; 0xe0
 8013b32:	d103      	bne.n	8013b3c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013b34:	6a3b      	ldr	r3, [r7, #32]
 8013b36:	3304      	adds	r3, #4
 8013b38:	617b      	str	r3, [r7, #20]
 8013b3a:	e00b      	b.n	8013b54 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	6a3b      	ldr	r3, [r7, #32]
 8013b42:	3304      	adds	r3, #4
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d002      	beq.n	8013b50 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013b4a:	f06f 0303 	mvn.w	r3, #3
 8013b4e:	e00d      	b.n	8013b6c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013b54:	887a      	ldrh	r2, [r7, #2]
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	9301      	str	r3, [sp, #4]
 8013b5a:	6a3b      	ldr	r3, [r7, #32]
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	4613      	mov	r3, r2
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	68b9      	ldr	r1, [r7, #8]
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	f000 f811 	bl	8013b8c <udp_sendto_if_src>
 8013b6a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3718      	adds	r7, #24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	0801fcc4 	.word	0x0801fcc4
 8013b78:	0801fe38 	.word	0x0801fe38
 8013b7c:	0801fd18 	.word	0x0801fd18
 8013b80:	0801fe54 	.word	0x0801fe54
 8013b84:	0801fe70 	.word	0x0801fe70
 8013b88:	0801fe90 	.word	0x0801fe90

08013b8c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b08c      	sub	sp, #48	; 0x30
 8013b90:	af04      	add	r7, sp, #16
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	607a      	str	r2, [r7, #4]
 8013b98:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d109      	bne.n	8013bb4 <udp_sendto_if_src+0x28>
 8013ba0:	4b65      	ldr	r3, [pc, #404]	; (8013d38 <udp_sendto_if_src+0x1ac>)
 8013ba2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013ba6:	4965      	ldr	r1, [pc, #404]	; (8013d3c <udp_sendto_if_src+0x1b0>)
 8013ba8:	4865      	ldr	r0, [pc, #404]	; (8013d40 <udp_sendto_if_src+0x1b4>)
 8013baa:	f008 f95d 	bl	801be68 <iprintf>
 8013bae:	f06f 030f 	mvn.w	r3, #15
 8013bb2:	e0bc      	b.n	8013d2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d109      	bne.n	8013bce <udp_sendto_if_src+0x42>
 8013bba:	4b5f      	ldr	r3, [pc, #380]	; (8013d38 <udp_sendto_if_src+0x1ac>)
 8013bbc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013bc0:	4960      	ldr	r1, [pc, #384]	; (8013d44 <udp_sendto_if_src+0x1b8>)
 8013bc2:	485f      	ldr	r0, [pc, #380]	; (8013d40 <udp_sendto_if_src+0x1b4>)
 8013bc4:	f008 f950 	bl	801be68 <iprintf>
 8013bc8:	f06f 030f 	mvn.w	r3, #15
 8013bcc:	e0af      	b.n	8013d2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d109      	bne.n	8013be8 <udp_sendto_if_src+0x5c>
 8013bd4:	4b58      	ldr	r3, [pc, #352]	; (8013d38 <udp_sendto_if_src+0x1ac>)
 8013bd6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013bda:	495b      	ldr	r1, [pc, #364]	; (8013d48 <udp_sendto_if_src+0x1bc>)
 8013bdc:	4858      	ldr	r0, [pc, #352]	; (8013d40 <udp_sendto_if_src+0x1b4>)
 8013bde:	f008 f943 	bl	801be68 <iprintf>
 8013be2:	f06f 030f 	mvn.w	r3, #15
 8013be6:	e0a2      	b.n	8013d2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d109      	bne.n	8013c02 <udp_sendto_if_src+0x76>
 8013bee:	4b52      	ldr	r3, [pc, #328]	; (8013d38 <udp_sendto_if_src+0x1ac>)
 8013bf0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013bf4:	4955      	ldr	r1, [pc, #340]	; (8013d4c <udp_sendto_if_src+0x1c0>)
 8013bf6:	4852      	ldr	r0, [pc, #328]	; (8013d40 <udp_sendto_if_src+0x1b4>)
 8013bf8:	f008 f936 	bl	801be68 <iprintf>
 8013bfc:	f06f 030f 	mvn.w	r3, #15
 8013c00:	e095      	b.n	8013d2e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d109      	bne.n	8013c1c <udp_sendto_if_src+0x90>
 8013c08:	4b4b      	ldr	r3, [pc, #300]	; (8013d38 <udp_sendto_if_src+0x1ac>)
 8013c0a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013c0e:	4950      	ldr	r1, [pc, #320]	; (8013d50 <udp_sendto_if_src+0x1c4>)
 8013c10:	484b      	ldr	r0, [pc, #300]	; (8013d40 <udp_sendto_if_src+0x1b4>)
 8013c12:	f008 f929 	bl	801be68 <iprintf>
 8013c16:	f06f 030f 	mvn.w	r3, #15
 8013c1a:	e088      	b.n	8013d2e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	8a5b      	ldrh	r3, [r3, #18]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d10f      	bne.n	8013c44 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013c24:	68f9      	ldr	r1, [r7, #12]
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	8a5b      	ldrh	r3, [r3, #18]
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f000 f893 	bl	8013d58 <udp_bind>
 8013c32:	4603      	mov	r3, r0
 8013c34:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013c36:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d002      	beq.n	8013c44 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013c3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013c42:	e074      	b.n	8013d2e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	891b      	ldrh	r3, [r3, #8]
 8013c48:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	d902      	bls.n	8013c56 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013c50:	f04f 33ff 	mov.w	r3, #4294967295
 8013c54:	e06b      	b.n	8013d2e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013c56:	2108      	movs	r1, #8
 8013c58:	68b8      	ldr	r0, [r7, #8]
 8013c5a:	f7f8 ffad 	bl	800cbb8 <pbuf_add_header>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d015      	beq.n	8013c90 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013c64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c68:	2108      	movs	r1, #8
 8013c6a:	2022      	movs	r0, #34	; 0x22
 8013c6c:	f7f8 fd5a 	bl	800c724 <pbuf_alloc>
 8013c70:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d102      	bne.n	8013c7e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013c78:	f04f 33ff 	mov.w	r3, #4294967295
 8013c7c:	e057      	b.n	8013d2e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	891b      	ldrh	r3, [r3, #8]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d006      	beq.n	8013c94 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013c86:	68b9      	ldr	r1, [r7, #8]
 8013c88:	69f8      	ldr	r0, [r7, #28]
 8013c8a:	f7f9 f981 	bl	800cf90 <pbuf_chain>
 8013c8e:	e001      	b.n	8013c94 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	895b      	ldrh	r3, [r3, #10]
 8013c98:	2b07      	cmp	r3, #7
 8013c9a:	d806      	bhi.n	8013caa <udp_sendto_if_src+0x11e>
 8013c9c:	4b26      	ldr	r3, [pc, #152]	; (8013d38 <udp_sendto_if_src+0x1ac>)
 8013c9e:	f240 320e 	movw	r2, #782	; 0x30e
 8013ca2:	492c      	ldr	r1, [pc, #176]	; (8013d54 <udp_sendto_if_src+0x1c8>)
 8013ca4:	4826      	ldr	r0, [pc, #152]	; (8013d40 <udp_sendto_if_src+0x1b4>)
 8013ca6:	f008 f8df 	bl	801be68 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013caa:	69fb      	ldr	r3, [r7, #28]
 8013cac:	685b      	ldr	r3, [r3, #4]
 8013cae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	8a5b      	ldrh	r3, [r3, #18]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7f7 fc61 	bl	800b57c <lwip_htons>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013cc2:	887b      	ldrh	r3, [r7, #2]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7f7 fc59 	bl	800b57c <lwip_htons>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	461a      	mov	r2, r3
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	719a      	strb	r2, [r3, #6]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	891b      	ldrh	r3, [r3, #8]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7f7 fc4b 	bl	800b57c <lwip_htons>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	461a      	mov	r2, r3
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013cee:	2311      	movs	r3, #17
 8013cf0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	7adb      	ldrb	r3, [r3, #11]
 8013cf6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	7a9b      	ldrb	r3, [r3, #10]
 8013cfc:	7cb9      	ldrb	r1, [r7, #18]
 8013cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d00:	9202      	str	r2, [sp, #8]
 8013d02:	7cfa      	ldrb	r2, [r7, #19]
 8013d04:	9201      	str	r2, [sp, #4]
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	460b      	mov	r3, r1
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013d0e:	69f8      	ldr	r0, [r7, #28]
 8013d10:	f003 fb7a 	bl	8017408 <ip4_output_if_src>
 8013d14:	4603      	mov	r3, r0
 8013d16:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013d18:	69fa      	ldr	r2, [r7, #28]
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d004      	beq.n	8013d2a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013d20:	69f8      	ldr	r0, [r7, #28]
 8013d22:	f7f9 f811 	bl	800cd48 <pbuf_free>
    q = NULL;
 8013d26:	2300      	movs	r3, #0
 8013d28:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013d2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3720      	adds	r7, #32
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	0801fcc4 	.word	0x0801fcc4
 8013d3c:	0801feb0 	.word	0x0801feb0
 8013d40:	0801fd18 	.word	0x0801fd18
 8013d44:	0801fed0 	.word	0x0801fed0
 8013d48:	0801fef0 	.word	0x0801fef0
 8013d4c:	0801ff14 	.word	0x0801ff14
 8013d50:	0801ff38 	.word	0x0801ff38
 8013d54:	0801ff5c 	.word	0x0801ff5c

08013d58 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b086      	sub	sp, #24
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	4613      	mov	r3, r2
 8013d64:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d101      	bne.n	8013d70 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013d6c:	4b39      	ldr	r3, [pc, #228]	; (8013e54 <udp_bind+0xfc>)
 8013d6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d109      	bne.n	8013d8a <udp_bind+0x32>
 8013d76:	4b38      	ldr	r3, [pc, #224]	; (8013e58 <udp_bind+0x100>)
 8013d78:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013d7c:	4937      	ldr	r1, [pc, #220]	; (8013e5c <udp_bind+0x104>)
 8013d7e:	4838      	ldr	r0, [pc, #224]	; (8013e60 <udp_bind+0x108>)
 8013d80:	f008 f872 	bl	801be68 <iprintf>
 8013d84:	f06f 030f 	mvn.w	r3, #15
 8013d88:	e060      	b.n	8013e4c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d8e:	4b35      	ldr	r3, [pc, #212]	; (8013e64 <udp_bind+0x10c>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	617b      	str	r3, [r7, #20]
 8013d94:	e009      	b.n	8013daa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013d96:	68fa      	ldr	r2, [r7, #12]
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d102      	bne.n	8013da4 <udp_bind+0x4c>
      rebind = 1;
 8013d9e:	2301      	movs	r3, #1
 8013da0:	74fb      	strb	r3, [r7, #19]
      break;
 8013da2:	e005      	b.n	8013db0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	68db      	ldr	r3, [r3, #12]
 8013da8:	617b      	str	r3, [r7, #20]
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d1f2      	bne.n	8013d96 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013db0:	88fb      	ldrh	r3, [r7, #6]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d109      	bne.n	8013dca <udp_bind+0x72>
    port = udp_new_port();
 8013db6:	f7ff fc35 	bl	8013624 <udp_new_port>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013dbe:	88fb      	ldrh	r3, [r7, #6]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d12c      	bne.n	8013e1e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013dc4:	f06f 0307 	mvn.w	r3, #7
 8013dc8:	e040      	b.n	8013e4c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013dca:	4b26      	ldr	r3, [pc, #152]	; (8013e64 <udp_bind+0x10c>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	617b      	str	r3, [r7, #20]
 8013dd0:	e022      	b.n	8013e18 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013dd2:	68fa      	ldr	r2, [r7, #12]
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d01b      	beq.n	8013e12 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	8a5b      	ldrh	r3, [r3, #18]
 8013dde:	88fa      	ldrh	r2, [r7, #6]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d116      	bne.n	8013e12 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d00d      	beq.n	8013e0c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d00a      	beq.n	8013e0c <udp_bind+0xb4>
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d006      	beq.n	8013e0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013dfe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d003      	beq.n	8013e0c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d102      	bne.n	8013e12 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013e0c:	f06f 0307 	mvn.w	r3, #7
 8013e10:	e01c      	b.n	8013e4c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	68db      	ldr	r3, [r3, #12]
 8013e16:	617b      	str	r3, [r7, #20]
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d1d9      	bne.n	8013dd2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d002      	beq.n	8013e2a <udp_bind+0xd2>
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	e000      	b.n	8013e2c <udp_bind+0xd4>
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	68fa      	ldr	r2, [r7, #12]
 8013e2e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	88fa      	ldrh	r2, [r7, #6]
 8013e34:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013e36:	7cfb      	ldrb	r3, [r7, #19]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d106      	bne.n	8013e4a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013e3c:	4b09      	ldr	r3, [pc, #36]	; (8013e64 <udp_bind+0x10c>)
 8013e3e:	681a      	ldr	r2, [r3, #0]
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013e44:	4a07      	ldr	r2, [pc, #28]	; (8013e64 <udp_bind+0x10c>)
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013e4a:	2300      	movs	r3, #0
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3718      	adds	r7, #24
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	08020f48 	.word	0x08020f48
 8013e58:	0801fcc4 	.word	0x0801fcc4
 8013e5c:	0801ff8c 	.word	0x0801ff8c
 8013e60:	0801fd18 	.word	0x0801fd18
 8013e64:	2000c568 	.word	0x2000c568

08013e68 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b086      	sub	sp, #24
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	4613      	mov	r3, r2
 8013e74:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d109      	bne.n	8013e90 <udp_connect+0x28>
 8013e7c:	4b2c      	ldr	r3, [pc, #176]	; (8013f30 <udp_connect+0xc8>)
 8013e7e:	f240 4235 	movw	r2, #1077	; 0x435
 8013e82:	492c      	ldr	r1, [pc, #176]	; (8013f34 <udp_connect+0xcc>)
 8013e84:	482c      	ldr	r0, [pc, #176]	; (8013f38 <udp_connect+0xd0>)
 8013e86:	f007 ffef 	bl	801be68 <iprintf>
 8013e8a:	f06f 030f 	mvn.w	r3, #15
 8013e8e:	e04b      	b.n	8013f28 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d109      	bne.n	8013eaa <udp_connect+0x42>
 8013e96:	4b26      	ldr	r3, [pc, #152]	; (8013f30 <udp_connect+0xc8>)
 8013e98:	f240 4236 	movw	r2, #1078	; 0x436
 8013e9c:	4927      	ldr	r1, [pc, #156]	; (8013f3c <udp_connect+0xd4>)
 8013e9e:	4826      	ldr	r0, [pc, #152]	; (8013f38 <udp_connect+0xd0>)
 8013ea0:	f007 ffe2 	bl	801be68 <iprintf>
 8013ea4:	f06f 030f 	mvn.w	r3, #15
 8013ea8:	e03e      	b.n	8013f28 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	8a5b      	ldrh	r3, [r3, #18]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d10f      	bne.n	8013ed2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013eb2:	68f9      	ldr	r1, [r7, #12]
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	8a5b      	ldrh	r3, [r3, #18]
 8013eb8:	461a      	mov	r2, r3
 8013eba:	68f8      	ldr	r0, [r7, #12]
 8013ebc:	f7ff ff4c 	bl	8013d58 <udp_bind>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013ec4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d002      	beq.n	8013ed2 <udp_connect+0x6a>
      return err;
 8013ecc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ed0:	e02a      	b.n	8013f28 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d002      	beq.n	8013ede <udp_connect+0x76>
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	e000      	b.n	8013ee0 <udp_connect+0x78>
 8013ede:	2300      	movs	r3, #0
 8013ee0:	68fa      	ldr	r2, [r7, #12]
 8013ee2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	88fa      	ldrh	r2, [r7, #6]
 8013ee8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	7c1b      	ldrb	r3, [r3, #16]
 8013eee:	f043 0304 	orr.w	r3, r3, #4
 8013ef2:	b2da      	uxtb	r2, r3
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ef8:	4b11      	ldr	r3, [pc, #68]	; (8013f40 <udp_connect+0xd8>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	617b      	str	r3, [r7, #20]
 8013efe:	e008      	b.n	8013f12 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d101      	bne.n	8013f0c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	e00d      	b.n	8013f28 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	68db      	ldr	r3, [r3, #12]
 8013f10:	617b      	str	r3, [r7, #20]
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d1f3      	bne.n	8013f00 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013f18:	4b09      	ldr	r3, [pc, #36]	; (8013f40 <udp_connect+0xd8>)
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013f20:	4a07      	ldr	r2, [pc, #28]	; (8013f40 <udp_connect+0xd8>)
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3718      	adds	r7, #24
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	0801fcc4 	.word	0x0801fcc4
 8013f34:	0801ffa4 	.word	0x0801ffa4
 8013f38:	0801fd18 	.word	0x0801fd18
 8013f3c:	0801ffc0 	.word	0x0801ffc0
 8013f40:	2000c568 	.word	0x2000c568

08013f44 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d107      	bne.n	8013f62 <udp_disconnect+0x1e>
 8013f52:	4b0d      	ldr	r3, [pc, #52]	; (8013f88 <udp_disconnect+0x44>)
 8013f54:	f240 426a 	movw	r2, #1130	; 0x46a
 8013f58:	490c      	ldr	r1, [pc, #48]	; (8013f8c <udp_disconnect+0x48>)
 8013f5a:	480d      	ldr	r0, [pc, #52]	; (8013f90 <udp_disconnect+0x4c>)
 8013f5c:	f007 ff84 	bl	801be68 <iprintf>
 8013f60:	e00f      	b.n	8013f82 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2200      	movs	r2, #0
 8013f66:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2200      	movs	r2, #0
 8013f72:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	7c1b      	ldrb	r3, [r3, #16]
 8013f78:	f023 0304 	bic.w	r3, r3, #4
 8013f7c:	b2da      	uxtb	r2, r3
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	741a      	strb	r2, [r3, #16]
}
 8013f82:	3708      	adds	r7, #8
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}
 8013f88:	0801fcc4 	.word	0x0801fcc4
 8013f8c:	0801ffdc 	.word	0x0801ffdc
 8013f90:	0801fd18 	.word	0x0801fd18

08013f94 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d107      	bne.n	8013fb6 <udp_recv+0x22>
 8013fa6:	4b08      	ldr	r3, [pc, #32]	; (8013fc8 <udp_recv+0x34>)
 8013fa8:	f240 428a 	movw	r2, #1162	; 0x48a
 8013fac:	4907      	ldr	r1, [pc, #28]	; (8013fcc <udp_recv+0x38>)
 8013fae:	4808      	ldr	r0, [pc, #32]	; (8013fd0 <udp_recv+0x3c>)
 8013fb0:	f007 ff5a 	bl	801be68 <iprintf>
 8013fb4:	e005      	b.n	8013fc2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	68ba      	ldr	r2, [r7, #8]
 8013fba:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	687a      	ldr	r2, [r7, #4]
 8013fc0:	61da      	str	r2, [r3, #28]
}
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	0801fcc4 	.word	0x0801fcc4
 8013fcc:	0801fff8 	.word	0x0801fff8
 8013fd0:	0801fd18 	.word	0x0801fd18

08013fd4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b084      	sub	sp, #16
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d107      	bne.n	8013ff2 <udp_remove+0x1e>
 8013fe2:	4b19      	ldr	r3, [pc, #100]	; (8014048 <udp_remove+0x74>)
 8013fe4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013fe8:	4918      	ldr	r1, [pc, #96]	; (801404c <udp_remove+0x78>)
 8013fea:	4819      	ldr	r0, [pc, #100]	; (8014050 <udp_remove+0x7c>)
 8013fec:	f007 ff3c 	bl	801be68 <iprintf>
 8013ff0:	e026      	b.n	8014040 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013ff2:	4b18      	ldr	r3, [pc, #96]	; (8014054 <udp_remove+0x80>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d105      	bne.n	8014008 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013ffc:	4b15      	ldr	r3, [pc, #84]	; (8014054 <udp_remove+0x80>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	68db      	ldr	r3, [r3, #12]
 8014002:	4a14      	ldr	r2, [pc, #80]	; (8014054 <udp_remove+0x80>)
 8014004:	6013      	str	r3, [r2, #0]
 8014006:	e017      	b.n	8014038 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014008:	4b12      	ldr	r3, [pc, #72]	; (8014054 <udp_remove+0x80>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	60fb      	str	r3, [r7, #12]
 801400e:	e010      	b.n	8014032 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d009      	beq.n	801402c <udp_remove+0x58>
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	429a      	cmp	r2, r3
 8014020:	d104      	bne.n	801402c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	68da      	ldr	r2, [r3, #12]
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	60da      	str	r2, [r3, #12]
        break;
 801402a:	e005      	b.n	8014038 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	60fb      	str	r3, [r7, #12]
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d1eb      	bne.n	8014010 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014038:	6879      	ldr	r1, [r7, #4]
 801403a:	2000      	movs	r0, #0
 801403c:	f7f7 ffa6 	bl	800bf8c <memp_free>
}
 8014040:	3710      	adds	r7, #16
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	0801fcc4 	.word	0x0801fcc4
 801404c:	08020010 	.word	0x08020010
 8014050:	0801fd18 	.word	0x0801fd18
 8014054:	2000c568 	.word	0x2000c568

08014058 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801405e:	2000      	movs	r0, #0
 8014060:	f7f7 ff42 	bl	800bee8 <memp_malloc>
 8014064:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d007      	beq.n	801407c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801406c:	2220      	movs	r2, #32
 801406e:	2100      	movs	r1, #0
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f007 fef1 	bl	801be58 <memset>
    pcb->ttl = UDP_TTL;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	22ff      	movs	r2, #255	; 0xff
 801407a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801407c:	687b      	ldr	r3, [r7, #4]
}
 801407e:	4618      	mov	r0, r3
 8014080:	3708      	adds	r7, #8
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}

08014086 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014086:	b580      	push	{r7, lr}
 8014088:	b084      	sub	sp, #16
 801408a:	af00      	add	r7, sp, #0
 801408c:	4603      	mov	r3, r0
 801408e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014090:	f7ff ffe2 	bl	8014058 <udp_new>
 8014094:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014096:	68fb      	ldr	r3, [r7, #12]
}
 8014098:	4618      	mov	r0, r3
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}

080140a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80140a0:	b480      	push	{r7}
 80140a2:	b085      	sub	sp, #20
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d01e      	beq.n	80140ee <udp_netif_ip_addr_changed+0x4e>
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d01a      	beq.n	80140ee <udp_netif_ip_addr_changed+0x4e>
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d017      	beq.n	80140ee <udp_netif_ip_addr_changed+0x4e>
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d013      	beq.n	80140ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140c6:	4b0d      	ldr	r3, [pc, #52]	; (80140fc <udp_netif_ip_addr_changed+0x5c>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	60fb      	str	r3, [r7, #12]
 80140cc:	e00c      	b.n	80140e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d103      	bne.n	80140e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	60fb      	str	r3, [r7, #12]
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d1ef      	bne.n	80140ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80140ee:	bf00      	nop
 80140f0:	3714      	adds	r7, #20
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr
 80140fa:	bf00      	nop
 80140fc:	2000c568 	.word	0x2000c568

08014100 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014104:	4b20      	ldr	r3, [pc, #128]	; (8014188 <dhcp_inc_pcb_refcount+0x88>)
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d133      	bne.n	8014174 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801410c:	4b1f      	ldr	r3, [pc, #124]	; (801418c <dhcp_inc_pcb_refcount+0x8c>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d005      	beq.n	8014120 <dhcp_inc_pcb_refcount+0x20>
 8014114:	4b1e      	ldr	r3, [pc, #120]	; (8014190 <dhcp_inc_pcb_refcount+0x90>)
 8014116:	22e5      	movs	r2, #229	; 0xe5
 8014118:	491e      	ldr	r1, [pc, #120]	; (8014194 <dhcp_inc_pcb_refcount+0x94>)
 801411a:	481f      	ldr	r0, [pc, #124]	; (8014198 <dhcp_inc_pcb_refcount+0x98>)
 801411c:	f007 fea4 	bl	801be68 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014120:	f7ff ff9a 	bl	8014058 <udp_new>
 8014124:	4602      	mov	r2, r0
 8014126:	4b19      	ldr	r3, [pc, #100]	; (801418c <dhcp_inc_pcb_refcount+0x8c>)
 8014128:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801412a:	4b18      	ldr	r3, [pc, #96]	; (801418c <dhcp_inc_pcb_refcount+0x8c>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d102      	bne.n	8014138 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014132:	f04f 33ff 	mov.w	r3, #4294967295
 8014136:	e024      	b.n	8014182 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014138:	4b14      	ldr	r3, [pc, #80]	; (801418c <dhcp_inc_pcb_refcount+0x8c>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	7a5a      	ldrb	r2, [r3, #9]
 801413e:	4b13      	ldr	r3, [pc, #76]	; (801418c <dhcp_inc_pcb_refcount+0x8c>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f042 0220 	orr.w	r2, r2, #32
 8014146:	b2d2      	uxtb	r2, r2
 8014148:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801414a:	4b10      	ldr	r3, [pc, #64]	; (801418c <dhcp_inc_pcb_refcount+0x8c>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2244      	movs	r2, #68	; 0x44
 8014150:	4912      	ldr	r1, [pc, #72]	; (801419c <dhcp_inc_pcb_refcount+0x9c>)
 8014152:	4618      	mov	r0, r3
 8014154:	f7ff fe00 	bl	8013d58 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014158:	4b0c      	ldr	r3, [pc, #48]	; (801418c <dhcp_inc_pcb_refcount+0x8c>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	2243      	movs	r2, #67	; 0x43
 801415e:	490f      	ldr	r1, [pc, #60]	; (801419c <dhcp_inc_pcb_refcount+0x9c>)
 8014160:	4618      	mov	r0, r3
 8014162:	f7ff fe81 	bl	8013e68 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014166:	4b09      	ldr	r3, [pc, #36]	; (801418c <dhcp_inc_pcb_refcount+0x8c>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2200      	movs	r2, #0
 801416c:	490c      	ldr	r1, [pc, #48]	; (80141a0 <dhcp_inc_pcb_refcount+0xa0>)
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff ff10 	bl	8013f94 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014174:	4b04      	ldr	r3, [pc, #16]	; (8014188 <dhcp_inc_pcb_refcount+0x88>)
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	3301      	adds	r3, #1
 801417a:	b2da      	uxtb	r2, r3
 801417c:	4b02      	ldr	r3, [pc, #8]	; (8014188 <dhcp_inc_pcb_refcount+0x88>)
 801417e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014180:	2300      	movs	r3, #0
}
 8014182:	4618      	mov	r0, r3
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	20008434 	.word	0x20008434
 801418c:	20008430 	.word	0x20008430
 8014190:	08020028 	.word	0x08020028
 8014194:	08020060 	.word	0x08020060
 8014198:	08020088 	.word	0x08020088
 801419c:	08020f48 	.word	0x08020f48
 80141a0:	08015a59 	.word	0x08015a59

080141a4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80141a8:	4b0e      	ldr	r3, [pc, #56]	; (80141e4 <dhcp_dec_pcb_refcount+0x40>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d105      	bne.n	80141bc <dhcp_dec_pcb_refcount+0x18>
 80141b0:	4b0d      	ldr	r3, [pc, #52]	; (80141e8 <dhcp_dec_pcb_refcount+0x44>)
 80141b2:	22ff      	movs	r2, #255	; 0xff
 80141b4:	490d      	ldr	r1, [pc, #52]	; (80141ec <dhcp_dec_pcb_refcount+0x48>)
 80141b6:	480e      	ldr	r0, [pc, #56]	; (80141f0 <dhcp_dec_pcb_refcount+0x4c>)
 80141b8:	f007 fe56 	bl	801be68 <iprintf>
  dhcp_pcb_refcount--;
 80141bc:	4b09      	ldr	r3, [pc, #36]	; (80141e4 <dhcp_dec_pcb_refcount+0x40>)
 80141be:	781b      	ldrb	r3, [r3, #0]
 80141c0:	3b01      	subs	r3, #1
 80141c2:	b2da      	uxtb	r2, r3
 80141c4:	4b07      	ldr	r3, [pc, #28]	; (80141e4 <dhcp_dec_pcb_refcount+0x40>)
 80141c6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80141c8:	4b06      	ldr	r3, [pc, #24]	; (80141e4 <dhcp_dec_pcb_refcount+0x40>)
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d107      	bne.n	80141e0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80141d0:	4b08      	ldr	r3, [pc, #32]	; (80141f4 <dhcp_dec_pcb_refcount+0x50>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7ff fefd 	bl	8013fd4 <udp_remove>
    dhcp_pcb = NULL;
 80141da:	4b06      	ldr	r3, [pc, #24]	; (80141f4 <dhcp_dec_pcb_refcount+0x50>)
 80141dc:	2200      	movs	r2, #0
 80141de:	601a      	str	r2, [r3, #0]
  }
}
 80141e0:	bf00      	nop
 80141e2:	bd80      	pop	{r7, pc}
 80141e4:	20008434 	.word	0x20008434
 80141e8:	08020028 	.word	0x08020028
 80141ec:	080200b0 	.word	0x080200b0
 80141f0:	08020088 	.word	0x08020088
 80141f4:	20008430 	.word	0x20008430

080141f8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b084      	sub	sp, #16
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014204:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014206:	210c      	movs	r1, #12
 8014208:	68f8      	ldr	r0, [r7, #12]
 801420a:	f001 f867 	bl	80152dc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801420e:	4b06      	ldr	r3, [pc, #24]	; (8014228 <dhcp_handle_nak+0x30>)
 8014210:	4a05      	ldr	r2, [pc, #20]	; (8014228 <dhcp_handle_nak+0x30>)
 8014212:	4905      	ldr	r1, [pc, #20]	; (8014228 <dhcp_handle_nak+0x30>)
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f7f8 f85b 	bl	800c2d0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f000 fc5a 	bl	8014ad4 <dhcp_discover>
}
 8014220:	bf00      	nop
 8014222:	3710      	adds	r7, #16
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	08020f48 	.word	0x08020f48

0801422c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014238:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801423a:	2108      	movs	r1, #8
 801423c:	68f8      	ldr	r0, [r7, #12]
 801423e:	f001 f84d 	bl	80152dc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	331c      	adds	r3, #28
 8014246:	2200      	movs	r2, #0
 8014248:	4619      	mov	r1, r3
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f002 fb4c 	bl	80168e8 <etharp_query>
 8014250:	4603      	mov	r3, r0
 8014252:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	799b      	ldrb	r3, [r3, #6]
 8014258:	2bff      	cmp	r3, #255	; 0xff
 801425a:	d005      	beq.n	8014268 <dhcp_check+0x3c>
    dhcp->tries++;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	799b      	ldrb	r3, [r3, #6]
 8014260:	3301      	adds	r3, #1
 8014262:	b2da      	uxtb	r2, r3
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014268:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801426c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801426e:	893b      	ldrh	r3, [r7, #8]
 8014270:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014274:	4a06      	ldr	r2, [pc, #24]	; (8014290 <dhcp_check+0x64>)
 8014276:	fb82 1203 	smull	r1, r2, r2, r3
 801427a:	1152      	asrs	r2, r2, #5
 801427c:	17db      	asrs	r3, r3, #31
 801427e:	1ad3      	subs	r3, r2, r3
 8014280:	b29a      	uxth	r2, r3
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014286:	bf00      	nop
 8014288:	3710      	adds	r7, #16
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	10624dd3 	.word	0x10624dd3

08014294 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80142a4:	4b0c      	ldr	r3, [pc, #48]	; (80142d8 <dhcp_handle_offer+0x44>)
 80142a6:	789b      	ldrb	r3, [r3, #2]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d011      	beq.n	80142d0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2200      	movs	r2, #0
 80142b0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80142b2:	4b0a      	ldr	r3, [pc, #40]	; (80142dc <dhcp_handle_offer+0x48>)
 80142b4:	689b      	ldr	r3, [r3, #8]
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7f7 f975 	bl	800b5a6 <lwip_htonl>
 80142bc:	4602      	mov	r2, r0
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80142c2:	683b      	ldr	r3, [r7, #0]
 80142c4:	691a      	ldr	r2, [r3, #16]
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f000 f808 	bl	80142e0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80142d0:	bf00      	nop
 80142d2:	3710      	adds	r7, #16
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}
 80142d8:	2000c56c 	.word	0x2000c56c
 80142dc:	2000c574 	.word	0x2000c574

080142e0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80142e0:	b5b0      	push	{r4, r5, r7, lr}
 80142e2:	b08a      	sub	sp, #40	; 0x28
 80142e4:	af02      	add	r7, sp, #8
 80142e6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d109      	bne.n	8014302 <dhcp_select+0x22>
 80142ee:	4b71      	ldr	r3, [pc, #452]	; (80144b4 <dhcp_select+0x1d4>)
 80142f0:	f240 1277 	movw	r2, #375	; 0x177
 80142f4:	4970      	ldr	r1, [pc, #448]	; (80144b8 <dhcp_select+0x1d8>)
 80142f6:	4871      	ldr	r0, [pc, #452]	; (80144bc <dhcp_select+0x1dc>)
 80142f8:	f007 fdb6 	bl	801be68 <iprintf>
 80142fc:	f06f 030f 	mvn.w	r3, #15
 8014300:	e0d3      	b.n	80144aa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014306:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014308:	69bb      	ldr	r3, [r7, #24]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d109      	bne.n	8014322 <dhcp_select+0x42>
 801430e:	4b69      	ldr	r3, [pc, #420]	; (80144b4 <dhcp_select+0x1d4>)
 8014310:	f240 1279 	movw	r2, #377	; 0x179
 8014314:	496a      	ldr	r1, [pc, #424]	; (80144c0 <dhcp_select+0x1e0>)
 8014316:	4869      	ldr	r0, [pc, #420]	; (80144bc <dhcp_select+0x1dc>)
 8014318:	f007 fda6 	bl	801be68 <iprintf>
 801431c:	f06f 0305 	mvn.w	r3, #5
 8014320:	e0c3      	b.n	80144aa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014322:	2101      	movs	r1, #1
 8014324:	69b8      	ldr	r0, [r7, #24]
 8014326:	f000 ffd9 	bl	80152dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801432a:	f107 030c 	add.w	r3, r7, #12
 801432e:	2203      	movs	r2, #3
 8014330:	69b9      	ldr	r1, [r7, #24]
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f001 fc5c 	bl	8015bf0 <dhcp_create_msg>
 8014338:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	2b00      	cmp	r3, #0
 801433e:	f000 8085 	beq.w	801444c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014348:	89b8      	ldrh	r0, [r7, #12]
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014350:	2302      	movs	r3, #2
 8014352:	2239      	movs	r2, #57	; 0x39
 8014354:	f000 ffdc 	bl	8015310 <dhcp_option>
 8014358:	4603      	mov	r3, r0
 801435a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801435c:	89b8      	ldrh	r0, [r7, #12]
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014368:	461a      	mov	r2, r3
 801436a:	f001 f82b 	bl	80153c4 <dhcp_option_short>
 801436e:	4603      	mov	r3, r0
 8014370:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014372:	89b8      	ldrh	r0, [r7, #12]
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801437a:	2304      	movs	r3, #4
 801437c:	2232      	movs	r2, #50	; 0x32
 801437e:	f000 ffc7 	bl	8015310 <dhcp_option>
 8014382:	4603      	mov	r3, r0
 8014384:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014386:	89bc      	ldrh	r4, [r7, #12]
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	69db      	ldr	r3, [r3, #28]
 8014392:	4618      	mov	r0, r3
 8014394:	f7f7 f907 	bl	800b5a6 <lwip_htonl>
 8014398:	4603      	mov	r3, r0
 801439a:	461a      	mov	r2, r3
 801439c:	4629      	mov	r1, r5
 801439e:	4620      	mov	r0, r4
 80143a0:	f001 f842 	bl	8015428 <dhcp_option_long>
 80143a4:	4603      	mov	r3, r0
 80143a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80143a8:	89b8      	ldrh	r0, [r7, #12]
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143b0:	2304      	movs	r3, #4
 80143b2:	2236      	movs	r2, #54	; 0x36
 80143b4:	f000 ffac 	bl	8015310 <dhcp_option>
 80143b8:	4603      	mov	r3, r0
 80143ba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80143bc:	89bc      	ldrh	r4, [r7, #12]
 80143be:	693b      	ldr	r3, [r7, #16]
 80143c0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80143c4:	69bb      	ldr	r3, [r7, #24]
 80143c6:	699b      	ldr	r3, [r3, #24]
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7f7 f8ec 	bl	800b5a6 <lwip_htonl>
 80143ce:	4603      	mov	r3, r0
 80143d0:	461a      	mov	r2, r3
 80143d2:	4629      	mov	r1, r5
 80143d4:	4620      	mov	r0, r4
 80143d6:	f001 f827 	bl	8015428 <dhcp_option_long>
 80143da:	4603      	mov	r3, r0
 80143dc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80143de:	89b8      	ldrh	r0, [r7, #12]
 80143e0:	693b      	ldr	r3, [r7, #16]
 80143e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143e6:	2303      	movs	r3, #3
 80143e8:	2237      	movs	r2, #55	; 0x37
 80143ea:	f000 ff91 	bl	8015310 <dhcp_option>
 80143ee:	4603      	mov	r3, r0
 80143f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143f2:	2300      	movs	r3, #0
 80143f4:	77bb      	strb	r3, [r7, #30]
 80143f6:	e00e      	b.n	8014416 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80143f8:	89b8      	ldrh	r0, [r7, #12]
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014400:	7fbb      	ldrb	r3, [r7, #30]
 8014402:	4a30      	ldr	r2, [pc, #192]	; (80144c4 <dhcp_select+0x1e4>)
 8014404:	5cd3      	ldrb	r3, [r2, r3]
 8014406:	461a      	mov	r2, r3
 8014408:	f000 ffb6 	bl	8015378 <dhcp_option_byte>
 801440c:	4603      	mov	r3, r0
 801440e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014410:	7fbb      	ldrb	r3, [r7, #30]
 8014412:	3301      	adds	r3, #1
 8014414:	77bb      	strb	r3, [r7, #30]
 8014416:	7fbb      	ldrb	r3, [r7, #30]
 8014418:	2b02      	cmp	r3, #2
 801441a:	d9ed      	bls.n	80143f8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801441c:	89b8      	ldrh	r0, [r7, #12]
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	33f0      	adds	r3, #240	; 0xf0
 8014422:	697a      	ldr	r2, [r7, #20]
 8014424:	4619      	mov	r1, r3
 8014426:	f001 fcb9 	bl	8015d9c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801442a:	4b27      	ldr	r3, [pc, #156]	; (80144c8 <dhcp_select+0x1e8>)
 801442c:	6818      	ldr	r0, [r3, #0]
 801442e:	4b27      	ldr	r3, [pc, #156]	; (80144cc <dhcp_select+0x1ec>)
 8014430:	9301      	str	r3, [sp, #4]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	2343      	movs	r3, #67	; 0x43
 8014438:	4a25      	ldr	r2, [pc, #148]	; (80144d0 <dhcp_select+0x1f0>)
 801443a:	6979      	ldr	r1, [r7, #20]
 801443c:	f7ff fba6 	bl	8013b8c <udp_sendto_if_src>
 8014440:	4603      	mov	r3, r0
 8014442:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014444:	6978      	ldr	r0, [r7, #20]
 8014446:	f7f8 fc7f 	bl	800cd48 <pbuf_free>
 801444a:	e001      	b.n	8014450 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801444c:	23ff      	movs	r3, #255	; 0xff
 801444e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	799b      	ldrb	r3, [r3, #6]
 8014454:	2bff      	cmp	r3, #255	; 0xff
 8014456:	d005      	beq.n	8014464 <dhcp_select+0x184>
    dhcp->tries++;
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	799b      	ldrb	r3, [r3, #6]
 801445c:	3301      	adds	r3, #1
 801445e:	b2da      	uxtb	r2, r3
 8014460:	69bb      	ldr	r3, [r7, #24]
 8014462:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	799b      	ldrb	r3, [r3, #6]
 8014468:	2b05      	cmp	r3, #5
 801446a:	d80d      	bhi.n	8014488 <dhcp_select+0x1a8>
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	799b      	ldrb	r3, [r3, #6]
 8014470:	461a      	mov	r2, r3
 8014472:	2301      	movs	r3, #1
 8014474:	4093      	lsls	r3, r2
 8014476:	b29b      	uxth	r3, r3
 8014478:	461a      	mov	r2, r3
 801447a:	0152      	lsls	r2, r2, #5
 801447c:	1ad2      	subs	r2, r2, r3
 801447e:	0092      	lsls	r2, r2, #2
 8014480:	4413      	add	r3, r2
 8014482:	00db      	lsls	r3, r3, #3
 8014484:	b29b      	uxth	r3, r3
 8014486:	e001      	b.n	801448c <dhcp_select+0x1ac>
 8014488:	f64e 2360 	movw	r3, #60000	; 0xea60
 801448c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801448e:	89fb      	ldrh	r3, [r7, #14]
 8014490:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014494:	4a0f      	ldr	r2, [pc, #60]	; (80144d4 <dhcp_select+0x1f4>)
 8014496:	fb82 1203 	smull	r1, r2, r2, r3
 801449a:	1152      	asrs	r2, r2, #5
 801449c:	17db      	asrs	r3, r3, #31
 801449e:	1ad3      	subs	r3, r2, r3
 80144a0:	b29a      	uxth	r2, r3
 80144a2:	69bb      	ldr	r3, [r7, #24]
 80144a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80144a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3720      	adds	r7, #32
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bdb0      	pop	{r4, r5, r7, pc}
 80144b2:	bf00      	nop
 80144b4:	08020028 	.word	0x08020028
 80144b8:	080200d4 	.word	0x080200d4
 80144bc:	08020088 	.word	0x08020088
 80144c0:	080200f0 	.word	0x080200f0
 80144c4:	20000018 	.word	0x20000018
 80144c8:	20008430 	.word	0x20008430
 80144cc:	08020f48 	.word	0x08020f48
 80144d0:	08020f4c 	.word	0x08020f4c
 80144d4:	10624dd3 	.word	0x10624dd3

080144d8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80144de:	4b27      	ldr	r3, [pc, #156]	; (801457c <dhcp_coarse_tmr+0xa4>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	607b      	str	r3, [r7, #4]
 80144e4:	e042      	b.n	801456c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ea:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80144ec:	683b      	ldr	r3, [r7, #0]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d039      	beq.n	8014566 <dhcp_coarse_tmr+0x8e>
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	795b      	ldrb	r3, [r3, #5]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d035      	beq.n	8014566 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	8a9b      	ldrh	r3, [r3, #20]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d012      	beq.n	8014528 <dhcp_coarse_tmr+0x50>
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	8a5b      	ldrh	r3, [r3, #18]
 8014506:	3301      	adds	r3, #1
 8014508:	b29a      	uxth	r2, r3
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	825a      	strh	r2, [r3, #18]
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	8a5a      	ldrh	r2, [r3, #18]
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	8a9b      	ldrh	r3, [r3, #20]
 8014516:	429a      	cmp	r2, r3
 8014518:	d106      	bne.n	8014528 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f000 fe44 	bl	80151a8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f000 f969 	bl	80147f8 <dhcp_start>
 8014526:	e01e      	b.n	8014566 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	8a1b      	ldrh	r3, [r3, #16]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d00b      	beq.n	8014548 <dhcp_coarse_tmr+0x70>
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	8a1b      	ldrh	r3, [r3, #16]
 8014534:	1e5a      	subs	r2, r3, #1
 8014536:	b291      	uxth	r1, r2
 8014538:	683a      	ldr	r2, [r7, #0]
 801453a:	8211      	strh	r1, [r2, #16]
 801453c:	2b01      	cmp	r3, #1
 801453e:	d103      	bne.n	8014548 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014540:	6878      	ldr	r0, [r7, #4]
 8014542:	f000 f8c6 	bl	80146d2 <dhcp_t2_timeout>
 8014546:	e00e      	b.n	8014566 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	89db      	ldrh	r3, [r3, #14]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d00a      	beq.n	8014566 <dhcp_coarse_tmr+0x8e>
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	89db      	ldrh	r3, [r3, #14]
 8014554:	1e5a      	subs	r2, r3, #1
 8014556:	b291      	uxth	r1, r2
 8014558:	683a      	ldr	r2, [r7, #0]
 801455a:	81d1      	strh	r1, [r2, #14]
 801455c:	2b01      	cmp	r3, #1
 801455e:	d102      	bne.n	8014566 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f000 f888 	bl	8014676 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	607b      	str	r3, [r7, #4]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d1b9      	bne.n	80144e6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014572:	bf00      	nop
 8014574:	3708      	adds	r7, #8
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
 801457a:	bf00      	nop
 801457c:	2000c540 	.word	0x2000c540

08014580 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014586:	4b16      	ldr	r3, [pc, #88]	; (80145e0 <dhcp_fine_tmr+0x60>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	607b      	str	r3, [r7, #4]
 801458c:	e020      	b.n	80145d0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014592:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d017      	beq.n	80145ca <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	891b      	ldrh	r3, [r3, #8]
 801459e:	2b01      	cmp	r3, #1
 80145a0:	d906      	bls.n	80145b0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	891b      	ldrh	r3, [r3, #8]
 80145a6:	3b01      	subs	r3, #1
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	811a      	strh	r2, [r3, #8]
 80145ae:	e00c      	b.n	80145ca <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	891b      	ldrh	r3, [r3, #8]
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d108      	bne.n	80145ca <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	891b      	ldrh	r3, [r3, #8]
 80145bc:	3b01      	subs	r3, #1
 80145be:	b29a      	uxth	r2, r3
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f000 f80d 	bl	80145e4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	607b      	str	r3, [r7, #4]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d1db      	bne.n	801458e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80145d6:	bf00      	nop
 80145d8:	3708      	adds	r7, #8
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	2000c540 	.word	0x2000c540

080145e4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145f0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	795b      	ldrb	r3, [r3, #5]
 80145f6:	2b0c      	cmp	r3, #12
 80145f8:	d003      	beq.n	8014602 <dhcp_timeout+0x1e>
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	795b      	ldrb	r3, [r3, #5]
 80145fe:	2b06      	cmp	r3, #6
 8014600:	d103      	bne.n	801460a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f000 fa66 	bl	8014ad4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014608:	e031      	b.n	801466e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	795b      	ldrb	r3, [r3, #5]
 801460e:	2b01      	cmp	r3, #1
 8014610:	d10e      	bne.n	8014630 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	799b      	ldrb	r3, [r3, #6]
 8014616:	2b05      	cmp	r3, #5
 8014618:	d803      	bhi.n	8014622 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f7ff fe60 	bl	80142e0 <dhcp_select>
}
 8014620:	e025      	b.n	801466e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f000 fdc0 	bl	80151a8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f000 f8e5 	bl	80147f8 <dhcp_start>
}
 801462e:	e01e      	b.n	801466e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	795b      	ldrb	r3, [r3, #5]
 8014634:	2b08      	cmp	r3, #8
 8014636:	d10b      	bne.n	8014650 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	799b      	ldrb	r3, [r3, #6]
 801463c:	2b01      	cmp	r3, #1
 801463e:	d803      	bhi.n	8014648 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f7ff fdf3 	bl	801422c <dhcp_check>
}
 8014646:	e012      	b.n	801466e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 fae5 	bl	8014c18 <dhcp_bind>
}
 801464e:	e00e      	b.n	801466e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	795b      	ldrb	r3, [r3, #5]
 8014654:	2b03      	cmp	r3, #3
 8014656:	d10a      	bne.n	801466e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	799b      	ldrb	r3, [r3, #6]
 801465c:	2b01      	cmp	r3, #1
 801465e:	d803      	bhi.n	8014668 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f000 fceb 	bl	801503c <dhcp_reboot>
}
 8014666:	e002      	b.n	801466e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f000 fa33 	bl	8014ad4 <dhcp_discover>
}
 801466e:	bf00      	nop
 8014670:	3710      	adds	r7, #16
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}

08014676 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014676:	b580      	push	{r7, lr}
 8014678:	b084      	sub	sp, #16
 801467a:	af00      	add	r7, sp, #0
 801467c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014682:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	795b      	ldrb	r3, [r3, #5]
 8014688:	2b01      	cmp	r3, #1
 801468a:	d007      	beq.n	801469c <dhcp_t1_timeout+0x26>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	795b      	ldrb	r3, [r3, #5]
 8014690:	2b0a      	cmp	r3, #10
 8014692:	d003      	beq.n	801469c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014698:	2b05      	cmp	r3, #5
 801469a:	d116      	bne.n	80146ca <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 fb95 	bl	8014dcc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	899b      	ldrh	r3, [r3, #12]
 80146a6:	461a      	mov	r2, r3
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	8a5b      	ldrh	r3, [r3, #18]
 80146ac:	1ad3      	subs	r3, r2, r3
 80146ae:	2b01      	cmp	r3, #1
 80146b0:	dd0b      	ble.n	80146ca <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	899b      	ldrh	r3, [r3, #12]
 80146b6:	461a      	mov	r2, r3
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	8a5b      	ldrh	r3, [r3, #18]
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	0fda      	lsrs	r2, r3, #31
 80146c0:	4413      	add	r3, r2
 80146c2:	105b      	asrs	r3, r3, #1
 80146c4:	b29a      	uxth	r2, r3
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80146ca:	bf00      	nop
 80146cc:	3710      	adds	r7, #16
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}

080146d2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80146d2:	b580      	push	{r7, lr}
 80146d4:	b084      	sub	sp, #16
 80146d6:	af00      	add	r7, sp, #0
 80146d8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	795b      	ldrb	r3, [r3, #5]
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d00b      	beq.n	8014700 <dhcp_t2_timeout+0x2e>
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	795b      	ldrb	r3, [r3, #5]
 80146ec:	2b0a      	cmp	r3, #10
 80146ee:	d007      	beq.n	8014700 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80146f4:	2b05      	cmp	r3, #5
 80146f6:	d003      	beq.n	8014700 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	795b      	ldrb	r3, [r3, #5]
 80146fc:	2b04      	cmp	r3, #4
 80146fe:	d116      	bne.n	801472e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f000 fbff 	bl	8014f04 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	8a9b      	ldrh	r3, [r3, #20]
 801470a:	461a      	mov	r2, r3
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	8a5b      	ldrh	r3, [r3, #18]
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	2b01      	cmp	r3, #1
 8014714:	dd0b      	ble.n	801472e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	8a9b      	ldrh	r3, [r3, #20]
 801471a:	461a      	mov	r2, r3
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	8a5b      	ldrh	r3, [r3, #18]
 8014720:	1ad3      	subs	r3, r2, r3
 8014722:	0fda      	lsrs	r2, r3, #31
 8014724:	4413      	add	r3, r2
 8014726:	105b      	asrs	r3, r3, #1
 8014728:	b29a      	uxth	r2, r3
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801472e:	bf00      	nop
 8014730:	3710      	adds	r7, #16
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
	...

08014738 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014746:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2200      	movs	r2, #0
 801474c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2200      	movs	r2, #0
 8014752:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014754:	4b26      	ldr	r3, [pc, #152]	; (80147f0 <dhcp_handle_ack+0xb8>)
 8014756:	78db      	ldrb	r3, [r3, #3]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d003      	beq.n	8014764 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801475c:	4b25      	ldr	r3, [pc, #148]	; (80147f4 <dhcp_handle_ack+0xbc>)
 801475e:	68da      	ldr	r2, [r3, #12]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014764:	4b22      	ldr	r3, [pc, #136]	; (80147f0 <dhcp_handle_ack+0xb8>)
 8014766:	791b      	ldrb	r3, [r3, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d004      	beq.n	8014776 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801476c:	4b21      	ldr	r3, [pc, #132]	; (80147f4 <dhcp_handle_ack+0xbc>)
 801476e:	691a      	ldr	r2, [r3, #16]
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	62da      	str	r2, [r3, #44]	; 0x2c
 8014774:	e004      	b.n	8014780 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801477a:	085a      	lsrs	r2, r3, #1
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014780:	4b1b      	ldr	r3, [pc, #108]	; (80147f0 <dhcp_handle_ack+0xb8>)
 8014782:	795b      	ldrb	r3, [r3, #5]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d004      	beq.n	8014792 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014788:	4b1a      	ldr	r3, [pc, #104]	; (80147f4 <dhcp_handle_ack+0xbc>)
 801478a:	695a      	ldr	r2, [r3, #20]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	631a      	str	r2, [r3, #48]	; 0x30
 8014790:	e007      	b.n	80147a2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014796:	4613      	mov	r3, r2
 8014798:	00db      	lsls	r3, r3, #3
 801479a:	1a9b      	subs	r3, r3, r2
 801479c:	08da      	lsrs	r2, r3, #3
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	691a      	ldr	r2, [r3, #16]
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80147aa:	4b11      	ldr	r3, [pc, #68]	; (80147f0 <dhcp_handle_ack+0xb8>)
 80147ac:	799b      	ldrb	r3, [r3, #6]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d00b      	beq.n	80147ca <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80147b2:	4b10      	ldr	r3, [pc, #64]	; (80147f4 <dhcp_handle_ack+0xbc>)
 80147b4:	699b      	ldr	r3, [r3, #24]
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7f6 fef5 	bl	800b5a6 <lwip_htonl>
 80147bc:	4602      	mov	r2, r0
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2201      	movs	r2, #1
 80147c6:	71da      	strb	r2, [r3, #7]
 80147c8:	e002      	b.n	80147d0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2200      	movs	r2, #0
 80147ce:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80147d0:	4b07      	ldr	r3, [pc, #28]	; (80147f0 <dhcp_handle_ack+0xb8>)
 80147d2:	79db      	ldrb	r3, [r3, #7]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d007      	beq.n	80147e8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80147d8:	4b06      	ldr	r3, [pc, #24]	; (80147f4 <dhcp_handle_ack+0xbc>)
 80147da:	69db      	ldr	r3, [r3, #28]
 80147dc:	4618      	mov	r0, r3
 80147de:	f7f6 fee2 	bl	800b5a6 <lwip_htonl>
 80147e2:	4602      	mov	r2, r0
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80147e8:	bf00      	nop
 80147ea:	3710      	adds	r7, #16
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	2000c56c 	.word	0x2000c56c
 80147f4:	2000c574 	.word	0x2000c574

080147f8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d109      	bne.n	801481a <dhcp_start+0x22>
 8014806:	4b37      	ldr	r3, [pc, #220]	; (80148e4 <dhcp_start+0xec>)
 8014808:	f240 22e7 	movw	r2, #743	; 0x2e7
 801480c:	4936      	ldr	r1, [pc, #216]	; (80148e8 <dhcp_start+0xf0>)
 801480e:	4837      	ldr	r0, [pc, #220]	; (80148ec <dhcp_start+0xf4>)
 8014810:	f007 fb2a 	bl	801be68 <iprintf>
 8014814:	f06f 030f 	mvn.w	r3, #15
 8014818:	e060      	b.n	80148dc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014820:	f003 0301 	and.w	r3, r3, #1
 8014824:	2b00      	cmp	r3, #0
 8014826:	d109      	bne.n	801483c <dhcp_start+0x44>
 8014828:	4b2e      	ldr	r3, [pc, #184]	; (80148e4 <dhcp_start+0xec>)
 801482a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801482e:	4930      	ldr	r1, [pc, #192]	; (80148f0 <dhcp_start+0xf8>)
 8014830:	482e      	ldr	r0, [pc, #184]	; (80148ec <dhcp_start+0xf4>)
 8014832:	f007 fb19 	bl	801be68 <iprintf>
 8014836:	f06f 030f 	mvn.w	r3, #15
 801483a:	e04f      	b.n	80148dc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014840:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014846:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801484a:	d202      	bcs.n	8014852 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801484c:	f04f 33ff 	mov.w	r3, #4294967295
 8014850:	e044      	b.n	80148dc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d10d      	bne.n	8014874 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014858:	2034      	movs	r0, #52	; 0x34
 801485a:	f7f7 f9c3 	bl	800bbe4 <mem_malloc>
 801485e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d102      	bne.n	801486c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014866:	f04f 33ff 	mov.w	r3, #4294967295
 801486a:	e037      	b.n	80148dc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	68fa      	ldr	r2, [r7, #12]
 8014870:	625a      	str	r2, [r3, #36]	; 0x24
 8014872:	e005      	b.n	8014880 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	791b      	ldrb	r3, [r3, #4]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d001      	beq.n	8014880 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801487c:	f7ff fc92 	bl	80141a4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014880:	2234      	movs	r2, #52	; 0x34
 8014882:	2100      	movs	r1, #0
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f007 fae7 	bl	801be58 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801488a:	f7ff fc39 	bl	8014100 <dhcp_inc_pcb_refcount>
 801488e:	4603      	mov	r3, r0
 8014890:	2b00      	cmp	r3, #0
 8014892:	d002      	beq.n	801489a <dhcp_start+0xa2>
    return ERR_MEM;
 8014894:	f04f 33ff 	mov.w	r3, #4294967295
 8014898:	e020      	b.n	80148dc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2201      	movs	r2, #1
 801489e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80148a6:	f003 0304 	and.w	r3, r3, #4
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d105      	bne.n	80148ba <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80148ae:	2102      	movs	r1, #2
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	f000 fd13 	bl	80152dc <dhcp_set_state>
    return ERR_OK;
 80148b6:	2300      	movs	r3, #0
 80148b8:	e010      	b.n	80148dc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f000 f90a 	bl	8014ad4 <dhcp_discover>
 80148c0:	4603      	mov	r3, r0
 80148c2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80148c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d005      	beq.n	80148d8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f000 fc6b 	bl	80151a8 <dhcp_release_and_stop>
    return ERR_MEM;
 80148d2:	f04f 33ff 	mov.w	r3, #4294967295
 80148d6:	e001      	b.n	80148dc <dhcp_start+0xe4>
  }
  return result;
 80148d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80148dc:	4618      	mov	r0, r3
 80148de:	3710      	adds	r7, #16
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}
 80148e4:	08020028 	.word	0x08020028
 80148e8:	0802010c 	.word	0x0802010c
 80148ec:	08020088 	.word	0x08020088
 80148f0:	08020150 	.word	0x08020150

080148f4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014900:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d037      	beq.n	8014978 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	795b      	ldrb	r3, [r3, #5]
 801490c:	2b0a      	cmp	r3, #10
 801490e:	d820      	bhi.n	8014952 <dhcp_network_changed+0x5e>
 8014910:	a201      	add	r2, pc, #4	; (adr r2, 8014918 <dhcp_network_changed+0x24>)
 8014912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014916:	bf00      	nop
 8014918:	0801497d 	.word	0x0801497d
 801491c:	08014953 	.word	0x08014953
 8014920:	08014953 	.word	0x08014953
 8014924:	08014945 	.word	0x08014945
 8014928:	08014945 	.word	0x08014945
 801492c:	08014945 	.word	0x08014945
 8014930:	08014953 	.word	0x08014953
 8014934:	08014953 	.word	0x08014953
 8014938:	08014953 	.word	0x08014953
 801493c:	08014953 	.word	0x08014953
 8014940:	08014945 	.word	0x08014945
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	2200      	movs	r2, #0
 8014948:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 fb76 	bl	801503c <dhcp_reboot>
      break;
 8014950:	e015      	b.n	801497e <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	795b      	ldrb	r3, [r3, #5]
 8014956:	2b0c      	cmp	r3, #12
 8014958:	d906      	bls.n	8014968 <dhcp_network_changed+0x74>
 801495a:	4b0a      	ldr	r3, [pc, #40]	; (8014984 <dhcp_network_changed+0x90>)
 801495c:	f240 326d 	movw	r2, #877	; 0x36d
 8014960:	4909      	ldr	r1, [pc, #36]	; (8014988 <dhcp_network_changed+0x94>)
 8014962:	480a      	ldr	r0, [pc, #40]	; (801498c <dhcp_network_changed+0x98>)
 8014964:	f007 fa80 	bl	801be68 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2200      	movs	r2, #0
 801496c:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f000 f8b0 	bl	8014ad4 <dhcp_discover>
      break;
 8014974:	bf00      	nop
 8014976:	e002      	b.n	801497e <dhcp_network_changed+0x8a>
    return;
 8014978:	bf00      	nop
 801497a:	e000      	b.n	801497e <dhcp_network_changed+0x8a>
      break;
 801497c:	bf00      	nop
  }
}
 801497e:	3710      	adds	r7, #16
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	08020028 	.word	0x08020028
 8014988:	08020174 	.word	0x08020174
 801498c:	08020088 	.word	0x08020088

08014990 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b084      	sub	sp, #16
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d107      	bne.n	80149b0 <dhcp_arp_reply+0x20>
 80149a0:	4b0e      	ldr	r3, [pc, #56]	; (80149dc <dhcp_arp_reply+0x4c>)
 80149a2:	f240 328b 	movw	r2, #907	; 0x38b
 80149a6:	490e      	ldr	r1, [pc, #56]	; (80149e0 <dhcp_arp_reply+0x50>)
 80149a8:	480e      	ldr	r0, [pc, #56]	; (80149e4 <dhcp_arp_reply+0x54>)
 80149aa:	f007 fa5d 	bl	801be68 <iprintf>
 80149ae:	e012      	b.n	80149d6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d00c      	beq.n	80149d6 <dhcp_arp_reply+0x46>
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	795b      	ldrb	r3, [r3, #5]
 80149c0:	2b08      	cmp	r3, #8
 80149c2:	d108      	bne.n	80149d6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	681a      	ldr	r2, [r3, #0]
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	69db      	ldr	r3, [r3, #28]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d102      	bne.n	80149d6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 f809 	bl	80149e8 <dhcp_decline>
    }
  }
}
 80149d6:	3710      	adds	r7, #16
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	08020028 	.word	0x08020028
 80149e0:	0802010c 	.word	0x0802010c
 80149e4:	08020088 	.word	0x08020088

080149e8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80149e8:	b5b0      	push	{r4, r5, r7, lr}
 80149ea:	b08a      	sub	sp, #40	; 0x28
 80149ec:	af02      	add	r7, sp, #8
 80149ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149f4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80149f6:	210c      	movs	r1, #12
 80149f8:	69b8      	ldr	r0, [r7, #24]
 80149fa:	f000 fc6f 	bl	80152dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80149fe:	f107 030c 	add.w	r3, r7, #12
 8014a02:	2204      	movs	r2, #4
 8014a04:	69b9      	ldr	r1, [r7, #24]
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f001 f8f2 	bl	8015bf0 <dhcp_create_msg>
 8014a0c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d035      	beq.n	8014a80 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014a1a:	89b8      	ldrh	r0, [r7, #12]
 8014a1c:	693b      	ldr	r3, [r7, #16]
 8014a1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a22:	2304      	movs	r3, #4
 8014a24:	2232      	movs	r2, #50	; 0x32
 8014a26:	f000 fc73 	bl	8015310 <dhcp_option>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014a2e:	89bc      	ldrh	r4, [r7, #12]
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014a36:	69bb      	ldr	r3, [r7, #24]
 8014a38:	69db      	ldr	r3, [r3, #28]
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7f6 fdb3 	bl	800b5a6 <lwip_htonl>
 8014a40:	4603      	mov	r3, r0
 8014a42:	461a      	mov	r2, r3
 8014a44:	4629      	mov	r1, r5
 8014a46:	4620      	mov	r0, r4
 8014a48:	f000 fcee 	bl	8015428 <dhcp_option_long>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014a50:	89b8      	ldrh	r0, [r7, #12]
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	33f0      	adds	r3, #240	; 0xf0
 8014a56:	697a      	ldr	r2, [r7, #20]
 8014a58:	4619      	mov	r1, r3
 8014a5a:	f001 f99f 	bl	8015d9c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014a5e:	4b19      	ldr	r3, [pc, #100]	; (8014ac4 <dhcp_decline+0xdc>)
 8014a60:	6818      	ldr	r0, [r3, #0]
 8014a62:	4b19      	ldr	r3, [pc, #100]	; (8014ac8 <dhcp_decline+0xe0>)
 8014a64:	9301      	str	r3, [sp, #4]
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	9300      	str	r3, [sp, #0]
 8014a6a:	2343      	movs	r3, #67	; 0x43
 8014a6c:	4a17      	ldr	r2, [pc, #92]	; (8014acc <dhcp_decline+0xe4>)
 8014a6e:	6979      	ldr	r1, [r7, #20]
 8014a70:	f7ff f88c 	bl	8013b8c <udp_sendto_if_src>
 8014a74:	4603      	mov	r3, r0
 8014a76:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014a78:	6978      	ldr	r0, [r7, #20]
 8014a7a:	f7f8 f965 	bl	800cd48 <pbuf_free>
 8014a7e:	e001      	b.n	8014a84 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014a80:	23ff      	movs	r3, #255	; 0xff
 8014a82:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	799b      	ldrb	r3, [r3, #6]
 8014a88:	2bff      	cmp	r3, #255	; 0xff
 8014a8a:	d005      	beq.n	8014a98 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014a8c:	69bb      	ldr	r3, [r7, #24]
 8014a8e:	799b      	ldrb	r3, [r3, #6]
 8014a90:	3301      	adds	r3, #1
 8014a92:	b2da      	uxtb	r2, r3
 8014a94:	69bb      	ldr	r3, [r7, #24]
 8014a96:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014a98:	f242 7310 	movw	r3, #10000	; 0x2710
 8014a9c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a9e:	89fb      	ldrh	r3, [r7, #14]
 8014aa0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014aa4:	4a0a      	ldr	r2, [pc, #40]	; (8014ad0 <dhcp_decline+0xe8>)
 8014aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8014aaa:	1152      	asrs	r2, r2, #5
 8014aac:	17db      	asrs	r3, r3, #31
 8014aae:	1ad3      	subs	r3, r2, r3
 8014ab0:	b29a      	uxth	r2, r3
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	3720      	adds	r7, #32
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	20008430 	.word	0x20008430
 8014ac8:	08020f48 	.word	0x08020f48
 8014acc:	08020f4c 	.word	0x08020f4c
 8014ad0:	10624dd3 	.word	0x10624dd3

08014ad4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b08a      	sub	sp, #40	; 0x28
 8014ad8:	af02      	add	r7, sp, #8
 8014ada:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ae0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014aec:	2106      	movs	r1, #6
 8014aee:	69b8      	ldr	r0, [r7, #24]
 8014af0:	f000 fbf4 	bl	80152dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014af4:	f107 0308 	add.w	r3, r7, #8
 8014af8:	2201      	movs	r2, #1
 8014afa:	69b9      	ldr	r1, [r7, #24]
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f001 f877 	bl	8015bf0 <dhcp_create_msg>
 8014b02:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d04b      	beq.n	8014ba2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014b10:	8938      	ldrh	r0, [r7, #8]
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b18:	2302      	movs	r3, #2
 8014b1a:	2239      	movs	r2, #57	; 0x39
 8014b1c:	f000 fbf8 	bl	8015310 <dhcp_option>
 8014b20:	4603      	mov	r3, r0
 8014b22:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014b24:	8938      	ldrh	r0, [r7, #8]
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b30:	461a      	mov	r2, r3
 8014b32:	f000 fc47 	bl	80153c4 <dhcp_option_short>
 8014b36:	4603      	mov	r3, r0
 8014b38:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014b3a:	8938      	ldrh	r0, [r7, #8]
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b42:	2303      	movs	r3, #3
 8014b44:	2237      	movs	r2, #55	; 0x37
 8014b46:	f000 fbe3 	bl	8015310 <dhcp_option>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b4e:	2300      	movs	r3, #0
 8014b50:	77fb      	strb	r3, [r7, #31]
 8014b52:	e00e      	b.n	8014b72 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014b54:	8938      	ldrh	r0, [r7, #8]
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b5c:	7ffb      	ldrb	r3, [r7, #31]
 8014b5e:	4a29      	ldr	r2, [pc, #164]	; (8014c04 <dhcp_discover+0x130>)
 8014b60:	5cd3      	ldrb	r3, [r2, r3]
 8014b62:	461a      	mov	r2, r3
 8014b64:	f000 fc08 	bl	8015378 <dhcp_option_byte>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b6c:	7ffb      	ldrb	r3, [r7, #31]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	77fb      	strb	r3, [r7, #31]
 8014b72:	7ffb      	ldrb	r3, [r7, #31]
 8014b74:	2b02      	cmp	r3, #2
 8014b76:	d9ed      	bls.n	8014b54 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b78:	8938      	ldrh	r0, [r7, #8]
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	33f0      	adds	r3, #240	; 0xf0
 8014b7e:	693a      	ldr	r2, [r7, #16]
 8014b80:	4619      	mov	r1, r3
 8014b82:	f001 f90b 	bl	8015d9c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014b86:	4b20      	ldr	r3, [pc, #128]	; (8014c08 <dhcp_discover+0x134>)
 8014b88:	6818      	ldr	r0, [r3, #0]
 8014b8a:	4b20      	ldr	r3, [pc, #128]	; (8014c0c <dhcp_discover+0x138>)
 8014b8c:	9301      	str	r3, [sp, #4]
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	9300      	str	r3, [sp, #0]
 8014b92:	2343      	movs	r3, #67	; 0x43
 8014b94:	4a1e      	ldr	r2, [pc, #120]	; (8014c10 <dhcp_discover+0x13c>)
 8014b96:	6939      	ldr	r1, [r7, #16]
 8014b98:	f7fe fff8 	bl	8013b8c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014b9c:	6938      	ldr	r0, [r7, #16]
 8014b9e:	f7f8 f8d3 	bl	800cd48 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	799b      	ldrb	r3, [r3, #6]
 8014ba6:	2bff      	cmp	r3, #255	; 0xff
 8014ba8:	d005      	beq.n	8014bb6 <dhcp_discover+0xe2>
    dhcp->tries++;
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	799b      	ldrb	r3, [r3, #6]
 8014bae:	3301      	adds	r3, #1
 8014bb0:	b2da      	uxtb	r2, r3
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	799b      	ldrb	r3, [r3, #6]
 8014bba:	2b05      	cmp	r3, #5
 8014bbc:	d80d      	bhi.n	8014bda <dhcp_discover+0x106>
 8014bbe:	69bb      	ldr	r3, [r7, #24]
 8014bc0:	799b      	ldrb	r3, [r3, #6]
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	4093      	lsls	r3, r2
 8014bc8:	b29b      	uxth	r3, r3
 8014bca:	461a      	mov	r2, r3
 8014bcc:	0152      	lsls	r2, r2, #5
 8014bce:	1ad2      	subs	r2, r2, r3
 8014bd0:	0092      	lsls	r2, r2, #2
 8014bd2:	4413      	add	r3, r2
 8014bd4:	00db      	lsls	r3, r3, #3
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	e001      	b.n	8014bde <dhcp_discover+0x10a>
 8014bda:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014bde:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014be0:	897b      	ldrh	r3, [r7, #10]
 8014be2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014be6:	4a0b      	ldr	r2, [pc, #44]	; (8014c14 <dhcp_discover+0x140>)
 8014be8:	fb82 1203 	smull	r1, r2, r2, r3
 8014bec:	1152      	asrs	r2, r2, #5
 8014bee:	17db      	asrs	r3, r3, #31
 8014bf0:	1ad3      	subs	r3, r2, r3
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	69bb      	ldr	r3, [r7, #24]
 8014bf6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3720      	adds	r7, #32
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}
 8014c04:	20000018 	.word	0x20000018
 8014c08:	20008430 	.word	0x20008430
 8014c0c:	08020f48 	.word	0x08020f48
 8014c10:	08020f4c 	.word	0x08020f4c
 8014c14:	10624dd3 	.word	0x10624dd3

08014c18 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b088      	sub	sp, #32
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d107      	bne.n	8014c36 <dhcp_bind+0x1e>
 8014c26:	4b64      	ldr	r3, [pc, #400]	; (8014db8 <dhcp_bind+0x1a0>)
 8014c28:	f240 4215 	movw	r2, #1045	; 0x415
 8014c2c:	4963      	ldr	r1, [pc, #396]	; (8014dbc <dhcp_bind+0x1a4>)
 8014c2e:	4864      	ldr	r0, [pc, #400]	; (8014dc0 <dhcp_bind+0x1a8>)
 8014c30:	f007 f91a 	bl	801be68 <iprintf>
 8014c34:	e0bc      	b.n	8014db0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c3a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d107      	bne.n	8014c52 <dhcp_bind+0x3a>
 8014c42:	4b5d      	ldr	r3, [pc, #372]	; (8014db8 <dhcp_bind+0x1a0>)
 8014c44:	f240 4217 	movw	r2, #1047	; 0x417
 8014c48:	495e      	ldr	r1, [pc, #376]	; (8014dc4 <dhcp_bind+0x1ac>)
 8014c4a:	485d      	ldr	r0, [pc, #372]	; (8014dc0 <dhcp_bind+0x1a8>)
 8014c4c:	f007 f90c 	bl	801be68 <iprintf>
 8014c50:	e0ae      	b.n	8014db0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	2200      	movs	r2, #0
 8014c56:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014c58:	69bb      	ldr	r3, [r7, #24]
 8014c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c60:	d019      	beq.n	8014c96 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c66:	331e      	adds	r3, #30
 8014c68:	4a57      	ldr	r2, [pc, #348]	; (8014dc8 <dhcp_bind+0x1b0>)
 8014c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8014c6e:	095b      	lsrs	r3, r3, #5
 8014c70:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c78:	d302      	bcc.n	8014c80 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c7e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	69bb      	ldr	r3, [r7, #24]
 8014c86:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014c88:	69bb      	ldr	r3, [r7, #24]
 8014c8a:	8a9b      	ldrh	r3, [r3, #20]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d102      	bne.n	8014c96 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014c90:	69bb      	ldr	r3, [r7, #24]
 8014c92:	2201      	movs	r2, #1
 8014c94:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014c96:	69bb      	ldr	r3, [r7, #24]
 8014c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c9e:	d01d      	beq.n	8014cdc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014ca0:	69bb      	ldr	r3, [r7, #24]
 8014ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca4:	331e      	adds	r3, #30
 8014ca6:	4a48      	ldr	r2, [pc, #288]	; (8014dc8 <dhcp_bind+0x1b0>)
 8014ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8014cac:	095b      	lsrs	r3, r3, #5
 8014cae:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014cb0:	69fb      	ldr	r3, [r7, #28]
 8014cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014cb6:	d302      	bcc.n	8014cbe <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cbc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	69bb      	ldr	r3, [r7, #24]
 8014cc4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014cc6:	69bb      	ldr	r3, [r7, #24]
 8014cc8:	895b      	ldrh	r3, [r3, #10]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d102      	bne.n	8014cd4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014cce:	69bb      	ldr	r3, [r7, #24]
 8014cd0:	2201      	movs	r2, #1
 8014cd2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014cd4:	69bb      	ldr	r3, [r7, #24]
 8014cd6:	895a      	ldrh	r2, [r3, #10]
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014cdc:	69bb      	ldr	r3, [r7, #24]
 8014cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ce4:	d01d      	beq.n	8014d22 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014ce6:	69bb      	ldr	r3, [r7, #24]
 8014ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cea:	331e      	adds	r3, #30
 8014cec:	4a36      	ldr	r2, [pc, #216]	; (8014dc8 <dhcp_bind+0x1b0>)
 8014cee:	fba2 2303 	umull	r2, r3, r2, r3
 8014cf2:	095b      	lsrs	r3, r3, #5
 8014cf4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014cf6:	69fb      	ldr	r3, [r7, #28]
 8014cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014cfc:	d302      	bcc.n	8014d04 <dhcp_bind+0xec>
      timeout = 0xffff;
 8014cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d02:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	69bb      	ldr	r3, [r7, #24]
 8014d0a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014d0c:	69bb      	ldr	r3, [r7, #24]
 8014d0e:	899b      	ldrh	r3, [r3, #12]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d102      	bne.n	8014d1a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014d14:	69bb      	ldr	r3, [r7, #24]
 8014d16:	2201      	movs	r2, #1
 8014d18:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	899a      	ldrh	r2, [r3, #12]
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014d22:	69bb      	ldr	r3, [r7, #24]
 8014d24:	895a      	ldrh	r2, [r3, #10]
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	899b      	ldrh	r3, [r3, #12]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d306      	bcc.n	8014d3c <dhcp_bind+0x124>
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	899b      	ldrh	r3, [r3, #12]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d002      	beq.n	8014d3c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014d36:	69bb      	ldr	r3, [r7, #24]
 8014d38:	2200      	movs	r2, #0
 8014d3a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	79db      	ldrb	r3, [r3, #7]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d003      	beq.n	8014d4c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014d44:	69bb      	ldr	r3, [r7, #24]
 8014d46:	6a1b      	ldr	r3, [r3, #32]
 8014d48:	613b      	str	r3, [r7, #16]
 8014d4a:	e014      	b.n	8014d76 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	331c      	adds	r3, #28
 8014d50:	781b      	ldrb	r3, [r3, #0]
 8014d52:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	db02      	blt.n	8014d62 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014d5c:	23ff      	movs	r3, #255	; 0xff
 8014d5e:	613b      	str	r3, [r7, #16]
 8014d60:	e009      	b.n	8014d76 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014d62:	7dfb      	ldrb	r3, [r7, #23]
 8014d64:	2bbf      	cmp	r3, #191	; 0xbf
 8014d66:	d903      	bls.n	8014d70 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014d68:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014d6c:	613b      	str	r3, [r7, #16]
 8014d6e:	e002      	b.n	8014d76 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d74:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014d76:	69bb      	ldr	r3, [r7, #24]
 8014d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d7a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d108      	bne.n	8014d94 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014d82:	69bb      	ldr	r3, [r7, #24]
 8014d84:	69da      	ldr	r2, [r3, #28]
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	4013      	ands	r3, r2
 8014d8a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014d92:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014d94:	210a      	movs	r1, #10
 8014d96:	69b8      	ldr	r0, [r7, #24]
 8014d98:	f000 faa0 	bl	80152dc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014d9c:	69bb      	ldr	r3, [r7, #24]
 8014d9e:	f103 011c 	add.w	r1, r3, #28
 8014da2:	f107 030c 	add.w	r3, r7, #12
 8014da6:	f107 0210 	add.w	r2, r7, #16
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7f7 fa90 	bl	800c2d0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014db0:	3720      	adds	r7, #32
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	08020028 	.word	0x08020028
 8014dbc:	08020188 	.word	0x08020188
 8014dc0:	08020088 	.word	0x08020088
 8014dc4:	080201a4 	.word	0x080201a4
 8014dc8:	88888889 	.word	0x88888889

08014dcc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b08a      	sub	sp, #40	; 0x28
 8014dd0:	af02      	add	r7, sp, #8
 8014dd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dd8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014dda:	2105      	movs	r1, #5
 8014ddc:	69b8      	ldr	r0, [r7, #24]
 8014dde:	f000 fa7d 	bl	80152dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014de2:	f107 030c 	add.w	r3, r7, #12
 8014de6:	2203      	movs	r2, #3
 8014de8:	69b9      	ldr	r1, [r7, #24]
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f000 ff00 	bl	8015bf0 <dhcp_create_msg>
 8014df0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d04e      	beq.n	8014e96 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014dfe:	89b8      	ldrh	r0, [r7, #12]
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e06:	2302      	movs	r3, #2
 8014e08:	2239      	movs	r2, #57	; 0x39
 8014e0a:	f000 fa81 	bl	8015310 <dhcp_option>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014e12:	89b8      	ldrh	r0, [r7, #12]
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e1e:	461a      	mov	r2, r3
 8014e20:	f000 fad0 	bl	80153c4 <dhcp_option_short>
 8014e24:	4603      	mov	r3, r0
 8014e26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014e28:	89b8      	ldrh	r0, [r7, #12]
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e30:	2303      	movs	r3, #3
 8014e32:	2237      	movs	r2, #55	; 0x37
 8014e34:	f000 fa6c 	bl	8015310 <dhcp_option>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	77bb      	strb	r3, [r7, #30]
 8014e40:	e00e      	b.n	8014e60 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014e42:	89b8      	ldrh	r0, [r7, #12]
 8014e44:	693b      	ldr	r3, [r7, #16]
 8014e46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e4a:	7fbb      	ldrb	r3, [r7, #30]
 8014e4c:	4a2a      	ldr	r2, [pc, #168]	; (8014ef8 <dhcp_renew+0x12c>)
 8014e4e:	5cd3      	ldrb	r3, [r2, r3]
 8014e50:	461a      	mov	r2, r3
 8014e52:	f000 fa91 	bl	8015378 <dhcp_option_byte>
 8014e56:	4603      	mov	r3, r0
 8014e58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e5a:	7fbb      	ldrb	r3, [r7, #30]
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	77bb      	strb	r3, [r7, #30]
 8014e60:	7fbb      	ldrb	r3, [r7, #30]
 8014e62:	2b02      	cmp	r3, #2
 8014e64:	d9ed      	bls.n	8014e42 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014e66:	89b8      	ldrh	r0, [r7, #12]
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	33f0      	adds	r3, #240	; 0xf0
 8014e6c:	697a      	ldr	r2, [r7, #20]
 8014e6e:	4619      	mov	r1, r3
 8014e70:	f000 ff94 	bl	8015d9c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014e74:	4b21      	ldr	r3, [pc, #132]	; (8014efc <dhcp_renew+0x130>)
 8014e76:	6818      	ldr	r0, [r3, #0]
 8014e78:	69bb      	ldr	r3, [r7, #24]
 8014e7a:	f103 0218 	add.w	r2, r3, #24
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	9300      	str	r3, [sp, #0]
 8014e82:	2343      	movs	r3, #67	; 0x43
 8014e84:	6979      	ldr	r1, [r7, #20]
 8014e86:	f7fe fe0d 	bl	8013aa4 <udp_sendto_if>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014e8e:	6978      	ldr	r0, [r7, #20]
 8014e90:	f7f7 ff5a 	bl	800cd48 <pbuf_free>
 8014e94:	e001      	b.n	8014e9a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014e96:	23ff      	movs	r3, #255	; 0xff
 8014e98:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014e9a:	69bb      	ldr	r3, [r7, #24]
 8014e9c:	799b      	ldrb	r3, [r3, #6]
 8014e9e:	2bff      	cmp	r3, #255	; 0xff
 8014ea0:	d005      	beq.n	8014eae <dhcp_renew+0xe2>
    dhcp->tries++;
 8014ea2:	69bb      	ldr	r3, [r7, #24]
 8014ea4:	799b      	ldrb	r3, [r3, #6]
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	b2da      	uxtb	r2, r3
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014eae:	69bb      	ldr	r3, [r7, #24]
 8014eb0:	799b      	ldrb	r3, [r3, #6]
 8014eb2:	2b09      	cmp	r3, #9
 8014eb4:	d80a      	bhi.n	8014ecc <dhcp_renew+0x100>
 8014eb6:	69bb      	ldr	r3, [r7, #24]
 8014eb8:	799b      	ldrb	r3, [r3, #6]
 8014eba:	b29b      	uxth	r3, r3
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	0152      	lsls	r2, r2, #5
 8014ec0:	1ad2      	subs	r2, r2, r3
 8014ec2:	0092      	lsls	r2, r2, #2
 8014ec4:	4413      	add	r3, r2
 8014ec6:	011b      	lsls	r3, r3, #4
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	e001      	b.n	8014ed0 <dhcp_renew+0x104>
 8014ecc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014ed0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014ed2:	89fb      	ldrh	r3, [r7, #14]
 8014ed4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014ed8:	4a09      	ldr	r2, [pc, #36]	; (8014f00 <dhcp_renew+0x134>)
 8014eda:	fb82 1203 	smull	r1, r2, r2, r3
 8014ede:	1152      	asrs	r2, r2, #5
 8014ee0:	17db      	asrs	r3, r3, #31
 8014ee2:	1ad3      	subs	r3, r2, r3
 8014ee4:	b29a      	uxth	r2, r3
 8014ee6:	69bb      	ldr	r3, [r7, #24]
 8014ee8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014eea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3720      	adds	r7, #32
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}
 8014ef6:	bf00      	nop
 8014ef8:	20000018 	.word	0x20000018
 8014efc:	20008430 	.word	0x20008430
 8014f00:	10624dd3 	.word	0x10624dd3

08014f04 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b08a      	sub	sp, #40	; 0x28
 8014f08:	af02      	add	r7, sp, #8
 8014f0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f10:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014f12:	2104      	movs	r1, #4
 8014f14:	69b8      	ldr	r0, [r7, #24]
 8014f16:	f000 f9e1 	bl	80152dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014f1a:	f107 030c 	add.w	r3, r7, #12
 8014f1e:	2203      	movs	r2, #3
 8014f20:	69b9      	ldr	r1, [r7, #24]
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f000 fe64 	bl	8015bf0 <dhcp_create_msg>
 8014f28:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d04c      	beq.n	8014fca <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014f36:	89b8      	ldrh	r0, [r7, #12]
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f3e:	2302      	movs	r3, #2
 8014f40:	2239      	movs	r2, #57	; 0x39
 8014f42:	f000 f9e5 	bl	8015310 <dhcp_option>
 8014f46:	4603      	mov	r3, r0
 8014f48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014f4a:	89b8      	ldrh	r0, [r7, #12]
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f56:	461a      	mov	r2, r3
 8014f58:	f000 fa34 	bl	80153c4 <dhcp_option_short>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014f60:	89b8      	ldrh	r0, [r7, #12]
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f68:	2303      	movs	r3, #3
 8014f6a:	2237      	movs	r2, #55	; 0x37
 8014f6c:	f000 f9d0 	bl	8015310 <dhcp_option>
 8014f70:	4603      	mov	r3, r0
 8014f72:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014f74:	2300      	movs	r3, #0
 8014f76:	77bb      	strb	r3, [r7, #30]
 8014f78:	e00e      	b.n	8014f98 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014f7a:	89b8      	ldrh	r0, [r7, #12]
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f82:	7fbb      	ldrb	r3, [r7, #30]
 8014f84:	4a29      	ldr	r2, [pc, #164]	; (801502c <dhcp_rebind+0x128>)
 8014f86:	5cd3      	ldrb	r3, [r2, r3]
 8014f88:	461a      	mov	r2, r3
 8014f8a:	f000 f9f5 	bl	8015378 <dhcp_option_byte>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014f92:	7fbb      	ldrb	r3, [r7, #30]
 8014f94:	3301      	adds	r3, #1
 8014f96:	77bb      	strb	r3, [r7, #30]
 8014f98:	7fbb      	ldrb	r3, [r7, #30]
 8014f9a:	2b02      	cmp	r3, #2
 8014f9c:	d9ed      	bls.n	8014f7a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014f9e:	89b8      	ldrh	r0, [r7, #12]
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	33f0      	adds	r3, #240	; 0xf0
 8014fa4:	697a      	ldr	r2, [r7, #20]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	f000 fef8 	bl	8015d9c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014fac:	4b20      	ldr	r3, [pc, #128]	; (8015030 <dhcp_rebind+0x12c>)
 8014fae:	6818      	ldr	r0, [r3, #0]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	9300      	str	r3, [sp, #0]
 8014fb4:	2343      	movs	r3, #67	; 0x43
 8014fb6:	4a1f      	ldr	r2, [pc, #124]	; (8015034 <dhcp_rebind+0x130>)
 8014fb8:	6979      	ldr	r1, [r7, #20]
 8014fba:	f7fe fd73 	bl	8013aa4 <udp_sendto_if>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014fc2:	6978      	ldr	r0, [r7, #20]
 8014fc4:	f7f7 fec0 	bl	800cd48 <pbuf_free>
 8014fc8:	e001      	b.n	8014fce <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014fca:	23ff      	movs	r3, #255	; 0xff
 8014fcc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	799b      	ldrb	r3, [r3, #6]
 8014fd2:	2bff      	cmp	r3, #255	; 0xff
 8014fd4:	d005      	beq.n	8014fe2 <dhcp_rebind+0xde>
    dhcp->tries++;
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	799b      	ldrb	r3, [r3, #6]
 8014fda:	3301      	adds	r3, #1
 8014fdc:	b2da      	uxtb	r2, r3
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	799b      	ldrb	r3, [r3, #6]
 8014fe6:	2b09      	cmp	r3, #9
 8014fe8:	d80a      	bhi.n	8015000 <dhcp_rebind+0xfc>
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	799b      	ldrb	r3, [r3, #6]
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	0152      	lsls	r2, r2, #5
 8014ff4:	1ad2      	subs	r2, r2, r3
 8014ff6:	0092      	lsls	r2, r2, #2
 8014ff8:	4413      	add	r3, r2
 8014ffa:	00db      	lsls	r3, r3, #3
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	e001      	b.n	8015004 <dhcp_rebind+0x100>
 8015000:	f242 7310 	movw	r3, #10000	; 0x2710
 8015004:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015006:	89fb      	ldrh	r3, [r7, #14]
 8015008:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801500c:	4a0a      	ldr	r2, [pc, #40]	; (8015038 <dhcp_rebind+0x134>)
 801500e:	fb82 1203 	smull	r1, r2, r2, r3
 8015012:	1152      	asrs	r2, r2, #5
 8015014:	17db      	asrs	r3, r3, #31
 8015016:	1ad3      	subs	r3, r2, r3
 8015018:	b29a      	uxth	r2, r3
 801501a:	69bb      	ldr	r3, [r7, #24]
 801501c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801501e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015022:	4618      	mov	r0, r3
 8015024:	3720      	adds	r7, #32
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
 801502a:	bf00      	nop
 801502c:	20000018 	.word	0x20000018
 8015030:	20008430 	.word	0x20008430
 8015034:	08020f4c 	.word	0x08020f4c
 8015038:	10624dd3 	.word	0x10624dd3

0801503c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801503c:	b5b0      	push	{r4, r5, r7, lr}
 801503e:	b08a      	sub	sp, #40	; 0x28
 8015040:	af02      	add	r7, sp, #8
 8015042:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015048:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801504a:	2103      	movs	r1, #3
 801504c:	69b8      	ldr	r0, [r7, #24]
 801504e:	f000 f945 	bl	80152dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015052:	f107 030c 	add.w	r3, r7, #12
 8015056:	2203      	movs	r2, #3
 8015058:	69b9      	ldr	r1, [r7, #24]
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f000 fdc8 	bl	8015bf0 <dhcp_create_msg>
 8015060:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d066      	beq.n	8015136 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	685b      	ldr	r3, [r3, #4]
 801506c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801506e:	89b8      	ldrh	r0, [r7, #12]
 8015070:	693b      	ldr	r3, [r7, #16]
 8015072:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015076:	2302      	movs	r3, #2
 8015078:	2239      	movs	r2, #57	; 0x39
 801507a:	f000 f949 	bl	8015310 <dhcp_option>
 801507e:	4603      	mov	r3, r0
 8015080:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015082:	89b8      	ldrh	r0, [r7, #12]
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	33f0      	adds	r3, #240	; 0xf0
 8015088:	f44f 7210 	mov.w	r2, #576	; 0x240
 801508c:	4619      	mov	r1, r3
 801508e:	f000 f999 	bl	80153c4 <dhcp_option_short>
 8015092:	4603      	mov	r3, r0
 8015094:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015096:	89b8      	ldrh	r0, [r7, #12]
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801509e:	2304      	movs	r3, #4
 80150a0:	2232      	movs	r2, #50	; 0x32
 80150a2:	f000 f935 	bl	8015310 <dhcp_option>
 80150a6:	4603      	mov	r3, r0
 80150a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80150aa:	89bc      	ldrh	r4, [r7, #12]
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	69db      	ldr	r3, [r3, #28]
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7f6 fa75 	bl	800b5a6 <lwip_htonl>
 80150bc:	4603      	mov	r3, r0
 80150be:	461a      	mov	r2, r3
 80150c0:	4629      	mov	r1, r5
 80150c2:	4620      	mov	r0, r4
 80150c4:	f000 f9b0 	bl	8015428 <dhcp_option_long>
 80150c8:	4603      	mov	r3, r0
 80150ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80150cc:	89b8      	ldrh	r0, [r7, #12]
 80150ce:	693b      	ldr	r3, [r7, #16]
 80150d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150d4:	2303      	movs	r3, #3
 80150d6:	2237      	movs	r2, #55	; 0x37
 80150d8:	f000 f91a 	bl	8015310 <dhcp_option>
 80150dc:	4603      	mov	r3, r0
 80150de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150e0:	2300      	movs	r3, #0
 80150e2:	77bb      	strb	r3, [r7, #30]
 80150e4:	e00e      	b.n	8015104 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80150e6:	89b8      	ldrh	r0, [r7, #12]
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150ee:	7fbb      	ldrb	r3, [r7, #30]
 80150f0:	4a29      	ldr	r2, [pc, #164]	; (8015198 <dhcp_reboot+0x15c>)
 80150f2:	5cd3      	ldrb	r3, [r2, r3]
 80150f4:	461a      	mov	r2, r3
 80150f6:	f000 f93f 	bl	8015378 <dhcp_option_byte>
 80150fa:	4603      	mov	r3, r0
 80150fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150fe:	7fbb      	ldrb	r3, [r7, #30]
 8015100:	3301      	adds	r3, #1
 8015102:	77bb      	strb	r3, [r7, #30]
 8015104:	7fbb      	ldrb	r3, [r7, #30]
 8015106:	2b02      	cmp	r3, #2
 8015108:	d9ed      	bls.n	80150e6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801510a:	89b8      	ldrh	r0, [r7, #12]
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	33f0      	adds	r3, #240	; 0xf0
 8015110:	697a      	ldr	r2, [r7, #20]
 8015112:	4619      	mov	r1, r3
 8015114:	f000 fe42 	bl	8015d9c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015118:	4b20      	ldr	r3, [pc, #128]	; (801519c <dhcp_reboot+0x160>)
 801511a:	6818      	ldr	r0, [r3, #0]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	9300      	str	r3, [sp, #0]
 8015120:	2343      	movs	r3, #67	; 0x43
 8015122:	4a1f      	ldr	r2, [pc, #124]	; (80151a0 <dhcp_reboot+0x164>)
 8015124:	6979      	ldr	r1, [r7, #20]
 8015126:	f7fe fcbd 	bl	8013aa4 <udp_sendto_if>
 801512a:	4603      	mov	r3, r0
 801512c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801512e:	6978      	ldr	r0, [r7, #20]
 8015130:	f7f7 fe0a 	bl	800cd48 <pbuf_free>
 8015134:	e001      	b.n	801513a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015136:	23ff      	movs	r3, #255	; 0xff
 8015138:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801513a:	69bb      	ldr	r3, [r7, #24]
 801513c:	799b      	ldrb	r3, [r3, #6]
 801513e:	2bff      	cmp	r3, #255	; 0xff
 8015140:	d005      	beq.n	801514e <dhcp_reboot+0x112>
    dhcp->tries++;
 8015142:	69bb      	ldr	r3, [r7, #24]
 8015144:	799b      	ldrb	r3, [r3, #6]
 8015146:	3301      	adds	r3, #1
 8015148:	b2da      	uxtb	r2, r3
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	799b      	ldrb	r3, [r3, #6]
 8015152:	2b09      	cmp	r3, #9
 8015154:	d80a      	bhi.n	801516c <dhcp_reboot+0x130>
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	799b      	ldrb	r3, [r3, #6]
 801515a:	b29b      	uxth	r3, r3
 801515c:	461a      	mov	r2, r3
 801515e:	0152      	lsls	r2, r2, #5
 8015160:	1ad2      	subs	r2, r2, r3
 8015162:	0092      	lsls	r2, r2, #2
 8015164:	4413      	add	r3, r2
 8015166:	00db      	lsls	r3, r3, #3
 8015168:	b29b      	uxth	r3, r3
 801516a:	e001      	b.n	8015170 <dhcp_reboot+0x134>
 801516c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015170:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015172:	89fb      	ldrh	r3, [r7, #14]
 8015174:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015178:	4a0a      	ldr	r2, [pc, #40]	; (80151a4 <dhcp_reboot+0x168>)
 801517a:	fb82 1203 	smull	r1, r2, r2, r3
 801517e:	1152      	asrs	r2, r2, #5
 8015180:	17db      	asrs	r3, r3, #31
 8015182:	1ad3      	subs	r3, r2, r3
 8015184:	b29a      	uxth	r2, r3
 8015186:	69bb      	ldr	r3, [r7, #24]
 8015188:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801518a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801518e:	4618      	mov	r0, r3
 8015190:	3720      	adds	r7, #32
 8015192:	46bd      	mov	sp, r7
 8015194:	bdb0      	pop	{r4, r5, r7, pc}
 8015196:	bf00      	nop
 8015198:	20000018 	.word	0x20000018
 801519c:	20008430 	.word	0x20008430
 80151a0:	08020f4c 	.word	0x08020f4c
 80151a4:	10624dd3 	.word	0x10624dd3

080151a8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80151a8:	b5b0      	push	{r4, r5, r7, lr}
 80151aa:	b08a      	sub	sp, #40	; 0x28
 80151ac:	af02      	add	r7, sp, #8
 80151ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80151b6:	69fb      	ldr	r3, [r7, #28]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f000 8084 	beq.w	80152c6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80151be:	69fb      	ldr	r3, [r7, #28]
 80151c0:	795b      	ldrb	r3, [r3, #5]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f000 8081 	beq.w	80152ca <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	699b      	ldr	r3, [r3, #24]
 80151cc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80151ce:	69fb      	ldr	r3, [r7, #28]
 80151d0:	2200      	movs	r2, #0
 80151d2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80151d4:	69fb      	ldr	r3, [r7, #28]
 80151d6:	2200      	movs	r2, #0
 80151d8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	2200      	movs	r2, #0
 80151de:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80151e0:	69fb      	ldr	r3, [r7, #28]
 80151e2:	2200      	movs	r2, #0
 80151e4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	2200      	movs	r2, #0
 80151ea:	631a      	str	r2, [r3, #48]	; 0x30
 80151ec:	69fb      	ldr	r3, [r7, #28]
 80151ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80151f4:	69fb      	ldr	r3, [r7, #28]
 80151f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151f8:	69fb      	ldr	r3, [r7, #28]
 80151fa:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80151fc:	69fb      	ldr	r3, [r7, #28]
 80151fe:	2200      	movs	r2, #0
 8015200:	829a      	strh	r2, [r3, #20]
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	8a9a      	ldrh	r2, [r3, #20]
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	825a      	strh	r2, [r3, #18]
 801520a:	69fb      	ldr	r3, [r7, #28]
 801520c:	8a5a      	ldrh	r2, [r3, #18]
 801520e:	69fb      	ldr	r3, [r7, #28]
 8015210:	821a      	strh	r2, [r3, #16]
 8015212:	69fb      	ldr	r3, [r7, #28]
 8015214:	8a1a      	ldrh	r2, [r3, #16]
 8015216:	69fb      	ldr	r3, [r7, #28]
 8015218:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f000 fdec 	bl	8015df8 <dhcp_supplied_address>
 8015220:	4603      	mov	r3, r0
 8015222:	2b00      	cmp	r3, #0
 8015224:	d03b      	beq.n	801529e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015226:	f107 030e 	add.w	r3, r7, #14
 801522a:	2207      	movs	r2, #7
 801522c:	69f9      	ldr	r1, [r7, #28]
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f000 fcde 	bl	8015bf0 <dhcp_create_msg>
 8015234:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d030      	beq.n	801529e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801523c:	69bb      	ldr	r3, [r7, #24]
 801523e:	685b      	ldr	r3, [r3, #4]
 8015240:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015242:	89f8      	ldrh	r0, [r7, #14]
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801524a:	2304      	movs	r3, #4
 801524c:	2236      	movs	r2, #54	; 0x36
 801524e:	f000 f85f 	bl	8015310 <dhcp_option>
 8015252:	4603      	mov	r3, r0
 8015254:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015256:	89fc      	ldrh	r4, [r7, #14]
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	4618      	mov	r0, r3
 8015262:	f7f6 f9a0 	bl	800b5a6 <lwip_htonl>
 8015266:	4603      	mov	r3, r0
 8015268:	461a      	mov	r2, r3
 801526a:	4629      	mov	r1, r5
 801526c:	4620      	mov	r0, r4
 801526e:	f000 f8db 	bl	8015428 <dhcp_option_long>
 8015272:	4603      	mov	r3, r0
 8015274:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015276:	89f8      	ldrh	r0, [r7, #14]
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	33f0      	adds	r3, #240	; 0xf0
 801527c:	69ba      	ldr	r2, [r7, #24]
 801527e:	4619      	mov	r1, r3
 8015280:	f000 fd8c 	bl	8015d9c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015284:	4b13      	ldr	r3, [pc, #76]	; (80152d4 <dhcp_release_and_stop+0x12c>)
 8015286:	6818      	ldr	r0, [r3, #0]
 8015288:	f107 0210 	add.w	r2, r7, #16
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	9300      	str	r3, [sp, #0]
 8015290:	2343      	movs	r3, #67	; 0x43
 8015292:	69b9      	ldr	r1, [r7, #24]
 8015294:	f7fe fc06 	bl	8013aa4 <udp_sendto_if>
      pbuf_free(p_out);
 8015298:	69b8      	ldr	r0, [r7, #24]
 801529a:	f7f7 fd55 	bl	800cd48 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801529e:	4b0e      	ldr	r3, [pc, #56]	; (80152d8 <dhcp_release_and_stop+0x130>)
 80152a0:	4a0d      	ldr	r2, [pc, #52]	; (80152d8 <dhcp_release_and_stop+0x130>)
 80152a2:	490d      	ldr	r1, [pc, #52]	; (80152d8 <dhcp_release_and_stop+0x130>)
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f7f7 f813 	bl	800c2d0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80152aa:	2100      	movs	r1, #0
 80152ac:	69f8      	ldr	r0, [r7, #28]
 80152ae:	f000 f815 	bl	80152dc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	791b      	ldrb	r3, [r3, #4]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d008      	beq.n	80152cc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80152ba:	f7fe ff73 	bl	80141a4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80152be:	69fb      	ldr	r3, [r7, #28]
 80152c0:	2200      	movs	r2, #0
 80152c2:	711a      	strb	r2, [r3, #4]
 80152c4:	e002      	b.n	80152cc <dhcp_release_and_stop+0x124>
    return;
 80152c6:	bf00      	nop
 80152c8:	e000      	b.n	80152cc <dhcp_release_and_stop+0x124>
    return;
 80152ca:	bf00      	nop
  }
}
 80152cc:	3720      	adds	r7, #32
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bdb0      	pop	{r4, r5, r7, pc}
 80152d2:	bf00      	nop
 80152d4:	20008430 	.word	0x20008430
 80152d8:	08020f48 	.word	0x08020f48

080152dc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80152dc:	b480      	push	{r7}
 80152de:	b083      	sub	sp, #12
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	460b      	mov	r3, r1
 80152e6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	795b      	ldrb	r3, [r3, #5]
 80152ec:	78fa      	ldrb	r2, [r7, #3]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d008      	beq.n	8015304 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	78fa      	ldrb	r2, [r7, #3]
 80152f6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2200      	movs	r2, #0
 80152fc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	2200      	movs	r2, #0
 8015302:	811a      	strh	r2, [r3, #8]
  }
}
 8015304:	bf00      	nop
 8015306:	370c      	adds	r7, #12
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr

08015310 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	6039      	str	r1, [r7, #0]
 8015318:	4611      	mov	r1, r2
 801531a:	461a      	mov	r2, r3
 801531c:	4603      	mov	r3, r0
 801531e:	80fb      	strh	r3, [r7, #6]
 8015320:	460b      	mov	r3, r1
 8015322:	717b      	strb	r3, [r7, #5]
 8015324:	4613      	mov	r3, r2
 8015326:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015328:	88fa      	ldrh	r2, [r7, #6]
 801532a:	793b      	ldrb	r3, [r7, #4]
 801532c:	4413      	add	r3, r2
 801532e:	3302      	adds	r3, #2
 8015330:	2b44      	cmp	r3, #68	; 0x44
 8015332:	d906      	bls.n	8015342 <dhcp_option+0x32>
 8015334:	4b0d      	ldr	r3, [pc, #52]	; (801536c <dhcp_option+0x5c>)
 8015336:	f240 529a 	movw	r2, #1434	; 0x59a
 801533a:	490d      	ldr	r1, [pc, #52]	; (8015370 <dhcp_option+0x60>)
 801533c:	480d      	ldr	r0, [pc, #52]	; (8015374 <dhcp_option+0x64>)
 801533e:	f006 fd93 	bl	801be68 <iprintf>
  options[options_out_len++] = option_type;
 8015342:	88fb      	ldrh	r3, [r7, #6]
 8015344:	1c5a      	adds	r2, r3, #1
 8015346:	80fa      	strh	r2, [r7, #6]
 8015348:	461a      	mov	r2, r3
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	4413      	add	r3, r2
 801534e:	797a      	ldrb	r2, [r7, #5]
 8015350:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015352:	88fb      	ldrh	r3, [r7, #6]
 8015354:	1c5a      	adds	r2, r3, #1
 8015356:	80fa      	strh	r2, [r7, #6]
 8015358:	461a      	mov	r2, r3
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	4413      	add	r3, r2
 801535e:	793a      	ldrb	r2, [r7, #4]
 8015360:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015362:	88fb      	ldrh	r3, [r7, #6]
}
 8015364:	4618      	mov	r0, r3
 8015366:	3708      	adds	r7, #8
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	08020028 	.word	0x08020028
 8015370:	080201bc 	.word	0x080201bc
 8015374:	08020088 	.word	0x08020088

08015378 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b082      	sub	sp, #8
 801537c:	af00      	add	r7, sp, #0
 801537e:	4603      	mov	r3, r0
 8015380:	6039      	str	r1, [r7, #0]
 8015382:	80fb      	strh	r3, [r7, #6]
 8015384:	4613      	mov	r3, r2
 8015386:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015388:	88fb      	ldrh	r3, [r7, #6]
 801538a:	2b43      	cmp	r3, #67	; 0x43
 801538c:	d906      	bls.n	801539c <dhcp_option_byte+0x24>
 801538e:	4b0a      	ldr	r3, [pc, #40]	; (80153b8 <dhcp_option_byte+0x40>)
 8015390:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015394:	4909      	ldr	r1, [pc, #36]	; (80153bc <dhcp_option_byte+0x44>)
 8015396:	480a      	ldr	r0, [pc, #40]	; (80153c0 <dhcp_option_byte+0x48>)
 8015398:	f006 fd66 	bl	801be68 <iprintf>
  options[options_out_len++] = value;
 801539c:	88fb      	ldrh	r3, [r7, #6]
 801539e:	1c5a      	adds	r2, r3, #1
 80153a0:	80fa      	strh	r2, [r7, #6]
 80153a2:	461a      	mov	r2, r3
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	4413      	add	r3, r2
 80153a8:	797a      	ldrb	r2, [r7, #5]
 80153aa:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80153ac:	88fb      	ldrh	r3, [r7, #6]
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	08020028 	.word	0x08020028
 80153bc:	08020200 	.word	0x08020200
 80153c0:	08020088 	.word	0x08020088

080153c4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	4603      	mov	r3, r0
 80153cc:	6039      	str	r1, [r7, #0]
 80153ce:	80fb      	strh	r3, [r7, #6]
 80153d0:	4613      	mov	r3, r2
 80153d2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80153d4:	88fb      	ldrh	r3, [r7, #6]
 80153d6:	3302      	adds	r3, #2
 80153d8:	2b44      	cmp	r3, #68	; 0x44
 80153da:	d906      	bls.n	80153ea <dhcp_option_short+0x26>
 80153dc:	4b0f      	ldr	r3, [pc, #60]	; (801541c <dhcp_option_short+0x58>)
 80153de:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80153e2:	490f      	ldr	r1, [pc, #60]	; (8015420 <dhcp_option_short+0x5c>)
 80153e4:	480f      	ldr	r0, [pc, #60]	; (8015424 <dhcp_option_short+0x60>)
 80153e6:	f006 fd3f 	bl	801be68 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80153ea:	88bb      	ldrh	r3, [r7, #4]
 80153ec:	0a1b      	lsrs	r3, r3, #8
 80153ee:	b29a      	uxth	r2, r3
 80153f0:	88fb      	ldrh	r3, [r7, #6]
 80153f2:	1c59      	adds	r1, r3, #1
 80153f4:	80f9      	strh	r1, [r7, #6]
 80153f6:	4619      	mov	r1, r3
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	440b      	add	r3, r1
 80153fc:	b2d2      	uxtb	r2, r2
 80153fe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015400:	88fb      	ldrh	r3, [r7, #6]
 8015402:	1c5a      	adds	r2, r3, #1
 8015404:	80fa      	strh	r2, [r7, #6]
 8015406:	461a      	mov	r2, r3
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	4413      	add	r3, r2
 801540c:	88ba      	ldrh	r2, [r7, #4]
 801540e:	b2d2      	uxtb	r2, r2
 8015410:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015412:	88fb      	ldrh	r3, [r7, #6]
}
 8015414:	4618      	mov	r0, r3
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	08020028 	.word	0x08020028
 8015420:	08020238 	.word	0x08020238
 8015424:	08020088 	.word	0x08020088

08015428 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	4603      	mov	r3, r0
 8015430:	60b9      	str	r1, [r7, #8]
 8015432:	607a      	str	r2, [r7, #4]
 8015434:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015436:	89fb      	ldrh	r3, [r7, #14]
 8015438:	3304      	adds	r3, #4
 801543a:	2b44      	cmp	r3, #68	; 0x44
 801543c:	d906      	bls.n	801544c <dhcp_option_long+0x24>
 801543e:	4b19      	ldr	r3, [pc, #100]	; (80154a4 <dhcp_option_long+0x7c>)
 8015440:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015444:	4918      	ldr	r1, [pc, #96]	; (80154a8 <dhcp_option_long+0x80>)
 8015446:	4819      	ldr	r0, [pc, #100]	; (80154ac <dhcp_option_long+0x84>)
 8015448:	f006 fd0e 	bl	801be68 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	0e1a      	lsrs	r2, r3, #24
 8015450:	89fb      	ldrh	r3, [r7, #14]
 8015452:	1c59      	adds	r1, r3, #1
 8015454:	81f9      	strh	r1, [r7, #14]
 8015456:	4619      	mov	r1, r3
 8015458:	68bb      	ldr	r3, [r7, #8]
 801545a:	440b      	add	r3, r1
 801545c:	b2d2      	uxtb	r2, r2
 801545e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	0c1a      	lsrs	r2, r3, #16
 8015464:	89fb      	ldrh	r3, [r7, #14]
 8015466:	1c59      	adds	r1, r3, #1
 8015468:	81f9      	strh	r1, [r7, #14]
 801546a:	4619      	mov	r1, r3
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	440b      	add	r3, r1
 8015470:	b2d2      	uxtb	r2, r2
 8015472:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	0a1a      	lsrs	r2, r3, #8
 8015478:	89fb      	ldrh	r3, [r7, #14]
 801547a:	1c59      	adds	r1, r3, #1
 801547c:	81f9      	strh	r1, [r7, #14]
 801547e:	4619      	mov	r1, r3
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	440b      	add	r3, r1
 8015484:	b2d2      	uxtb	r2, r2
 8015486:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015488:	89fb      	ldrh	r3, [r7, #14]
 801548a:	1c5a      	adds	r2, r3, #1
 801548c:	81fa      	strh	r2, [r7, #14]
 801548e:	461a      	mov	r2, r3
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	4413      	add	r3, r2
 8015494:	687a      	ldr	r2, [r7, #4]
 8015496:	b2d2      	uxtb	r2, r2
 8015498:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801549a:	89fb      	ldrh	r3, [r7, #14]
}
 801549c:	4618      	mov	r0, r3
 801549e:	3710      	adds	r7, #16
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}
 80154a4:	08020028 	.word	0x08020028
 80154a8:	08020274 	.word	0x08020274
 80154ac:	08020088 	.word	0x08020088

080154b0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b090      	sub	sp, #64	; 0x40
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80154ba:	2300      	movs	r3, #0
 80154bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80154be:	2300      	movs	r3, #0
 80154c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80154c2:	2208      	movs	r2, #8
 80154c4:	2100      	movs	r1, #0
 80154c6:	48be      	ldr	r0, [pc, #760]	; (80157c0 <dhcp_parse_reply+0x310>)
 80154c8:	f006 fcc6 	bl	801be58 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	895b      	ldrh	r3, [r3, #10]
 80154d0:	2b2b      	cmp	r3, #43	; 0x2b
 80154d2:	d802      	bhi.n	80154da <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80154d4:	f06f 0301 	mvn.w	r3, #1
 80154d8:	e2a8      	b.n	8015a2c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80154e0:	23f0      	movs	r3, #240	; 0xf0
 80154e2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	891b      	ldrh	r3, [r3, #8]
 80154e8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80154ee:	e00c      	b.n	801550a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80154f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f2:	895b      	ldrh	r3, [r3, #10]
 80154f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80154fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154fc:	895b      	ldrh	r3, [r3, #10]
 80154fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015500:	1ad3      	subs	r3, r2, r3
 8015502:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801550c:	2b00      	cmp	r3, #0
 801550e:	d004      	beq.n	801551a <dhcp_parse_reply+0x6a>
 8015510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015512:	895b      	ldrh	r3, [r3, #10]
 8015514:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015516:	429a      	cmp	r2, r3
 8015518:	d2ea      	bcs.n	80154f0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551c:	2b00      	cmp	r3, #0
 801551e:	d102      	bne.n	8015526 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015520:	f06f 0301 	mvn.w	r3, #1
 8015524:	e282      	b.n	8015a2c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8015526:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015528:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801552a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801552c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015534:	e23a      	b.n	80159ac <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8015536:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801553a:	4413      	add	r3, r2
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015540:	2300      	movs	r3, #0
 8015542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015546:	f04f 33ff 	mov.w	r3, #4294967295
 801554a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801554c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801554e:	3302      	adds	r3, #2
 8015550:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015552:	8bfa      	ldrh	r2, [r7, #30]
 8015554:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015556:	429a      	cmp	r2, r3
 8015558:	d202      	bcs.n	8015560 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801555a:	f06f 0301 	mvn.w	r3, #1
 801555e:	e265      	b.n	8015a2c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015560:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015562:	3301      	adds	r3, #1
 8015564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015566:	8952      	ldrh	r2, [r2, #10]
 8015568:	4293      	cmp	r3, r2
 801556a:	da07      	bge.n	801557c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801556c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801556e:	3301      	adds	r3, #1
 8015570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015572:	4413      	add	r3, r2
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801557a:	e00b      	b.n	8015594 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d004      	beq.n	801558e <dhcp_parse_reply+0xde>
 8015584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	781b      	ldrb	r3, [r3, #0]
 801558c:	e000      	b.n	8015590 <dhcp_parse_reply+0xe0>
 801558e:	2300      	movs	r3, #0
 8015590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801559c:	7dfb      	ldrb	r3, [r7, #23]
 801559e:	2b3b      	cmp	r3, #59	; 0x3b
 80155a0:	f200 812d 	bhi.w	80157fe <dhcp_parse_reply+0x34e>
 80155a4:	a201      	add	r2, pc, #4	; (adr r2, 80155ac <dhcp_parse_reply+0xfc>)
 80155a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155aa:	bf00      	nop
 80155ac:	0801569d 	.word	0x0801569d
 80155b0:	080156ad 	.word	0x080156ad
 80155b4:	080157ff 	.word	0x080157ff
 80155b8:	080156cf 	.word	0x080156cf
 80155bc:	080157ff 	.word	0x080157ff
 80155c0:	080157ff 	.word	0x080157ff
 80155c4:	080157ff 	.word	0x080157ff
 80155c8:	080157ff 	.word	0x080157ff
 80155cc:	080157ff 	.word	0x080157ff
 80155d0:	080157ff 	.word	0x080157ff
 80155d4:	080157ff 	.word	0x080157ff
 80155d8:	080157ff 	.word	0x080157ff
 80155dc:	080157ff 	.word	0x080157ff
 80155e0:	080157ff 	.word	0x080157ff
 80155e4:	080157ff 	.word	0x080157ff
 80155e8:	080157ff 	.word	0x080157ff
 80155ec:	080157ff 	.word	0x080157ff
 80155f0:	080157ff 	.word	0x080157ff
 80155f4:	080157ff 	.word	0x080157ff
 80155f8:	080157ff 	.word	0x080157ff
 80155fc:	080157ff 	.word	0x080157ff
 8015600:	080157ff 	.word	0x080157ff
 8015604:	080157ff 	.word	0x080157ff
 8015608:	080157ff 	.word	0x080157ff
 801560c:	080157ff 	.word	0x080157ff
 8015610:	080157ff 	.word	0x080157ff
 8015614:	080157ff 	.word	0x080157ff
 8015618:	080157ff 	.word	0x080157ff
 801561c:	080157ff 	.word	0x080157ff
 8015620:	080157ff 	.word	0x080157ff
 8015624:	080157ff 	.word	0x080157ff
 8015628:	080157ff 	.word	0x080157ff
 801562c:	080157ff 	.word	0x080157ff
 8015630:	080157ff 	.word	0x080157ff
 8015634:	080157ff 	.word	0x080157ff
 8015638:	080157ff 	.word	0x080157ff
 801563c:	080157ff 	.word	0x080157ff
 8015640:	080157ff 	.word	0x080157ff
 8015644:	080157ff 	.word	0x080157ff
 8015648:	080157ff 	.word	0x080157ff
 801564c:	080157ff 	.word	0x080157ff
 8015650:	080157ff 	.word	0x080157ff
 8015654:	080157ff 	.word	0x080157ff
 8015658:	080157ff 	.word	0x080157ff
 801565c:	080157ff 	.word	0x080157ff
 8015660:	080157ff 	.word	0x080157ff
 8015664:	080157ff 	.word	0x080157ff
 8015668:	080157ff 	.word	0x080157ff
 801566c:	080157ff 	.word	0x080157ff
 8015670:	080157ff 	.word	0x080157ff
 8015674:	080157ff 	.word	0x080157ff
 8015678:	080156fb 	.word	0x080156fb
 801567c:	0801571d 	.word	0x0801571d
 8015680:	08015759 	.word	0x08015759
 8015684:	0801577b 	.word	0x0801577b
 8015688:	080157ff 	.word	0x080157ff
 801568c:	080157ff 	.word	0x080157ff
 8015690:	080157ff 	.word	0x080157ff
 8015694:	0801579d 	.word	0x0801579d
 8015698:	080157dd 	.word	0x080157dd
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801569c:	2300      	movs	r3, #0
 801569e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80156aa:	e0ac      	b.n	8015806 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80156ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156b0:	2b04      	cmp	r3, #4
 80156b2:	d009      	beq.n	80156c8 <dhcp_parse_reply+0x218>
 80156b4:	4b43      	ldr	r3, [pc, #268]	; (80157c4 <dhcp_parse_reply+0x314>)
 80156b6:	f240 622e 	movw	r2, #1582	; 0x62e
 80156ba:	4943      	ldr	r1, [pc, #268]	; (80157c8 <dhcp_parse_reply+0x318>)
 80156bc:	4843      	ldr	r0, [pc, #268]	; (80157cc <dhcp_parse_reply+0x31c>)
 80156be:	f006 fbd3 	bl	801be68 <iprintf>
 80156c2:	f06f 0305 	mvn.w	r3, #5
 80156c6:	e1b1      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80156c8:	2306      	movs	r3, #6
 80156ca:	623b      	str	r3, [r7, #32]
        break;
 80156cc:	e09b      	b.n	8015806 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80156ce:	2304      	movs	r3, #4
 80156d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80156d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80156d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156dc:	429a      	cmp	r2, r3
 80156de:	d209      	bcs.n	80156f4 <dhcp_parse_reply+0x244>
 80156e0:	4b38      	ldr	r3, [pc, #224]	; (80157c4 <dhcp_parse_reply+0x314>)
 80156e2:	f240 6233 	movw	r2, #1587	; 0x633
 80156e6:	493a      	ldr	r1, [pc, #232]	; (80157d0 <dhcp_parse_reply+0x320>)
 80156e8:	4838      	ldr	r0, [pc, #224]	; (80157cc <dhcp_parse_reply+0x31c>)
 80156ea:	f006 fbbd 	bl	801be68 <iprintf>
 80156ee:	f06f 0305 	mvn.w	r3, #5
 80156f2:	e19b      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80156f4:	2307      	movs	r3, #7
 80156f6:	623b      	str	r3, [r7, #32]
        break;
 80156f8:	e085      	b.n	8015806 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80156fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156fe:	2b04      	cmp	r3, #4
 8015700:	d009      	beq.n	8015716 <dhcp_parse_reply+0x266>
 8015702:	4b30      	ldr	r3, [pc, #192]	; (80157c4 <dhcp_parse_reply+0x314>)
 8015704:	f240 6241 	movw	r2, #1601	; 0x641
 8015708:	492f      	ldr	r1, [pc, #188]	; (80157c8 <dhcp_parse_reply+0x318>)
 801570a:	4830      	ldr	r0, [pc, #192]	; (80157cc <dhcp_parse_reply+0x31c>)
 801570c:	f006 fbac 	bl	801be68 <iprintf>
 8015710:	f06f 0305 	mvn.w	r3, #5
 8015714:	e18a      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015716:	2303      	movs	r3, #3
 8015718:	623b      	str	r3, [r7, #32]
        break;
 801571a:	e074      	b.n	8015806 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801571c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015720:	2b01      	cmp	r3, #1
 8015722:	d009      	beq.n	8015738 <dhcp_parse_reply+0x288>
 8015724:	4b27      	ldr	r3, [pc, #156]	; (80157c4 <dhcp_parse_reply+0x314>)
 8015726:	f240 624f 	movw	r2, #1615	; 0x64f
 801572a:	492a      	ldr	r1, [pc, #168]	; (80157d4 <dhcp_parse_reply+0x324>)
 801572c:	4827      	ldr	r0, [pc, #156]	; (80157cc <dhcp_parse_reply+0x31c>)
 801572e:	f006 fb9b 	bl	801be68 <iprintf>
 8015732:	f06f 0305 	mvn.w	r3, #5
 8015736:	e179      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015738:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801573a:	2bf0      	cmp	r3, #240	; 0xf0
 801573c:	d009      	beq.n	8015752 <dhcp_parse_reply+0x2a2>
 801573e:	4b21      	ldr	r3, [pc, #132]	; (80157c4 <dhcp_parse_reply+0x314>)
 8015740:	f240 6251 	movw	r2, #1617	; 0x651
 8015744:	4924      	ldr	r1, [pc, #144]	; (80157d8 <dhcp_parse_reply+0x328>)
 8015746:	4821      	ldr	r0, [pc, #132]	; (80157cc <dhcp_parse_reply+0x31c>)
 8015748:	f006 fb8e 	bl	801be68 <iprintf>
 801574c:	f06f 0305 	mvn.w	r3, #5
 8015750:	e16c      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015752:	2300      	movs	r3, #0
 8015754:	623b      	str	r3, [r7, #32]
        break;
 8015756:	e056      	b.n	8015806 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801575c:	2b01      	cmp	r3, #1
 801575e:	d009      	beq.n	8015774 <dhcp_parse_reply+0x2c4>
 8015760:	4b18      	ldr	r3, [pc, #96]	; (80157c4 <dhcp_parse_reply+0x314>)
 8015762:	f240 6255 	movw	r2, #1621	; 0x655
 8015766:	491b      	ldr	r1, [pc, #108]	; (80157d4 <dhcp_parse_reply+0x324>)
 8015768:	4818      	ldr	r0, [pc, #96]	; (80157cc <dhcp_parse_reply+0x31c>)
 801576a:	f006 fb7d 	bl	801be68 <iprintf>
 801576e:	f06f 0305 	mvn.w	r3, #5
 8015772:	e15b      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015774:	2301      	movs	r3, #1
 8015776:	623b      	str	r3, [r7, #32]
        break;
 8015778:	e045      	b.n	8015806 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801577a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801577e:	2b04      	cmp	r3, #4
 8015780:	d009      	beq.n	8015796 <dhcp_parse_reply+0x2e6>
 8015782:	4b10      	ldr	r3, [pc, #64]	; (80157c4 <dhcp_parse_reply+0x314>)
 8015784:	f240 6259 	movw	r2, #1625	; 0x659
 8015788:	490f      	ldr	r1, [pc, #60]	; (80157c8 <dhcp_parse_reply+0x318>)
 801578a:	4810      	ldr	r0, [pc, #64]	; (80157cc <dhcp_parse_reply+0x31c>)
 801578c:	f006 fb6c 	bl	801be68 <iprintf>
 8015790:	f06f 0305 	mvn.w	r3, #5
 8015794:	e14a      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015796:	2302      	movs	r3, #2
 8015798:	623b      	str	r3, [r7, #32]
        break;
 801579a:	e034      	b.n	8015806 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801579c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157a0:	2b04      	cmp	r3, #4
 80157a2:	d009      	beq.n	80157b8 <dhcp_parse_reply+0x308>
 80157a4:	4b07      	ldr	r3, [pc, #28]	; (80157c4 <dhcp_parse_reply+0x314>)
 80157a6:	f240 625d 	movw	r2, #1629	; 0x65d
 80157aa:	4907      	ldr	r1, [pc, #28]	; (80157c8 <dhcp_parse_reply+0x318>)
 80157ac:	4807      	ldr	r0, [pc, #28]	; (80157cc <dhcp_parse_reply+0x31c>)
 80157ae:	f006 fb5b 	bl	801be68 <iprintf>
 80157b2:	f06f 0305 	mvn.w	r3, #5
 80157b6:	e139      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80157b8:	2304      	movs	r3, #4
 80157ba:	623b      	str	r3, [r7, #32]
        break;
 80157bc:	e023      	b.n	8015806 <dhcp_parse_reply+0x356>
 80157be:	bf00      	nop
 80157c0:	2000c56c 	.word	0x2000c56c
 80157c4:	08020028 	.word	0x08020028
 80157c8:	080202b0 	.word	0x080202b0
 80157cc:	08020088 	.word	0x08020088
 80157d0:	080202bc 	.word	0x080202bc
 80157d4:	080202d0 	.word	0x080202d0
 80157d8:	080202dc 	.word	0x080202dc
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80157dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157e0:	2b04      	cmp	r3, #4
 80157e2:	d009      	beq.n	80157f8 <dhcp_parse_reply+0x348>
 80157e4:	4b93      	ldr	r3, [pc, #588]	; (8015a34 <dhcp_parse_reply+0x584>)
 80157e6:	f240 6261 	movw	r2, #1633	; 0x661
 80157ea:	4993      	ldr	r1, [pc, #588]	; (8015a38 <dhcp_parse_reply+0x588>)
 80157ec:	4893      	ldr	r0, [pc, #588]	; (8015a3c <dhcp_parse_reply+0x58c>)
 80157ee:	f006 fb3b 	bl	801be68 <iprintf>
 80157f2:	f06f 0305 	mvn.w	r3, #5
 80157f6:	e119      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80157f8:	2305      	movs	r3, #5
 80157fa:	623b      	str	r3, [r7, #32]
        break;
 80157fc:	e003      	b.n	8015806 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80157fe:	2300      	movs	r3, #0
 8015800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015804:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015806:	7dfb      	ldrb	r3, [r7, #23]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d103      	bne.n	8015814 <dhcp_parse_reply+0x364>
      offset++;
 801580c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801580e:	3301      	adds	r3, #1
 8015810:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015812:	e0a1      	b.n	8015958 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015814:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801581a:	4413      	add	r3, r2
 801581c:	3302      	adds	r3, #2
 801581e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015822:	db02      	blt.n	801582a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8015824:	f06f 0301 	mvn.w	r3, #1
 8015828:	e100      	b.n	8015a2c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801582a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801582e:	b29a      	uxth	r2, r3
 8015830:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015832:	4413      	add	r3, r2
 8015834:	b29b      	uxth	r3, r3
 8015836:	3302      	adds	r3, #2
 8015838:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801583a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801583e:	2b00      	cmp	r3, #0
 8015840:	f000 808a 	beq.w	8015958 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8015844:	2300      	movs	r3, #0
 8015846:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015848:	6a3b      	ldr	r3, [r7, #32]
 801584a:	2b00      	cmp	r3, #0
 801584c:	db02      	blt.n	8015854 <dhcp_parse_reply+0x3a4>
 801584e:	6a3b      	ldr	r3, [r7, #32]
 8015850:	2b07      	cmp	r3, #7
 8015852:	dd06      	ble.n	8015862 <dhcp_parse_reply+0x3b2>
 8015854:	4b77      	ldr	r3, [pc, #476]	; (8015a34 <dhcp_parse_reply+0x584>)
 8015856:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801585a:	4979      	ldr	r1, [pc, #484]	; (8015a40 <dhcp_parse_reply+0x590>)
 801585c:	4877      	ldr	r0, [pc, #476]	; (8015a3c <dhcp_parse_reply+0x58c>)
 801585e:	f006 fb03 	bl	801be68 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015862:	4a78      	ldr	r2, [pc, #480]	; (8015a44 <dhcp_parse_reply+0x594>)
 8015864:	6a3b      	ldr	r3, [r7, #32]
 8015866:	4413      	add	r3, r2
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d174      	bne.n	8015958 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801586e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015872:	2b04      	cmp	r3, #4
 8015874:	bf28      	it	cs
 8015876:	2304      	movcs	r3, #4
 8015878:	b2db      	uxtb	r3, r3
 801587a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801587c:	8bfb      	ldrh	r3, [r7, #30]
 801587e:	8aba      	ldrh	r2, [r7, #20]
 8015880:	f107 0108 	add.w	r1, r7, #8
 8015884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015886:	f7f7 fc65 	bl	800d154 <pbuf_copy_partial>
 801588a:	4603      	mov	r3, r0
 801588c:	461a      	mov	r2, r3
 801588e:	8abb      	ldrh	r3, [r7, #20]
 8015890:	4293      	cmp	r3, r2
 8015892:	d002      	beq.n	801589a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8015894:	f06f 0301 	mvn.w	r3, #1
 8015898:	e0c8      	b.n	8015a2c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801589a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801589e:	2b04      	cmp	r3, #4
 80158a0:	d933      	bls.n	801590a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80158a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80158a6:	f003 0303 	and.w	r3, r3, #3
 80158aa:	b2db      	uxtb	r3, r3
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d009      	beq.n	80158c4 <dhcp_parse_reply+0x414>
 80158b0:	4b60      	ldr	r3, [pc, #384]	; (8015a34 <dhcp_parse_reply+0x584>)
 80158b2:	f240 6281 	movw	r2, #1665	; 0x681
 80158b6:	4964      	ldr	r1, [pc, #400]	; (8015a48 <dhcp_parse_reply+0x598>)
 80158b8:	4860      	ldr	r0, [pc, #384]	; (8015a3c <dhcp_parse_reply+0x58c>)
 80158ba:	f006 fad5 	bl	801be68 <iprintf>
 80158be:	f06f 0305 	mvn.w	r3, #5
 80158c2:	e0b3      	b.n	8015a2c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80158c4:	4a5f      	ldr	r2, [pc, #380]	; (8015a44 <dhcp_parse_reply+0x594>)
 80158c6:	6a3b      	ldr	r3, [r7, #32]
 80158c8:	4413      	add	r3, r2
 80158ca:	2201      	movs	r2, #1
 80158cc:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7f5 fe68 	bl	800b5a6 <lwip_htonl>
 80158d6:	4601      	mov	r1, r0
 80158d8:	4a5c      	ldr	r2, [pc, #368]	; (8015a4c <dhcp_parse_reply+0x59c>)
 80158da:	6a3b      	ldr	r3, [r7, #32]
 80158dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80158e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80158e4:	3b04      	subs	r3, #4
 80158e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80158ea:	8bfb      	ldrh	r3, [r7, #30]
 80158ec:	3304      	adds	r3, #4
 80158ee:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80158f0:	8a7a      	ldrh	r2, [r7, #18]
 80158f2:	8bfb      	ldrh	r3, [r7, #30]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d202      	bcs.n	80158fe <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80158f8:	f06f 0301 	mvn.w	r3, #1
 80158fc:	e096      	b.n	8015a2c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80158fe:	8a7b      	ldrh	r3, [r7, #18]
 8015900:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015902:	6a3b      	ldr	r3, [r7, #32]
 8015904:	3301      	adds	r3, #1
 8015906:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015908:	e79e      	b.n	8015848 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801590a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801590e:	2b04      	cmp	r3, #4
 8015910:	d106      	bne.n	8015920 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8015912:	68bb      	ldr	r3, [r7, #8]
 8015914:	4618      	mov	r0, r3
 8015916:	f7f5 fe46 	bl	800b5a6 <lwip_htonl>
 801591a:	4603      	mov	r3, r0
 801591c:	60bb      	str	r3, [r7, #8]
 801591e:	e011      	b.n	8015944 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015924:	2b01      	cmp	r3, #1
 8015926:	d009      	beq.n	801593c <dhcp_parse_reply+0x48c>
 8015928:	4b42      	ldr	r3, [pc, #264]	; (8015a34 <dhcp_parse_reply+0x584>)
 801592a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801592e:	4948      	ldr	r1, [pc, #288]	; (8015a50 <dhcp_parse_reply+0x5a0>)
 8015930:	4842      	ldr	r0, [pc, #264]	; (8015a3c <dhcp_parse_reply+0x58c>)
 8015932:	f006 fa99 	bl	801be68 <iprintf>
 8015936:	f06f 0305 	mvn.w	r3, #5
 801593a:	e077      	b.n	8015a2c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801593c:	f107 0308 	add.w	r3, r7, #8
 8015940:	781b      	ldrb	r3, [r3, #0]
 8015942:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015944:	4a3f      	ldr	r2, [pc, #252]	; (8015a44 <dhcp_parse_reply+0x594>)
 8015946:	6a3b      	ldr	r3, [r7, #32]
 8015948:	4413      	add	r3, r2
 801594a:	2201      	movs	r2, #1
 801594c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801594e:	68ba      	ldr	r2, [r7, #8]
 8015950:	493e      	ldr	r1, [pc, #248]	; (8015a4c <dhcp_parse_reply+0x59c>)
 8015952:	6a3b      	ldr	r3, [r7, #32]
 8015954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595a:	895b      	ldrh	r3, [r3, #10]
 801595c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801595e:	429a      	cmp	r2, r3
 8015960:	d324      	bcc.n	80159ac <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8015962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015964:	895b      	ldrh	r3, [r3, #10]
 8015966:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015968:	1ad3      	subs	r3, r2, r3
 801596a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801596e:	895b      	ldrh	r3, [r3, #10]
 8015970:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015972:	1ad3      	subs	r3, r2, r3
 8015974:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015976:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015978:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801597a:	429a      	cmp	r2, r3
 801597c:	d213      	bcs.n	80159a6 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015986:	2b00      	cmp	r3, #0
 8015988:	d109      	bne.n	801599e <dhcp_parse_reply+0x4ee>
 801598a:	4b2a      	ldr	r3, [pc, #168]	; (8015a34 <dhcp_parse_reply+0x584>)
 801598c:	f240 629d 	movw	r2, #1693	; 0x69d
 8015990:	4930      	ldr	r1, [pc, #192]	; (8015a54 <dhcp_parse_reply+0x5a4>)
 8015992:	482a      	ldr	r0, [pc, #168]	; (8015a3c <dhcp_parse_reply+0x58c>)
 8015994:	f006 fa68 	bl	801be68 <iprintf>
 8015998:	f06f 0305 	mvn.w	r3, #5
 801599c:	e046      	b.n	8015a2c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80159a4:	e002      	b.n	80159ac <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80159a6:	f06f 0301 	mvn.w	r3, #1
 80159aa:	e03f      	b.n	8015a2c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80159ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d00a      	beq.n	80159c8 <dhcp_parse_reply+0x518>
 80159b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80159b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80159b6:	429a      	cmp	r2, r3
 80159b8:	d206      	bcs.n	80159c8 <dhcp_parse_reply+0x518>
 80159ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80159bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80159be:	4413      	add	r3, r2
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	2bff      	cmp	r3, #255	; 0xff
 80159c4:	f47f adb7 	bne.w	8015536 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80159c8:	4b1e      	ldr	r3, [pc, #120]	; (8015a44 <dhcp_parse_reply+0x594>)
 80159ca:	781b      	ldrb	r3, [r3, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d018      	beq.n	8015a02 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80159d0:	4b1e      	ldr	r3, [pc, #120]	; (8015a4c <dhcp_parse_reply+0x59c>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80159d6:	4b1b      	ldr	r3, [pc, #108]	; (8015a44 <dhcp_parse_reply+0x594>)
 80159d8:	2200      	movs	r2, #0
 80159da:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	2b01      	cmp	r3, #1
 80159e0:	d102      	bne.n	80159e8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80159e2:	2301      	movs	r3, #1
 80159e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159e6:	e00c      	b.n	8015a02 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2b02      	cmp	r3, #2
 80159ec:	d102      	bne.n	80159f4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80159ee:	2301      	movs	r3, #1
 80159f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80159f2:	e006      	b.n	8015a02 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	2b03      	cmp	r3, #3
 80159f8:	d103      	bne.n	8015a02 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80159fa:	2301      	movs	r3, #1
 80159fc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80159fe:	2301      	movs	r3, #1
 8015a00:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d006      	beq.n	8015a16 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015a0c:	236c      	movs	r3, #108	; 0x6c
 8015a0e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015a10:	23ec      	movs	r3, #236	; 0xec
 8015a12:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015a14:	e569      	b.n	80154ea <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d006      	beq.n	8015a2a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015a20:	232c      	movs	r3, #44	; 0x2c
 8015a22:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015a24:	236c      	movs	r3, #108	; 0x6c
 8015a26:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015a28:	e55f      	b.n	80154ea <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015a2a:	2300      	movs	r3, #0
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3740      	adds	r7, #64	; 0x40
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	08020028 	.word	0x08020028
 8015a38:	080202b0 	.word	0x080202b0
 8015a3c:	08020088 	.word	0x08020088
 8015a40:	080202f4 	.word	0x080202f4
 8015a44:	2000c56c 	.word	0x2000c56c
 8015a48:	08020308 	.word	0x08020308
 8015a4c:	2000c574 	.word	0x2000c574
 8015a50:	08020320 	.word	0x08020320
 8015a54:	08020334 	.word	0x08020334

08015a58 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b08a      	sub	sp, #40	; 0x28
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
 8015a64:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015a66:	4b5f      	ldr	r3, [pc, #380]	; (8015be4 <dhcp_recv+0x18c>)
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a6c:	6a3b      	ldr	r3, [r7, #32]
 8015a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a70:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015a78:	69fb      	ldr	r3, [r7, #28]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	f000 809d 	beq.w	8015bba <dhcp_recv+0x162>
 8015a80:	69fb      	ldr	r3, [r7, #28]
 8015a82:	791b      	ldrb	r3, [r3, #4]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	f000 8098 	beq.w	8015bba <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	895b      	ldrh	r3, [r3, #10]
 8015a8e:	2b2b      	cmp	r3, #43	; 0x2b
 8015a90:	f240 8095 	bls.w	8015bbe <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015a94:	69bb      	ldr	r3, [r7, #24]
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	2b02      	cmp	r3, #2
 8015a9a:	f040 8092 	bne.w	8015bc2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015aa4:	e012      	b.n	8015acc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aaa:	6a3a      	ldr	r2, [r7, #32]
 8015aac:	4413      	add	r3, r2
 8015aae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ab6:	69b9      	ldr	r1, [r7, #24]
 8015ab8:	440b      	add	r3, r1
 8015aba:	7f1b      	ldrb	r3, [r3, #28]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	f040 8082 	bne.w	8015bc6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015acc:	6a3b      	ldr	r3, [r7, #32]
 8015ace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015ad2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d203      	bcs.n	8015ae2 <dhcp_recv+0x8a>
 8015ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ade:	2b05      	cmp	r3, #5
 8015ae0:	d9e1      	bls.n	8015aa6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015ae2:	69bb      	ldr	r3, [r7, #24]
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7f5 fd5d 	bl	800b5a6 <lwip_htonl>
 8015aec:	4602      	mov	r2, r0
 8015aee:	69fb      	ldr	r3, [r7, #28]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d169      	bne.n	8015bca <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015af6:	69f9      	ldr	r1, [r7, #28]
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7ff fcd9 	bl	80154b0 <dhcp_parse_reply>
 8015afe:	4603      	mov	r3, r0
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d164      	bne.n	8015bce <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015b04:	4b38      	ldr	r3, [pc, #224]	; (8015be8 <dhcp_recv+0x190>)
 8015b06:	785b      	ldrb	r3, [r3, #1]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d062      	beq.n	8015bd2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015b12:	4b36      	ldr	r3, [pc, #216]	; (8015bec <dhcp_recv+0x194>)
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015b18:	7cfb      	ldrb	r3, [r7, #19]
 8015b1a:	2b05      	cmp	r3, #5
 8015b1c:	d12a      	bne.n	8015b74 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015b1e:	69fb      	ldr	r3, [r7, #28]
 8015b20:	795b      	ldrb	r3, [r3, #5]
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d112      	bne.n	8015b4c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015b26:	6979      	ldr	r1, [r7, #20]
 8015b28:	6a38      	ldr	r0, [r7, #32]
 8015b2a:	f7fe fe05 	bl	8014738 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015b2e:	6a3b      	ldr	r3, [r7, #32]
 8015b30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b34:	f003 0308 	and.w	r3, r3, #8
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d003      	beq.n	8015b44 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015b3c:	6a38      	ldr	r0, [r7, #32]
 8015b3e:	f7fe fb75 	bl	801422c <dhcp_check>
 8015b42:	e047      	b.n	8015bd4 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015b44:	6a38      	ldr	r0, [r7, #32]
 8015b46:	f7ff f867 	bl	8014c18 <dhcp_bind>
 8015b4a:	e043      	b.n	8015bd4 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	795b      	ldrb	r3, [r3, #5]
 8015b50:	2b03      	cmp	r3, #3
 8015b52:	d007      	beq.n	8015b64 <dhcp_recv+0x10c>
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	795b      	ldrb	r3, [r3, #5]
 8015b58:	2b04      	cmp	r3, #4
 8015b5a:	d003      	beq.n	8015b64 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015b5c:	69fb      	ldr	r3, [r7, #28]
 8015b5e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015b60:	2b05      	cmp	r3, #5
 8015b62:	d137      	bne.n	8015bd4 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8015b64:	6979      	ldr	r1, [r7, #20]
 8015b66:	6a38      	ldr	r0, [r7, #32]
 8015b68:	f7fe fde6 	bl	8014738 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015b6c:	6a38      	ldr	r0, [r7, #32]
 8015b6e:	f7ff f853 	bl	8014c18 <dhcp_bind>
 8015b72:	e02f      	b.n	8015bd4 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015b74:	7cfb      	ldrb	r3, [r7, #19]
 8015b76:	2b06      	cmp	r3, #6
 8015b78:	d113      	bne.n	8015ba2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015b7e:	2b03      	cmp	r3, #3
 8015b80:	d00b      	beq.n	8015b9a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015b82:	69fb      	ldr	r3, [r7, #28]
 8015b84:	795b      	ldrb	r3, [r3, #5]
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d007      	beq.n	8015b9a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015b8e:	2b04      	cmp	r3, #4
 8015b90:	d003      	beq.n	8015b9a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015b92:	69fb      	ldr	r3, [r7, #28]
 8015b94:	795b      	ldrb	r3, [r3, #5]
 8015b96:	2b05      	cmp	r3, #5
 8015b98:	d103      	bne.n	8015ba2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015b9a:	6a38      	ldr	r0, [r7, #32]
 8015b9c:	f7fe fb2c 	bl	80141f8 <dhcp_handle_nak>
 8015ba0:	e018      	b.n	8015bd4 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015ba2:	7cfb      	ldrb	r3, [r7, #19]
 8015ba4:	2b02      	cmp	r3, #2
 8015ba6:	d108      	bne.n	8015bba <dhcp_recv+0x162>
 8015ba8:	69fb      	ldr	r3, [r7, #28]
 8015baa:	795b      	ldrb	r3, [r3, #5]
 8015bac:	2b06      	cmp	r3, #6
 8015bae:	d104      	bne.n	8015bba <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015bb0:	6979      	ldr	r1, [r7, #20]
 8015bb2:	6a38      	ldr	r0, [r7, #32]
 8015bb4:	f7fe fb6e 	bl	8014294 <dhcp_handle_offer>
 8015bb8:	e00c      	b.n	8015bd4 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8015bba:	bf00      	nop
 8015bbc:	e00a      	b.n	8015bd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015bbe:	bf00      	nop
 8015bc0:	e008      	b.n	8015bd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015bc2:	bf00      	nop
 8015bc4:	e006      	b.n	8015bd4 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8015bc6:	bf00      	nop
 8015bc8:	e004      	b.n	8015bd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015bca:	bf00      	nop
 8015bcc:	e002      	b.n	8015bd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015bce:	bf00      	nop
 8015bd0:	e000      	b.n	8015bd4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015bd2:	bf00      	nop
  pbuf_free(p);
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f7f7 f8b7 	bl	800cd48 <pbuf_free>
}
 8015bda:	bf00      	nop
 8015bdc:	3728      	adds	r7, #40	; 0x28
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	20008dfc 	.word	0x20008dfc
 8015be8:	2000c56c 	.word	0x2000c56c
 8015bec:	2000c574 	.word	0x2000c574

08015bf0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b088      	sub	sp, #32
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	603b      	str	r3, [r7, #0]
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d108      	bne.n	8015c18 <dhcp_create_msg+0x28>
 8015c06:	4b5f      	ldr	r3, [pc, #380]	; (8015d84 <dhcp_create_msg+0x194>)
 8015c08:	f240 7269 	movw	r2, #1897	; 0x769
 8015c0c:	495e      	ldr	r1, [pc, #376]	; (8015d88 <dhcp_create_msg+0x198>)
 8015c0e:	485f      	ldr	r0, [pc, #380]	; (8015d8c <dhcp_create_msg+0x19c>)
 8015c10:	f006 f92a 	bl	801be68 <iprintf>
 8015c14:	2300      	movs	r3, #0
 8015c16:	e0b1      	b.n	8015d7c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015c18:	68bb      	ldr	r3, [r7, #8]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d108      	bne.n	8015c30 <dhcp_create_msg+0x40>
 8015c1e:	4b59      	ldr	r3, [pc, #356]	; (8015d84 <dhcp_create_msg+0x194>)
 8015c20:	f240 726a 	movw	r2, #1898	; 0x76a
 8015c24:	495a      	ldr	r1, [pc, #360]	; (8015d90 <dhcp_create_msg+0x1a0>)
 8015c26:	4859      	ldr	r0, [pc, #356]	; (8015d8c <dhcp_create_msg+0x19c>)
 8015c28:	f006 f91e 	bl	801be68 <iprintf>
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	e0a5      	b.n	8015d7c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015c30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c34:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015c38:	2036      	movs	r0, #54	; 0x36
 8015c3a:	f7f6 fd73 	bl	800c724 <pbuf_alloc>
 8015c3e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015c40:	69bb      	ldr	r3, [r7, #24]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d101      	bne.n	8015c4a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015c46:	2300      	movs	r3, #0
 8015c48:	e098      	b.n	8015d7c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015c4a:	69bb      	ldr	r3, [r7, #24]
 8015c4c:	895b      	ldrh	r3, [r3, #10]
 8015c4e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015c52:	d206      	bcs.n	8015c62 <dhcp_create_msg+0x72>
 8015c54:	4b4b      	ldr	r3, [pc, #300]	; (8015d84 <dhcp_create_msg+0x194>)
 8015c56:	f240 7272 	movw	r2, #1906	; 0x772
 8015c5a:	494e      	ldr	r1, [pc, #312]	; (8015d94 <dhcp_create_msg+0x1a4>)
 8015c5c:	484b      	ldr	r0, [pc, #300]	; (8015d8c <dhcp_create_msg+0x19c>)
 8015c5e:	f006 f903 	bl	801be68 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015c62:	79fb      	ldrb	r3, [r7, #7]
 8015c64:	2b03      	cmp	r3, #3
 8015c66:	d103      	bne.n	8015c70 <dhcp_create_msg+0x80>
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	795b      	ldrb	r3, [r3, #5]
 8015c6c:	2b03      	cmp	r3, #3
 8015c6e:	d10d      	bne.n	8015c8c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	799b      	ldrb	r3, [r3, #6]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d105      	bne.n	8015c84 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015c78:	f006 f972 	bl	801bf60 <rand>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	461a      	mov	r2, r3
 8015c80:	4b45      	ldr	r3, [pc, #276]	; (8015d98 <dhcp_create_msg+0x1a8>)
 8015c82:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015c84:	4b44      	ldr	r3, [pc, #272]	; (8015d98 <dhcp_create_msg+0x1a8>)
 8015c86:	681a      	ldr	r2, [r3, #0]
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015c8c:	69bb      	ldr	r3, [r7, #24]
 8015c8e:	685b      	ldr	r3, [r3, #4]
 8015c90:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015c92:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015c96:	2100      	movs	r1, #0
 8015c98:	6978      	ldr	r0, [r7, #20]
 8015c9a:	f006 f8dd 	bl	801be58 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	2201      	movs	r2, #1
 8015ca2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7f5 fc74 	bl	800b5a6 <lwip_htonl>
 8015cbe:	4602      	mov	r2, r0
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015cc4:	79fb      	ldrb	r3, [r7, #7]
 8015cc6:	2b08      	cmp	r3, #8
 8015cc8:	d010      	beq.n	8015cec <dhcp_create_msg+0xfc>
 8015cca:	79fb      	ldrb	r3, [r7, #7]
 8015ccc:	2b04      	cmp	r3, #4
 8015cce:	d00d      	beq.n	8015cec <dhcp_create_msg+0xfc>
 8015cd0:	79fb      	ldrb	r3, [r7, #7]
 8015cd2:	2b07      	cmp	r3, #7
 8015cd4:	d00a      	beq.n	8015cec <dhcp_create_msg+0xfc>
 8015cd6:	79fb      	ldrb	r3, [r7, #7]
 8015cd8:	2b03      	cmp	r3, #3
 8015cda:	d10c      	bne.n	8015cf6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015ce0:	2b05      	cmp	r3, #5
 8015ce2:	d003      	beq.n	8015cec <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015ce4:	68bb      	ldr	r3, [r7, #8]
 8015ce6:	795b      	ldrb	r3, [r3, #5]
 8015ce8:	2b04      	cmp	r3, #4
 8015cea:	d104      	bne.n	8015cf6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	3304      	adds	r3, #4
 8015cf0:	681a      	ldr	r2, [r3, #0]
 8015cf2:	697b      	ldr	r3, [r7, #20]
 8015cf4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	83fb      	strh	r3, [r7, #30]
 8015cfa:	e00c      	b.n	8015d16 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015cfc:	8bfa      	ldrh	r2, [r7, #30]
 8015cfe:	8bfb      	ldrh	r3, [r7, #30]
 8015d00:	68f9      	ldr	r1, [r7, #12]
 8015d02:	440a      	add	r2, r1
 8015d04:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015d08:	697a      	ldr	r2, [r7, #20]
 8015d0a:	4413      	add	r3, r2
 8015d0c:	460a      	mov	r2, r1
 8015d0e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015d10:	8bfb      	ldrh	r3, [r7, #30]
 8015d12:	3301      	adds	r3, #1
 8015d14:	83fb      	strh	r3, [r7, #30]
 8015d16:	8bfb      	ldrh	r3, [r7, #30]
 8015d18:	2b05      	cmp	r3, #5
 8015d1a:	d9ef      	bls.n	8015cfc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015d1c:	697b      	ldr	r3, [r7, #20]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015d24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015d28:	2200      	movs	r2, #0
 8015d2a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015d2e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015d32:	2200      	movs	r2, #0
 8015d34:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015d38:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015d42:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	2235      	movs	r2, #53	; 0x35
 8015d50:	2000      	movs	r0, #0
 8015d52:	f7ff fadd 	bl	8015310 <dhcp_option>
 8015d56:	4603      	mov	r3, r0
 8015d58:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d60:	79fa      	ldrb	r2, [r7, #7]
 8015d62:	8a7b      	ldrh	r3, [r7, #18]
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7ff fb07 	bl	8015378 <dhcp_option_byte>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d002      	beq.n	8015d7a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	8a7a      	ldrh	r2, [r7, #18]
 8015d78:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015d7a:	69bb      	ldr	r3, [r7, #24]
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3720      	adds	r7, #32
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	08020028 	.word	0x08020028
 8015d88:	08020348 	.word	0x08020348
 8015d8c:	08020088 	.word	0x08020088
 8015d90:	08020368 	.word	0x08020368
 8015d94:	08020388 	.word	0x08020388
 8015d98:	20008438 	.word	0x20008438

08015d9c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b084      	sub	sp, #16
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	4603      	mov	r3, r0
 8015da4:	60b9      	str	r1, [r7, #8]
 8015da6:	607a      	str	r2, [r7, #4]
 8015da8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015daa:	89fb      	ldrh	r3, [r7, #14]
 8015dac:	1c5a      	adds	r2, r3, #1
 8015dae:	81fa      	strh	r2, [r7, #14]
 8015db0:	461a      	mov	r2, r3
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	4413      	add	r3, r2
 8015db6:	22ff      	movs	r2, #255	; 0xff
 8015db8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015dba:	e007      	b.n	8015dcc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015dbc:	89fb      	ldrh	r3, [r7, #14]
 8015dbe:	1c5a      	adds	r2, r3, #1
 8015dc0:	81fa      	strh	r2, [r7, #14]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	4413      	add	r3, r2
 8015dc8:	2200      	movs	r2, #0
 8015dca:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015dcc:	89fb      	ldrh	r3, [r7, #14]
 8015dce:	2b43      	cmp	r3, #67	; 0x43
 8015dd0:	d904      	bls.n	8015ddc <dhcp_option_trailer+0x40>
 8015dd2:	89fb      	ldrh	r3, [r7, #14]
 8015dd4:	f003 0303 	and.w	r3, r3, #3
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d002      	beq.n	8015de2 <dhcp_option_trailer+0x46>
 8015ddc:	89fb      	ldrh	r3, [r7, #14]
 8015dde:	2b43      	cmp	r3, #67	; 0x43
 8015de0:	d9ec      	bls.n	8015dbc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015de2:	89fb      	ldrh	r3, [r7, #14]
 8015de4:	33f0      	adds	r3, #240	; 0xf0
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	4619      	mov	r1, r3
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f7f6 fdf4 	bl	800c9d8 <pbuf_realloc>
}
 8015df0:	bf00      	nop
 8015df2:	3710      	adds	r7, #16
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}

08015df8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b085      	sub	sp, #20
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d017      	beq.n	8015e36 <dhcp_supplied_address+0x3e>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d013      	beq.n	8015e36 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e12:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	795b      	ldrb	r3, [r3, #5]
 8015e18:	2b0a      	cmp	r3, #10
 8015e1a:	d007      	beq.n	8015e2c <dhcp_supplied_address+0x34>
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	795b      	ldrb	r3, [r3, #5]
 8015e20:	2b05      	cmp	r3, #5
 8015e22:	d003      	beq.n	8015e2c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015e28:	2b04      	cmp	r3, #4
 8015e2a:	d101      	bne.n	8015e30 <dhcp_supplied_address+0x38>
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	e000      	b.n	8015e32 <dhcp_supplied_address+0x3a>
 8015e30:	2300      	movs	r3, #0
 8015e32:	b2db      	uxtb	r3, r3
 8015e34:	e000      	b.n	8015e38 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015e36:	2300      	movs	r3, #0
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3714      	adds	r7, #20
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e42:	4770      	bx	lr

08015e44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015e4c:	4915      	ldr	r1, [pc, #84]	; (8015ea4 <etharp_free_entry+0x60>)
 8015e4e:	687a      	ldr	r2, [r7, #4]
 8015e50:	4613      	mov	r3, r2
 8015e52:	005b      	lsls	r3, r3, #1
 8015e54:	4413      	add	r3, r2
 8015e56:	00db      	lsls	r3, r3, #3
 8015e58:	440b      	add	r3, r1
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d013      	beq.n	8015e88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015e60:	4910      	ldr	r1, [pc, #64]	; (8015ea4 <etharp_free_entry+0x60>)
 8015e62:	687a      	ldr	r2, [r7, #4]
 8015e64:	4613      	mov	r3, r2
 8015e66:	005b      	lsls	r3, r3, #1
 8015e68:	4413      	add	r3, r2
 8015e6a:	00db      	lsls	r3, r3, #3
 8015e6c:	440b      	add	r3, r1
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7f6 ff69 	bl	800cd48 <pbuf_free>
    arp_table[i].q = NULL;
 8015e76:	490b      	ldr	r1, [pc, #44]	; (8015ea4 <etharp_free_entry+0x60>)
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	4613      	mov	r3, r2
 8015e7c:	005b      	lsls	r3, r3, #1
 8015e7e:	4413      	add	r3, r2
 8015e80:	00db      	lsls	r3, r3, #3
 8015e82:	440b      	add	r3, r1
 8015e84:	2200      	movs	r2, #0
 8015e86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015e88:	4906      	ldr	r1, [pc, #24]	; (8015ea4 <etharp_free_entry+0x60>)
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	4613      	mov	r3, r2
 8015e8e:	005b      	lsls	r3, r3, #1
 8015e90:	4413      	add	r3, r2
 8015e92:	00db      	lsls	r3, r3, #3
 8015e94:	440b      	add	r3, r1
 8015e96:	3314      	adds	r3, #20
 8015e98:	2200      	movs	r2, #0
 8015e9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015e9c:	bf00      	nop
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}
 8015ea4:	2000843c 	.word	0x2000843c

08015ea8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b082      	sub	sp, #8
 8015eac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015eae:	2300      	movs	r3, #0
 8015eb0:	607b      	str	r3, [r7, #4]
 8015eb2:	e096      	b.n	8015fe2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015eb4:	494f      	ldr	r1, [pc, #316]	; (8015ff4 <etharp_tmr+0x14c>)
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	4613      	mov	r3, r2
 8015eba:	005b      	lsls	r3, r3, #1
 8015ebc:	4413      	add	r3, r2
 8015ebe:	00db      	lsls	r3, r3, #3
 8015ec0:	440b      	add	r3, r1
 8015ec2:	3314      	adds	r3, #20
 8015ec4:	781b      	ldrb	r3, [r3, #0]
 8015ec6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015ec8:	78fb      	ldrb	r3, [r7, #3]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	f000 8086 	beq.w	8015fdc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015ed0:	4948      	ldr	r1, [pc, #288]	; (8015ff4 <etharp_tmr+0x14c>)
 8015ed2:	687a      	ldr	r2, [r7, #4]
 8015ed4:	4613      	mov	r3, r2
 8015ed6:	005b      	lsls	r3, r3, #1
 8015ed8:	4413      	add	r3, r2
 8015eda:	00db      	lsls	r3, r3, #3
 8015edc:	440b      	add	r3, r1
 8015ede:	3312      	adds	r3, #18
 8015ee0:	881b      	ldrh	r3, [r3, #0]
 8015ee2:	3301      	adds	r3, #1
 8015ee4:	b298      	uxth	r0, r3
 8015ee6:	4943      	ldr	r1, [pc, #268]	; (8015ff4 <etharp_tmr+0x14c>)
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	4613      	mov	r3, r2
 8015eec:	005b      	lsls	r3, r3, #1
 8015eee:	4413      	add	r3, r2
 8015ef0:	00db      	lsls	r3, r3, #3
 8015ef2:	440b      	add	r3, r1
 8015ef4:	3312      	adds	r3, #18
 8015ef6:	4602      	mov	r2, r0
 8015ef8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015efa:	493e      	ldr	r1, [pc, #248]	; (8015ff4 <etharp_tmr+0x14c>)
 8015efc:	687a      	ldr	r2, [r7, #4]
 8015efe:	4613      	mov	r3, r2
 8015f00:	005b      	lsls	r3, r3, #1
 8015f02:	4413      	add	r3, r2
 8015f04:	00db      	lsls	r3, r3, #3
 8015f06:	440b      	add	r3, r1
 8015f08:	3312      	adds	r3, #18
 8015f0a:	881b      	ldrh	r3, [r3, #0]
 8015f0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015f10:	d215      	bcs.n	8015f3e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015f12:	4938      	ldr	r1, [pc, #224]	; (8015ff4 <etharp_tmr+0x14c>)
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	4613      	mov	r3, r2
 8015f18:	005b      	lsls	r3, r3, #1
 8015f1a:	4413      	add	r3, r2
 8015f1c:	00db      	lsls	r3, r3, #3
 8015f1e:	440b      	add	r3, r1
 8015f20:	3314      	adds	r3, #20
 8015f22:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015f24:	2b01      	cmp	r3, #1
 8015f26:	d10e      	bne.n	8015f46 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015f28:	4932      	ldr	r1, [pc, #200]	; (8015ff4 <etharp_tmr+0x14c>)
 8015f2a:	687a      	ldr	r2, [r7, #4]
 8015f2c:	4613      	mov	r3, r2
 8015f2e:	005b      	lsls	r3, r3, #1
 8015f30:	4413      	add	r3, r2
 8015f32:	00db      	lsls	r3, r3, #3
 8015f34:	440b      	add	r3, r1
 8015f36:	3312      	adds	r3, #18
 8015f38:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015f3a:	2b04      	cmp	r3, #4
 8015f3c:	d903      	bls.n	8015f46 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f7ff ff80 	bl	8015e44 <etharp_free_entry>
 8015f44:	e04a      	b.n	8015fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015f46:	492b      	ldr	r1, [pc, #172]	; (8015ff4 <etharp_tmr+0x14c>)
 8015f48:	687a      	ldr	r2, [r7, #4]
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	4413      	add	r3, r2
 8015f50:	00db      	lsls	r3, r3, #3
 8015f52:	440b      	add	r3, r1
 8015f54:	3314      	adds	r3, #20
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	2b03      	cmp	r3, #3
 8015f5a:	d10a      	bne.n	8015f72 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015f5c:	4925      	ldr	r1, [pc, #148]	; (8015ff4 <etharp_tmr+0x14c>)
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	4613      	mov	r3, r2
 8015f62:	005b      	lsls	r3, r3, #1
 8015f64:	4413      	add	r3, r2
 8015f66:	00db      	lsls	r3, r3, #3
 8015f68:	440b      	add	r3, r1
 8015f6a:	3314      	adds	r3, #20
 8015f6c:	2204      	movs	r2, #4
 8015f6e:	701a      	strb	r2, [r3, #0]
 8015f70:	e034      	b.n	8015fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015f72:	4920      	ldr	r1, [pc, #128]	; (8015ff4 <etharp_tmr+0x14c>)
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	4613      	mov	r3, r2
 8015f78:	005b      	lsls	r3, r3, #1
 8015f7a:	4413      	add	r3, r2
 8015f7c:	00db      	lsls	r3, r3, #3
 8015f7e:	440b      	add	r3, r1
 8015f80:	3314      	adds	r3, #20
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	2b04      	cmp	r3, #4
 8015f86:	d10a      	bne.n	8015f9e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015f88:	491a      	ldr	r1, [pc, #104]	; (8015ff4 <etharp_tmr+0x14c>)
 8015f8a:	687a      	ldr	r2, [r7, #4]
 8015f8c:	4613      	mov	r3, r2
 8015f8e:	005b      	lsls	r3, r3, #1
 8015f90:	4413      	add	r3, r2
 8015f92:	00db      	lsls	r3, r3, #3
 8015f94:	440b      	add	r3, r1
 8015f96:	3314      	adds	r3, #20
 8015f98:	2202      	movs	r2, #2
 8015f9a:	701a      	strb	r2, [r3, #0]
 8015f9c:	e01e      	b.n	8015fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015f9e:	4915      	ldr	r1, [pc, #84]	; (8015ff4 <etharp_tmr+0x14c>)
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	005b      	lsls	r3, r3, #1
 8015fa6:	4413      	add	r3, r2
 8015fa8:	00db      	lsls	r3, r3, #3
 8015faa:	440b      	add	r3, r1
 8015fac:	3314      	adds	r3, #20
 8015fae:	781b      	ldrb	r3, [r3, #0]
 8015fb0:	2b01      	cmp	r3, #1
 8015fb2:	d113      	bne.n	8015fdc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015fb4:	490f      	ldr	r1, [pc, #60]	; (8015ff4 <etharp_tmr+0x14c>)
 8015fb6:	687a      	ldr	r2, [r7, #4]
 8015fb8:	4613      	mov	r3, r2
 8015fba:	005b      	lsls	r3, r3, #1
 8015fbc:	4413      	add	r3, r2
 8015fbe:	00db      	lsls	r3, r3, #3
 8015fc0:	440b      	add	r3, r1
 8015fc2:	3308      	adds	r3, #8
 8015fc4:	6818      	ldr	r0, [r3, #0]
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	4613      	mov	r3, r2
 8015fca:	005b      	lsls	r3, r3, #1
 8015fcc:	4413      	add	r3, r2
 8015fce:	00db      	lsls	r3, r3, #3
 8015fd0:	4a08      	ldr	r2, [pc, #32]	; (8015ff4 <etharp_tmr+0x14c>)
 8015fd2:	4413      	add	r3, r2
 8015fd4:	3304      	adds	r3, #4
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	f000 fe72 	bl	8016cc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	3301      	adds	r3, #1
 8015fe0:	607b      	str	r3, [r7, #4]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2b09      	cmp	r3, #9
 8015fe6:	f77f af65 	ble.w	8015eb4 <etharp_tmr+0xc>
      }
    }
  }
}
 8015fea:	bf00      	nop
 8015fec:	3708      	adds	r7, #8
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	2000843c 	.word	0x2000843c

08015ff8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b08a      	sub	sp, #40	; 0x28
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	460b      	mov	r3, r1
 8016002:	607a      	str	r2, [r7, #4]
 8016004:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016006:	230a      	movs	r3, #10
 8016008:	84fb      	strh	r3, [r7, #38]	; 0x26
 801600a:	230a      	movs	r3, #10
 801600c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801600e:	230a      	movs	r3, #10
 8016010:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016012:	2300      	movs	r3, #0
 8016014:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016016:	230a      	movs	r3, #10
 8016018:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801601a:	2300      	movs	r3, #0
 801601c:	83bb      	strh	r3, [r7, #28]
 801601e:	2300      	movs	r3, #0
 8016020:	837b      	strh	r3, [r7, #26]
 8016022:	2300      	movs	r3, #0
 8016024:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016026:	2300      	movs	r3, #0
 8016028:	843b      	strh	r3, [r7, #32]
 801602a:	e0ae      	b.n	801618a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801602c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016030:	49a6      	ldr	r1, [pc, #664]	; (80162cc <etharp_find_entry+0x2d4>)
 8016032:	4613      	mov	r3, r2
 8016034:	005b      	lsls	r3, r3, #1
 8016036:	4413      	add	r3, r2
 8016038:	00db      	lsls	r3, r3, #3
 801603a:	440b      	add	r3, r1
 801603c:	3314      	adds	r3, #20
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016046:	2b0a      	cmp	r3, #10
 8016048:	d105      	bne.n	8016056 <etharp_find_entry+0x5e>
 801604a:	7dfb      	ldrb	r3, [r7, #23]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d102      	bne.n	8016056 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016050:	8c3b      	ldrh	r3, [r7, #32]
 8016052:	847b      	strh	r3, [r7, #34]	; 0x22
 8016054:	e095      	b.n	8016182 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016056:	7dfb      	ldrb	r3, [r7, #23]
 8016058:	2b00      	cmp	r3, #0
 801605a:	f000 8092 	beq.w	8016182 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801605e:	7dfb      	ldrb	r3, [r7, #23]
 8016060:	2b01      	cmp	r3, #1
 8016062:	d009      	beq.n	8016078 <etharp_find_entry+0x80>
 8016064:	7dfb      	ldrb	r3, [r7, #23]
 8016066:	2b01      	cmp	r3, #1
 8016068:	d806      	bhi.n	8016078 <etharp_find_entry+0x80>
 801606a:	4b99      	ldr	r3, [pc, #612]	; (80162d0 <etharp_find_entry+0x2d8>)
 801606c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8016070:	4998      	ldr	r1, [pc, #608]	; (80162d4 <etharp_find_entry+0x2dc>)
 8016072:	4899      	ldr	r0, [pc, #612]	; (80162d8 <etharp_find_entry+0x2e0>)
 8016074:	f005 fef8 	bl	801be68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d020      	beq.n	80160c0 <etharp_find_entry+0xc8>
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	6819      	ldr	r1, [r3, #0]
 8016082:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016086:	4891      	ldr	r0, [pc, #580]	; (80162cc <etharp_find_entry+0x2d4>)
 8016088:	4613      	mov	r3, r2
 801608a:	005b      	lsls	r3, r3, #1
 801608c:	4413      	add	r3, r2
 801608e:	00db      	lsls	r3, r3, #3
 8016090:	4403      	add	r3, r0
 8016092:	3304      	adds	r3, #4
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4299      	cmp	r1, r3
 8016098:	d112      	bne.n	80160c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d00c      	beq.n	80160ba <etharp_find_entry+0xc2>
 80160a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160a4:	4989      	ldr	r1, [pc, #548]	; (80162cc <etharp_find_entry+0x2d4>)
 80160a6:	4613      	mov	r3, r2
 80160a8:	005b      	lsls	r3, r3, #1
 80160aa:	4413      	add	r3, r2
 80160ac:	00db      	lsls	r3, r3, #3
 80160ae:	440b      	add	r3, r1
 80160b0:	3308      	adds	r3, #8
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	687a      	ldr	r2, [r7, #4]
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d102      	bne.n	80160c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80160ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80160be:	e100      	b.n	80162c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80160c0:	7dfb      	ldrb	r3, [r7, #23]
 80160c2:	2b01      	cmp	r3, #1
 80160c4:	d140      	bne.n	8016148 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80160c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160ca:	4980      	ldr	r1, [pc, #512]	; (80162cc <etharp_find_entry+0x2d4>)
 80160cc:	4613      	mov	r3, r2
 80160ce:	005b      	lsls	r3, r3, #1
 80160d0:	4413      	add	r3, r2
 80160d2:	00db      	lsls	r3, r3, #3
 80160d4:	440b      	add	r3, r1
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d01a      	beq.n	8016112 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80160dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160e0:	497a      	ldr	r1, [pc, #488]	; (80162cc <etharp_find_entry+0x2d4>)
 80160e2:	4613      	mov	r3, r2
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	4413      	add	r3, r2
 80160e8:	00db      	lsls	r3, r3, #3
 80160ea:	440b      	add	r3, r1
 80160ec:	3312      	adds	r3, #18
 80160ee:	881b      	ldrh	r3, [r3, #0]
 80160f0:	8bba      	ldrh	r2, [r7, #28]
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d845      	bhi.n	8016182 <etharp_find_entry+0x18a>
            old_queue = i;
 80160f6:	8c3b      	ldrh	r3, [r7, #32]
 80160f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80160fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160fe:	4973      	ldr	r1, [pc, #460]	; (80162cc <etharp_find_entry+0x2d4>)
 8016100:	4613      	mov	r3, r2
 8016102:	005b      	lsls	r3, r3, #1
 8016104:	4413      	add	r3, r2
 8016106:	00db      	lsls	r3, r3, #3
 8016108:	440b      	add	r3, r1
 801610a:	3312      	adds	r3, #18
 801610c:	881b      	ldrh	r3, [r3, #0]
 801610e:	83bb      	strh	r3, [r7, #28]
 8016110:	e037      	b.n	8016182 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016116:	496d      	ldr	r1, [pc, #436]	; (80162cc <etharp_find_entry+0x2d4>)
 8016118:	4613      	mov	r3, r2
 801611a:	005b      	lsls	r3, r3, #1
 801611c:	4413      	add	r3, r2
 801611e:	00db      	lsls	r3, r3, #3
 8016120:	440b      	add	r3, r1
 8016122:	3312      	adds	r3, #18
 8016124:	881b      	ldrh	r3, [r3, #0]
 8016126:	8b7a      	ldrh	r2, [r7, #26]
 8016128:	429a      	cmp	r2, r3
 801612a:	d82a      	bhi.n	8016182 <etharp_find_entry+0x18a>
            old_pending = i;
 801612c:	8c3b      	ldrh	r3, [r7, #32]
 801612e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016134:	4965      	ldr	r1, [pc, #404]	; (80162cc <etharp_find_entry+0x2d4>)
 8016136:	4613      	mov	r3, r2
 8016138:	005b      	lsls	r3, r3, #1
 801613a:	4413      	add	r3, r2
 801613c:	00db      	lsls	r3, r3, #3
 801613e:	440b      	add	r3, r1
 8016140:	3312      	adds	r3, #18
 8016142:	881b      	ldrh	r3, [r3, #0]
 8016144:	837b      	strh	r3, [r7, #26]
 8016146:	e01c      	b.n	8016182 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016148:	7dfb      	ldrb	r3, [r7, #23]
 801614a:	2b01      	cmp	r3, #1
 801614c:	d919      	bls.n	8016182 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801614e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016152:	495e      	ldr	r1, [pc, #376]	; (80162cc <etharp_find_entry+0x2d4>)
 8016154:	4613      	mov	r3, r2
 8016156:	005b      	lsls	r3, r3, #1
 8016158:	4413      	add	r3, r2
 801615a:	00db      	lsls	r3, r3, #3
 801615c:	440b      	add	r3, r1
 801615e:	3312      	adds	r3, #18
 8016160:	881b      	ldrh	r3, [r3, #0]
 8016162:	8b3a      	ldrh	r2, [r7, #24]
 8016164:	429a      	cmp	r2, r3
 8016166:	d80c      	bhi.n	8016182 <etharp_find_entry+0x18a>
            old_stable = i;
 8016168:	8c3b      	ldrh	r3, [r7, #32]
 801616a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801616c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016170:	4956      	ldr	r1, [pc, #344]	; (80162cc <etharp_find_entry+0x2d4>)
 8016172:	4613      	mov	r3, r2
 8016174:	005b      	lsls	r3, r3, #1
 8016176:	4413      	add	r3, r2
 8016178:	00db      	lsls	r3, r3, #3
 801617a:	440b      	add	r3, r1
 801617c:	3312      	adds	r3, #18
 801617e:	881b      	ldrh	r3, [r3, #0]
 8016180:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016182:	8c3b      	ldrh	r3, [r7, #32]
 8016184:	3301      	adds	r3, #1
 8016186:	b29b      	uxth	r3, r3
 8016188:	843b      	strh	r3, [r7, #32]
 801618a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801618e:	2b09      	cmp	r3, #9
 8016190:	f77f af4c 	ble.w	801602c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016194:	7afb      	ldrb	r3, [r7, #11]
 8016196:	f003 0302 	and.w	r3, r3, #2
 801619a:	2b00      	cmp	r3, #0
 801619c:	d108      	bne.n	80161b0 <etharp_find_entry+0x1b8>
 801619e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80161a2:	2b0a      	cmp	r3, #10
 80161a4:	d107      	bne.n	80161b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80161a6:	7afb      	ldrb	r3, [r7, #11]
 80161a8:	f003 0301 	and.w	r3, r3, #1
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d102      	bne.n	80161b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80161b0:	f04f 33ff 	mov.w	r3, #4294967295
 80161b4:	e085      	b.n	80162c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80161b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80161ba:	2b09      	cmp	r3, #9
 80161bc:	dc02      	bgt.n	80161c4 <etharp_find_entry+0x1cc>
    i = empty;
 80161be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161c0:	843b      	strh	r3, [r7, #32]
 80161c2:	e039      	b.n	8016238 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80161c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80161c8:	2b09      	cmp	r3, #9
 80161ca:	dc14      	bgt.n	80161f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80161cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80161d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161d4:	493d      	ldr	r1, [pc, #244]	; (80162cc <etharp_find_entry+0x2d4>)
 80161d6:	4613      	mov	r3, r2
 80161d8:	005b      	lsls	r3, r3, #1
 80161da:	4413      	add	r3, r2
 80161dc:	00db      	lsls	r3, r3, #3
 80161de:	440b      	add	r3, r1
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d018      	beq.n	8016218 <etharp_find_entry+0x220>
 80161e6:	4b3a      	ldr	r3, [pc, #232]	; (80162d0 <etharp_find_entry+0x2d8>)
 80161e8:	f240 126d 	movw	r2, #365	; 0x16d
 80161ec:	493b      	ldr	r1, [pc, #236]	; (80162dc <etharp_find_entry+0x2e4>)
 80161ee:	483a      	ldr	r0, [pc, #232]	; (80162d8 <etharp_find_entry+0x2e0>)
 80161f0:	f005 fe3a 	bl	801be68 <iprintf>
 80161f4:	e010      	b.n	8016218 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80161f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80161fa:	2b09      	cmp	r3, #9
 80161fc:	dc02      	bgt.n	8016204 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80161fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016200:	843b      	strh	r3, [r7, #32]
 8016202:	e009      	b.n	8016218 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016204:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016208:	2b09      	cmp	r3, #9
 801620a:	dc02      	bgt.n	8016212 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801620c:	8bfb      	ldrh	r3, [r7, #30]
 801620e:	843b      	strh	r3, [r7, #32]
 8016210:	e002      	b.n	8016218 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016212:	f04f 33ff 	mov.w	r3, #4294967295
 8016216:	e054      	b.n	80162c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016218:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801621c:	2b09      	cmp	r3, #9
 801621e:	dd06      	ble.n	801622e <etharp_find_entry+0x236>
 8016220:	4b2b      	ldr	r3, [pc, #172]	; (80162d0 <etharp_find_entry+0x2d8>)
 8016222:	f240 127f 	movw	r2, #383	; 0x17f
 8016226:	492e      	ldr	r1, [pc, #184]	; (80162e0 <etharp_find_entry+0x2e8>)
 8016228:	482b      	ldr	r0, [pc, #172]	; (80162d8 <etharp_find_entry+0x2e0>)
 801622a:	f005 fe1d 	bl	801be68 <iprintf>
    etharp_free_entry(i);
 801622e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016232:	4618      	mov	r0, r3
 8016234:	f7ff fe06 	bl	8015e44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016238:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801623c:	2b09      	cmp	r3, #9
 801623e:	dd06      	ble.n	801624e <etharp_find_entry+0x256>
 8016240:	4b23      	ldr	r3, [pc, #140]	; (80162d0 <etharp_find_entry+0x2d8>)
 8016242:	f240 1283 	movw	r2, #387	; 0x183
 8016246:	4926      	ldr	r1, [pc, #152]	; (80162e0 <etharp_find_entry+0x2e8>)
 8016248:	4823      	ldr	r0, [pc, #140]	; (80162d8 <etharp_find_entry+0x2e0>)
 801624a:	f005 fe0d 	bl	801be68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801624e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016252:	491e      	ldr	r1, [pc, #120]	; (80162cc <etharp_find_entry+0x2d4>)
 8016254:	4613      	mov	r3, r2
 8016256:	005b      	lsls	r3, r3, #1
 8016258:	4413      	add	r3, r2
 801625a:	00db      	lsls	r3, r3, #3
 801625c:	440b      	add	r3, r1
 801625e:	3314      	adds	r3, #20
 8016260:	781b      	ldrb	r3, [r3, #0]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d006      	beq.n	8016274 <etharp_find_entry+0x27c>
 8016266:	4b1a      	ldr	r3, [pc, #104]	; (80162d0 <etharp_find_entry+0x2d8>)
 8016268:	f240 1285 	movw	r2, #389	; 0x185
 801626c:	491d      	ldr	r1, [pc, #116]	; (80162e4 <etharp_find_entry+0x2ec>)
 801626e:	481a      	ldr	r0, [pc, #104]	; (80162d8 <etharp_find_entry+0x2e0>)
 8016270:	f005 fdfa 	bl	801be68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d00b      	beq.n	8016292 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801627a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	6819      	ldr	r1, [r3, #0]
 8016282:	4812      	ldr	r0, [pc, #72]	; (80162cc <etharp_find_entry+0x2d4>)
 8016284:	4613      	mov	r3, r2
 8016286:	005b      	lsls	r3, r3, #1
 8016288:	4413      	add	r3, r2
 801628a:	00db      	lsls	r3, r3, #3
 801628c:	4403      	add	r3, r0
 801628e:	3304      	adds	r3, #4
 8016290:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016296:	490d      	ldr	r1, [pc, #52]	; (80162cc <etharp_find_entry+0x2d4>)
 8016298:	4613      	mov	r3, r2
 801629a:	005b      	lsls	r3, r3, #1
 801629c:	4413      	add	r3, r2
 801629e:	00db      	lsls	r3, r3, #3
 80162a0:	440b      	add	r3, r1
 80162a2:	3312      	adds	r3, #18
 80162a4:	2200      	movs	r2, #0
 80162a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80162a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162ac:	4907      	ldr	r1, [pc, #28]	; (80162cc <etharp_find_entry+0x2d4>)
 80162ae:	4613      	mov	r3, r2
 80162b0:	005b      	lsls	r3, r3, #1
 80162b2:	4413      	add	r3, r2
 80162b4:	00db      	lsls	r3, r3, #3
 80162b6:	440b      	add	r3, r1
 80162b8:	3308      	adds	r3, #8
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80162be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80162c2:	4618      	mov	r0, r3
 80162c4:	3728      	adds	r7, #40	; 0x28
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}
 80162ca:	bf00      	nop
 80162cc:	2000843c 	.word	0x2000843c
 80162d0:	080203c8 	.word	0x080203c8
 80162d4:	08020400 	.word	0x08020400
 80162d8:	08020440 	.word	0x08020440
 80162dc:	08020468 	.word	0x08020468
 80162e0:	08020480 	.word	0x08020480
 80162e4:	08020494 	.word	0x08020494

080162e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b088      	sub	sp, #32
 80162ec:	af02      	add	r7, sp, #8
 80162ee:	60f8      	str	r0, [r7, #12]
 80162f0:	60b9      	str	r1, [r7, #8]
 80162f2:	607a      	str	r2, [r7, #4]
 80162f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80162fc:	2b06      	cmp	r3, #6
 80162fe:	d006      	beq.n	801630e <etharp_update_arp_entry+0x26>
 8016300:	4b48      	ldr	r3, [pc, #288]	; (8016424 <etharp_update_arp_entry+0x13c>)
 8016302:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016306:	4948      	ldr	r1, [pc, #288]	; (8016428 <etharp_update_arp_entry+0x140>)
 8016308:	4848      	ldr	r0, [pc, #288]	; (801642c <etharp_update_arp_entry+0x144>)
 801630a:	f005 fdad 	bl	801be68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d012      	beq.n	801633a <etharp_update_arp_entry+0x52>
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d00e      	beq.n	801633a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	68f9      	ldr	r1, [r7, #12]
 8016322:	4618      	mov	r0, r3
 8016324:	f001 f91e 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8016328:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801632a:	2b00      	cmp	r3, #0
 801632c:	d105      	bne.n	801633a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016336:	2be0      	cmp	r3, #224	; 0xe0
 8016338:	d102      	bne.n	8016340 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801633a:	f06f 030f 	mvn.w	r3, #15
 801633e:	e06c      	b.n	801641a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016340:	78fb      	ldrb	r3, [r7, #3]
 8016342:	68fa      	ldr	r2, [r7, #12]
 8016344:	4619      	mov	r1, r3
 8016346:	68b8      	ldr	r0, [r7, #8]
 8016348:	f7ff fe56 	bl	8015ff8 <etharp_find_entry>
 801634c:	4603      	mov	r3, r0
 801634e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016350:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016354:	2b00      	cmp	r3, #0
 8016356:	da02      	bge.n	801635e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016358:	8afb      	ldrh	r3, [r7, #22]
 801635a:	b25b      	sxtb	r3, r3
 801635c:	e05d      	b.n	801641a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801635e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016362:	4933      	ldr	r1, [pc, #204]	; (8016430 <etharp_update_arp_entry+0x148>)
 8016364:	4613      	mov	r3, r2
 8016366:	005b      	lsls	r3, r3, #1
 8016368:	4413      	add	r3, r2
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	440b      	add	r3, r1
 801636e:	3314      	adds	r3, #20
 8016370:	2202      	movs	r2, #2
 8016372:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016378:	492d      	ldr	r1, [pc, #180]	; (8016430 <etharp_update_arp_entry+0x148>)
 801637a:	4613      	mov	r3, r2
 801637c:	005b      	lsls	r3, r3, #1
 801637e:	4413      	add	r3, r2
 8016380:	00db      	lsls	r3, r3, #3
 8016382:	440b      	add	r3, r1
 8016384:	3308      	adds	r3, #8
 8016386:	68fa      	ldr	r2, [r7, #12]
 8016388:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801638a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801638e:	4613      	mov	r3, r2
 8016390:	005b      	lsls	r3, r3, #1
 8016392:	4413      	add	r3, r2
 8016394:	00db      	lsls	r3, r3, #3
 8016396:	3308      	adds	r3, #8
 8016398:	4a25      	ldr	r2, [pc, #148]	; (8016430 <etharp_update_arp_entry+0x148>)
 801639a:	4413      	add	r3, r2
 801639c:	3304      	adds	r3, #4
 801639e:	2206      	movs	r2, #6
 80163a0:	6879      	ldr	r1, [r7, #4]
 80163a2:	4618      	mov	r0, r3
 80163a4:	f005 fd4d 	bl	801be42 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80163a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163ac:	4920      	ldr	r1, [pc, #128]	; (8016430 <etharp_update_arp_entry+0x148>)
 80163ae:	4613      	mov	r3, r2
 80163b0:	005b      	lsls	r3, r3, #1
 80163b2:	4413      	add	r3, r2
 80163b4:	00db      	lsls	r3, r3, #3
 80163b6:	440b      	add	r3, r1
 80163b8:	3312      	adds	r3, #18
 80163ba:	2200      	movs	r2, #0
 80163bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80163be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163c2:	491b      	ldr	r1, [pc, #108]	; (8016430 <etharp_update_arp_entry+0x148>)
 80163c4:	4613      	mov	r3, r2
 80163c6:	005b      	lsls	r3, r3, #1
 80163c8:	4413      	add	r3, r2
 80163ca:	00db      	lsls	r3, r3, #3
 80163cc:	440b      	add	r3, r1
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d021      	beq.n	8016418 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80163d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163d8:	4915      	ldr	r1, [pc, #84]	; (8016430 <etharp_update_arp_entry+0x148>)
 80163da:	4613      	mov	r3, r2
 80163dc:	005b      	lsls	r3, r3, #1
 80163de:	4413      	add	r3, r2
 80163e0:	00db      	lsls	r3, r3, #3
 80163e2:	440b      	add	r3, r1
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80163e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163ec:	4910      	ldr	r1, [pc, #64]	; (8016430 <etharp_update_arp_entry+0x148>)
 80163ee:	4613      	mov	r3, r2
 80163f0:	005b      	lsls	r3, r3, #1
 80163f2:	4413      	add	r3, r2
 80163f4:	00db      	lsls	r3, r3, #3
 80163f6:	440b      	add	r3, r1
 80163f8:	2200      	movs	r2, #0
 80163fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016406:	9300      	str	r3, [sp, #0]
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	6939      	ldr	r1, [r7, #16]
 801640c:	68f8      	ldr	r0, [r7, #12]
 801640e:	f002 f8f3 	bl	80185f8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016412:	6938      	ldr	r0, [r7, #16]
 8016414:	f7f6 fc98 	bl	800cd48 <pbuf_free>
  }
  return ERR_OK;
 8016418:	2300      	movs	r3, #0
}
 801641a:	4618      	mov	r0, r3
 801641c:	3718      	adds	r7, #24
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	080203c8 	.word	0x080203c8
 8016428:	080204c0 	.word	0x080204c0
 801642c:	08020440 	.word	0x08020440
 8016430:	2000843c 	.word	0x2000843c

08016434 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801643c:	2300      	movs	r3, #0
 801643e:	60fb      	str	r3, [r7, #12]
 8016440:	e01e      	b.n	8016480 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016442:	4913      	ldr	r1, [pc, #76]	; (8016490 <etharp_cleanup_netif+0x5c>)
 8016444:	68fa      	ldr	r2, [r7, #12]
 8016446:	4613      	mov	r3, r2
 8016448:	005b      	lsls	r3, r3, #1
 801644a:	4413      	add	r3, r2
 801644c:	00db      	lsls	r3, r3, #3
 801644e:	440b      	add	r3, r1
 8016450:	3314      	adds	r3, #20
 8016452:	781b      	ldrb	r3, [r3, #0]
 8016454:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016456:	7afb      	ldrb	r3, [r7, #11]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d00e      	beq.n	801647a <etharp_cleanup_netif+0x46>
 801645c:	490c      	ldr	r1, [pc, #48]	; (8016490 <etharp_cleanup_netif+0x5c>)
 801645e:	68fa      	ldr	r2, [r7, #12]
 8016460:	4613      	mov	r3, r2
 8016462:	005b      	lsls	r3, r3, #1
 8016464:	4413      	add	r3, r2
 8016466:	00db      	lsls	r3, r3, #3
 8016468:	440b      	add	r3, r1
 801646a:	3308      	adds	r3, #8
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	429a      	cmp	r2, r3
 8016472:	d102      	bne.n	801647a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016474:	68f8      	ldr	r0, [r7, #12]
 8016476:	f7ff fce5 	bl	8015e44 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	3301      	adds	r3, #1
 801647e:	60fb      	str	r3, [r7, #12]
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	2b09      	cmp	r3, #9
 8016484:	dddd      	ble.n	8016442 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016486:	bf00      	nop
 8016488:	3710      	adds	r7, #16
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	2000843c 	.word	0x2000843c

08016494 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016494:	b5b0      	push	{r4, r5, r7, lr}
 8016496:	b08a      	sub	sp, #40	; 0x28
 8016498:	af04      	add	r7, sp, #16
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d107      	bne.n	80164b4 <etharp_input+0x20>
 80164a4:	4b3f      	ldr	r3, [pc, #252]	; (80165a4 <etharp_input+0x110>)
 80164a6:	f240 228a 	movw	r2, #650	; 0x28a
 80164aa:	493f      	ldr	r1, [pc, #252]	; (80165a8 <etharp_input+0x114>)
 80164ac:	483f      	ldr	r0, [pc, #252]	; (80165ac <etharp_input+0x118>)
 80164ae:	f005 fcdb 	bl	801be68 <iprintf>
 80164b2:	e074      	b.n	801659e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80164ba:	693b      	ldr	r3, [r7, #16]
 80164bc:	881b      	ldrh	r3, [r3, #0]
 80164be:	b29b      	uxth	r3, r3
 80164c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164c4:	d10c      	bne.n	80164e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80164ca:	2b06      	cmp	r3, #6
 80164cc:	d108      	bne.n	80164e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80164d2:	2b04      	cmp	r3, #4
 80164d4:	d104      	bne.n	80164e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	885b      	ldrh	r3, [r3, #2]
 80164da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80164dc:	2b08      	cmp	r3, #8
 80164de:	d003      	beq.n	80164e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f7f6 fc31 	bl	800cd48 <pbuf_free>
    return;
 80164e6:	e05a      	b.n	801659e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80164e8:	693b      	ldr	r3, [r7, #16]
 80164ea:	330e      	adds	r3, #14
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80164f0:	693b      	ldr	r3, [r7, #16]
 80164f2:	3318      	adds	r3, #24
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	3304      	adds	r3, #4
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d102      	bne.n	8016508 <etharp_input+0x74>
    for_us = 0;
 8016502:	2300      	movs	r3, #0
 8016504:	75fb      	strb	r3, [r7, #23]
 8016506:	e009      	b.n	801651c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016508:	68ba      	ldr	r2, [r7, #8]
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	3304      	adds	r3, #4
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	429a      	cmp	r2, r3
 8016512:	bf0c      	ite	eq
 8016514:	2301      	moveq	r3, #1
 8016516:	2300      	movne	r3, #0
 8016518:	b2db      	uxtb	r3, r3
 801651a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801651c:	693b      	ldr	r3, [r7, #16]
 801651e:	f103 0208 	add.w	r2, r3, #8
 8016522:	7dfb      	ldrb	r3, [r7, #23]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d001      	beq.n	801652c <etharp_input+0x98>
 8016528:	2301      	movs	r3, #1
 801652a:	e000      	b.n	801652e <etharp_input+0x9a>
 801652c:	2302      	movs	r3, #2
 801652e:	f107 010c 	add.w	r1, r7, #12
 8016532:	6838      	ldr	r0, [r7, #0]
 8016534:	f7ff fed8 	bl	80162e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016538:	693b      	ldr	r3, [r7, #16]
 801653a:	88db      	ldrh	r3, [r3, #6]
 801653c:	b29b      	uxth	r3, r3
 801653e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016542:	d003      	beq.n	801654c <etharp_input+0xb8>
 8016544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016548:	d01e      	beq.n	8016588 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801654a:	e025      	b.n	8016598 <etharp_input+0x104>
      if (for_us) {
 801654c:	7dfb      	ldrb	r3, [r7, #23]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d021      	beq.n	8016596 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016552:	683b      	ldr	r3, [r7, #0]
 8016554:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016558:	693b      	ldr	r3, [r7, #16]
 801655a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016568:	693a      	ldr	r2, [r7, #16]
 801656a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801656c:	2102      	movs	r1, #2
 801656e:	9103      	str	r1, [sp, #12]
 8016570:	f107 010c 	add.w	r1, r7, #12
 8016574:	9102      	str	r1, [sp, #8]
 8016576:	9201      	str	r2, [sp, #4]
 8016578:	9300      	str	r3, [sp, #0]
 801657a:	462b      	mov	r3, r5
 801657c:	4622      	mov	r2, r4
 801657e:	4601      	mov	r1, r0
 8016580:	6838      	ldr	r0, [r7, #0]
 8016582:	f000 faef 	bl	8016b64 <etharp_raw>
      break;
 8016586:	e006      	b.n	8016596 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016588:	f107 030c 	add.w	r3, r7, #12
 801658c:	4619      	mov	r1, r3
 801658e:	6838      	ldr	r0, [r7, #0]
 8016590:	f7fe f9fe 	bl	8014990 <dhcp_arp_reply>
      break;
 8016594:	e000      	b.n	8016598 <etharp_input+0x104>
      break;
 8016596:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016598:	6878      	ldr	r0, [r7, #4]
 801659a:	f7f6 fbd5 	bl	800cd48 <pbuf_free>
}
 801659e:	3718      	adds	r7, #24
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bdb0      	pop	{r4, r5, r7, pc}
 80165a4:	080203c8 	.word	0x080203c8
 80165a8:	08020518 	.word	0x08020518
 80165ac:	08020440 	.word	0x08020440

080165b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b086      	sub	sp, #24
 80165b4:	af02      	add	r7, sp, #8
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	4613      	mov	r3, r2
 80165bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80165be:	79fa      	ldrb	r2, [r7, #7]
 80165c0:	4944      	ldr	r1, [pc, #272]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 80165c2:	4613      	mov	r3, r2
 80165c4:	005b      	lsls	r3, r3, #1
 80165c6:	4413      	add	r3, r2
 80165c8:	00db      	lsls	r3, r3, #3
 80165ca:	440b      	add	r3, r1
 80165cc:	3314      	adds	r3, #20
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d806      	bhi.n	80165e2 <etharp_output_to_arp_index+0x32>
 80165d4:	4b40      	ldr	r3, [pc, #256]	; (80166d8 <etharp_output_to_arp_index+0x128>)
 80165d6:	f240 22ef 	movw	r2, #751	; 0x2ef
 80165da:	4940      	ldr	r1, [pc, #256]	; (80166dc <etharp_output_to_arp_index+0x12c>)
 80165dc:	4840      	ldr	r0, [pc, #256]	; (80166e0 <etharp_output_to_arp_index+0x130>)
 80165de:	f005 fc43 	bl	801be68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80165e2:	79fa      	ldrb	r2, [r7, #7]
 80165e4:	493b      	ldr	r1, [pc, #236]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 80165e6:	4613      	mov	r3, r2
 80165e8:	005b      	lsls	r3, r3, #1
 80165ea:	4413      	add	r3, r2
 80165ec:	00db      	lsls	r3, r3, #3
 80165ee:	440b      	add	r3, r1
 80165f0:	3314      	adds	r3, #20
 80165f2:	781b      	ldrb	r3, [r3, #0]
 80165f4:	2b02      	cmp	r3, #2
 80165f6:	d153      	bne.n	80166a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80165f8:	79fa      	ldrb	r2, [r7, #7]
 80165fa:	4936      	ldr	r1, [pc, #216]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 80165fc:	4613      	mov	r3, r2
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	4413      	add	r3, r2
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	440b      	add	r3, r1
 8016606:	3312      	adds	r3, #18
 8016608:	881b      	ldrh	r3, [r3, #0]
 801660a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801660e:	d919      	bls.n	8016644 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016610:	79fa      	ldrb	r2, [r7, #7]
 8016612:	4613      	mov	r3, r2
 8016614:	005b      	lsls	r3, r3, #1
 8016616:	4413      	add	r3, r2
 8016618:	00db      	lsls	r3, r3, #3
 801661a:	4a2e      	ldr	r2, [pc, #184]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 801661c:	4413      	add	r3, r2
 801661e:	3304      	adds	r3, #4
 8016620:	4619      	mov	r1, r3
 8016622:	68f8      	ldr	r0, [r7, #12]
 8016624:	f000 fb4c 	bl	8016cc0 <etharp_request>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d138      	bne.n	80166a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801662e:	79fa      	ldrb	r2, [r7, #7]
 8016630:	4928      	ldr	r1, [pc, #160]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 8016632:	4613      	mov	r3, r2
 8016634:	005b      	lsls	r3, r3, #1
 8016636:	4413      	add	r3, r2
 8016638:	00db      	lsls	r3, r3, #3
 801663a:	440b      	add	r3, r1
 801663c:	3314      	adds	r3, #20
 801663e:	2203      	movs	r2, #3
 8016640:	701a      	strb	r2, [r3, #0]
 8016642:	e02d      	b.n	80166a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016644:	79fa      	ldrb	r2, [r7, #7]
 8016646:	4923      	ldr	r1, [pc, #140]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 8016648:	4613      	mov	r3, r2
 801664a:	005b      	lsls	r3, r3, #1
 801664c:	4413      	add	r3, r2
 801664e:	00db      	lsls	r3, r3, #3
 8016650:	440b      	add	r3, r1
 8016652:	3312      	adds	r3, #18
 8016654:	881b      	ldrh	r3, [r3, #0]
 8016656:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801665a:	d321      	bcc.n	80166a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801665c:	79fa      	ldrb	r2, [r7, #7]
 801665e:	4613      	mov	r3, r2
 8016660:	005b      	lsls	r3, r3, #1
 8016662:	4413      	add	r3, r2
 8016664:	00db      	lsls	r3, r3, #3
 8016666:	4a1b      	ldr	r2, [pc, #108]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 8016668:	4413      	add	r3, r2
 801666a:	1d19      	adds	r1, r3, #4
 801666c:	79fa      	ldrb	r2, [r7, #7]
 801666e:	4613      	mov	r3, r2
 8016670:	005b      	lsls	r3, r3, #1
 8016672:	4413      	add	r3, r2
 8016674:	00db      	lsls	r3, r3, #3
 8016676:	3308      	adds	r3, #8
 8016678:	4a16      	ldr	r2, [pc, #88]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 801667a:	4413      	add	r3, r2
 801667c:	3304      	adds	r3, #4
 801667e:	461a      	mov	r2, r3
 8016680:	68f8      	ldr	r0, [r7, #12]
 8016682:	f000 fafb 	bl	8016c7c <etharp_request_dst>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d109      	bne.n	80166a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801668c:	79fa      	ldrb	r2, [r7, #7]
 801668e:	4911      	ldr	r1, [pc, #68]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 8016690:	4613      	mov	r3, r2
 8016692:	005b      	lsls	r3, r3, #1
 8016694:	4413      	add	r3, r2
 8016696:	00db      	lsls	r3, r3, #3
 8016698:	440b      	add	r3, r1
 801669a:	3314      	adds	r3, #20
 801669c:	2203      	movs	r2, #3
 801669e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80166a6:	79fa      	ldrb	r2, [r7, #7]
 80166a8:	4613      	mov	r3, r2
 80166aa:	005b      	lsls	r3, r3, #1
 80166ac:	4413      	add	r3, r2
 80166ae:	00db      	lsls	r3, r3, #3
 80166b0:	3308      	adds	r3, #8
 80166b2:	4a08      	ldr	r2, [pc, #32]	; (80166d4 <etharp_output_to_arp_index+0x124>)
 80166b4:	4413      	add	r3, r2
 80166b6:	1d1a      	adds	r2, r3, #4
 80166b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80166bc:	9300      	str	r3, [sp, #0]
 80166be:	4613      	mov	r3, r2
 80166c0:	460a      	mov	r2, r1
 80166c2:	68b9      	ldr	r1, [r7, #8]
 80166c4:	68f8      	ldr	r0, [r7, #12]
 80166c6:	f001 ff97 	bl	80185f8 <ethernet_output>
 80166ca:	4603      	mov	r3, r0
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3710      	adds	r7, #16
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}
 80166d4:	2000843c 	.word	0x2000843c
 80166d8:	080203c8 	.word	0x080203c8
 80166dc:	08020538 	.word	0x08020538
 80166e0:	08020440 	.word	0x08020440

080166e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b08a      	sub	sp, #40	; 0x28
 80166e8:	af02      	add	r7, sp, #8
 80166ea:	60f8      	str	r0, [r7, #12]
 80166ec:	60b9      	str	r1, [r7, #8]
 80166ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d106      	bne.n	8016708 <etharp_output+0x24>
 80166fa:	4b73      	ldr	r3, [pc, #460]	; (80168c8 <etharp_output+0x1e4>)
 80166fc:	f240 321e 	movw	r2, #798	; 0x31e
 8016700:	4972      	ldr	r1, [pc, #456]	; (80168cc <etharp_output+0x1e8>)
 8016702:	4873      	ldr	r0, [pc, #460]	; (80168d0 <etharp_output+0x1ec>)
 8016704:	f005 fbb0 	bl	801be68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d106      	bne.n	801671c <etharp_output+0x38>
 801670e:	4b6e      	ldr	r3, [pc, #440]	; (80168c8 <etharp_output+0x1e4>)
 8016710:	f240 321f 	movw	r2, #799	; 0x31f
 8016714:	496f      	ldr	r1, [pc, #444]	; (80168d4 <etharp_output+0x1f0>)
 8016716:	486e      	ldr	r0, [pc, #440]	; (80168d0 <etharp_output+0x1ec>)
 8016718:	f005 fba6 	bl	801be68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d106      	bne.n	8016730 <etharp_output+0x4c>
 8016722:	4b69      	ldr	r3, [pc, #420]	; (80168c8 <etharp_output+0x1e4>)
 8016724:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016728:	496b      	ldr	r1, [pc, #428]	; (80168d8 <etharp_output+0x1f4>)
 801672a:	4869      	ldr	r0, [pc, #420]	; (80168d0 <etharp_output+0x1ec>)
 801672c:	f005 fb9c 	bl	801be68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	68f9      	ldr	r1, [r7, #12]
 8016736:	4618      	mov	r0, r3
 8016738:	f000 ff14 	bl	8017564 <ip4_addr_isbroadcast_u32>
 801673c:	4603      	mov	r3, r0
 801673e:	2b00      	cmp	r3, #0
 8016740:	d002      	beq.n	8016748 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016742:	4b66      	ldr	r3, [pc, #408]	; (80168dc <etharp_output+0x1f8>)
 8016744:	61fb      	str	r3, [r7, #28]
 8016746:	e0af      	b.n	80168a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016750:	2be0      	cmp	r3, #224	; 0xe0
 8016752:	d118      	bne.n	8016786 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016754:	2301      	movs	r3, #1
 8016756:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016758:	2300      	movs	r3, #0
 801675a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801675c:	235e      	movs	r3, #94	; 0x5e
 801675e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	3301      	adds	r3, #1
 8016764:	781b      	ldrb	r3, [r3, #0]
 8016766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801676a:	b2db      	uxtb	r3, r3
 801676c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	3302      	adds	r3, #2
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	3303      	adds	r3, #3
 801677a:	781b      	ldrb	r3, [r3, #0]
 801677c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801677e:	f107 0310 	add.w	r3, r7, #16
 8016782:	61fb      	str	r3, [r7, #28]
 8016784:	e090      	b.n	80168a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681a      	ldr	r2, [r3, #0]
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	3304      	adds	r3, #4
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	405a      	eors	r2, r3
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	3308      	adds	r3, #8
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	4013      	ands	r3, r2
 801679a:	2b00      	cmp	r3, #0
 801679c:	d012      	beq.n	80167c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80167a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80167a8:	4293      	cmp	r3, r2
 80167aa:	d00b      	beq.n	80167c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	330c      	adds	r3, #12
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d003      	beq.n	80167be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	330c      	adds	r3, #12
 80167ba:	61bb      	str	r3, [r7, #24]
 80167bc:	e002      	b.n	80167c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80167be:	f06f 0303 	mvn.w	r3, #3
 80167c2:	e07d      	b.n	80168c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80167c4:	4b46      	ldr	r3, [pc, #280]	; (80168e0 <etharp_output+0x1fc>)
 80167c6:	781b      	ldrb	r3, [r3, #0]
 80167c8:	4619      	mov	r1, r3
 80167ca:	4a46      	ldr	r2, [pc, #280]	; (80168e4 <etharp_output+0x200>)
 80167cc:	460b      	mov	r3, r1
 80167ce:	005b      	lsls	r3, r3, #1
 80167d0:	440b      	add	r3, r1
 80167d2:	00db      	lsls	r3, r3, #3
 80167d4:	4413      	add	r3, r2
 80167d6:	3314      	adds	r3, #20
 80167d8:	781b      	ldrb	r3, [r3, #0]
 80167da:	2b01      	cmp	r3, #1
 80167dc:	d925      	bls.n	801682a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80167de:	4b40      	ldr	r3, [pc, #256]	; (80168e0 <etharp_output+0x1fc>)
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	4619      	mov	r1, r3
 80167e4:	4a3f      	ldr	r2, [pc, #252]	; (80168e4 <etharp_output+0x200>)
 80167e6:	460b      	mov	r3, r1
 80167e8:	005b      	lsls	r3, r3, #1
 80167ea:	440b      	add	r3, r1
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	4413      	add	r3, r2
 80167f0:	3308      	adds	r3, #8
 80167f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80167f4:	68fa      	ldr	r2, [r7, #12]
 80167f6:	429a      	cmp	r2, r3
 80167f8:	d117      	bne.n	801682a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80167fa:	69bb      	ldr	r3, [r7, #24]
 80167fc:	681a      	ldr	r2, [r3, #0]
 80167fe:	4b38      	ldr	r3, [pc, #224]	; (80168e0 <etharp_output+0x1fc>)
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	4618      	mov	r0, r3
 8016804:	4937      	ldr	r1, [pc, #220]	; (80168e4 <etharp_output+0x200>)
 8016806:	4603      	mov	r3, r0
 8016808:	005b      	lsls	r3, r3, #1
 801680a:	4403      	add	r3, r0
 801680c:	00db      	lsls	r3, r3, #3
 801680e:	440b      	add	r3, r1
 8016810:	3304      	adds	r3, #4
 8016812:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016814:	429a      	cmp	r2, r3
 8016816:	d108      	bne.n	801682a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016818:	4b31      	ldr	r3, [pc, #196]	; (80168e0 <etharp_output+0x1fc>)
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	461a      	mov	r2, r3
 801681e:	68b9      	ldr	r1, [r7, #8]
 8016820:	68f8      	ldr	r0, [r7, #12]
 8016822:	f7ff fec5 	bl	80165b0 <etharp_output_to_arp_index>
 8016826:	4603      	mov	r3, r0
 8016828:	e04a      	b.n	80168c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801682a:	2300      	movs	r3, #0
 801682c:	75fb      	strb	r3, [r7, #23]
 801682e:	e031      	b.n	8016894 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016830:	7dfa      	ldrb	r2, [r7, #23]
 8016832:	492c      	ldr	r1, [pc, #176]	; (80168e4 <etharp_output+0x200>)
 8016834:	4613      	mov	r3, r2
 8016836:	005b      	lsls	r3, r3, #1
 8016838:	4413      	add	r3, r2
 801683a:	00db      	lsls	r3, r3, #3
 801683c:	440b      	add	r3, r1
 801683e:	3314      	adds	r3, #20
 8016840:	781b      	ldrb	r3, [r3, #0]
 8016842:	2b01      	cmp	r3, #1
 8016844:	d923      	bls.n	801688e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016846:	7dfa      	ldrb	r2, [r7, #23]
 8016848:	4926      	ldr	r1, [pc, #152]	; (80168e4 <etharp_output+0x200>)
 801684a:	4613      	mov	r3, r2
 801684c:	005b      	lsls	r3, r3, #1
 801684e:	4413      	add	r3, r2
 8016850:	00db      	lsls	r3, r3, #3
 8016852:	440b      	add	r3, r1
 8016854:	3308      	adds	r3, #8
 8016856:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016858:	68fa      	ldr	r2, [r7, #12]
 801685a:	429a      	cmp	r2, r3
 801685c:	d117      	bne.n	801688e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801685e:	69bb      	ldr	r3, [r7, #24]
 8016860:	6819      	ldr	r1, [r3, #0]
 8016862:	7dfa      	ldrb	r2, [r7, #23]
 8016864:	481f      	ldr	r0, [pc, #124]	; (80168e4 <etharp_output+0x200>)
 8016866:	4613      	mov	r3, r2
 8016868:	005b      	lsls	r3, r3, #1
 801686a:	4413      	add	r3, r2
 801686c:	00db      	lsls	r3, r3, #3
 801686e:	4403      	add	r3, r0
 8016870:	3304      	adds	r3, #4
 8016872:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016874:	4299      	cmp	r1, r3
 8016876:	d10a      	bne.n	801688e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016878:	4a19      	ldr	r2, [pc, #100]	; (80168e0 <etharp_output+0x1fc>)
 801687a:	7dfb      	ldrb	r3, [r7, #23]
 801687c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801687e:	7dfb      	ldrb	r3, [r7, #23]
 8016880:	461a      	mov	r2, r3
 8016882:	68b9      	ldr	r1, [r7, #8]
 8016884:	68f8      	ldr	r0, [r7, #12]
 8016886:	f7ff fe93 	bl	80165b0 <etharp_output_to_arp_index>
 801688a:	4603      	mov	r3, r0
 801688c:	e018      	b.n	80168c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801688e:	7dfb      	ldrb	r3, [r7, #23]
 8016890:	3301      	adds	r3, #1
 8016892:	75fb      	strb	r3, [r7, #23]
 8016894:	7dfb      	ldrb	r3, [r7, #23]
 8016896:	2b09      	cmp	r3, #9
 8016898:	d9ca      	bls.n	8016830 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801689a:	68ba      	ldr	r2, [r7, #8]
 801689c:	69b9      	ldr	r1, [r7, #24]
 801689e:	68f8      	ldr	r0, [r7, #12]
 80168a0:	f000 f822 	bl	80168e8 <etharp_query>
 80168a4:	4603      	mov	r3, r0
 80168a6:	e00b      	b.n	80168c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80168ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80168b2:	9300      	str	r3, [sp, #0]
 80168b4:	69fb      	ldr	r3, [r7, #28]
 80168b6:	68b9      	ldr	r1, [r7, #8]
 80168b8:	68f8      	ldr	r0, [r7, #12]
 80168ba:	f001 fe9d 	bl	80185f8 <ethernet_output>
 80168be:	4603      	mov	r3, r0
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3720      	adds	r7, #32
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	080203c8 	.word	0x080203c8
 80168cc:	08020518 	.word	0x08020518
 80168d0:	08020440 	.word	0x08020440
 80168d4:	08020568 	.word	0x08020568
 80168d8:	08020508 	.word	0x08020508
 80168dc:	08020f50 	.word	0x08020f50
 80168e0:	2000852c 	.word	0x2000852c
 80168e4:	2000843c 	.word	0x2000843c

080168e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b08c      	sub	sp, #48	; 0x30
 80168ec:	af02      	add	r7, sp, #8
 80168ee:	60f8      	str	r0, [r7, #12]
 80168f0:	60b9      	str	r1, [r7, #8]
 80168f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	332a      	adds	r3, #42	; 0x2a
 80168f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80168fa:	23ff      	movs	r3, #255	; 0xff
 80168fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016900:	2300      	movs	r3, #0
 8016902:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	68f9      	ldr	r1, [r7, #12]
 801690a:	4618      	mov	r0, r3
 801690c:	f000 fe2a 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8016910:	4603      	mov	r3, r0
 8016912:	2b00      	cmp	r3, #0
 8016914:	d10c      	bne.n	8016930 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801691e:	2be0      	cmp	r3, #224	; 0xe0
 8016920:	d006      	beq.n	8016930 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016922:	68bb      	ldr	r3, [r7, #8]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d003      	beq.n	8016930 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016928:	68bb      	ldr	r3, [r7, #8]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d102      	bne.n	8016936 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016930:	f06f 030f 	mvn.w	r3, #15
 8016934:	e102      	b.n	8016b3c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016936:	68fa      	ldr	r2, [r7, #12]
 8016938:	2101      	movs	r1, #1
 801693a:	68b8      	ldr	r0, [r7, #8]
 801693c:	f7ff fb5c 	bl	8015ff8 <etharp_find_entry>
 8016940:	4603      	mov	r3, r0
 8016942:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016944:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016948:	2b00      	cmp	r3, #0
 801694a:	da02      	bge.n	8016952 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801694c:	8a7b      	ldrh	r3, [r7, #18]
 801694e:	b25b      	sxtb	r3, r3
 8016950:	e0f4      	b.n	8016b3c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016952:	8a7b      	ldrh	r3, [r7, #18]
 8016954:	2b7e      	cmp	r3, #126	; 0x7e
 8016956:	d906      	bls.n	8016966 <etharp_query+0x7e>
 8016958:	4b7a      	ldr	r3, [pc, #488]	; (8016b44 <etharp_query+0x25c>)
 801695a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801695e:	497a      	ldr	r1, [pc, #488]	; (8016b48 <etharp_query+0x260>)
 8016960:	487a      	ldr	r0, [pc, #488]	; (8016b4c <etharp_query+0x264>)
 8016962:	f005 fa81 	bl	801be68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016966:	8a7b      	ldrh	r3, [r7, #18]
 8016968:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801696a:	7c7a      	ldrb	r2, [r7, #17]
 801696c:	4978      	ldr	r1, [pc, #480]	; (8016b50 <etharp_query+0x268>)
 801696e:	4613      	mov	r3, r2
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4413      	add	r3, r2
 8016974:	00db      	lsls	r3, r3, #3
 8016976:	440b      	add	r3, r1
 8016978:	3314      	adds	r3, #20
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d115      	bne.n	80169ac <etharp_query+0xc4>
    is_new_entry = 1;
 8016980:	2301      	movs	r3, #1
 8016982:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016984:	7c7a      	ldrb	r2, [r7, #17]
 8016986:	4972      	ldr	r1, [pc, #456]	; (8016b50 <etharp_query+0x268>)
 8016988:	4613      	mov	r3, r2
 801698a:	005b      	lsls	r3, r3, #1
 801698c:	4413      	add	r3, r2
 801698e:	00db      	lsls	r3, r3, #3
 8016990:	440b      	add	r3, r1
 8016992:	3314      	adds	r3, #20
 8016994:	2201      	movs	r2, #1
 8016996:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016998:	7c7a      	ldrb	r2, [r7, #17]
 801699a:	496d      	ldr	r1, [pc, #436]	; (8016b50 <etharp_query+0x268>)
 801699c:	4613      	mov	r3, r2
 801699e:	005b      	lsls	r3, r3, #1
 80169a0:	4413      	add	r3, r2
 80169a2:	00db      	lsls	r3, r3, #3
 80169a4:	440b      	add	r3, r1
 80169a6:	3308      	adds	r3, #8
 80169a8:	68fa      	ldr	r2, [r7, #12]
 80169aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80169ac:	7c7a      	ldrb	r2, [r7, #17]
 80169ae:	4968      	ldr	r1, [pc, #416]	; (8016b50 <etharp_query+0x268>)
 80169b0:	4613      	mov	r3, r2
 80169b2:	005b      	lsls	r3, r3, #1
 80169b4:	4413      	add	r3, r2
 80169b6:	00db      	lsls	r3, r3, #3
 80169b8:	440b      	add	r3, r1
 80169ba:	3314      	adds	r3, #20
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	2b01      	cmp	r3, #1
 80169c0:	d011      	beq.n	80169e6 <etharp_query+0xfe>
 80169c2:	7c7a      	ldrb	r2, [r7, #17]
 80169c4:	4962      	ldr	r1, [pc, #392]	; (8016b50 <etharp_query+0x268>)
 80169c6:	4613      	mov	r3, r2
 80169c8:	005b      	lsls	r3, r3, #1
 80169ca:	4413      	add	r3, r2
 80169cc:	00db      	lsls	r3, r3, #3
 80169ce:	440b      	add	r3, r1
 80169d0:	3314      	adds	r3, #20
 80169d2:	781b      	ldrb	r3, [r3, #0]
 80169d4:	2b01      	cmp	r3, #1
 80169d6:	d806      	bhi.n	80169e6 <etharp_query+0xfe>
 80169d8:	4b5a      	ldr	r3, [pc, #360]	; (8016b44 <etharp_query+0x25c>)
 80169da:	f240 32cf 	movw	r2, #975	; 0x3cf
 80169de:	495d      	ldr	r1, [pc, #372]	; (8016b54 <etharp_query+0x26c>)
 80169e0:	485a      	ldr	r0, [pc, #360]	; (8016b4c <etharp_query+0x264>)
 80169e2:	f005 fa41 	bl	801be68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80169e6:	6a3b      	ldr	r3, [r7, #32]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d102      	bne.n	80169f2 <etharp_query+0x10a>
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d10c      	bne.n	8016a0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80169f2:	68b9      	ldr	r1, [r7, #8]
 80169f4:	68f8      	ldr	r0, [r7, #12]
 80169f6:	f000 f963 	bl	8016cc0 <etharp_request>
 80169fa:	4603      	mov	r3, r0
 80169fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d102      	bne.n	8016a0c <etharp_query+0x124>
      return result;
 8016a06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016a0a:	e097      	b.n	8016b3c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d106      	bne.n	8016a20 <etharp_query+0x138>
 8016a12:	4b4c      	ldr	r3, [pc, #304]	; (8016b44 <etharp_query+0x25c>)
 8016a14:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016a18:	494f      	ldr	r1, [pc, #316]	; (8016b58 <etharp_query+0x270>)
 8016a1a:	484c      	ldr	r0, [pc, #304]	; (8016b4c <etharp_query+0x264>)
 8016a1c:	f005 fa24 	bl	801be68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016a20:	7c7a      	ldrb	r2, [r7, #17]
 8016a22:	494b      	ldr	r1, [pc, #300]	; (8016b50 <etharp_query+0x268>)
 8016a24:	4613      	mov	r3, r2
 8016a26:	005b      	lsls	r3, r3, #1
 8016a28:	4413      	add	r3, r2
 8016a2a:	00db      	lsls	r3, r3, #3
 8016a2c:	440b      	add	r3, r1
 8016a2e:	3314      	adds	r3, #20
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	2b01      	cmp	r3, #1
 8016a34:	d918      	bls.n	8016a68 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016a36:	4a49      	ldr	r2, [pc, #292]	; (8016b5c <etharp_query+0x274>)
 8016a38:	7c7b      	ldrb	r3, [r7, #17]
 8016a3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016a3c:	7c7a      	ldrb	r2, [r7, #17]
 8016a3e:	4613      	mov	r3, r2
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	4413      	add	r3, r2
 8016a44:	00db      	lsls	r3, r3, #3
 8016a46:	3308      	adds	r3, #8
 8016a48:	4a41      	ldr	r2, [pc, #260]	; (8016b50 <etharp_query+0x268>)
 8016a4a:	4413      	add	r3, r2
 8016a4c:	1d1a      	adds	r2, r3, #4
 8016a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a52:	9300      	str	r3, [sp, #0]
 8016a54:	4613      	mov	r3, r2
 8016a56:	697a      	ldr	r2, [r7, #20]
 8016a58:	6879      	ldr	r1, [r7, #4]
 8016a5a:	68f8      	ldr	r0, [r7, #12]
 8016a5c:	f001 fdcc 	bl	80185f8 <ethernet_output>
 8016a60:	4603      	mov	r3, r0
 8016a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a66:	e067      	b.n	8016b38 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016a68:	7c7a      	ldrb	r2, [r7, #17]
 8016a6a:	4939      	ldr	r1, [pc, #228]	; (8016b50 <etharp_query+0x268>)
 8016a6c:	4613      	mov	r3, r2
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	4413      	add	r3, r2
 8016a72:	00db      	lsls	r3, r3, #3
 8016a74:	440b      	add	r3, r1
 8016a76:	3314      	adds	r3, #20
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	2b01      	cmp	r3, #1
 8016a7c:	d15c      	bne.n	8016b38 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016a86:	e01c      	b.n	8016ac2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016a88:	69fb      	ldr	r3, [r7, #28]
 8016a8a:	895a      	ldrh	r2, [r3, #10]
 8016a8c:	69fb      	ldr	r3, [r7, #28]
 8016a8e:	891b      	ldrh	r3, [r3, #8]
 8016a90:	429a      	cmp	r2, r3
 8016a92:	d10a      	bne.n	8016aaa <etharp_query+0x1c2>
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d006      	beq.n	8016aaa <etharp_query+0x1c2>
 8016a9c:	4b29      	ldr	r3, [pc, #164]	; (8016b44 <etharp_query+0x25c>)
 8016a9e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016aa2:	492f      	ldr	r1, [pc, #188]	; (8016b60 <etharp_query+0x278>)
 8016aa4:	4829      	ldr	r0, [pc, #164]	; (8016b4c <etharp_query+0x264>)
 8016aa6:	f005 f9df 	bl	801be68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016aaa:	69fb      	ldr	r3, [r7, #28]
 8016aac:	7b1b      	ldrb	r3, [r3, #12]
 8016aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d002      	beq.n	8016abc <etharp_query+0x1d4>
        copy_needed = 1;
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	61bb      	str	r3, [r7, #24]
        break;
 8016aba:	e005      	b.n	8016ac8 <etharp_query+0x1e0>
      }
      p = p->next;
 8016abc:	69fb      	ldr	r3, [r7, #28]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016ac2:	69fb      	ldr	r3, [r7, #28]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d1df      	bne.n	8016a88 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d007      	beq.n	8016ade <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016ace:	687a      	ldr	r2, [r7, #4]
 8016ad0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016ad4:	200e      	movs	r0, #14
 8016ad6:	f7f6 fbaf 	bl	800d238 <pbuf_clone>
 8016ada:	61f8      	str	r0, [r7, #28]
 8016adc:	e004      	b.n	8016ae8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016ae2:	69f8      	ldr	r0, [r7, #28]
 8016ae4:	f7f6 f9d6 	bl	800ce94 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016ae8:	69fb      	ldr	r3, [r7, #28]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d021      	beq.n	8016b32 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016aee:	7c7a      	ldrb	r2, [r7, #17]
 8016af0:	4917      	ldr	r1, [pc, #92]	; (8016b50 <etharp_query+0x268>)
 8016af2:	4613      	mov	r3, r2
 8016af4:	005b      	lsls	r3, r3, #1
 8016af6:	4413      	add	r3, r2
 8016af8:	00db      	lsls	r3, r3, #3
 8016afa:	440b      	add	r3, r1
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d00a      	beq.n	8016b18 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016b02:	7c7a      	ldrb	r2, [r7, #17]
 8016b04:	4912      	ldr	r1, [pc, #72]	; (8016b50 <etharp_query+0x268>)
 8016b06:	4613      	mov	r3, r2
 8016b08:	005b      	lsls	r3, r3, #1
 8016b0a:	4413      	add	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	440b      	add	r3, r1
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7f6 f918 	bl	800cd48 <pbuf_free>
      }
      arp_table[i].q = p;
 8016b18:	7c7a      	ldrb	r2, [r7, #17]
 8016b1a:	490d      	ldr	r1, [pc, #52]	; (8016b50 <etharp_query+0x268>)
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	005b      	lsls	r3, r3, #1
 8016b20:	4413      	add	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	440b      	add	r3, r1
 8016b26:	69fa      	ldr	r2, [r7, #28]
 8016b28:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b30:	e002      	b.n	8016b38 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016b32:	23ff      	movs	r3, #255	; 0xff
 8016b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016b38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3728      	adds	r7, #40	; 0x28
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}
 8016b44:	080203c8 	.word	0x080203c8
 8016b48:	08020574 	.word	0x08020574
 8016b4c:	08020440 	.word	0x08020440
 8016b50:	2000843c 	.word	0x2000843c
 8016b54:	08020584 	.word	0x08020584
 8016b58:	08020568 	.word	0x08020568
 8016b5c:	2000852c 	.word	0x2000852c
 8016b60:	080205ac 	.word	0x080205ac

08016b64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b08a      	sub	sp, #40	; 0x28
 8016b68:	af02      	add	r7, sp, #8
 8016b6a:	60f8      	str	r0, [r7, #12]
 8016b6c:	60b9      	str	r1, [r7, #8]
 8016b6e:	607a      	str	r2, [r7, #4]
 8016b70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016b72:	2300      	movs	r3, #0
 8016b74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d106      	bne.n	8016b8a <etharp_raw+0x26>
 8016b7c:	4b3a      	ldr	r3, [pc, #232]	; (8016c68 <etharp_raw+0x104>)
 8016b7e:	f240 4257 	movw	r2, #1111	; 0x457
 8016b82:	493a      	ldr	r1, [pc, #232]	; (8016c6c <etharp_raw+0x108>)
 8016b84:	483a      	ldr	r0, [pc, #232]	; (8016c70 <etharp_raw+0x10c>)
 8016b86:	f005 f96f 	bl	801be68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016b8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b8e:	211c      	movs	r1, #28
 8016b90:	200e      	movs	r0, #14
 8016b92:	f7f5 fdc7 	bl	800c724 <pbuf_alloc>
 8016b96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016b98:	69bb      	ldr	r3, [r7, #24]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d102      	bne.n	8016ba4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8016ba2:	e05d      	b.n	8016c60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016ba4:	69bb      	ldr	r3, [r7, #24]
 8016ba6:	895b      	ldrh	r3, [r3, #10]
 8016ba8:	2b1b      	cmp	r3, #27
 8016baa:	d806      	bhi.n	8016bba <etharp_raw+0x56>
 8016bac:	4b2e      	ldr	r3, [pc, #184]	; (8016c68 <etharp_raw+0x104>)
 8016bae:	f240 4263 	movw	r2, #1123	; 0x463
 8016bb2:	4930      	ldr	r1, [pc, #192]	; (8016c74 <etharp_raw+0x110>)
 8016bb4:	482e      	ldr	r0, [pc, #184]	; (8016c70 <etharp_raw+0x10c>)
 8016bb6:	f005 f957 	bl	801be68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016bba:	69bb      	ldr	r3, [r7, #24]
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016bc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7f4 fcda 	bl	800b57c <lwip_htons>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	461a      	mov	r2, r3
 8016bcc:	697b      	ldr	r3, [r7, #20]
 8016bce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bd6:	2b06      	cmp	r3, #6
 8016bd8:	d006      	beq.n	8016be8 <etharp_raw+0x84>
 8016bda:	4b23      	ldr	r3, [pc, #140]	; (8016c68 <etharp_raw+0x104>)
 8016bdc:	f240 426a 	movw	r2, #1130	; 0x46a
 8016be0:	4925      	ldr	r1, [pc, #148]	; (8016c78 <etharp_raw+0x114>)
 8016be2:	4823      	ldr	r0, [pc, #140]	; (8016c70 <etharp_raw+0x10c>)
 8016be4:	f005 f940 	bl	801be68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	3308      	adds	r3, #8
 8016bec:	2206      	movs	r2, #6
 8016bee:	6839      	ldr	r1, [r7, #0]
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f005 f926 	bl	801be42 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016bf6:	697b      	ldr	r3, [r7, #20]
 8016bf8:	3312      	adds	r3, #18
 8016bfa:	2206      	movs	r2, #6
 8016bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f005 f91f 	bl	801be42 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016c04:	697b      	ldr	r3, [r7, #20]
 8016c06:	330e      	adds	r3, #14
 8016c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c0a:	6812      	ldr	r2, [r2, #0]
 8016c0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016c0e:	697b      	ldr	r3, [r7, #20]
 8016c10:	3318      	adds	r3, #24
 8016c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c14:	6812      	ldr	r2, [r2, #0]
 8016c16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016c18:	697b      	ldr	r3, [r7, #20]
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	701a      	strb	r2, [r3, #0]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	f042 0201 	orr.w	r2, r2, #1
 8016c24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	2200      	movs	r2, #0
 8016c2a:	f042 0208 	orr.w	r2, r2, #8
 8016c2e:	709a      	strb	r2, [r3, #2]
 8016c30:	2200      	movs	r2, #0
 8016c32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016c34:	697b      	ldr	r3, [r7, #20]
 8016c36:	2206      	movs	r2, #6
 8016c38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	2204      	movs	r2, #4
 8016c3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016c40:	f640 0306 	movw	r3, #2054	; 0x806
 8016c44:	9300      	str	r3, [sp, #0]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	68ba      	ldr	r2, [r7, #8]
 8016c4a:	69b9      	ldr	r1, [r7, #24]
 8016c4c:	68f8      	ldr	r0, [r7, #12]
 8016c4e:	f001 fcd3 	bl	80185f8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016c52:	69b8      	ldr	r0, [r7, #24]
 8016c54:	f7f6 f878 	bl	800cd48 <pbuf_free>
  p = NULL;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016c5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3720      	adds	r7, #32
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}
 8016c68:	080203c8 	.word	0x080203c8
 8016c6c:	08020518 	.word	0x08020518
 8016c70:	08020440 	.word	0x08020440
 8016c74:	080205c8 	.word	0x080205c8
 8016c78:	080205fc 	.word	0x080205fc

08016c7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b088      	sub	sp, #32
 8016c80:	af04      	add	r7, sp, #16
 8016c82:	60f8      	str	r0, [r7, #12]
 8016c84:	60b9      	str	r1, [r7, #8]
 8016c86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c98:	2201      	movs	r2, #1
 8016c9a:	9203      	str	r2, [sp, #12]
 8016c9c:	68ba      	ldr	r2, [r7, #8]
 8016c9e:	9202      	str	r2, [sp, #8]
 8016ca0:	4a06      	ldr	r2, [pc, #24]	; (8016cbc <etharp_request_dst+0x40>)
 8016ca2:	9201      	str	r2, [sp, #4]
 8016ca4:	9300      	str	r3, [sp, #0]
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	68f8      	ldr	r0, [r7, #12]
 8016cac:	f7ff ff5a 	bl	8016b64 <etharp_raw>
 8016cb0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3710      	adds	r7, #16
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	08020f58 	.word	0x08020f58

08016cc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016cca:	4a05      	ldr	r2, [pc, #20]	; (8016ce0 <etharp_request+0x20>)
 8016ccc:	6839      	ldr	r1, [r7, #0]
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f7ff ffd4 	bl	8016c7c <etharp_request_dst>
 8016cd4:	4603      	mov	r3, r0
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3708      	adds	r7, #8
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
 8016cde:	bf00      	nop
 8016ce0:	08020f50 	.word	0x08020f50

08016ce4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b08e      	sub	sp, #56	; 0x38
 8016ce8:	af04      	add	r7, sp, #16
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016cee:	4b79      	ldr	r3, [pc, #484]	; (8016ed4 <icmp_input+0x1f0>)
 8016cf0:	689b      	ldr	r3, [r3, #8]
 8016cf2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	f003 030f 	and.w	r3, r3, #15
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	009b      	lsls	r3, r3, #2
 8016d00:	b2db      	uxtb	r3, r3
 8016d02:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d06:	2b13      	cmp	r3, #19
 8016d08:	f240 80cd 	bls.w	8016ea6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	895b      	ldrh	r3, [r3, #10]
 8016d10:	2b03      	cmp	r3, #3
 8016d12:	f240 80ca 	bls.w	8016eaa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016d20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	f000 80b7 	beq.w	8016e98 <icmp_input+0x1b4>
 8016d2a:	2b08      	cmp	r3, #8
 8016d2c:	f040 80b7 	bne.w	8016e9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016d30:	4b69      	ldr	r3, [pc, #420]	; (8016ed8 <icmp_input+0x1f4>)
 8016d32:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d34:	4b67      	ldr	r3, [pc, #412]	; (8016ed4 <icmp_input+0x1f0>)
 8016d36:	695b      	ldr	r3, [r3, #20]
 8016d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d3c:	2be0      	cmp	r3, #224	; 0xe0
 8016d3e:	f000 80bb 	beq.w	8016eb8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016d42:	4b64      	ldr	r3, [pc, #400]	; (8016ed4 <icmp_input+0x1f0>)
 8016d44:	695a      	ldr	r2, [r3, #20]
 8016d46:	4b63      	ldr	r3, [pc, #396]	; (8016ed4 <icmp_input+0x1f0>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	4619      	mov	r1, r3
 8016d4c:	4610      	mov	r0, r2
 8016d4e:	f000 fc09 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8016d52:	4603      	mov	r3, r0
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	f040 80b1 	bne.w	8016ebc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	891b      	ldrh	r3, [r3, #8]
 8016d5e:	2b07      	cmp	r3, #7
 8016d60:	f240 80a5 	bls.w	8016eae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d66:	330e      	adds	r3, #14
 8016d68:	4619      	mov	r1, r3
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f7f5 ff24 	bl	800cbb8 <pbuf_add_header>
 8016d70:	4603      	mov	r3, r0
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d04b      	beq.n	8016e0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	891a      	ldrh	r2, [r3, #8]
 8016d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d7c:	4413      	add	r3, r2
 8016d7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	891b      	ldrh	r3, [r3, #8]
 8016d84:	8b7a      	ldrh	r2, [r7, #26]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	f0c0 809a 	bcc.w	8016ec0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016d8c:	8b7b      	ldrh	r3, [r7, #26]
 8016d8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d92:	4619      	mov	r1, r3
 8016d94:	200e      	movs	r0, #14
 8016d96:	f7f5 fcc5 	bl	800c724 <pbuf_alloc>
 8016d9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016d9c:	697b      	ldr	r3, [r7, #20]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	f000 8090 	beq.w	8016ec4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016da4:	697b      	ldr	r3, [r7, #20]
 8016da6:	895b      	ldrh	r3, [r3, #10]
 8016da8:	461a      	mov	r2, r3
 8016daa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dac:	3308      	adds	r3, #8
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d203      	bcs.n	8016dba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016db2:	6978      	ldr	r0, [r7, #20]
 8016db4:	f7f5 ffc8 	bl	800cd48 <pbuf_free>
          goto icmperr;
 8016db8:	e085      	b.n	8016ec6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f005 f83d 	bl	801be42 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dca:	4619      	mov	r1, r3
 8016dcc:	6978      	ldr	r0, [r7, #20]
 8016dce:	f7f5 ff03 	bl	800cbd8 <pbuf_remove_header>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d009      	beq.n	8016dec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016dd8:	4b40      	ldr	r3, [pc, #256]	; (8016edc <icmp_input+0x1f8>)
 8016dda:	22b6      	movs	r2, #182	; 0xb6
 8016ddc:	4940      	ldr	r1, [pc, #256]	; (8016ee0 <icmp_input+0x1fc>)
 8016dde:	4841      	ldr	r0, [pc, #260]	; (8016ee4 <icmp_input+0x200>)
 8016de0:	f005 f842 	bl	801be68 <iprintf>
          pbuf_free(r);
 8016de4:	6978      	ldr	r0, [r7, #20]
 8016de6:	f7f5 ffaf 	bl	800cd48 <pbuf_free>
          goto icmperr;
 8016dea:	e06c      	b.n	8016ec6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016dec:	6879      	ldr	r1, [r7, #4]
 8016dee:	6978      	ldr	r0, [r7, #20]
 8016df0:	f7f6 f8de 	bl	800cfb0 <pbuf_copy>
 8016df4:	4603      	mov	r3, r0
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d003      	beq.n	8016e02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016dfa:	6978      	ldr	r0, [r7, #20]
 8016dfc:	f7f5 ffa4 	bl	800cd48 <pbuf_free>
          goto icmperr;
 8016e00:	e061      	b.n	8016ec6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f7f5 ffa0 	bl	800cd48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	607b      	str	r3, [r7, #4]
 8016e0c:	e00f      	b.n	8016e2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e10:	330e      	adds	r3, #14
 8016e12:	4619      	mov	r1, r3
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f7f5 fedf 	bl	800cbd8 <pbuf_remove_header>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d006      	beq.n	8016e2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016e20:	4b2e      	ldr	r3, [pc, #184]	; (8016edc <icmp_input+0x1f8>)
 8016e22:	22c7      	movs	r2, #199	; 0xc7
 8016e24:	4930      	ldr	r1, [pc, #192]	; (8016ee8 <icmp_input+0x204>)
 8016e26:	482f      	ldr	r0, [pc, #188]	; (8016ee4 <icmp_input+0x200>)
 8016e28:	f005 f81e 	bl	801be68 <iprintf>
          goto icmperr;
 8016e2c:	e04b      	b.n	8016ec6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	685b      	ldr	r3, [r3, #4]
 8016e32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016e34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e36:	4619      	mov	r1, r3
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f7f5 febd 	bl	800cbb8 <pbuf_add_header>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d12b      	bne.n	8016e9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	685b      	ldr	r3, [r3, #4]
 8016e48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016e4a:	69fb      	ldr	r3, [r7, #28]
 8016e4c:	681a      	ldr	r2, [r3, #0]
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016e52:	4b20      	ldr	r3, [pc, #128]	; (8016ed4 <icmp_input+0x1f0>)
 8016e54:	691a      	ldr	r2, [r3, #16]
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016e5a:	693b      	ldr	r3, [r7, #16]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016e60:	693b      	ldr	r3, [r7, #16]
 8016e62:	2200      	movs	r2, #0
 8016e64:	709a      	strb	r2, [r3, #2]
 8016e66:	2200      	movs	r2, #0
 8016e68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	22ff      	movs	r2, #255	; 0xff
 8016e6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	2200      	movs	r2, #0
 8016e74:	729a      	strb	r2, [r3, #10]
 8016e76:	2200      	movs	r2, #0
 8016e78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	9302      	str	r3, [sp, #8]
 8016e7e:	2301      	movs	r3, #1
 8016e80:	9301      	str	r3, [sp, #4]
 8016e82:	2300      	movs	r3, #0
 8016e84:	9300      	str	r3, [sp, #0]
 8016e86:	23ff      	movs	r3, #255	; 0xff
 8016e88:	2200      	movs	r2, #0
 8016e8a:	69f9      	ldr	r1, [r7, #28]
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f000 fa91 	bl	80173b4 <ip4_output_if>
 8016e92:	4603      	mov	r3, r0
 8016e94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016e96:	e001      	b.n	8016e9c <icmp_input+0x1b8>
      break;
 8016e98:	bf00      	nop
 8016e9a:	e000      	b.n	8016e9e <icmp_input+0x1ba>
      break;
 8016e9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f7f5 ff52 	bl	800cd48 <pbuf_free>
  return;
 8016ea4:	e013      	b.n	8016ece <icmp_input+0x1ea>
    goto lenerr;
 8016ea6:	bf00      	nop
 8016ea8:	e002      	b.n	8016eb0 <icmp_input+0x1cc>
    goto lenerr;
 8016eaa:	bf00      	nop
 8016eac:	e000      	b.n	8016eb0 <icmp_input+0x1cc>
        goto lenerr;
 8016eae:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f7f5 ff49 	bl	800cd48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016eb6:	e00a      	b.n	8016ece <icmp_input+0x1ea>
        goto icmperr;
 8016eb8:	bf00      	nop
 8016eba:	e004      	b.n	8016ec6 <icmp_input+0x1e2>
        goto icmperr;
 8016ebc:	bf00      	nop
 8016ebe:	e002      	b.n	8016ec6 <icmp_input+0x1e2>
          goto icmperr;
 8016ec0:	bf00      	nop
 8016ec2:	e000      	b.n	8016ec6 <icmp_input+0x1e2>
          goto icmperr;
 8016ec4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	f7f5 ff3e 	bl	800cd48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016ecc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016ece:	3728      	adds	r7, #40	; 0x28
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}
 8016ed4:	20008dfc 	.word	0x20008dfc
 8016ed8:	20008e10 	.word	0x20008e10
 8016edc:	08020640 	.word	0x08020640
 8016ee0:	08020678 	.word	0x08020678
 8016ee4:	080206b0 	.word	0x080206b0
 8016ee8:	080206d8 	.word	0x080206d8

08016eec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b082      	sub	sp, #8
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016ef8:	78fb      	ldrb	r3, [r7, #3]
 8016efa:	461a      	mov	r2, r3
 8016efc:	2103      	movs	r1, #3
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f000 f814 	bl	8016f2c <icmp_send_response>
}
 8016f04:	bf00      	nop
 8016f06:	3708      	adds	r7, #8
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b082      	sub	sp, #8
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	460b      	mov	r3, r1
 8016f16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016f18:	78fb      	ldrb	r3, [r7, #3]
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	210b      	movs	r1, #11
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f000 f804 	bl	8016f2c <icmp_send_response>
}
 8016f24:	bf00      	nop
 8016f26:	3708      	adds	r7, #8
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}

08016f2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b08c      	sub	sp, #48	; 0x30
 8016f30:	af04      	add	r7, sp, #16
 8016f32:	6078      	str	r0, [r7, #4]
 8016f34:	460b      	mov	r3, r1
 8016f36:	70fb      	strb	r3, [r7, #3]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016f3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f40:	2124      	movs	r1, #36	; 0x24
 8016f42:	2022      	movs	r0, #34	; 0x22
 8016f44:	f7f5 fbee 	bl	800c724 <pbuf_alloc>
 8016f48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016f4a:	69fb      	ldr	r3, [r7, #28]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d04c      	beq.n	8016fea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	895b      	ldrh	r3, [r3, #10]
 8016f54:	2b23      	cmp	r3, #35	; 0x23
 8016f56:	d806      	bhi.n	8016f66 <icmp_send_response+0x3a>
 8016f58:	4b26      	ldr	r3, [pc, #152]	; (8016ff4 <icmp_send_response+0xc8>)
 8016f5a:	f240 1269 	movw	r2, #361	; 0x169
 8016f5e:	4926      	ldr	r1, [pc, #152]	; (8016ff8 <icmp_send_response+0xcc>)
 8016f60:	4826      	ldr	r0, [pc, #152]	; (8016ffc <icmp_send_response+0xd0>)
 8016f62:	f004 ff81 	bl	801be68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	685b      	ldr	r3, [r3, #4]
 8016f6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016f6c:	69fb      	ldr	r3, [r7, #28]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016f72:	697b      	ldr	r3, [r7, #20]
 8016f74:	78fa      	ldrb	r2, [r7, #3]
 8016f76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	78ba      	ldrb	r2, [r7, #2]
 8016f7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016f7e:	697b      	ldr	r3, [r7, #20]
 8016f80:	2200      	movs	r2, #0
 8016f82:	711a      	strb	r2, [r3, #4]
 8016f84:	2200      	movs	r2, #0
 8016f86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016f88:	697b      	ldr	r3, [r7, #20]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	719a      	strb	r2, [r3, #6]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016f92:	69fb      	ldr	r3, [r7, #28]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	f103 0008 	add.w	r0, r3, #8
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	685b      	ldr	r3, [r3, #4]
 8016f9e:	221c      	movs	r2, #28
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	f004 ff4e 	bl	801be42 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016fa6:	69bb      	ldr	r3, [r7, #24]
 8016fa8:	68db      	ldr	r3, [r3, #12]
 8016faa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016fac:	f107 030c 	add.w	r3, r7, #12
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f000 f825 	bl	8017000 <ip4_route>
 8016fb6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016fb8:	693b      	ldr	r3, [r7, #16]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d011      	beq.n	8016fe2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	709a      	strb	r2, [r3, #2]
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016fc8:	f107 020c 	add.w	r2, r7, #12
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	9302      	str	r3, [sp, #8]
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	9301      	str	r3, [sp, #4]
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	9300      	str	r3, [sp, #0]
 8016fd8:	23ff      	movs	r3, #255	; 0xff
 8016fda:	2100      	movs	r1, #0
 8016fdc:	69f8      	ldr	r0, [r7, #28]
 8016fde:	f000 f9e9 	bl	80173b4 <ip4_output_if>
  }
  pbuf_free(q);
 8016fe2:	69f8      	ldr	r0, [r7, #28]
 8016fe4:	f7f5 feb0 	bl	800cd48 <pbuf_free>
 8016fe8:	e000      	b.n	8016fec <icmp_send_response+0xc0>
    return;
 8016fea:	bf00      	nop
}
 8016fec:	3720      	adds	r7, #32
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	08020640 	.word	0x08020640
 8016ff8:	0802070c 	.word	0x0802070c
 8016ffc:	080206b0 	.word	0x080206b0

08017000 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017000:	b480      	push	{r7}
 8017002:	b085      	sub	sp, #20
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017008:	4b33      	ldr	r3, [pc, #204]	; (80170d8 <ip4_route+0xd8>)
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	60fb      	str	r3, [r7, #12]
 801700e:	e036      	b.n	801707e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017016:	f003 0301 	and.w	r3, r3, #1
 801701a:	b2db      	uxtb	r3, r3
 801701c:	2b00      	cmp	r3, #0
 801701e:	d02b      	beq.n	8017078 <ip4_route+0x78>
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017026:	089b      	lsrs	r3, r3, #2
 8017028:	f003 0301 	and.w	r3, r3, #1
 801702c:	b2db      	uxtb	r3, r3
 801702e:	2b00      	cmp	r3, #0
 8017030:	d022      	beq.n	8017078 <ip4_route+0x78>
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	3304      	adds	r3, #4
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d01d      	beq.n	8017078 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	681a      	ldr	r2, [r3, #0]
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	3304      	adds	r3, #4
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	405a      	eors	r2, r3
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	3308      	adds	r3, #8
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	4013      	ands	r3, r2
 8017050:	2b00      	cmp	r3, #0
 8017052:	d101      	bne.n	8017058 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	e038      	b.n	80170ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801705e:	f003 0302 	and.w	r3, r3, #2
 8017062:	2b00      	cmp	r3, #0
 8017064:	d108      	bne.n	8017078 <ip4_route+0x78>
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	330c      	adds	r3, #12
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	429a      	cmp	r2, r3
 8017072:	d101      	bne.n	8017078 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	e028      	b.n	80170ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	60fb      	str	r3, [r7, #12]
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d1c5      	bne.n	8017010 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017084:	4b15      	ldr	r3, [pc, #84]	; (80170dc <ip4_route+0xdc>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d01a      	beq.n	80170c2 <ip4_route+0xc2>
 801708c:	4b13      	ldr	r3, [pc, #76]	; (80170dc <ip4_route+0xdc>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017094:	f003 0301 	and.w	r3, r3, #1
 8017098:	2b00      	cmp	r3, #0
 801709a:	d012      	beq.n	80170c2 <ip4_route+0xc2>
 801709c:	4b0f      	ldr	r3, [pc, #60]	; (80170dc <ip4_route+0xdc>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80170a4:	f003 0304 	and.w	r3, r3, #4
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d00a      	beq.n	80170c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80170ac:	4b0b      	ldr	r3, [pc, #44]	; (80170dc <ip4_route+0xdc>)
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	3304      	adds	r3, #4
 80170b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d004      	beq.n	80170c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	b2db      	uxtb	r3, r3
 80170be:	2b7f      	cmp	r3, #127	; 0x7f
 80170c0:	d101      	bne.n	80170c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80170c2:	2300      	movs	r3, #0
 80170c4:	e001      	b.n	80170ca <ip4_route+0xca>
  }

  return netif_default;
 80170c6:	4b05      	ldr	r3, [pc, #20]	; (80170dc <ip4_route+0xdc>)
 80170c8:	681b      	ldr	r3, [r3, #0]
}
 80170ca:	4618      	mov	r0, r3
 80170cc:	3714      	adds	r7, #20
 80170ce:	46bd      	mov	sp, r7
 80170d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d4:	4770      	bx	lr
 80170d6:	bf00      	nop
 80170d8:	2000c540 	.word	0x2000c540
 80170dc:	2000c544 	.word	0x2000c544

080170e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80170ee:	f003 0301 	and.w	r3, r3, #1
 80170f2:	b2db      	uxtb	r3, r3
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d016      	beq.n	8017126 <ip4_input_accept+0x46>
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	3304      	adds	r3, #4
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d011      	beq.n	8017126 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017102:	4b0b      	ldr	r3, [pc, #44]	; (8017130 <ip4_input_accept+0x50>)
 8017104:	695a      	ldr	r2, [r3, #20]
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	3304      	adds	r3, #4
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	429a      	cmp	r2, r3
 801710e:	d008      	beq.n	8017122 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017110:	4b07      	ldr	r3, [pc, #28]	; (8017130 <ip4_input_accept+0x50>)
 8017112:	695b      	ldr	r3, [r3, #20]
 8017114:	6879      	ldr	r1, [r7, #4]
 8017116:	4618      	mov	r0, r3
 8017118:	f000 fa24 	bl	8017564 <ip4_addr_isbroadcast_u32>
 801711c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801711e:	2b00      	cmp	r3, #0
 8017120:	d001      	beq.n	8017126 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017122:	2301      	movs	r3, #1
 8017124:	e000      	b.n	8017128 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017126:	2300      	movs	r3, #0
}
 8017128:	4618      	mov	r0, r3
 801712a:	3708      	adds	r7, #8
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}
 8017130:	20008dfc 	.word	0x20008dfc

08017134 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b088      	sub	sp, #32
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
 801713c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801713e:	2301      	movs	r3, #1
 8017140:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017148:	69fb      	ldr	r3, [r7, #28]
 801714a:	781b      	ldrb	r3, [r3, #0]
 801714c:	091b      	lsrs	r3, r3, #4
 801714e:	b2db      	uxtb	r3, r3
 8017150:	2b04      	cmp	r3, #4
 8017152:	d004      	beq.n	801715e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017154:	6878      	ldr	r0, [r7, #4]
 8017156:	f7f5 fdf7 	bl	800cd48 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801715a:	2300      	movs	r3, #0
 801715c:	e121      	b.n	80173a2 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801715e:	69fb      	ldr	r3, [r7, #28]
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	f003 030f 	and.w	r3, r3, #15
 8017166:	b2db      	uxtb	r3, r3
 8017168:	009b      	lsls	r3, r3, #2
 801716a:	b2db      	uxtb	r3, r3
 801716c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801716e:	69fb      	ldr	r3, [r7, #28]
 8017170:	885b      	ldrh	r3, [r3, #2]
 8017172:	b29b      	uxth	r3, r3
 8017174:	4618      	mov	r0, r3
 8017176:	f7f4 fa01 	bl	800b57c <lwip_htons>
 801717a:	4603      	mov	r3, r0
 801717c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	891b      	ldrh	r3, [r3, #8]
 8017182:	8a3a      	ldrh	r2, [r7, #16]
 8017184:	429a      	cmp	r2, r3
 8017186:	d204      	bcs.n	8017192 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017188:	8a3b      	ldrh	r3, [r7, #16]
 801718a:	4619      	mov	r1, r3
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f7f5 fc23 	bl	800c9d8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	895b      	ldrh	r3, [r3, #10]
 8017196:	8a7a      	ldrh	r2, [r7, #18]
 8017198:	429a      	cmp	r2, r3
 801719a:	d807      	bhi.n	80171ac <ip4_input+0x78>
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	891b      	ldrh	r3, [r3, #8]
 80171a0:	8a3a      	ldrh	r2, [r7, #16]
 80171a2:	429a      	cmp	r2, r3
 80171a4:	d802      	bhi.n	80171ac <ip4_input+0x78>
 80171a6:	8a7b      	ldrh	r3, [r7, #18]
 80171a8:	2b13      	cmp	r3, #19
 80171aa:	d804      	bhi.n	80171b6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f7f5 fdcb 	bl	800cd48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80171b2:	2300      	movs	r3, #0
 80171b4:	e0f5      	b.n	80173a2 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80171b6:	69fb      	ldr	r3, [r7, #28]
 80171b8:	691b      	ldr	r3, [r3, #16]
 80171ba:	4a7c      	ldr	r2, [pc, #496]	; (80173ac <ip4_input+0x278>)
 80171bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80171be:	69fb      	ldr	r3, [r7, #28]
 80171c0:	68db      	ldr	r3, [r3, #12]
 80171c2:	4a7a      	ldr	r2, [pc, #488]	; (80173ac <ip4_input+0x278>)
 80171c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80171c6:	4b79      	ldr	r3, [pc, #484]	; (80173ac <ip4_input+0x278>)
 80171c8:	695b      	ldr	r3, [r3, #20]
 80171ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80171ce:	2be0      	cmp	r3, #224	; 0xe0
 80171d0:	d112      	bne.n	80171f8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80171d8:	f003 0301 	and.w	r3, r3, #1
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d007      	beq.n	80171f2 <ip4_input+0xbe>
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	3304      	adds	r3, #4
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d002      	beq.n	80171f2 <ip4_input+0xbe>
      netif = inp;
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	61bb      	str	r3, [r7, #24]
 80171f0:	e02a      	b.n	8017248 <ip4_input+0x114>
    } else {
      netif = NULL;
 80171f2:	2300      	movs	r3, #0
 80171f4:	61bb      	str	r3, [r7, #24]
 80171f6:	e027      	b.n	8017248 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80171f8:	6838      	ldr	r0, [r7, #0]
 80171fa:	f7ff ff71 	bl	80170e0 <ip4_input_accept>
 80171fe:	4603      	mov	r3, r0
 8017200:	2b00      	cmp	r3, #0
 8017202:	d002      	beq.n	801720a <ip4_input+0xd6>
      netif = inp;
 8017204:	683b      	ldr	r3, [r7, #0]
 8017206:	61bb      	str	r3, [r7, #24]
 8017208:	e01e      	b.n	8017248 <ip4_input+0x114>
    } else {
      netif = NULL;
 801720a:	2300      	movs	r3, #0
 801720c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801720e:	4b67      	ldr	r3, [pc, #412]	; (80173ac <ip4_input+0x278>)
 8017210:	695b      	ldr	r3, [r3, #20]
 8017212:	b2db      	uxtb	r3, r3
 8017214:	2b7f      	cmp	r3, #127	; 0x7f
 8017216:	d017      	beq.n	8017248 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017218:	4b65      	ldr	r3, [pc, #404]	; (80173b0 <ip4_input+0x27c>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	61bb      	str	r3, [r7, #24]
 801721e:	e00e      	b.n	801723e <ip4_input+0x10a>
          if (netif == inp) {
 8017220:	69ba      	ldr	r2, [r7, #24]
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	429a      	cmp	r2, r3
 8017226:	d006      	beq.n	8017236 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017228:	69b8      	ldr	r0, [r7, #24]
 801722a:	f7ff ff59 	bl	80170e0 <ip4_input_accept>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	d108      	bne.n	8017246 <ip4_input+0x112>
 8017234:	e000      	b.n	8017238 <ip4_input+0x104>
            continue;
 8017236:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017238:	69bb      	ldr	r3, [r7, #24]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	61bb      	str	r3, [r7, #24]
 801723e:	69bb      	ldr	r3, [r7, #24]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d1ed      	bne.n	8017220 <ip4_input+0xec>
 8017244:	e000      	b.n	8017248 <ip4_input+0x114>
            break;
 8017246:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017248:	69bb      	ldr	r3, [r7, #24]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d111      	bne.n	8017272 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801724e:	69fb      	ldr	r3, [r7, #28]
 8017250:	7a5b      	ldrb	r3, [r3, #9]
 8017252:	2b11      	cmp	r3, #17
 8017254:	d10d      	bne.n	8017272 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017256:	8a7b      	ldrh	r3, [r7, #18]
 8017258:	69fa      	ldr	r2, [r7, #28]
 801725a:	4413      	add	r3, r2
 801725c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	885b      	ldrh	r3, [r3, #2]
 8017262:	b29b      	uxth	r3, r3
 8017264:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017268:	d103      	bne.n	8017272 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801726e:	2300      	movs	r3, #0
 8017270:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017272:	697b      	ldr	r3, [r7, #20]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d017      	beq.n	80172a8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017278:	4b4c      	ldr	r3, [pc, #304]	; (80173ac <ip4_input+0x278>)
 801727a:	691b      	ldr	r3, [r3, #16]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d013      	beq.n	80172a8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017280:	4b4a      	ldr	r3, [pc, #296]	; (80173ac <ip4_input+0x278>)
 8017282:	691b      	ldr	r3, [r3, #16]
 8017284:	6839      	ldr	r1, [r7, #0]
 8017286:	4618      	mov	r0, r3
 8017288:	f000 f96c 	bl	8017564 <ip4_addr_isbroadcast_u32>
 801728c:	4603      	mov	r3, r0
 801728e:	2b00      	cmp	r3, #0
 8017290:	d105      	bne.n	801729e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017292:	4b46      	ldr	r3, [pc, #280]	; (80173ac <ip4_input+0x278>)
 8017294:	691b      	ldr	r3, [r3, #16]
 8017296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801729a:	2be0      	cmp	r3, #224	; 0xe0
 801729c:	d104      	bne.n	80172a8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f7f5 fd52 	bl	800cd48 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80172a4:	2300      	movs	r3, #0
 80172a6:	e07c      	b.n	80173a2 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80172a8:	69bb      	ldr	r3, [r7, #24]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d104      	bne.n	80172b8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80172ae:	6878      	ldr	r0, [r7, #4]
 80172b0:	f7f5 fd4a 	bl	800cd48 <pbuf_free>
    return ERR_OK;
 80172b4:	2300      	movs	r3, #0
 80172b6:	e074      	b.n	80173a2 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80172b8:	69fb      	ldr	r3, [r7, #28]
 80172ba:	88db      	ldrh	r3, [r3, #6]
 80172bc:	b29b      	uxth	r3, r3
 80172be:	461a      	mov	r2, r3
 80172c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80172c4:	4013      	ands	r3, r2
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d00b      	beq.n	80172e2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80172ca:	6878      	ldr	r0, [r7, #4]
 80172cc:	f000 fdd6 	bl	8017e7c <ip4_reass>
 80172d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d101      	bne.n	80172dc <ip4_input+0x1a8>
      return ERR_OK;
 80172d8:	2300      	movs	r3, #0
 80172da:	e062      	b.n	80173a2 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80172e2:	4a32      	ldr	r2, [pc, #200]	; (80173ac <ip4_input+0x278>)
 80172e4:	69bb      	ldr	r3, [r7, #24]
 80172e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80172e8:	4a30      	ldr	r2, [pc, #192]	; (80173ac <ip4_input+0x278>)
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80172ee:	4a2f      	ldr	r2, [pc, #188]	; (80173ac <ip4_input+0x278>)
 80172f0:	69fb      	ldr	r3, [r7, #28]
 80172f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80172f4:	69fb      	ldr	r3, [r7, #28]
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	f003 030f 	and.w	r3, r3, #15
 80172fc:	b2db      	uxtb	r3, r3
 80172fe:	009b      	lsls	r3, r3, #2
 8017300:	b2db      	uxtb	r3, r3
 8017302:	b29a      	uxth	r2, r3
 8017304:	4b29      	ldr	r3, [pc, #164]	; (80173ac <ip4_input+0x278>)
 8017306:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017308:	8a7b      	ldrh	r3, [r7, #18]
 801730a:	4619      	mov	r1, r3
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f7f5 fc63 	bl	800cbd8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017312:	69fb      	ldr	r3, [r7, #28]
 8017314:	7a5b      	ldrb	r3, [r3, #9]
 8017316:	2b06      	cmp	r3, #6
 8017318:	d009      	beq.n	801732e <ip4_input+0x1fa>
 801731a:	2b11      	cmp	r3, #17
 801731c:	d002      	beq.n	8017324 <ip4_input+0x1f0>
 801731e:	2b01      	cmp	r3, #1
 8017320:	d00a      	beq.n	8017338 <ip4_input+0x204>
 8017322:	e00e      	b.n	8017342 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017324:	6839      	ldr	r1, [r7, #0]
 8017326:	6878      	ldr	r0, [r7, #4]
 8017328:	f7fc fa18 	bl	801375c <udp_input>
        break;
 801732c:	e026      	b.n	801737c <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801732e:	6839      	ldr	r1, [r7, #0]
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f7f7 fdc7 	bl	800eec4 <tcp_input>
        break;
 8017336:	e021      	b.n	801737c <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017338:	6839      	ldr	r1, [r7, #0]
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f7ff fcd2 	bl	8016ce4 <icmp_input>
        break;
 8017340:	e01c      	b.n	801737c <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017342:	4b1a      	ldr	r3, [pc, #104]	; (80173ac <ip4_input+0x278>)
 8017344:	695b      	ldr	r3, [r3, #20]
 8017346:	69b9      	ldr	r1, [r7, #24]
 8017348:	4618      	mov	r0, r3
 801734a:	f000 f90b 	bl	8017564 <ip4_addr_isbroadcast_u32>
 801734e:	4603      	mov	r3, r0
 8017350:	2b00      	cmp	r3, #0
 8017352:	d10f      	bne.n	8017374 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017354:	4b15      	ldr	r3, [pc, #84]	; (80173ac <ip4_input+0x278>)
 8017356:	695b      	ldr	r3, [r3, #20]
 8017358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801735c:	2be0      	cmp	r3, #224	; 0xe0
 801735e:	d009      	beq.n	8017374 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017364:	4619      	mov	r1, r3
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f7f5 fca9 	bl	800ccbe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801736c:	2102      	movs	r1, #2
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f7ff fdbc 	bl	8016eec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7f5 fce7 	bl	800cd48 <pbuf_free>
        break;
 801737a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801737c:	4b0b      	ldr	r3, [pc, #44]	; (80173ac <ip4_input+0x278>)
 801737e:	2200      	movs	r2, #0
 8017380:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017382:	4b0a      	ldr	r3, [pc, #40]	; (80173ac <ip4_input+0x278>)
 8017384:	2200      	movs	r2, #0
 8017386:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017388:	4b08      	ldr	r3, [pc, #32]	; (80173ac <ip4_input+0x278>)
 801738a:	2200      	movs	r2, #0
 801738c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801738e:	4b07      	ldr	r3, [pc, #28]	; (80173ac <ip4_input+0x278>)
 8017390:	2200      	movs	r2, #0
 8017392:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017394:	4b05      	ldr	r3, [pc, #20]	; (80173ac <ip4_input+0x278>)
 8017396:	2200      	movs	r2, #0
 8017398:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801739a:	4b04      	ldr	r3, [pc, #16]	; (80173ac <ip4_input+0x278>)
 801739c:	2200      	movs	r2, #0
 801739e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80173a0:	2300      	movs	r3, #0
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3720      	adds	r7, #32
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	bf00      	nop
 80173ac:	20008dfc 	.word	0x20008dfc
 80173b0:	2000c540 	.word	0x2000c540

080173b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b08a      	sub	sp, #40	; 0x28
 80173b8:	af04      	add	r7, sp, #16
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	60b9      	str	r1, [r7, #8]
 80173be:	607a      	str	r2, [r7, #4]
 80173c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d009      	beq.n	80173e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d003      	beq.n	80173da <ip4_output_if+0x26>
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d102      	bne.n	80173e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80173da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173dc:	3304      	adds	r3, #4
 80173de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80173e0:	78fa      	ldrb	r2, [r7, #3]
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	9302      	str	r3, [sp, #8]
 80173e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173ea:	9301      	str	r3, [sp, #4]
 80173ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80173f0:	9300      	str	r3, [sp, #0]
 80173f2:	4613      	mov	r3, r2
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	6979      	ldr	r1, [r7, #20]
 80173f8:	68f8      	ldr	r0, [r7, #12]
 80173fa:	f000 f805 	bl	8017408 <ip4_output_if_src>
 80173fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017400:	4618      	mov	r0, r3
 8017402:	3718      	adds	r7, #24
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}

08017408 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b088      	sub	sp, #32
 801740c:	af00      	add	r7, sp, #0
 801740e:	60f8      	str	r0, [r7, #12]
 8017410:	60b9      	str	r1, [r7, #8]
 8017412:	607a      	str	r2, [r7, #4]
 8017414:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	7b9b      	ldrb	r3, [r3, #14]
 801741a:	2b01      	cmp	r3, #1
 801741c:	d006      	beq.n	801742c <ip4_output_if_src+0x24>
 801741e:	4b4b      	ldr	r3, [pc, #300]	; (801754c <ip4_output_if_src+0x144>)
 8017420:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017424:	494a      	ldr	r1, [pc, #296]	; (8017550 <ip4_output_if_src+0x148>)
 8017426:	484b      	ldr	r0, [pc, #300]	; (8017554 <ip4_output_if_src+0x14c>)
 8017428:	f004 fd1e 	bl	801be68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d060      	beq.n	80174f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017432:	2314      	movs	r3, #20
 8017434:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017436:	2114      	movs	r1, #20
 8017438:	68f8      	ldr	r0, [r7, #12]
 801743a:	f7f5 fbbd 	bl	800cbb8 <pbuf_add_header>
 801743e:	4603      	mov	r3, r0
 8017440:	2b00      	cmp	r3, #0
 8017442:	d002      	beq.n	801744a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017444:	f06f 0301 	mvn.w	r3, #1
 8017448:	e07c      	b.n	8017544 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	685b      	ldr	r3, [r3, #4]
 801744e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	895b      	ldrh	r3, [r3, #10]
 8017454:	2b13      	cmp	r3, #19
 8017456:	d806      	bhi.n	8017466 <ip4_output_if_src+0x5e>
 8017458:	4b3c      	ldr	r3, [pc, #240]	; (801754c <ip4_output_if_src+0x144>)
 801745a:	f240 3289 	movw	r2, #905	; 0x389
 801745e:	493e      	ldr	r1, [pc, #248]	; (8017558 <ip4_output_if_src+0x150>)
 8017460:	483c      	ldr	r0, [pc, #240]	; (8017554 <ip4_output_if_src+0x14c>)
 8017462:	f004 fd01 	bl	801be68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017466:	69fb      	ldr	r3, [r7, #28]
 8017468:	78fa      	ldrb	r2, [r7, #3]
 801746a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801746c:	69fb      	ldr	r3, [r7, #28]
 801746e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017472:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681a      	ldr	r2, [r3, #0]
 8017478:	69fb      	ldr	r3, [r7, #28]
 801747a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801747c:	8b7b      	ldrh	r3, [r7, #26]
 801747e:	089b      	lsrs	r3, r3, #2
 8017480:	b29b      	uxth	r3, r3
 8017482:	b2db      	uxtb	r3, r3
 8017484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017488:	b2da      	uxtb	r2, r3
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801748e:	69fb      	ldr	r3, [r7, #28]
 8017490:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017494:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	891b      	ldrh	r3, [r3, #8]
 801749a:	4618      	mov	r0, r3
 801749c:	f7f4 f86e 	bl	800b57c <lwip_htons>
 80174a0:	4603      	mov	r3, r0
 80174a2:	461a      	mov	r2, r3
 80174a4:	69fb      	ldr	r3, [r7, #28]
 80174a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80174a8:	69fb      	ldr	r3, [r7, #28]
 80174aa:	2200      	movs	r2, #0
 80174ac:	719a      	strb	r2, [r3, #6]
 80174ae:	2200      	movs	r2, #0
 80174b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80174b2:	4b2a      	ldr	r3, [pc, #168]	; (801755c <ip4_output_if_src+0x154>)
 80174b4:	881b      	ldrh	r3, [r3, #0]
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7f4 f860 	bl	800b57c <lwip_htons>
 80174bc:	4603      	mov	r3, r0
 80174be:	461a      	mov	r2, r3
 80174c0:	69fb      	ldr	r3, [r7, #28]
 80174c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80174c4:	4b25      	ldr	r3, [pc, #148]	; (801755c <ip4_output_if_src+0x154>)
 80174c6:	881b      	ldrh	r3, [r3, #0]
 80174c8:	3301      	adds	r3, #1
 80174ca:	b29a      	uxth	r2, r3
 80174cc:	4b23      	ldr	r3, [pc, #140]	; (801755c <ip4_output_if_src+0x154>)
 80174ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d104      	bne.n	80174e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80174d6:	4b22      	ldr	r3, [pc, #136]	; (8017560 <ip4_output_if_src+0x158>)
 80174d8:	681a      	ldr	r2, [r3, #0]
 80174da:	69fb      	ldr	r3, [r7, #28]
 80174dc:	60da      	str	r2, [r3, #12]
 80174de:	e003      	b.n	80174e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	681a      	ldr	r2, [r3, #0]
 80174e4:	69fb      	ldr	r3, [r7, #28]
 80174e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80174e8:	69fb      	ldr	r3, [r7, #28]
 80174ea:	2200      	movs	r2, #0
 80174ec:	729a      	strb	r2, [r3, #10]
 80174ee:	2200      	movs	r2, #0
 80174f0:	72da      	strb	r2, [r3, #11]
 80174f2:	e00f      	b.n	8017514 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	895b      	ldrh	r3, [r3, #10]
 80174f8:	2b13      	cmp	r3, #19
 80174fa:	d802      	bhi.n	8017502 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80174fc:	f06f 0301 	mvn.w	r3, #1
 8017500:	e020      	b.n	8017544 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017508:	69fb      	ldr	r3, [r7, #28]
 801750a:	691b      	ldr	r3, [r3, #16]
 801750c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801750e:	f107 0314 	add.w	r3, r7, #20
 8017512:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017518:	2b00      	cmp	r3, #0
 801751a:	d00c      	beq.n	8017536 <ip4_output_if_src+0x12e>
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	891a      	ldrh	r2, [r3, #8]
 8017520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017524:	429a      	cmp	r2, r3
 8017526:	d906      	bls.n	8017536 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017528:	687a      	ldr	r2, [r7, #4]
 801752a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801752c:	68f8      	ldr	r0, [r7, #12]
 801752e:	f000 fe91 	bl	8018254 <ip4_frag>
 8017532:	4603      	mov	r3, r0
 8017534:	e006      	b.n	8017544 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017538:	695b      	ldr	r3, [r3, #20]
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	68f9      	ldr	r1, [r7, #12]
 801753e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017540:	4798      	blx	r3
 8017542:	4603      	mov	r3, r0
}
 8017544:	4618      	mov	r0, r3
 8017546:	3720      	adds	r7, #32
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}
 801754c:	08020738 	.word	0x08020738
 8017550:	0802076c 	.word	0x0802076c
 8017554:	08020778 	.word	0x08020778
 8017558:	080207a0 	.word	0x080207a0
 801755c:	2000852e 	.word	0x2000852e
 8017560:	08020f48 	.word	0x08020f48

08017564 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017564:	b480      	push	{r7}
 8017566:	b085      	sub	sp, #20
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
 801756c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017578:	d002      	beq.n	8017580 <ip4_addr_isbroadcast_u32+0x1c>
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d101      	bne.n	8017584 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017580:	2301      	movs	r3, #1
 8017582:	e02a      	b.n	80175da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017584:	683b      	ldr	r3, [r7, #0]
 8017586:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801758a:	f003 0302 	and.w	r3, r3, #2
 801758e:	2b00      	cmp	r3, #0
 8017590:	d101      	bne.n	8017596 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017592:	2300      	movs	r3, #0
 8017594:	e021      	b.n	80175da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	3304      	adds	r3, #4
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d101      	bne.n	80175a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80175a2:	2300      	movs	r3, #0
 80175a4:	e019      	b.n	80175da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80175a6:	68fa      	ldr	r2, [r7, #12]
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	3304      	adds	r3, #4
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	405a      	eors	r2, r3
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	3308      	adds	r3, #8
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	4013      	ands	r3, r2
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d10d      	bne.n	80175d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80175bc:	683b      	ldr	r3, [r7, #0]
 80175be:	3308      	adds	r3, #8
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	43da      	mvns	r2, r3
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	3308      	adds	r3, #8
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d101      	bne.n	80175d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80175d4:	2301      	movs	r3, #1
 80175d6:	e000      	b.n	80175da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80175d8:	2300      	movs	r3, #0
  }
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3714      	adds	r7, #20
 80175de:	46bd      	mov	sp, r7
 80175e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e4:	4770      	bx	lr

080175e6 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 80175e6:	b580      	push	{r7, lr}
 80175e8:	b084      	sub	sp, #16
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 80175ee:	f107 030c 	add.w	r3, r7, #12
 80175f2:	4619      	mov	r1, r3
 80175f4:	6878      	ldr	r0, [r7, #4]
 80175f6:	f000 f80b 	bl	8017610 <ip4addr_aton>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d001      	beq.n	8017604 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	e001      	b.n	8017608 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8017604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017608:	4618      	mov	r0, r3
 801760a:	3710      	adds	r7, #16
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}

08017610 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8017610:	b5b0      	push	{r4, r5, r7, lr}
 8017612:	b08a      	sub	sp, #40	; 0x28
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801761a:	f107 030c 	add.w	r3, r7, #12
 801761e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8017628:	f004 fbdc 	bl	801bde4 <__locale_ctype_ptr>
 801762c:	4602      	mov	r2, r0
 801762e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017632:	3301      	adds	r3, #1
 8017634:	4413      	add	r3, r2
 8017636:	781b      	ldrb	r3, [r3, #0]
 8017638:	f003 0304 	and.w	r3, r3, #4
 801763c:	2b00      	cmp	r3, #0
 801763e:	d101      	bne.n	8017644 <ip4addr_aton+0x34>
      return 0;
 8017640:	2300      	movs	r3, #0
 8017642:	e10d      	b.n	8017860 <ip4addr_aton+0x250>
    }
    val = 0;
 8017644:	2300      	movs	r3, #0
 8017646:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8017648:	230a      	movs	r3, #10
 801764a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801764e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017652:	2b30      	cmp	r3, #48	; 0x30
 8017654:	d11c      	bne.n	8017690 <ip4addr_aton+0x80>
      c = *++cp;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	3301      	adds	r3, #1
 801765a:	607b      	str	r3, [r7, #4]
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8017664:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017668:	2b78      	cmp	r3, #120	; 0x78
 801766a:	d003      	beq.n	8017674 <ip4addr_aton+0x64>
 801766c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017670:	2b58      	cmp	r3, #88	; 0x58
 8017672:	d10a      	bne.n	801768a <ip4addr_aton+0x7a>
        base = 16;
 8017674:	2310      	movs	r3, #16
 8017676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	3301      	adds	r3, #1
 801767e:	607b      	str	r3, [r7, #4]
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	781b      	ldrb	r3, [r3, #0]
 8017684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017688:	e002      	b.n	8017690 <ip4addr_aton+0x80>
      } else {
        base = 8;
 801768a:	2308      	movs	r3, #8
 801768c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8017690:	f004 fba8 	bl	801bde4 <__locale_ctype_ptr>
 8017694:	4602      	mov	r2, r0
 8017696:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801769a:	3301      	adds	r3, #1
 801769c:	4413      	add	r3, r2
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	f003 0304 	and.w	r3, r3, #4
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d011      	beq.n	80176cc <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 80176a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80176ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176ae:	fb02 f203 	mul.w	r2, r2, r3
 80176b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80176b6:	4413      	add	r3, r2
 80176b8:	3b30      	subs	r3, #48	; 0x30
 80176ba:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	3301      	adds	r3, #1
 80176c0:	607b      	str	r3, [r7, #4]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	781b      	ldrb	r3, [r3, #0]
 80176c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80176ca:	e7e1      	b.n	8017690 <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80176cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80176d0:	2b10      	cmp	r3, #16
 80176d2:	d12b      	bne.n	801772c <ip4addr_aton+0x11c>
 80176d4:	f004 fb86 	bl	801bde4 <__locale_ctype_ptr>
 80176d8:	4602      	mov	r2, r0
 80176da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80176de:	3301      	adds	r3, #1
 80176e0:	4413      	add	r3, r2
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d01f      	beq.n	801772c <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80176ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ee:	011c      	lsls	r4, r3, #4
 80176f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80176f4:	f103 050a 	add.w	r5, r3, #10
 80176f8:	f004 fb74 	bl	801bde4 <__locale_ctype_ptr>
 80176fc:	4602      	mov	r2, r0
 80176fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017702:	3301      	adds	r3, #1
 8017704:	4413      	add	r3, r2
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	f003 0303 	and.w	r3, r3, #3
 801770c:	2b02      	cmp	r3, #2
 801770e:	d101      	bne.n	8017714 <ip4addr_aton+0x104>
 8017710:	2361      	movs	r3, #97	; 0x61
 8017712:	e000      	b.n	8017716 <ip4addr_aton+0x106>
 8017714:	2341      	movs	r3, #65	; 0x41
 8017716:	1aeb      	subs	r3, r5, r3
 8017718:	4323      	orrs	r3, r4
 801771a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	3301      	adds	r3, #1
 8017720:	607b      	str	r3, [r7, #4]
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801772a:	e7b1      	b.n	8017690 <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 801772c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017730:	2b2e      	cmp	r3, #46	; 0x2e
 8017732:	d114      	bne.n	801775e <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8017734:	f107 030c 	add.w	r3, r7, #12
 8017738:	330c      	adds	r3, #12
 801773a:	69fa      	ldr	r2, [r7, #28]
 801773c:	429a      	cmp	r2, r3
 801773e:	d301      	bcc.n	8017744 <ip4addr_aton+0x134>
        return 0;
 8017740:	2300      	movs	r3, #0
 8017742:	e08d      	b.n	8017860 <ip4addr_aton+0x250>
      }
      *pp++ = val;
 8017744:	69fb      	ldr	r3, [r7, #28]
 8017746:	1d1a      	adds	r2, r3, #4
 8017748:	61fa      	str	r2, [r7, #28]
 801774a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801774c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	3301      	adds	r3, #1
 8017752:	607b      	str	r3, [r7, #4]
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801775c:	e764      	b.n	8017628 <ip4addr_aton+0x18>
    } else {
      break;
 801775e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8017760:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017764:	2b00      	cmp	r3, #0
 8017766:	d00d      	beq.n	8017784 <ip4addr_aton+0x174>
 8017768:	f004 fb3c 	bl	801bde4 <__locale_ctype_ptr>
 801776c:	4602      	mov	r2, r0
 801776e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017772:	3301      	adds	r3, #1
 8017774:	4413      	add	r3, r2
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	f003 0308 	and.w	r3, r3, #8
 801777c:	2b00      	cmp	r3, #0
 801777e:	d101      	bne.n	8017784 <ip4addr_aton+0x174>
    return 0;
 8017780:	2300      	movs	r3, #0
 8017782:	e06d      	b.n	8017860 <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8017784:	69fa      	ldr	r2, [r7, #28]
 8017786:	f107 030c 	add.w	r3, r7, #12
 801778a:	1ad3      	subs	r3, r2, r3
 801778c:	109b      	asrs	r3, r3, #2
 801778e:	3301      	adds	r3, #1
 8017790:	2b04      	cmp	r3, #4
 8017792:	d853      	bhi.n	801783c <ip4addr_aton+0x22c>
 8017794:	a201      	add	r2, pc, #4	; (adr r2, 801779c <ip4addr_aton+0x18c>)
 8017796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801779a:	bf00      	nop
 801779c:	080177b1 	.word	0x080177b1
 80177a0:	0801784b 	.word	0x0801784b
 80177a4:	080177b5 	.word	0x080177b5
 80177a8:	080177d7 	.word	0x080177d7
 80177ac:	08017805 	.word	0x08017805

    case 0:
      return 0;       /* initial nondigit */
 80177b0:	2300      	movs	r3, #0
 80177b2:	e055      	b.n	8017860 <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80177b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80177ba:	d301      	bcc.n	80177c0 <ip4addr_aton+0x1b0>
        return 0;
 80177bc:	2300      	movs	r3, #0
 80177be:	e04f      	b.n	8017860 <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	2bff      	cmp	r3, #255	; 0xff
 80177c4:	d901      	bls.n	80177ca <ip4addr_aton+0x1ba>
        return 0;
 80177c6:	2300      	movs	r3, #0
 80177c8:	e04a      	b.n	8017860 <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	061b      	lsls	r3, r3, #24
 80177ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177d0:	4313      	orrs	r3, r2
 80177d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80177d4:	e03a      	b.n	801784c <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80177d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80177dc:	d301      	bcc.n	80177e2 <ip4addr_aton+0x1d2>
        return 0;
 80177de:	2300      	movs	r3, #0
 80177e0:	e03e      	b.n	8017860 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	2bff      	cmp	r3, #255	; 0xff
 80177e6:	d802      	bhi.n	80177ee <ip4addr_aton+0x1de>
 80177e8:	693b      	ldr	r3, [r7, #16]
 80177ea:	2bff      	cmp	r3, #255	; 0xff
 80177ec:	d901      	bls.n	80177f2 <ip4addr_aton+0x1e2>
        return 0;
 80177ee:	2300      	movs	r3, #0
 80177f0:	e036      	b.n	8017860 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	061a      	lsls	r2, r3, #24
 80177f6:	693b      	ldr	r3, [r7, #16]
 80177f8:	041b      	lsls	r3, r3, #16
 80177fa:	4313      	orrs	r3, r2
 80177fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177fe:	4313      	orrs	r3, r2
 8017800:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8017802:	e023      	b.n	801784c <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8017804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017806:	2bff      	cmp	r3, #255	; 0xff
 8017808:	d901      	bls.n	801780e <ip4addr_aton+0x1fe>
        return 0;
 801780a:	2300      	movs	r3, #0
 801780c:	e028      	b.n	8017860 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	2bff      	cmp	r3, #255	; 0xff
 8017812:	d805      	bhi.n	8017820 <ip4addr_aton+0x210>
 8017814:	693b      	ldr	r3, [r7, #16]
 8017816:	2bff      	cmp	r3, #255	; 0xff
 8017818:	d802      	bhi.n	8017820 <ip4addr_aton+0x210>
 801781a:	697b      	ldr	r3, [r7, #20]
 801781c:	2bff      	cmp	r3, #255	; 0xff
 801781e:	d901      	bls.n	8017824 <ip4addr_aton+0x214>
        return 0;
 8017820:	2300      	movs	r3, #0
 8017822:	e01d      	b.n	8017860 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	061a      	lsls	r2, r3, #24
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	041b      	lsls	r3, r3, #16
 801782c:	431a      	orrs	r2, r3
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	021b      	lsls	r3, r3, #8
 8017832:	4313      	orrs	r3, r2
 8017834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017836:	4313      	orrs	r3, r2
 8017838:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801783a:	e007      	b.n	801784c <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 801783c:	4b0a      	ldr	r3, [pc, #40]	; (8017868 <ip4addr_aton+0x258>)
 801783e:	22f9      	movs	r2, #249	; 0xf9
 8017840:	490a      	ldr	r1, [pc, #40]	; (801786c <ip4addr_aton+0x25c>)
 8017842:	480b      	ldr	r0, [pc, #44]	; (8017870 <ip4addr_aton+0x260>)
 8017844:	f004 fb10 	bl	801be68 <iprintf>
      break;
 8017848:	e000      	b.n	801784c <ip4addr_aton+0x23c>
      break;
 801784a:	bf00      	nop
  }
  if (addr) {
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d005      	beq.n	801785e <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8017852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017854:	f7f3 fea7 	bl	800b5a6 <lwip_htonl>
 8017858:	4602      	mov	r2, r0
 801785a:	683b      	ldr	r3, [r7, #0]
 801785c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801785e:	2301      	movs	r3, #1
}
 8017860:	4618      	mov	r0, r3
 8017862:	3728      	adds	r7, #40	; 0x28
 8017864:	46bd      	mov	sp, r7
 8017866:	bdb0      	pop	{r4, r5, r7, pc}
 8017868:	080207d0 	.word	0x080207d0
 801786c:	0802080c 	.word	0x0802080c
 8017870:	08020818 	.word	0x08020818

08017874 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b084      	sub	sp, #16
 8017878:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801787a:	2300      	movs	r3, #0
 801787c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801787e:	4b12      	ldr	r3, [pc, #72]	; (80178c8 <ip_reass_tmr+0x54>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017884:	e018      	b.n	80178b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	7fdb      	ldrb	r3, [r3, #31]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d00b      	beq.n	80178a6 <ip_reass_tmr+0x32>
      r->timer--;
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	7fdb      	ldrb	r3, [r3, #31]
 8017892:	3b01      	subs	r3, #1
 8017894:	b2da      	uxtb	r2, r3
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	60fb      	str	r3, [r7, #12]
 80178a4:	e008      	b.n	80178b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80178b0:	68b9      	ldr	r1, [r7, #8]
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f000 f80a 	bl	80178cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d1e3      	bne.n	8017886 <ip_reass_tmr+0x12>
    }
  }
}
 80178be:	bf00      	nop
 80178c0:	3710      	adds	r7, #16
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd80      	pop	{r7, pc}
 80178c6:	bf00      	nop
 80178c8:	20008530 	.word	0x20008530

080178cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b088      	sub	sp, #32
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80178d6:	2300      	movs	r3, #0
 80178d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80178da:	683a      	ldr	r2, [r7, #0]
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d105      	bne.n	80178ee <ip_reass_free_complete_datagram+0x22>
 80178e2:	4b45      	ldr	r3, [pc, #276]	; (80179f8 <ip_reass_free_complete_datagram+0x12c>)
 80178e4:	22ab      	movs	r2, #171	; 0xab
 80178e6:	4945      	ldr	r1, [pc, #276]	; (80179fc <ip_reass_free_complete_datagram+0x130>)
 80178e8:	4845      	ldr	r0, [pc, #276]	; (8017a00 <ip_reass_free_complete_datagram+0x134>)
 80178ea:	f004 fabd 	bl	801be68 <iprintf>
  if (prev != NULL) {
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d00a      	beq.n	801790a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	687a      	ldr	r2, [r7, #4]
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d005      	beq.n	801790a <ip_reass_free_complete_datagram+0x3e>
 80178fe:	4b3e      	ldr	r3, [pc, #248]	; (80179f8 <ip_reass_free_complete_datagram+0x12c>)
 8017900:	22ad      	movs	r2, #173	; 0xad
 8017902:	4940      	ldr	r1, [pc, #256]	; (8017a04 <ip_reass_free_complete_datagram+0x138>)
 8017904:	483e      	ldr	r0, [pc, #248]	; (8017a00 <ip_reass_free_complete_datagram+0x134>)
 8017906:	f004 faaf 	bl	801be68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	685b      	ldr	r3, [r3, #4]
 801790e:	685b      	ldr	r3, [r3, #4]
 8017910:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	889b      	ldrh	r3, [r3, #4]
 8017916:	b29b      	uxth	r3, r3
 8017918:	2b00      	cmp	r3, #0
 801791a:	d12a      	bne.n	8017972 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801792a:	69bb      	ldr	r3, [r7, #24]
 801792c:	6858      	ldr	r0, [r3, #4]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	3308      	adds	r3, #8
 8017932:	2214      	movs	r2, #20
 8017934:	4619      	mov	r1, r3
 8017936:	f004 fa84 	bl	801be42 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801793a:	2101      	movs	r1, #1
 801793c:	69b8      	ldr	r0, [r7, #24]
 801793e:	f7ff fae5 	bl	8016f0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017942:	69b8      	ldr	r0, [r7, #24]
 8017944:	f7f5 fa8e 	bl	800ce64 <pbuf_clen>
 8017948:	4603      	mov	r3, r0
 801794a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801794c:	8bfa      	ldrh	r2, [r7, #30]
 801794e:	8a7b      	ldrh	r3, [r7, #18]
 8017950:	4413      	add	r3, r2
 8017952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017956:	db05      	blt.n	8017964 <ip_reass_free_complete_datagram+0x98>
 8017958:	4b27      	ldr	r3, [pc, #156]	; (80179f8 <ip_reass_free_complete_datagram+0x12c>)
 801795a:	22bc      	movs	r2, #188	; 0xbc
 801795c:	492a      	ldr	r1, [pc, #168]	; (8017a08 <ip_reass_free_complete_datagram+0x13c>)
 801795e:	4828      	ldr	r0, [pc, #160]	; (8017a00 <ip_reass_free_complete_datagram+0x134>)
 8017960:	f004 fa82 	bl	801be68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017964:	8bfa      	ldrh	r2, [r7, #30]
 8017966:	8a7b      	ldrh	r3, [r7, #18]
 8017968:	4413      	add	r3, r2
 801796a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801796c:	69b8      	ldr	r0, [r7, #24]
 801796e:	f7f5 f9eb 	bl	800cd48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017978:	e01f      	b.n	80179ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801797a:	69bb      	ldr	r3, [r7, #24]
 801797c:	685b      	ldr	r3, [r3, #4]
 801797e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017980:	69bb      	ldr	r3, [r7, #24]
 8017982:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801798a:	68f8      	ldr	r0, [r7, #12]
 801798c:	f7f5 fa6a 	bl	800ce64 <pbuf_clen>
 8017990:	4603      	mov	r3, r0
 8017992:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017994:	8bfa      	ldrh	r2, [r7, #30]
 8017996:	8a7b      	ldrh	r3, [r7, #18]
 8017998:	4413      	add	r3, r2
 801799a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801799e:	db05      	blt.n	80179ac <ip_reass_free_complete_datagram+0xe0>
 80179a0:	4b15      	ldr	r3, [pc, #84]	; (80179f8 <ip_reass_free_complete_datagram+0x12c>)
 80179a2:	22cc      	movs	r2, #204	; 0xcc
 80179a4:	4918      	ldr	r1, [pc, #96]	; (8017a08 <ip_reass_free_complete_datagram+0x13c>)
 80179a6:	4816      	ldr	r0, [pc, #88]	; (8017a00 <ip_reass_free_complete_datagram+0x134>)
 80179a8:	f004 fa5e 	bl	801be68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80179ac:	8bfa      	ldrh	r2, [r7, #30]
 80179ae:	8a7b      	ldrh	r3, [r7, #18]
 80179b0:	4413      	add	r3, r2
 80179b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80179b4:	68f8      	ldr	r0, [r7, #12]
 80179b6:	f7f5 f9c7 	bl	800cd48 <pbuf_free>
  while (p != NULL) {
 80179ba:	69bb      	ldr	r3, [r7, #24]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d1dc      	bne.n	801797a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80179c0:	6839      	ldr	r1, [r7, #0]
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f000 f8c2 	bl	8017b4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80179c8:	4b10      	ldr	r3, [pc, #64]	; (8017a0c <ip_reass_free_complete_datagram+0x140>)
 80179ca:	881b      	ldrh	r3, [r3, #0]
 80179cc:	8bfa      	ldrh	r2, [r7, #30]
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d905      	bls.n	80179de <ip_reass_free_complete_datagram+0x112>
 80179d2:	4b09      	ldr	r3, [pc, #36]	; (80179f8 <ip_reass_free_complete_datagram+0x12c>)
 80179d4:	22d2      	movs	r2, #210	; 0xd2
 80179d6:	490e      	ldr	r1, [pc, #56]	; (8017a10 <ip_reass_free_complete_datagram+0x144>)
 80179d8:	4809      	ldr	r0, [pc, #36]	; (8017a00 <ip_reass_free_complete_datagram+0x134>)
 80179da:	f004 fa45 	bl	801be68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80179de:	4b0b      	ldr	r3, [pc, #44]	; (8017a0c <ip_reass_free_complete_datagram+0x140>)
 80179e0:	881a      	ldrh	r2, [r3, #0]
 80179e2:	8bfb      	ldrh	r3, [r7, #30]
 80179e4:	1ad3      	subs	r3, r2, r3
 80179e6:	b29a      	uxth	r2, r3
 80179e8:	4b08      	ldr	r3, [pc, #32]	; (8017a0c <ip_reass_free_complete_datagram+0x140>)
 80179ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80179ec:	8bfb      	ldrh	r3, [r7, #30]
}
 80179ee:	4618      	mov	r0, r3
 80179f0:	3720      	adds	r7, #32
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}
 80179f6:	bf00      	nop
 80179f8:	08020840 	.word	0x08020840
 80179fc:	0802087c 	.word	0x0802087c
 8017a00:	08020888 	.word	0x08020888
 8017a04:	080208b0 	.word	0x080208b0
 8017a08:	080208c4 	.word	0x080208c4
 8017a0c:	20008534 	.word	0x20008534
 8017a10:	080208e4 	.word	0x080208e4

08017a14 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b08a      	sub	sp, #40	; 0x28
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
 8017a1c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017a1e:	2300      	movs	r3, #0
 8017a20:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017a22:	2300      	movs	r3, #0
 8017a24:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017a26:	2300      	movs	r3, #0
 8017a28:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017a32:	4b28      	ldr	r3, [pc, #160]	; (8017ad4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017a38:	e030      	b.n	8017a9c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3c:	695a      	ldr	r2, [r3, #20]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	68db      	ldr	r3, [r3, #12]
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d10c      	bne.n	8017a60 <ip_reass_remove_oldest_datagram+0x4c>
 8017a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a48:	699a      	ldr	r2, [r3, #24]
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	691b      	ldr	r3, [r3, #16]
 8017a4e:	429a      	cmp	r2, r3
 8017a50:	d106      	bne.n	8017a60 <ip_reass_remove_oldest_datagram+0x4c>
 8017a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a54:	899a      	ldrh	r2, [r3, #12]
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	889b      	ldrh	r3, [r3, #4]
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d014      	beq.n	8017a8a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017a60:	693b      	ldr	r3, [r7, #16]
 8017a62:	3301      	adds	r3, #1
 8017a64:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017a66:	6a3b      	ldr	r3, [r7, #32]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d104      	bne.n	8017a76 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a6e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017a70:	69fb      	ldr	r3, [r7, #28]
 8017a72:	61bb      	str	r3, [r7, #24]
 8017a74:	e009      	b.n	8017a8a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a78:	7fda      	ldrb	r2, [r3, #31]
 8017a7a:	6a3b      	ldr	r3, [r7, #32]
 8017a7c:	7fdb      	ldrb	r3, [r3, #31]
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	d803      	bhi.n	8017a8a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a84:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017a86:	69fb      	ldr	r3, [r7, #28]
 8017a88:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d001      	beq.n	8017a96 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a94:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d1cb      	bne.n	8017a3a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017aa2:	6a3b      	ldr	r3, [r7, #32]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d008      	beq.n	8017aba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017aa8:	69b9      	ldr	r1, [r7, #24]
 8017aaa:	6a38      	ldr	r0, [r7, #32]
 8017aac:	f7ff ff0e 	bl	80178cc <ip_reass_free_complete_datagram>
 8017ab0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017ab2:	697a      	ldr	r2, [r7, #20]
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	4413      	add	r3, r2
 8017ab8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017aba:	697a      	ldr	r2, [r7, #20]
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	da02      	bge.n	8017ac8 <ip_reass_remove_oldest_datagram+0xb4>
 8017ac2:	693b      	ldr	r3, [r7, #16]
 8017ac4:	2b01      	cmp	r3, #1
 8017ac6:	dcac      	bgt.n	8017a22 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017ac8:	697b      	ldr	r3, [r7, #20]
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	3728      	adds	r7, #40	; 0x28
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}
 8017ad2:	bf00      	nop
 8017ad4:	20008530 	.word	0x20008530

08017ad8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b084      	sub	sp, #16
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017ae2:	2004      	movs	r0, #4
 8017ae4:	f7f4 fa00 	bl	800bee8 <memp_malloc>
 8017ae8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d110      	bne.n	8017b12 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017af0:	6839      	ldr	r1, [r7, #0]
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	f7ff ff8e 	bl	8017a14 <ip_reass_remove_oldest_datagram>
 8017af8:	4602      	mov	r2, r0
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	4293      	cmp	r3, r2
 8017afe:	dc03      	bgt.n	8017b08 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017b00:	2004      	movs	r0, #4
 8017b02:	f7f4 f9f1 	bl	800bee8 <memp_malloc>
 8017b06:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d101      	bne.n	8017b12 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	e016      	b.n	8017b40 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017b12:	2220      	movs	r2, #32
 8017b14:	2100      	movs	r1, #0
 8017b16:	68f8      	ldr	r0, [r7, #12]
 8017b18:	f004 f99e 	bl	801be58 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	220f      	movs	r2, #15
 8017b20:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017b22:	4b09      	ldr	r3, [pc, #36]	; (8017b48 <ip_reass_enqueue_new_datagram+0x70>)
 8017b24:	681a      	ldr	r2, [r3, #0]
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017b2a:	4a07      	ldr	r2, [pc, #28]	; (8017b48 <ip_reass_enqueue_new_datagram+0x70>)
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	3308      	adds	r3, #8
 8017b34:	2214      	movs	r2, #20
 8017b36:	6879      	ldr	r1, [r7, #4]
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f004 f982 	bl	801be42 <memcpy>
  return ipr;
 8017b3e:	68fb      	ldr	r3, [r7, #12]
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3710      	adds	r7, #16
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	20008530 	.word	0x20008530

08017b4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
 8017b54:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017b56:	4b10      	ldr	r3, [pc, #64]	; (8017b98 <ip_reass_dequeue_datagram+0x4c>)
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	687a      	ldr	r2, [r7, #4]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d104      	bne.n	8017b6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	4a0c      	ldr	r2, [pc, #48]	; (8017b98 <ip_reass_dequeue_datagram+0x4c>)
 8017b66:	6013      	str	r3, [r2, #0]
 8017b68:	e00d      	b.n	8017b86 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017b6a:	683b      	ldr	r3, [r7, #0]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d106      	bne.n	8017b7e <ip_reass_dequeue_datagram+0x32>
 8017b70:	4b0a      	ldr	r3, [pc, #40]	; (8017b9c <ip_reass_dequeue_datagram+0x50>)
 8017b72:	f240 1245 	movw	r2, #325	; 0x145
 8017b76:	490a      	ldr	r1, [pc, #40]	; (8017ba0 <ip_reass_dequeue_datagram+0x54>)
 8017b78:	480a      	ldr	r0, [pc, #40]	; (8017ba4 <ip_reass_dequeue_datagram+0x58>)
 8017b7a:	f004 f975 	bl	801be68 <iprintf>
    prev->next = ipr->next;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681a      	ldr	r2, [r3, #0]
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017b86:	6879      	ldr	r1, [r7, #4]
 8017b88:	2004      	movs	r0, #4
 8017b8a:	f7f4 f9ff 	bl	800bf8c <memp_free>
}
 8017b8e:	bf00      	nop
 8017b90:	3708      	adds	r7, #8
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}
 8017b96:	bf00      	nop
 8017b98:	20008530 	.word	0x20008530
 8017b9c:	08020840 	.word	0x08020840
 8017ba0:	08020908 	.word	0x08020908
 8017ba4:	08020888 	.word	0x08020888

08017ba8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b08c      	sub	sp, #48	; 0x30
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	60f8      	str	r0, [r7, #12]
 8017bb0:	60b9      	str	r1, [r7, #8]
 8017bb2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017bb8:	2301      	movs	r3, #1
 8017bba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017bbc:	68bb      	ldr	r3, [r7, #8]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017bc2:	69fb      	ldr	r3, [r7, #28]
 8017bc4:	885b      	ldrh	r3, [r3, #2]
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7f3 fcd7 	bl	800b57c <lwip_htons>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017bd2:	69fb      	ldr	r3, [r7, #28]
 8017bd4:	781b      	ldrb	r3, [r3, #0]
 8017bd6:	f003 030f 	and.w	r3, r3, #15
 8017bda:	b2db      	uxtb	r3, r3
 8017bdc:	009b      	lsls	r3, r3, #2
 8017bde:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017be0:	7e7b      	ldrb	r3, [r7, #25]
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	8b7a      	ldrh	r2, [r7, #26]
 8017be6:	429a      	cmp	r2, r3
 8017be8:	d202      	bcs.n	8017bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bea:	f04f 33ff 	mov.w	r3, #4294967295
 8017bee:	e135      	b.n	8017e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017bf0:	7e7b      	ldrb	r3, [r7, #25]
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	8b7a      	ldrh	r2, [r7, #26]
 8017bf6:	1ad3      	subs	r3, r2, r3
 8017bf8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017bfa:	69fb      	ldr	r3, [r7, #28]
 8017bfc:	88db      	ldrh	r3, [r3, #6]
 8017bfe:	b29b      	uxth	r3, r3
 8017c00:	4618      	mov	r0, r3
 8017c02:	f7f3 fcbb 	bl	800b57c <lwip_htons>
 8017c06:	4603      	mov	r3, r0
 8017c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c0c:	b29b      	uxth	r3, r3
 8017c0e:	00db      	lsls	r3, r3, #3
 8017c10:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	685b      	ldr	r3, [r3, #4]
 8017c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	701a      	strb	r2, [r3, #0]
 8017c1e:	2200      	movs	r2, #0
 8017c20:	705a      	strb	r2, [r3, #1]
 8017c22:	2200      	movs	r2, #0
 8017c24:	709a      	strb	r2, [r3, #2]
 8017c26:	2200      	movs	r2, #0
 8017c28:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c2c:	8afa      	ldrh	r2, [r7, #22]
 8017c2e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017c30:	8afa      	ldrh	r2, [r7, #22]
 8017c32:	8b7b      	ldrh	r3, [r7, #26]
 8017c34:	4413      	add	r3, r2
 8017c36:	b29a      	uxth	r2, r3
 8017c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3e:	88db      	ldrh	r3, [r3, #6]
 8017c40:	b29b      	uxth	r3, r3
 8017c42:	8afa      	ldrh	r2, [r7, #22]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d902      	bls.n	8017c4e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c48:	f04f 33ff 	mov.w	r3, #4294967295
 8017c4c:	e106      	b.n	8017e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	685b      	ldr	r3, [r3, #4]
 8017c52:	627b      	str	r3, [r7, #36]	; 0x24
 8017c54:	e068      	b.n	8017d28 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c58:	685b      	ldr	r3, [r3, #4]
 8017c5a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c5e:	889b      	ldrh	r3, [r3, #4]
 8017c60:	b29a      	uxth	r2, r3
 8017c62:	693b      	ldr	r3, [r7, #16]
 8017c64:	889b      	ldrh	r3, [r3, #4]
 8017c66:	b29b      	uxth	r3, r3
 8017c68:	429a      	cmp	r2, r3
 8017c6a:	d235      	bcs.n	8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c70:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d020      	beq.n	8017cba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7a:	889b      	ldrh	r3, [r3, #4]
 8017c7c:	b29a      	uxth	r2, r3
 8017c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c80:	88db      	ldrh	r3, [r3, #6]
 8017c82:	b29b      	uxth	r3, r3
 8017c84:	429a      	cmp	r2, r3
 8017c86:	d307      	bcc.n	8017c98 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c8a:	88db      	ldrh	r3, [r3, #6]
 8017c8c:	b29a      	uxth	r2, r3
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	889b      	ldrh	r3, [r3, #4]
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d902      	bls.n	8017c9e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c98:	f04f 33ff 	mov.w	r3, #4294967295
 8017c9c:	e0de      	b.n	8017e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca0:	68ba      	ldr	r2, [r7, #8]
 8017ca2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca6:	88db      	ldrh	r3, [r3, #6]
 8017ca8:	b29a      	uxth	r2, r3
 8017caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cac:	889b      	ldrh	r3, [r3, #4]
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	d03d      	beq.n	8017d30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017cb8:	e03a      	b.n	8017d30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cbc:	88db      	ldrh	r3, [r3, #6]
 8017cbe:	b29a      	uxth	r2, r3
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	889b      	ldrh	r3, [r3, #4]
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d902      	bls.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cca:	f04f 33ff 	mov.w	r3, #4294967295
 8017cce:	e0c5      	b.n	8017e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	68ba      	ldr	r2, [r7, #8]
 8017cd4:	605a      	str	r2, [r3, #4]
      break;
 8017cd6:	e02b      	b.n	8017d30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cda:	889b      	ldrh	r3, [r3, #4]
 8017cdc:	b29a      	uxth	r2, r3
 8017cde:	693b      	ldr	r3, [r7, #16]
 8017ce0:	889b      	ldrh	r3, [r3, #4]
 8017ce2:	b29b      	uxth	r3, r3
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d102      	bne.n	8017cee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8017cec:	e0b6      	b.n	8017e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf0:	889b      	ldrh	r3, [r3, #4]
 8017cf2:	b29a      	uxth	r2, r3
 8017cf4:	693b      	ldr	r3, [r7, #16]
 8017cf6:	88db      	ldrh	r3, [r3, #6]
 8017cf8:	b29b      	uxth	r3, r3
 8017cfa:	429a      	cmp	r2, r3
 8017cfc:	d202      	bcs.n	8017d04 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8017d02:	e0ab      	b.n	8017e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d009      	beq.n	8017d1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d0c:	88db      	ldrh	r3, [r3, #6]
 8017d0e:	b29a      	uxth	r2, r3
 8017d10:	693b      	ldr	r3, [r7, #16]
 8017d12:	889b      	ldrh	r3, [r3, #4]
 8017d14:	b29b      	uxth	r3, r3
 8017d16:	429a      	cmp	r2, r3
 8017d18:	d001      	beq.n	8017d1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017d1e:	693b      	ldr	r3, [r7, #16]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017d24:	693b      	ldr	r3, [r7, #16]
 8017d26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d193      	bne.n	8017c56 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017d2e:	e000      	b.n	8017d32 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017d30:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d12d      	bne.n	8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d01c      	beq.n	8017d78 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d40:	88db      	ldrh	r3, [r3, #6]
 8017d42:	b29a      	uxth	r2, r3
 8017d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d46:	889b      	ldrh	r3, [r3, #4]
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	d906      	bls.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017d4e:	4b45      	ldr	r3, [pc, #276]	; (8017e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d50:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017d54:	4944      	ldr	r1, [pc, #272]	; (8017e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017d56:	4845      	ldr	r0, [pc, #276]	; (8017e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d58:	f004 f886 	bl	801be68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d5e:	68ba      	ldr	r2, [r7, #8]
 8017d60:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d64:	88db      	ldrh	r3, [r3, #6]
 8017d66:	b29a      	uxth	r2, r3
 8017d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6a:	889b      	ldrh	r3, [r3, #4]
 8017d6c:	b29b      	uxth	r3, r3
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d010      	beq.n	8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017d72:	2300      	movs	r3, #0
 8017d74:	623b      	str	r3, [r7, #32]
 8017d76:	e00d      	b.n	8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	685b      	ldr	r3, [r3, #4]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d006      	beq.n	8017d8e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017d80:	4b38      	ldr	r3, [pc, #224]	; (8017e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d82:	f240 12bf 	movw	r2, #447	; 0x1bf
 8017d86:	493a      	ldr	r1, [pc, #232]	; (8017e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017d88:	4838      	ldr	r0, [pc, #224]	; (8017e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d8a:	f004 f86d 	bl	801be68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	68ba      	ldr	r2, [r7, #8]
 8017d92:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d105      	bne.n	8017da6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	7f9b      	ldrb	r3, [r3, #30]
 8017d9e:	f003 0301 	and.w	r3, r3, #1
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d059      	beq.n	8017e5a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017da6:	6a3b      	ldr	r3, [r7, #32]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d04f      	beq.n	8017e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	685b      	ldr	r3, [r3, #4]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d006      	beq.n	8017dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	685b      	ldr	r3, [r3, #4]
 8017dba:	889b      	ldrh	r3, [r3, #4]
 8017dbc:	b29b      	uxth	r3, r3
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d002      	beq.n	8017dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	623b      	str	r3, [r7, #32]
 8017dc6:	e041      	b.n	8017e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017dd2:	e012      	b.n	8017dfa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ddc:	88db      	ldrh	r3, [r3, #6]
 8017dde:	b29a      	uxth	r2, r3
 8017de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de2:	889b      	ldrh	r3, [r3, #4]
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d002      	beq.n	8017df0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017dea:	2300      	movs	r3, #0
 8017dec:	623b      	str	r3, [r7, #32]
            break;
 8017dee:	e007      	b.n	8017e00 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d1e9      	bne.n	8017dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017e00:	6a3b      	ldr	r3, [r7, #32]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d022      	beq.n	8017e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	685b      	ldr	r3, [r3, #4]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d106      	bne.n	8017e1c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017e0e:	4b15      	ldr	r3, [pc, #84]	; (8017e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e10:	f240 12df 	movw	r2, #479	; 0x1df
 8017e14:	4917      	ldr	r1, [pc, #92]	; (8017e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017e16:	4815      	ldr	r0, [pc, #84]	; (8017e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e18:	f004 f826 	bl	801be68 <iprintf>
          LWIP_ASSERT("sanity check",
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	685b      	ldr	r3, [r3, #4]
 8017e20:	685b      	ldr	r3, [r3, #4]
 8017e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d106      	bne.n	8017e36 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017e28:	4b0e      	ldr	r3, [pc, #56]	; (8017e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e2a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017e2e:	4911      	ldr	r1, [pc, #68]	; (8017e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017e30:	480e      	ldr	r0, [pc, #56]	; (8017e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e32:	f004 f819 	bl	801be68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d006      	beq.n	8017e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017e3e:	4b09      	ldr	r3, [pc, #36]	; (8017e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e40:	f240 12e3 	movw	r2, #483	; 0x1e3
 8017e44:	490c      	ldr	r1, [pc, #48]	; (8017e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017e46:	4809      	ldr	r0, [pc, #36]	; (8017e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e48:	f004 f80e 	bl	801be68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017e4c:	6a3b      	ldr	r3, [r7, #32]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	bf14      	ite	ne
 8017e52:	2301      	movne	r3, #1
 8017e54:	2300      	moveq	r3, #0
 8017e56:	b2db      	uxtb	r3, r3
 8017e58:	e000      	b.n	8017e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017e5a:	2300      	movs	r3, #0
}
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	3730      	adds	r7, #48	; 0x30
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bd80      	pop	{r7, pc}
 8017e64:	08020840 	.word	0x08020840
 8017e68:	08020924 	.word	0x08020924
 8017e6c:	08020888 	.word	0x08020888
 8017e70:	08020944 	.word	0x08020944
 8017e74:	0802097c 	.word	0x0802097c
 8017e78:	0802098c 	.word	0x0802098c

08017e7c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b08e      	sub	sp, #56	; 0x38
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	685b      	ldr	r3, [r3, #4]
 8017e88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e8c:	781b      	ldrb	r3, [r3, #0]
 8017e8e:	f003 030f 	and.w	r3, r3, #15
 8017e92:	b2db      	uxtb	r3, r3
 8017e94:	009b      	lsls	r3, r3, #2
 8017e96:	b2db      	uxtb	r3, r3
 8017e98:	2b14      	cmp	r3, #20
 8017e9a:	f040 8167 	bne.w	801816c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea0:	88db      	ldrh	r3, [r3, #6]
 8017ea2:	b29b      	uxth	r3, r3
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7f3 fb69 	bl	800b57c <lwip_htons>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	00db      	lsls	r3, r3, #3
 8017eb4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb8:	885b      	ldrh	r3, [r3, #2]
 8017eba:	b29b      	uxth	r3, r3
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f7f3 fb5d 	bl	800b57c <lwip_htons>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec8:	781b      	ldrb	r3, [r3, #0]
 8017eca:	f003 030f 	and.w	r3, r3, #15
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	009b      	lsls	r3, r3, #2
 8017ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017eda:	b29b      	uxth	r3, r3
 8017edc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	f0c0 8146 	bcc.w	8018170 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017ee8:	b29b      	uxth	r3, r3
 8017eea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017eec:	1ad3      	subs	r3, r2, r3
 8017eee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017ef0:	6878      	ldr	r0, [r7, #4]
 8017ef2:	f7f4 ffb7 	bl	800ce64 <pbuf_clen>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017efa:	4ba3      	ldr	r3, [pc, #652]	; (8018188 <ip4_reass+0x30c>)
 8017efc:	881b      	ldrh	r3, [r3, #0]
 8017efe:	461a      	mov	r2, r3
 8017f00:	8c3b      	ldrh	r3, [r7, #32]
 8017f02:	4413      	add	r3, r2
 8017f04:	2b0a      	cmp	r3, #10
 8017f06:	dd10      	ble.n	8017f2a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017f08:	8c3b      	ldrh	r3, [r7, #32]
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f0e:	f7ff fd81 	bl	8017a14 <ip_reass_remove_oldest_datagram>
 8017f12:	4603      	mov	r3, r0
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	f000 812d 	beq.w	8018174 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017f1a:	4b9b      	ldr	r3, [pc, #620]	; (8018188 <ip4_reass+0x30c>)
 8017f1c:	881b      	ldrh	r3, [r3, #0]
 8017f1e:	461a      	mov	r2, r3
 8017f20:	8c3b      	ldrh	r3, [r7, #32]
 8017f22:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017f24:	2b0a      	cmp	r3, #10
 8017f26:	f300 8125 	bgt.w	8018174 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017f2a:	4b98      	ldr	r3, [pc, #608]	; (801818c <ip4_reass+0x310>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8017f30:	e015      	b.n	8017f5e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f34:	695a      	ldr	r2, [r3, #20]
 8017f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f38:	68db      	ldr	r3, [r3, #12]
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	d10c      	bne.n	8017f58 <ip4_reass+0xdc>
 8017f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f40:	699a      	ldr	r2, [r3, #24]
 8017f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f44:	691b      	ldr	r3, [r3, #16]
 8017f46:	429a      	cmp	r2, r3
 8017f48:	d106      	bne.n	8017f58 <ip4_reass+0xdc>
 8017f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f4c:	899a      	ldrh	r2, [r3, #12]
 8017f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f50:	889b      	ldrh	r3, [r3, #4]
 8017f52:	b29b      	uxth	r3, r3
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d006      	beq.n	8017f66 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8017f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d1e6      	bne.n	8017f32 <ip4_reass+0xb6>
 8017f64:	e000      	b.n	8017f68 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017f66:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d109      	bne.n	8017f82 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017f6e:	8c3b      	ldrh	r3, [r7, #32]
 8017f70:	4619      	mov	r1, r3
 8017f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f74:	f7ff fdb0 	bl	8017ad8 <ip_reass_enqueue_new_datagram>
 8017f78:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d11c      	bne.n	8017fba <ip4_reass+0x13e>
      goto nullreturn;
 8017f80:	e0f9      	b.n	8018176 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f84:	88db      	ldrh	r3, [r3, #6]
 8017f86:	b29b      	uxth	r3, r3
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7f3 faf7 	bl	800b57c <lwip_htons>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d110      	bne.n	8017fba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f9a:	89db      	ldrh	r3, [r3, #14]
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7f3 faed 	bl	800b57c <lwip_htons>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d006      	beq.n	8017fba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fae:	3308      	adds	r3, #8
 8017fb0:	2214      	movs	r2, #20
 8017fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f003 ff44 	bl	801be42 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fbc:	88db      	ldrh	r3, [r3, #6]
 8017fbe:	b29b      	uxth	r3, r3
 8017fc0:	f003 0320 	and.w	r3, r3, #32
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	bf0c      	ite	eq
 8017fc8:	2301      	moveq	r3, #1
 8017fca:	2300      	movne	r3, #0
 8017fcc:	b2db      	uxtb	r3, r3
 8017fce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017fd0:	69fb      	ldr	r3, [r7, #28]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d00e      	beq.n	8017ff4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017fd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017fda:	4413      	add	r3, r2
 8017fdc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017fde:	8b7a      	ldrh	r2, [r7, #26]
 8017fe0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	f0c0 80a0 	bcc.w	8018128 <ip4_reass+0x2ac>
 8017fe8:	8b7b      	ldrh	r3, [r7, #26]
 8017fea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	f200 809a 	bhi.w	8018128 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017ff4:	69fa      	ldr	r2, [r7, #28]
 8017ff6:	6879      	ldr	r1, [r7, #4]
 8017ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ffa:	f7ff fdd5 	bl	8017ba8 <ip_reass_chain_frag_into_datagram_and_validate>
 8017ffe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018000:	697b      	ldr	r3, [r7, #20]
 8018002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018006:	f000 8091 	beq.w	801812c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801800a:	4b5f      	ldr	r3, [pc, #380]	; (8018188 <ip4_reass+0x30c>)
 801800c:	881a      	ldrh	r2, [r3, #0]
 801800e:	8c3b      	ldrh	r3, [r7, #32]
 8018010:	4413      	add	r3, r2
 8018012:	b29a      	uxth	r2, r3
 8018014:	4b5c      	ldr	r3, [pc, #368]	; (8018188 <ip4_reass+0x30c>)
 8018016:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018018:	69fb      	ldr	r3, [r7, #28]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d00d      	beq.n	801803a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801801e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018022:	4413      	add	r3, r2
 8018024:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018028:	8a7a      	ldrh	r2, [r7, #18]
 801802a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801802e:	7f9b      	ldrb	r3, [r3, #30]
 8018030:	f043 0301 	orr.w	r3, r3, #1
 8018034:	b2da      	uxtb	r2, r3
 8018036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018038:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	2b01      	cmp	r3, #1
 801803e:	d171      	bne.n	8018124 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018042:	8b9b      	ldrh	r3, [r3, #28]
 8018044:	3314      	adds	r3, #20
 8018046:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801804a:	685b      	ldr	r3, [r3, #4]
 801804c:	685b      	ldr	r3, [r3, #4]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018054:	685b      	ldr	r3, [r3, #4]
 8018056:	685b      	ldr	r3, [r3, #4]
 8018058:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801805c:	3308      	adds	r3, #8
 801805e:	2214      	movs	r2, #20
 8018060:	4619      	mov	r1, r3
 8018062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018064:	f003 feed 	bl	801be42 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018068:	8a3b      	ldrh	r3, [r7, #16]
 801806a:	4618      	mov	r0, r3
 801806c:	f7f3 fa86 	bl	800b57c <lwip_htons>
 8018070:	4603      	mov	r3, r0
 8018072:	461a      	mov	r2, r3
 8018074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018076:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801807a:	2200      	movs	r2, #0
 801807c:	719a      	strb	r2, [r3, #6]
 801807e:	2200      	movs	r2, #0
 8018080:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018084:	2200      	movs	r2, #0
 8018086:	729a      	strb	r2, [r3, #10]
 8018088:	2200      	movs	r2, #0
 801808a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018092:	e00d      	b.n	80180b0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018096:	685b      	ldr	r3, [r3, #4]
 8018098:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801809a:	2114      	movs	r1, #20
 801809c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801809e:	f7f4 fd9b 	bl	800cbd8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80180a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80180a4:	6878      	ldr	r0, [r7, #4]
 80180a6:	f7f4 ff1d 	bl	800cee4 <pbuf_cat>
      r = iprh->next_pbuf;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80180b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d1ee      	bne.n	8018094 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80180b6:	4b35      	ldr	r3, [pc, #212]	; (801818c <ip4_reass+0x310>)
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180bc:	429a      	cmp	r2, r3
 80180be:	d102      	bne.n	80180c6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80180c0:	2300      	movs	r3, #0
 80180c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180c4:	e010      	b.n	80180e8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80180c6:	4b31      	ldr	r3, [pc, #196]	; (801818c <ip4_reass+0x310>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180cc:	e007      	b.n	80180de <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80180ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d006      	beq.n	80180e6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80180d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d1f4      	bne.n	80180ce <ip4_reass+0x252>
 80180e4:	e000      	b.n	80180e8 <ip4_reass+0x26c>
          break;
 80180e6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80180e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80180ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180ec:	f7ff fd2e 	bl	8017b4c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80180f0:	6878      	ldr	r0, [r7, #4]
 80180f2:	f7f4 feb7 	bl	800ce64 <pbuf_clen>
 80180f6:	4603      	mov	r3, r0
 80180f8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80180fa:	4b23      	ldr	r3, [pc, #140]	; (8018188 <ip4_reass+0x30c>)
 80180fc:	881b      	ldrh	r3, [r3, #0]
 80180fe:	8c3a      	ldrh	r2, [r7, #32]
 8018100:	429a      	cmp	r2, r3
 8018102:	d906      	bls.n	8018112 <ip4_reass+0x296>
 8018104:	4b22      	ldr	r3, [pc, #136]	; (8018190 <ip4_reass+0x314>)
 8018106:	f240 229b 	movw	r2, #667	; 0x29b
 801810a:	4922      	ldr	r1, [pc, #136]	; (8018194 <ip4_reass+0x318>)
 801810c:	4822      	ldr	r0, [pc, #136]	; (8018198 <ip4_reass+0x31c>)
 801810e:	f003 feab 	bl	801be68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018112:	4b1d      	ldr	r3, [pc, #116]	; (8018188 <ip4_reass+0x30c>)
 8018114:	881a      	ldrh	r2, [r3, #0]
 8018116:	8c3b      	ldrh	r3, [r7, #32]
 8018118:	1ad3      	subs	r3, r2, r3
 801811a:	b29a      	uxth	r2, r3
 801811c:	4b1a      	ldr	r3, [pc, #104]	; (8018188 <ip4_reass+0x30c>)
 801811e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	e02c      	b.n	801817e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018124:	2300      	movs	r3, #0
 8018126:	e02a      	b.n	801817e <ip4_reass+0x302>

nullreturn_ipr:
 8018128:	bf00      	nop
 801812a:	e000      	b.n	801812e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801812c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018130:	2b00      	cmp	r3, #0
 8018132:	d106      	bne.n	8018142 <ip4_reass+0x2c6>
 8018134:	4b16      	ldr	r3, [pc, #88]	; (8018190 <ip4_reass+0x314>)
 8018136:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801813a:	4918      	ldr	r1, [pc, #96]	; (801819c <ip4_reass+0x320>)
 801813c:	4816      	ldr	r0, [pc, #88]	; (8018198 <ip4_reass+0x31c>)
 801813e:	f003 fe93 	bl	801be68 <iprintf>
  if (ipr->p == NULL) {
 8018142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018144:	685b      	ldr	r3, [r3, #4]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d114      	bne.n	8018174 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801814a:	4b10      	ldr	r3, [pc, #64]	; (801818c <ip4_reass+0x310>)
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018150:	429a      	cmp	r2, r3
 8018152:	d006      	beq.n	8018162 <ip4_reass+0x2e6>
 8018154:	4b0e      	ldr	r3, [pc, #56]	; (8018190 <ip4_reass+0x314>)
 8018156:	f240 22ab 	movw	r2, #683	; 0x2ab
 801815a:	4911      	ldr	r1, [pc, #68]	; (80181a0 <ip4_reass+0x324>)
 801815c:	480e      	ldr	r0, [pc, #56]	; (8018198 <ip4_reass+0x31c>)
 801815e:	f003 fe83 	bl	801be68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018162:	2100      	movs	r1, #0
 8018164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018166:	f7ff fcf1 	bl	8017b4c <ip_reass_dequeue_datagram>
 801816a:	e004      	b.n	8018176 <ip4_reass+0x2fa>
    goto nullreturn;
 801816c:	bf00      	nop
 801816e:	e002      	b.n	8018176 <ip4_reass+0x2fa>
    goto nullreturn;
 8018170:	bf00      	nop
 8018172:	e000      	b.n	8018176 <ip4_reass+0x2fa>
  }

nullreturn:
 8018174:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f7f4 fde6 	bl	800cd48 <pbuf_free>
  return NULL;
 801817c:	2300      	movs	r3, #0
}
 801817e:	4618      	mov	r0, r3
 8018180:	3738      	adds	r7, #56	; 0x38
 8018182:	46bd      	mov	sp, r7
 8018184:	bd80      	pop	{r7, pc}
 8018186:	bf00      	nop
 8018188:	20008534 	.word	0x20008534
 801818c:	20008530 	.word	0x20008530
 8018190:	08020840 	.word	0x08020840
 8018194:	080209b0 	.word	0x080209b0
 8018198:	08020888 	.word	0x08020888
 801819c:	080209cc 	.word	0x080209cc
 80181a0:	080209d8 	.word	0x080209d8

080181a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80181a8:	2005      	movs	r0, #5
 80181aa:	f7f3 fe9d 	bl	800bee8 <memp_malloc>
 80181ae:	4603      	mov	r3, r0
}
 80181b0:	4618      	mov	r0, r3
 80181b2:	bd80      	pop	{r7, pc}

080181b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b082      	sub	sp, #8
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d106      	bne.n	80181d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80181c2:	4b07      	ldr	r3, [pc, #28]	; (80181e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80181c4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80181c8:	4906      	ldr	r1, [pc, #24]	; (80181e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80181ca:	4807      	ldr	r0, [pc, #28]	; (80181e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80181cc:	f003 fe4c 	bl	801be68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80181d0:	6879      	ldr	r1, [r7, #4]
 80181d2:	2005      	movs	r0, #5
 80181d4:	f7f3 feda 	bl	800bf8c <memp_free>
}
 80181d8:	bf00      	nop
 80181da:	3708      	adds	r7, #8
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}
 80181e0:	08020840 	.word	0x08020840
 80181e4:	080209f8 	.word	0x080209f8
 80181e8:	08020888 	.word	0x08020888

080181ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b084      	sub	sp, #16
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d106      	bne.n	801820c <ipfrag_free_pbuf_custom+0x20>
 80181fe:	4b11      	ldr	r3, [pc, #68]	; (8018244 <ipfrag_free_pbuf_custom+0x58>)
 8018200:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018204:	4910      	ldr	r1, [pc, #64]	; (8018248 <ipfrag_free_pbuf_custom+0x5c>)
 8018206:	4811      	ldr	r0, [pc, #68]	; (801824c <ipfrag_free_pbuf_custom+0x60>)
 8018208:	f003 fe2e 	bl	801be68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801820c:	68fa      	ldr	r2, [r7, #12]
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	429a      	cmp	r2, r3
 8018212:	d006      	beq.n	8018222 <ipfrag_free_pbuf_custom+0x36>
 8018214:	4b0b      	ldr	r3, [pc, #44]	; (8018244 <ipfrag_free_pbuf_custom+0x58>)
 8018216:	f240 22cf 	movw	r2, #719	; 0x2cf
 801821a:	490d      	ldr	r1, [pc, #52]	; (8018250 <ipfrag_free_pbuf_custom+0x64>)
 801821c:	480b      	ldr	r0, [pc, #44]	; (801824c <ipfrag_free_pbuf_custom+0x60>)
 801821e:	f003 fe23 	bl	801be68 <iprintf>
  if (pcr->original != NULL) {
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	695b      	ldr	r3, [r3, #20]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d004      	beq.n	8018234 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	695b      	ldr	r3, [r3, #20]
 801822e:	4618      	mov	r0, r3
 8018230:	f7f4 fd8a 	bl	800cd48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018234:	68f8      	ldr	r0, [r7, #12]
 8018236:	f7ff ffbd 	bl	80181b4 <ip_frag_free_pbuf_custom_ref>
}
 801823a:	bf00      	nop
 801823c:	3710      	adds	r7, #16
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	08020840 	.word	0x08020840
 8018248:	08020a04 	.word	0x08020a04
 801824c:	08020888 	.word	0x08020888
 8018250:	08020a10 	.word	0x08020a10

08018254 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b094      	sub	sp, #80	; 0x50
 8018258:	af02      	add	r7, sp, #8
 801825a:	60f8      	str	r0, [r7, #12]
 801825c:	60b9      	str	r1, [r7, #8]
 801825e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018260:	2300      	movs	r3, #0
 8018262:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018266:	68bb      	ldr	r3, [r7, #8]
 8018268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801826a:	3b14      	subs	r3, #20
 801826c:	2b00      	cmp	r3, #0
 801826e:	da00      	bge.n	8018272 <ip4_frag+0x1e>
 8018270:	3307      	adds	r3, #7
 8018272:	10db      	asrs	r3, r3, #3
 8018274:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018276:	2314      	movs	r3, #20
 8018278:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	685b      	ldr	r3, [r3, #4]
 801827e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018282:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	f003 030f 	and.w	r3, r3, #15
 801828c:	b2db      	uxtb	r3, r3
 801828e:	009b      	lsls	r3, r3, #2
 8018290:	b2db      	uxtb	r3, r3
 8018292:	2b14      	cmp	r3, #20
 8018294:	d002      	beq.n	801829c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018296:	f06f 0305 	mvn.w	r3, #5
 801829a:	e10f      	b.n	80184bc <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	895b      	ldrh	r3, [r3, #10]
 80182a0:	2b13      	cmp	r3, #19
 80182a2:	d809      	bhi.n	80182b8 <ip4_frag+0x64>
 80182a4:	4b87      	ldr	r3, [pc, #540]	; (80184c4 <ip4_frag+0x270>)
 80182a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80182aa:	4987      	ldr	r1, [pc, #540]	; (80184c8 <ip4_frag+0x274>)
 80182ac:	4887      	ldr	r0, [pc, #540]	; (80184cc <ip4_frag+0x278>)
 80182ae:	f003 fddb 	bl	801be68 <iprintf>
 80182b2:	f06f 0305 	mvn.w	r3, #5
 80182b6:	e101      	b.n	80184bc <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80182b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ba:	88db      	ldrh	r3, [r3, #6]
 80182bc:	b29b      	uxth	r3, r3
 80182be:	4618      	mov	r0, r3
 80182c0:	f7f3 f95c 	bl	800b57c <lwip_htons>
 80182c4:	4603      	mov	r3, r0
 80182c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80182c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80182ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80182d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80182d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80182d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	891b      	ldrh	r3, [r3, #8]
 80182de:	3b14      	subs	r3, #20
 80182e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80182e4:	e0e0      	b.n	80184a8 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80182e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80182e8:	00db      	lsls	r3, r3, #3
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80182f0:	4293      	cmp	r3, r2
 80182f2:	bf28      	it	cs
 80182f4:	4613      	movcs	r3, r2
 80182f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80182f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80182fc:	2114      	movs	r1, #20
 80182fe:	200e      	movs	r0, #14
 8018300:	f7f4 fa10 	bl	800c724 <pbuf_alloc>
 8018304:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018308:	2b00      	cmp	r3, #0
 801830a:	f000 80d4 	beq.w	80184b6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018310:	895b      	ldrh	r3, [r3, #10]
 8018312:	2b13      	cmp	r3, #19
 8018314:	d806      	bhi.n	8018324 <ip4_frag+0xd0>
 8018316:	4b6b      	ldr	r3, [pc, #428]	; (80184c4 <ip4_frag+0x270>)
 8018318:	f240 3225 	movw	r2, #805	; 0x325
 801831c:	496c      	ldr	r1, [pc, #432]	; (80184d0 <ip4_frag+0x27c>)
 801831e:	486b      	ldr	r0, [pc, #428]	; (80184cc <ip4_frag+0x278>)
 8018320:	f003 fda2 	bl	801be68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018326:	685b      	ldr	r3, [r3, #4]
 8018328:	2214      	movs	r2, #20
 801832a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801832c:	4618      	mov	r0, r3
 801832e:	f003 fd88 	bl	801be42 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018338:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801833a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801833e:	e064      	b.n	801840a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	895a      	ldrh	r2, [r3, #10]
 8018344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018346:	1ad3      	subs	r3, r2, r3
 8018348:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	895b      	ldrh	r3, [r3, #10]
 801834e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018350:	429a      	cmp	r2, r3
 8018352:	d906      	bls.n	8018362 <ip4_frag+0x10e>
 8018354:	4b5b      	ldr	r3, [pc, #364]	; (80184c4 <ip4_frag+0x270>)
 8018356:	f240 322d 	movw	r2, #813	; 0x32d
 801835a:	495e      	ldr	r1, [pc, #376]	; (80184d4 <ip4_frag+0x280>)
 801835c:	485b      	ldr	r0, [pc, #364]	; (80184cc <ip4_frag+0x278>)
 801835e:	f003 fd83 	bl	801be68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018362:	8bfa      	ldrh	r2, [r7, #30]
 8018364:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018368:	4293      	cmp	r3, r2
 801836a:	bf28      	it	cs
 801836c:	4613      	movcs	r3, r2
 801836e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018372:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018376:	2b00      	cmp	r3, #0
 8018378:	d105      	bne.n	8018386 <ip4_frag+0x132>
        poff = 0;
 801837a:	2300      	movs	r3, #0
 801837c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	60fb      	str	r3, [r7, #12]
        continue;
 8018384:	e041      	b.n	801840a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018386:	f7ff ff0d 	bl	80181a4 <ip_frag_alloc_pbuf_custom_ref>
 801838a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801838c:	69bb      	ldr	r3, [r7, #24]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d103      	bne.n	801839a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018394:	f7f4 fcd8 	bl	800cd48 <pbuf_free>
        goto memerr;
 8018398:	e08e      	b.n	80184b8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801839a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80183a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80183a2:	4413      	add	r3, r2
 80183a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80183a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80183ac:	9201      	str	r2, [sp, #4]
 80183ae:	9300      	str	r3, [sp, #0]
 80183b0:	4603      	mov	r3, r0
 80183b2:	2241      	movs	r2, #65	; 0x41
 80183b4:	2000      	movs	r0, #0
 80183b6:	f7f4 fadb 	bl	800c970 <pbuf_alloced_custom>
 80183ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d106      	bne.n	80183d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80183c2:	69b8      	ldr	r0, [r7, #24]
 80183c4:	f7ff fef6 	bl	80181b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80183c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183ca:	f7f4 fcbd 	bl	800cd48 <pbuf_free>
        goto memerr;
 80183ce:	e073      	b.n	80184b8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80183d0:	68f8      	ldr	r0, [r7, #12]
 80183d2:	f7f4 fd5f 	bl	800ce94 <pbuf_ref>
      pcr->original = p;
 80183d6:	69bb      	ldr	r3, [r7, #24]
 80183d8:	68fa      	ldr	r2, [r7, #12]
 80183da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80183dc:	69bb      	ldr	r3, [r7, #24]
 80183de:	4a3e      	ldr	r2, [pc, #248]	; (80184d8 <ip4_frag+0x284>)
 80183e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80183e2:	6979      	ldr	r1, [r7, #20]
 80183e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183e6:	f7f4 fd7d 	bl	800cee4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80183ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80183ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80183f2:	1ad3      	subs	r3, r2, r3
 80183f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80183f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d004      	beq.n	801840a <ip4_frag+0x1b6>
        poff = 0;
 8018400:	2300      	movs	r3, #0
 8018402:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801840a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801840e:	2b00      	cmp	r3, #0
 8018410:	d196      	bne.n	8018340 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018412:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018414:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018418:	4413      	add	r3, r2
 801841a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801841c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018424:	3b14      	subs	r3, #20
 8018426:	429a      	cmp	r2, r3
 8018428:	bfd4      	ite	le
 801842a:	2301      	movle	r3, #1
 801842c:	2300      	movgt	r3, #0
 801842e:	b2db      	uxtb	r3, r3
 8018430:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018432:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018436:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801843a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801843c:	6a3b      	ldr	r3, [r7, #32]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d002      	beq.n	8018448 <ip4_frag+0x1f4>
 8018442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018444:	2b00      	cmp	r3, #0
 8018446:	d003      	beq.n	8018450 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018448:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801844a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801844e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018450:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018452:	4618      	mov	r0, r3
 8018454:	f7f3 f892 	bl	800b57c <lwip_htons>
 8018458:	4603      	mov	r3, r0
 801845a:	461a      	mov	r2, r3
 801845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801845e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018460:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018462:	3314      	adds	r3, #20
 8018464:	b29b      	uxth	r3, r3
 8018466:	4618      	mov	r0, r3
 8018468:	f7f3 f888 	bl	800b57c <lwip_htons>
 801846c:	4603      	mov	r3, r0
 801846e:	461a      	mov	r2, r3
 8018470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018472:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018476:	2200      	movs	r2, #0
 8018478:	729a      	strb	r2, [r3, #10]
 801847a:	2200      	movs	r2, #0
 801847c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801847e:	68bb      	ldr	r3, [r7, #8]
 8018480:	695b      	ldr	r3, [r3, #20]
 8018482:	687a      	ldr	r2, [r7, #4]
 8018484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018486:	68b8      	ldr	r0, [r7, #8]
 8018488:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801848a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801848c:	f7f4 fc5c 	bl	800cd48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018490:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018494:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018496:	1ad3      	subs	r3, r2, r3
 8018498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801849c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80184a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80184a2:	4413      	add	r3, r2
 80184a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80184a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	f47f af1a 	bne.w	80182e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80184b2:	2300      	movs	r3, #0
 80184b4:	e002      	b.n	80184bc <ip4_frag+0x268>
      goto memerr;
 80184b6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80184b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80184bc:	4618      	mov	r0, r3
 80184be:	3748      	adds	r7, #72	; 0x48
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}
 80184c4:	08020840 	.word	0x08020840
 80184c8:	08020a1c 	.word	0x08020a1c
 80184cc:	08020888 	.word	0x08020888
 80184d0:	08020a38 	.word	0x08020a38
 80184d4:	08020a58 	.word	0x08020a58
 80184d8:	080181ed 	.word	0x080181ed

080184dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b086      	sub	sp, #24
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
 80184e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80184e6:	230e      	movs	r3, #14
 80184e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	895b      	ldrh	r3, [r3, #10]
 80184ee:	2b0e      	cmp	r3, #14
 80184f0:	d96e      	bls.n	80185d0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	7bdb      	ldrb	r3, [r3, #15]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d106      	bne.n	8018508 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018500:	3301      	adds	r3, #1
 8018502:	b2da      	uxtb	r2, r3
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	685b      	ldr	r3, [r3, #4]
 801850c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801850e:	693b      	ldr	r3, [r7, #16]
 8018510:	7b1a      	ldrb	r2, [r3, #12]
 8018512:	7b5b      	ldrb	r3, [r3, #13]
 8018514:	021b      	lsls	r3, r3, #8
 8018516:	4313      	orrs	r3, r2
 8018518:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	f003 0301 	and.w	r3, r3, #1
 8018522:	2b00      	cmp	r3, #0
 8018524:	d023      	beq.n	801856e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018526:	693b      	ldr	r3, [r7, #16]
 8018528:	781b      	ldrb	r3, [r3, #0]
 801852a:	2b01      	cmp	r3, #1
 801852c:	d10f      	bne.n	801854e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801852e:	693b      	ldr	r3, [r7, #16]
 8018530:	785b      	ldrb	r3, [r3, #1]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d11b      	bne.n	801856e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018536:	693b      	ldr	r3, [r7, #16]
 8018538:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801853a:	2b5e      	cmp	r3, #94	; 0x5e
 801853c:	d117      	bne.n	801856e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	7b5b      	ldrb	r3, [r3, #13]
 8018542:	f043 0310 	orr.w	r3, r3, #16
 8018546:	b2da      	uxtb	r2, r3
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	735a      	strb	r2, [r3, #13]
 801854c:	e00f      	b.n	801856e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801854e:	693b      	ldr	r3, [r7, #16]
 8018550:	2206      	movs	r2, #6
 8018552:	4928      	ldr	r1, [pc, #160]	; (80185f4 <ethernet_input+0x118>)
 8018554:	4618      	mov	r0, r3
 8018556:	f003 fc65 	bl	801be24 <memcmp>
 801855a:	4603      	mov	r3, r0
 801855c:	2b00      	cmp	r3, #0
 801855e:	d106      	bne.n	801856e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	7b5b      	ldrb	r3, [r3, #13]
 8018564:	f043 0308 	orr.w	r3, r3, #8
 8018568:	b2da      	uxtb	r2, r3
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801856e:	89fb      	ldrh	r3, [r7, #14]
 8018570:	2b08      	cmp	r3, #8
 8018572:	d003      	beq.n	801857c <ethernet_input+0xa0>
 8018574:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018578:	d014      	beq.n	80185a4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801857a:	e032      	b.n	80185e2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018582:	f003 0308 	and.w	r3, r3, #8
 8018586:	2b00      	cmp	r3, #0
 8018588:	d024      	beq.n	80185d4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801858a:	8afb      	ldrh	r3, [r7, #22]
 801858c:	4619      	mov	r1, r3
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	f7f4 fb22 	bl	800cbd8 <pbuf_remove_header>
 8018594:	4603      	mov	r3, r0
 8018596:	2b00      	cmp	r3, #0
 8018598:	d11e      	bne.n	80185d8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801859a:	6839      	ldr	r1, [r7, #0]
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f7fe fdc9 	bl	8017134 <ip4_input>
      break;
 80185a2:	e013      	b.n	80185cc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80185aa:	f003 0308 	and.w	r3, r3, #8
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d014      	beq.n	80185dc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80185b2:	8afb      	ldrh	r3, [r7, #22]
 80185b4:	4619      	mov	r1, r3
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f7f4 fb0e 	bl	800cbd8 <pbuf_remove_header>
 80185bc:	4603      	mov	r3, r0
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d10e      	bne.n	80185e0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80185c2:	6839      	ldr	r1, [r7, #0]
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	f7fd ff65 	bl	8016494 <etharp_input>
      break;
 80185ca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80185cc:	2300      	movs	r3, #0
 80185ce:	e00c      	b.n	80185ea <ethernet_input+0x10e>
    goto free_and_return;
 80185d0:	bf00      	nop
 80185d2:	e006      	b.n	80185e2 <ethernet_input+0x106>
        goto free_and_return;
 80185d4:	bf00      	nop
 80185d6:	e004      	b.n	80185e2 <ethernet_input+0x106>
        goto free_and_return;
 80185d8:	bf00      	nop
 80185da:	e002      	b.n	80185e2 <ethernet_input+0x106>
        goto free_and_return;
 80185dc:	bf00      	nop
 80185de:	e000      	b.n	80185e2 <ethernet_input+0x106>
        goto free_and_return;
 80185e0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	f7f4 fbb0 	bl	800cd48 <pbuf_free>
  return ERR_OK;
 80185e8:	2300      	movs	r3, #0
}
 80185ea:	4618      	mov	r0, r3
 80185ec:	3718      	adds	r7, #24
 80185ee:	46bd      	mov	sp, r7
 80185f0:	bd80      	pop	{r7, pc}
 80185f2:	bf00      	nop
 80185f4:	08020f50 	.word	0x08020f50

080185f8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b086      	sub	sp, #24
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	60f8      	str	r0, [r7, #12]
 8018600:	60b9      	str	r1, [r7, #8]
 8018602:	607a      	str	r2, [r7, #4]
 8018604:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018606:	8c3b      	ldrh	r3, [r7, #32]
 8018608:	4618      	mov	r0, r3
 801860a:	f7f2 ffb7 	bl	800b57c <lwip_htons>
 801860e:	4603      	mov	r3, r0
 8018610:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018612:	210e      	movs	r1, #14
 8018614:	68b8      	ldr	r0, [r7, #8]
 8018616:	f7f4 facf 	bl	800cbb8 <pbuf_add_header>
 801861a:	4603      	mov	r3, r0
 801861c:	2b00      	cmp	r3, #0
 801861e:	d125      	bne.n	801866c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018626:	693b      	ldr	r3, [r7, #16]
 8018628:	8afa      	ldrh	r2, [r7, #22]
 801862a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801862c:	693b      	ldr	r3, [r7, #16]
 801862e:	2206      	movs	r2, #6
 8018630:	6839      	ldr	r1, [r7, #0]
 8018632:	4618      	mov	r0, r3
 8018634:	f003 fc05 	bl	801be42 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018638:	693b      	ldr	r3, [r7, #16]
 801863a:	3306      	adds	r3, #6
 801863c:	2206      	movs	r2, #6
 801863e:	6879      	ldr	r1, [r7, #4]
 8018640:	4618      	mov	r0, r3
 8018642:	f003 fbfe 	bl	801be42 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801864c:	2b06      	cmp	r3, #6
 801864e:	d006      	beq.n	801865e <ethernet_output+0x66>
 8018650:	4b0a      	ldr	r3, [pc, #40]	; (801867c <ethernet_output+0x84>)
 8018652:	f240 1233 	movw	r2, #307	; 0x133
 8018656:	490a      	ldr	r1, [pc, #40]	; (8018680 <ethernet_output+0x88>)
 8018658:	480a      	ldr	r0, [pc, #40]	; (8018684 <ethernet_output+0x8c>)
 801865a:	f003 fc05 	bl	801be68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	699b      	ldr	r3, [r3, #24]
 8018662:	68b9      	ldr	r1, [r7, #8]
 8018664:	68f8      	ldr	r0, [r7, #12]
 8018666:	4798      	blx	r3
 8018668:	4603      	mov	r3, r0
 801866a:	e002      	b.n	8018672 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801866c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801866e:	f06f 0301 	mvn.w	r3, #1
}
 8018672:	4618      	mov	r0, r3
 8018674:	3718      	adds	r7, #24
 8018676:	46bd      	mov	sp, r7
 8018678:	bd80      	pop	{r7, pc}
 801867a:	bf00      	nop
 801867c:	08020a68 	.word	0x08020a68
 8018680:	08020aa0 	.word	0x08020aa0
 8018684:	08020ad4 	.word	0x08020ad4

08018688 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b086      	sub	sp, #24
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
 8018690:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018692:	683b      	ldr	r3, [r7, #0]
 8018694:	60bb      	str	r3, [r7, #8]
 8018696:	2304      	movs	r3, #4
 8018698:	60fb      	str	r3, [r7, #12]
 801869a:	2300      	movs	r3, #0
 801869c:	613b      	str	r3, [r7, #16]
 801869e:	2300      	movs	r3, #0
 80186a0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80186a2:	f107 0308 	add.w	r3, r7, #8
 80186a6:	2100      	movs	r1, #0
 80186a8:	4618      	mov	r0, r3
 80186aa:	f7ec fcd4 	bl	8005056 <osMessageCreate>
 80186ae:	4602      	mov	r2, r0
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d102      	bne.n	80186c2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80186bc:	f04f 33ff 	mov.w	r3, #4294967295
 80186c0:	e000      	b.n	80186c4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80186c2:	2300      	movs	r3, #0
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3718      	adds	r7, #24
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}

080186cc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b082      	sub	sp, #8
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	4618      	mov	r0, r3
 80186da:	f7ec fd99 	bl	8005210 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	4618      	mov	r0, r3
 80186e4:	f7ec fdaa 	bl	800523c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80186e8:	bf00      	nop
 80186ea:	3708      	adds	r7, #8
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd80      	pop	{r7, pc}

080186f0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b084      	sub	sp, #16
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
 80186f8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	6839      	ldr	r1, [r7, #0]
 8018700:	2200      	movs	r2, #0
 8018702:	4618      	mov	r0, r3
 8018704:	f7ec fcd0 	bl	80050a8 <osMessagePut>
 8018708:	4603      	mov	r3, r0
 801870a:	2b00      	cmp	r3, #0
 801870c:	d102      	bne.n	8018714 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801870e:	2300      	movs	r3, #0
 8018710:	73fb      	strb	r3, [r7, #15]
 8018712:	e001      	b.n	8018718 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018714:	23ff      	movs	r3, #255	; 0xff
 8018716:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018718:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801871c:	4618      	mov	r0, r3
 801871e:	3710      	adds	r7, #16
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}

08018724 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b08c      	sub	sp, #48	; 0x30
 8018728:	af00      	add	r7, sp, #0
 801872a:	61f8      	str	r0, [r7, #28]
 801872c:	61b9      	str	r1, [r7, #24]
 801872e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018730:	f7ec fab9 	bl	8004ca6 <osKernelSysTick>
 8018734:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018736:	697b      	ldr	r3, [r7, #20]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d017      	beq.n	801876c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801873c:	69fb      	ldr	r3, [r7, #28]
 801873e:	6819      	ldr	r1, [r3, #0]
 8018740:	f107 0320 	add.w	r3, r7, #32
 8018744:	697a      	ldr	r2, [r7, #20]
 8018746:	4618      	mov	r0, r3
 8018748:	f7ec fcee 	bl	8005128 <osMessageGet>

    if(event.status == osEventMessage)
 801874c:	6a3b      	ldr	r3, [r7, #32]
 801874e:	2b10      	cmp	r3, #16
 8018750:	d109      	bne.n	8018766 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018754:	461a      	mov	r2, r3
 8018756:	69bb      	ldr	r3, [r7, #24]
 8018758:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801875a:	f7ec faa4 	bl	8004ca6 <osKernelSysTick>
 801875e:	4602      	mov	r2, r0
 8018760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018762:	1ad3      	subs	r3, r2, r3
 8018764:	e019      	b.n	801879a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018766:	f04f 33ff 	mov.w	r3, #4294967295
 801876a:	e016      	b.n	801879a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801876c:	69fb      	ldr	r3, [r7, #28]
 801876e:	6819      	ldr	r1, [r3, #0]
 8018770:	463b      	mov	r3, r7
 8018772:	f04f 32ff 	mov.w	r2, #4294967295
 8018776:	4618      	mov	r0, r3
 8018778:	f7ec fcd6 	bl	8005128 <osMessageGet>
 801877c:	f107 0320 	add.w	r3, r7, #32
 8018780:	463a      	mov	r2, r7
 8018782:	ca07      	ldmia	r2, {r0, r1, r2}
 8018784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878a:	461a      	mov	r2, r3
 801878c:	69bb      	ldr	r3, [r7, #24]
 801878e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018790:	f7ec fa89 	bl	8004ca6 <osKernelSysTick>
 8018794:	4602      	mov	r2, r0
 8018796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018798:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801879a:	4618      	mov	r0, r3
 801879c:	3730      	adds	r7, #48	; 0x30
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}

080187a2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80187a2:	b580      	push	{r7, lr}
 80187a4:	b086      	sub	sp, #24
 80187a6:	af00      	add	r7, sp, #0
 80187a8:	6078      	str	r0, [r7, #4]
 80187aa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	6819      	ldr	r1, [r3, #0]
 80187b0:	f107 030c 	add.w	r3, r7, #12
 80187b4:	2200      	movs	r2, #0
 80187b6:	4618      	mov	r0, r3
 80187b8:	f7ec fcb6 	bl	8005128 <osMessageGet>

  if(event.status == osEventMessage)
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	2b10      	cmp	r3, #16
 80187c0:	d105      	bne.n	80187ce <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80187c2:	693b      	ldr	r3, [r7, #16]
 80187c4:	461a      	mov	r2, r3
 80187c6:	683b      	ldr	r3, [r7, #0]
 80187c8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80187ca:	2300      	movs	r3, #0
 80187cc:	e001      	b.n	80187d2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80187ce:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	3718      	adds	r7, #24
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}

080187da <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80187da:	b480      	push	{r7}
 80187dc:	b083      	sub	sp, #12
 80187de:	af00      	add	r7, sp, #0
 80187e0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d101      	bne.n	80187ee <sys_mbox_valid+0x14>
    return 0;
 80187ea:	2300      	movs	r3, #0
 80187ec:	e000      	b.n	80187f0 <sys_mbox_valid+0x16>
  else
    return 1;
 80187ee:	2301      	movs	r3, #1
}
 80187f0:	4618      	mov	r0, r3
 80187f2:	370c      	adds	r7, #12
 80187f4:	46bd      	mov	sp, r7
 80187f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187fa:	4770      	bx	lr

080187fc <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80187fc:	b480      	push	{r7}
 80187fe:	b083      	sub	sp, #12
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2200      	movs	r2, #0
 8018808:	601a      	str	r2, [r3, #0]
}
 801880a:	bf00      	nop
 801880c:	370c      	adds	r7, #12
 801880e:	46bd      	mov	sp, r7
 8018810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018814:	4770      	bx	lr

08018816 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018816:	b580      	push	{r7, lr}
 8018818:	b084      	sub	sp, #16
 801881a:	af00      	add	r7, sp, #0
 801881c:	6078      	str	r0, [r7, #4]
 801881e:	460b      	mov	r3, r1
 8018820:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018822:	2300      	movs	r3, #0
 8018824:	60bb      	str	r3, [r7, #8]
 8018826:	2300      	movs	r3, #0
 8018828:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801882a:	f107 0308 	add.w	r3, r7, #8
 801882e:	2101      	movs	r1, #1
 8018830:	4618      	mov	r0, r3
 8018832:	f7ec fb45 	bl	8004ec0 <osSemaphoreCreate>
 8018836:	4602      	mov	r2, r0
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d102      	bne.n	801884a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018844:	f04f 33ff 	mov.w	r3, #4294967295
 8018848:	e009      	b.n	801885e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801884a:	78fb      	ldrb	r3, [r7, #3]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d105      	bne.n	801885c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	2100      	movs	r1, #0
 8018856:	4618      	mov	r0, r3
 8018858:	f7ec fb66 	bl	8004f28 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801885c:	2300      	movs	r3, #0
}
 801885e:	4618      	mov	r0, r3
 8018860:	3710      	adds	r7, #16
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}

08018866 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018866:	b580      	push	{r7, lr}
 8018868:	b084      	sub	sp, #16
 801886a:	af00      	add	r7, sp, #0
 801886c:	6078      	str	r0, [r7, #4]
 801886e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018870:	f7ec fa19 	bl	8004ca6 <osKernelSysTick>
 8018874:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018876:	683b      	ldr	r3, [r7, #0]
 8018878:	2b00      	cmp	r3, #0
 801887a:	d011      	beq.n	80188a0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	6839      	ldr	r1, [r7, #0]
 8018882:	4618      	mov	r0, r3
 8018884:	f7ec fb50 	bl	8004f28 <osSemaphoreWait>
 8018888:	4603      	mov	r3, r0
 801888a:	2b00      	cmp	r3, #0
 801888c:	d105      	bne.n	801889a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801888e:	f7ec fa0a 	bl	8004ca6 <osKernelSysTick>
 8018892:	4602      	mov	r2, r0
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	1ad3      	subs	r3, r2, r3
 8018898:	e012      	b.n	80188c0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801889a:	f04f 33ff 	mov.w	r3, #4294967295
 801889e:	e00f      	b.n	80188c0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80188a0:	bf00      	nop
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	f04f 31ff 	mov.w	r1, #4294967295
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7ec fb3c 	bl	8004f28 <osSemaphoreWait>
 80188b0:	4603      	mov	r3, r0
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d1f5      	bne.n	80188a2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80188b6:	f7ec f9f6 	bl	8004ca6 <osKernelSysTick>
 80188ba:	4602      	mov	r2, r0
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80188c0:	4618      	mov	r0, r3
 80188c2:	3710      	adds	r7, #16
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}

080188c8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b082      	sub	sp, #8
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7ec fb75 	bl	8004fc4 <osSemaphoreRelease>
}
 80188da:	bf00      	nop
 80188dc:	3708      	adds	r7, #8
 80188de:	46bd      	mov	sp, r7
 80188e0:	bd80      	pop	{r7, pc}

080188e2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80188e2:	b580      	push	{r7, lr}
 80188e4:	b082      	sub	sp, #8
 80188e6:	af00      	add	r7, sp, #0
 80188e8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	4618      	mov	r0, r3
 80188f0:	f7ec fb9e 	bl	8005030 <osSemaphoreDelete>
}
 80188f4:	bf00      	nop
 80188f6:	3708      	adds	r7, #8
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd80      	pop	{r7, pc}

080188fc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80188fc:	b480      	push	{r7}
 80188fe:	b083      	sub	sp, #12
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d101      	bne.n	8018910 <sys_sem_valid+0x14>
    return 0;
 801890c:	2300      	movs	r3, #0
 801890e:	e000      	b.n	8018912 <sys_sem_valid+0x16>
  else
    return 1;
 8018910:	2301      	movs	r3, #1
}
 8018912:	4618      	mov	r0, r3
 8018914:	370c      	adds	r7, #12
 8018916:	46bd      	mov	sp, r7
 8018918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891c:	4770      	bx	lr

0801891e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801891e:	b480      	push	{r7}
 8018920:	b083      	sub	sp, #12
 8018922:	af00      	add	r7, sp, #0
 8018924:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	2200      	movs	r2, #0
 801892a:	601a      	str	r2, [r3, #0]
}
 801892c:	bf00      	nop
 801892e:	370c      	adds	r7, #12
 8018930:	46bd      	mov	sp, r7
 8018932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018936:	4770      	bx	lr

08018938 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801893c:	4803      	ldr	r0, [pc, #12]	; (801894c <sys_init+0x14>)
 801893e:	f7ec fa22 	bl	8004d86 <osMutexCreate>
 8018942:	4602      	mov	r2, r0
 8018944:	4b02      	ldr	r3, [pc, #8]	; (8018950 <sys_init+0x18>)
 8018946:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018948:	bf00      	nop
 801894a:	bd80      	pop	{r7, pc}
 801894c:	08020f60 	.word	0x08020f60
 8018950:	2000c598 	.word	0x2000c598

08018954 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018954:	b580      	push	{r7, lr}
 8018956:	b084      	sub	sp, #16
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801895c:	2300      	movs	r3, #0
 801895e:	60bb      	str	r3, [r7, #8]
 8018960:	2300      	movs	r3, #0
 8018962:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018964:	f107 0308 	add.w	r3, r7, #8
 8018968:	4618      	mov	r0, r3
 801896a:	f7ec fa0c 	bl	8004d86 <osMutexCreate>
 801896e:	4602      	mov	r2, r0
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d102      	bne.n	8018982 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801897c:	f04f 33ff 	mov.w	r3, #4294967295
 8018980:	e000      	b.n	8018984 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018982:	2300      	movs	r3, #0
}
 8018984:	4618      	mov	r0, r3
 8018986:	3710      	adds	r7, #16
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}

0801898c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b082      	sub	sp, #8
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	f04f 31ff 	mov.w	r1, #4294967295
 801899c:	4618      	mov	r0, r3
 801899e:	f7ec fa0b 	bl	8004db8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80189a2:	bf00      	nop
 80189a4:	3708      	adds	r7, #8
 80189a6:	46bd      	mov	sp, r7
 80189a8:	bd80      	pop	{r7, pc}

080189aa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80189aa:	b580      	push	{r7, lr}
 80189ac:	b082      	sub	sp, #8
 80189ae:	af00      	add	r7, sp, #0
 80189b0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7ec fa4c 	bl	8004e54 <osMutexRelease>
}
 80189bc:	bf00      	nop
 80189be:	3708      	adds	r7, #8
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}

080189c4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b08c      	sub	sp, #48	; 0x30
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	60f8      	str	r0, [r7, #12]
 80189cc:	60b9      	str	r1, [r7, #8]
 80189ce:	607a      	str	r2, [r7, #4]
 80189d0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80189d2:	f107 0314 	add.w	r3, r7, #20
 80189d6:	2200      	movs	r2, #0
 80189d8:	601a      	str	r2, [r3, #0]
 80189da:	605a      	str	r2, [r3, #4]
 80189dc:	609a      	str	r2, [r3, #8]
 80189de:	60da      	str	r2, [r3, #12]
 80189e0:	611a      	str	r2, [r3, #16]
 80189e2:	615a      	str	r2, [r3, #20]
 80189e4:	619a      	str	r2, [r3, #24]
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	617b      	str	r3, [r7, #20]
 80189ea:	68bb      	ldr	r3, [r7, #8]
 80189ec:	61bb      	str	r3, [r7, #24]
 80189ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189f0:	b21b      	sxth	r3, r3
 80189f2:	83bb      	strh	r3, [r7, #28]
 80189f4:	683b      	ldr	r3, [r7, #0]
 80189f6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80189f8:	f107 0314 	add.w	r3, r7, #20
 80189fc:	6879      	ldr	r1, [r7, #4]
 80189fe:	4618      	mov	r0, r3
 8018a00:	f7ec f961 	bl	8004cc6 <osThreadCreate>
 8018a04:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3730      	adds	r7, #48	; 0x30
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}
	...

08018a10 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018a14:	4b04      	ldr	r3, [pc, #16]	; (8018a28 <sys_arch_protect+0x18>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	f04f 31ff 	mov.w	r1, #4294967295
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7ec f9cb 	bl	8004db8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018a22:	2301      	movs	r3, #1
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	bd80      	pop	{r7, pc}
 8018a28:	2000c598 	.word	0x2000c598

08018a2c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b082      	sub	sp, #8
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018a34:	4b04      	ldr	r3, [pc, #16]	; (8018a48 <sys_arch_unprotect+0x1c>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f7ec fa0b 	bl	8004e54 <osMutexRelease>
}
 8018a3e:	bf00      	nop
 8018a40:	3708      	adds	r7, #8
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}
 8018a46:	bf00      	nop
 8018a48:	2000c598 	.word	0x2000c598

08018a4c <NewMessageData>:
 *******************************************************************************/
#include <MQTTClient.h>
#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8018a4c:	b480      	push	{r7}
 8018a4e:	b085      	sub	sp, #20
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	60f8      	str	r0, [r7, #12]
 8018a54:	60b9      	str	r1, [r7, #8]
 8018a56:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	68ba      	ldr	r2, [r7, #8]
 8018a5c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	601a      	str	r2, [r3, #0]
}
 8018a64:	bf00      	nop
 8018a66:	3714      	adds	r7, #20
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6e:	4770      	bx	lr

08018a70 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8018a70:	b480      	push	{r7}
 8018a72:	b083      	sub	sp, #12
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a80:	4293      	cmp	r3, r2
 8018a82:	d003      	beq.n	8018a8c <getNextPacketId+0x1c>
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	3301      	adds	r3, #1
 8018a8a:	e000      	b.n	8018a8e <getNextPacketId+0x1e>
 8018a8c:	2301      	movs	r3, #1
 8018a8e:	687a      	ldr	r2, [r7, #4]
 8018a90:	6013      	str	r3, [r2, #0]
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
}
 8018a96:	4618      	mov	r0, r3
 8018a98:	370c      	adds	r7, #12
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa0:	4770      	bx	lr

08018aa2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8018aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018aa4:	b087      	sub	sp, #28
 8018aa6:	af00      	add	r7, sp, #0
 8018aa8:	60f8      	str	r0, [r7, #12]
 8018aaa:	60b9      	str	r1, [r7, #8]
 8018aac:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8018aae:	f04f 33ff 	mov.w	r3, #4294967295
 8018ab2:	617b      	str	r3, [r7, #20]
        sent = 0;
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8018ab8:	e018      	b.n	8018aec <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018abe:	689c      	ldr	r4, [r3, #8]
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	691a      	ldr	r2, [r3, #16]
 8018ac8:	693b      	ldr	r3, [r7, #16]
 8018aca:	18d6      	adds	r6, r2, r3
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f000 fecd 	bl	801986c <TimerLeftMS>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	68ba      	ldr	r2, [r7, #8]
 8018ad6:	4631      	mov	r1, r6
 8018ad8:	4628      	mov	r0, r5
 8018ada:	47a0      	blx	r4
 8018adc:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	db0e      	blt.n	8018b02 <sendPacket+0x60>
            break;
        sent += rc;
 8018ae4:	693a      	ldr	r2, [r7, #16]
 8018ae6:	697b      	ldr	r3, [r7, #20]
 8018ae8:	4413      	add	r3, r2
 8018aea:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8018aec:	693a      	ldr	r2, [r7, #16]
 8018aee:	68bb      	ldr	r3, [r7, #8]
 8018af0:	429a      	cmp	r2, r3
 8018af2:	da07      	bge.n	8018b04 <sendPacket+0x62>
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	f000 fe77 	bl	80197e8 <TimerIsExpired>
 8018afa:	4603      	mov	r3, r0
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d0dc      	beq.n	8018aba <sendPacket+0x18>
 8018b00:	e000      	b.n	8018b04 <sendPacket+0x62>
            break;
 8018b02:	bf00      	nop
    }
    if (sent == length)
 8018b04:	693a      	ldr	r2, [r7, #16]
 8018b06:	68bb      	ldr	r3, [r7, #8]
 8018b08:	429a      	cmp	r2, r3
 8018b0a:	d10b      	bne.n	8018b24 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully sent the packet
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	699b      	ldr	r3, [r3, #24]
 8018b16:	4619      	mov	r1, r3
 8018b18:	4610      	mov	r0, r2
 8018b1a:	f000 fe8f 	bl	801983c <TimerCountdown>
        rc = MQTT_SUCCESS;
 8018b1e:	2300      	movs	r3, #0
 8018b20:	617b      	str	r3, [r7, #20]
 8018b22:	e002      	b.n	8018b2a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8018b24:	f04f 33ff 	mov.w	r3, #4294967295
 8018b28:	617b      	str	r3, [r7, #20]
    return rc;
 8018b2a:	697b      	ldr	r3, [r7, #20]
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	371c      	adds	r7, #28
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b34 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b086      	sub	sp, #24
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	60f8      	str	r0, [r7, #12]
 8018b3c:	60b9      	str	r1, [r7, #8]
 8018b3e:	607a      	str	r2, [r7, #4]
 8018b40:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	68ba      	ldr	r2, [r7, #8]
 8018b46:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018b48:	2300      	movs	r3, #0
 8018b4a:	617b      	str	r3, [r7, #20]
 8018b4c:	e008      	b.n	8018b60 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	697a      	ldr	r2, [r7, #20]
 8018b52:	3205      	adds	r2, #5
 8018b54:	2100      	movs	r1, #0
 8018b56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018b5a:	697b      	ldr	r3, [r7, #20]
 8018b5c:	3301      	adds	r3, #1
 8018b5e:	617b      	str	r3, [r7, #20]
 8018b60:	697b      	ldr	r3, [r7, #20]
 8018b62:	2b04      	cmp	r3, #4
 8018b64:	ddf3      	ble.n	8018b4e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	687a      	ldr	r2, [r7, #4]
 8018b6a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	683a      	ldr	r2, [r7, #0]
 8018b70:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	6a3a      	ldr	r2, [r7, #32]
 8018b76:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b7c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b82:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	2200      	movs	r2, #0
 8018b88:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	2200      	movs	r2, #0
 8018b94:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	2200      	movs	r2, #0
 8018b9a:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	3358      	adds	r3, #88	; 0x58
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f000 fe76 	bl	8019898 <TimerInit>
    TimerInit(&c->last_received);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	3360      	adds	r3, #96	; 0x60
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f000 fe71 	bl	8019898 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8018bb6:	bf00      	nop
 8018bb8:	3718      	adds	r7, #24
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}

08018bbe <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8018bbe:	b590      	push	{r4, r7, lr}
 8018bc0:	b08b      	sub	sp, #44	; 0x2c
 8018bc2:	af00      	add	r7, sp, #0
 8018bc4:	60f8      	str	r0, [r7, #12]
 8018bc6:	60b9      	str	r1, [r7, #8]
 8018bc8:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8018bca:	2301      	movs	r3, #1
 8018bcc:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8018bd2:	2304      	movs	r3, #4
 8018bd4:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	2200      	movs	r2, #0
 8018bda:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8018bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8018be0:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8018be2:	6a3b      	ldr	r3, [r7, #32]
 8018be4:	3301      	adds	r3, #1
 8018be6:	623b      	str	r3, [r7, #32]
 8018be8:	6a3a      	ldr	r2, [r7, #32]
 8018bea:	69fb      	ldr	r3, [r7, #28]
 8018bec:	429a      	cmp	r2, r3
 8018bee:	dd03      	ble.n	8018bf8 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8018bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bf4:	61bb      	str	r3, [r7, #24]
            goto exit;
 8018bf6:	e021      	b.n	8018c3c <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018bfc:	685c      	ldr	r4, [r3, #4]
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8018c02:	f107 0117 	add.w	r1, r7, #23
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	2201      	movs	r2, #1
 8018c0a:	47a0      	blx	r4
 8018c0c:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8018c0e:	69bb      	ldr	r3, [r7, #24]
 8018c10:	2b01      	cmp	r3, #1
 8018c12:	d112      	bne.n	8018c3a <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	681a      	ldr	r2, [r3, #0]
 8018c18:	7dfb      	ldrb	r3, [r7, #23]
 8018c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018c20:	fb01 f303 	mul.w	r3, r1, r3
 8018c24:	441a      	add	r2, r3
 8018c26:	68bb      	ldr	r3, [r7, #8]
 8018c28:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8018c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c2c:	01db      	lsls	r3, r3, #7
 8018c2e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8018c30:	7dfb      	ldrb	r3, [r7, #23]
 8018c32:	b25b      	sxtb	r3, r3
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	dbd1      	blt.n	8018bdc <decodePacket+0x1e>
exit:
 8018c38:	e000      	b.n	8018c3c <decodePacket+0x7e>
            goto exit;
 8018c3a:	bf00      	nop
    return len;
 8018c3c:	6a3b      	ldr	r3, [r7, #32]
}
 8018c3e:	4618      	mov	r0, r3
 8018c40:	372c      	adds	r7, #44	; 0x2c
 8018c42:	46bd      	mov	sp, r7
 8018c44:	bd90      	pop	{r4, r7, pc}

08018c46 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8018c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c48:	b089      	sub	sp, #36	; 0x24
 8018c4a:	af00      	add	r7, sp, #0
 8018c4c:	60f8      	str	r0, [r7, #12]
 8018c4e:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8018c50:	2300      	movs	r3, #0
 8018c52:	617b      	str	r3, [r7, #20]
    int len = 0;
 8018c54:	2300      	movs	r3, #0
 8018c56:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c60:	685c      	ldr	r4, [r3, #4]
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	695e      	ldr	r6, [r3, #20]
 8018c6a:	68b8      	ldr	r0, [r7, #8]
 8018c6c:	f000 fdfe 	bl	801986c <TimerLeftMS>
 8018c70:	4603      	mov	r3, r0
 8018c72:	2201      	movs	r2, #1
 8018c74:	4631      	mov	r1, r6
 8018c76:	4628      	mov	r0, r5
 8018c78:	47a0      	blx	r4
 8018c7a:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8018c7c:	69fb      	ldr	r3, [r7, #28]
 8018c7e:	2b01      	cmp	r3, #1
 8018c80:	d15d      	bne.n	8018d3e <readPacket+0xf8>
        goto exit;

    len = 1;
 8018c82:	2301      	movs	r3, #1
 8018c84:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8018c86:	68b8      	ldr	r0, [r7, #8]
 8018c88:	f000 fdf0 	bl	801986c <TimerLeftMS>
 8018c8c:	4602      	mov	r2, r0
 8018c8e:	f107 0310 	add.w	r3, r7, #16
 8018c92:	4619      	mov	r1, r3
 8018c94:	68f8      	ldr	r0, [r7, #12]
 8018c96:	f7ff ff92 	bl	8018bbe <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	695b      	ldr	r3, [r3, #20]
 8018c9e:	3301      	adds	r3, #1
 8018ca0:	693a      	ldr	r2, [r7, #16]
 8018ca2:	4611      	mov	r1, r2
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	f001 f972 	bl	8019f8e <MQTTPacket_encode>
 8018caa:	4602      	mov	r2, r0
 8018cac:	69bb      	ldr	r3, [r7, #24]
 8018cae:	4413      	add	r3, r2
 8018cb0:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	68da      	ldr	r2, [r3, #12]
 8018cb6:	69bb      	ldr	r3, [r7, #24]
 8018cb8:	1ad3      	subs	r3, r2, r3
 8018cba:	693a      	ldr	r2, [r7, #16]
 8018cbc:	4293      	cmp	r3, r2
 8018cbe:	d203      	bcs.n	8018cc8 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8018cc0:	f06f 0301 	mvn.w	r3, #1
 8018cc4:	61fb      	str	r3, [r7, #28]
        goto exit;
 8018cc6:	e03d      	b.n	8018d44 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8018cc8:	693b      	ldr	r3, [r7, #16]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	dd20      	ble.n	8018d10 <readPacket+0xca>
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018cd2:	685c      	ldr	r4, [r3, #4]
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	695a      	ldr	r2, [r3, #20]
 8018cdc:	69bb      	ldr	r3, [r7, #24]
 8018cde:	18d6      	adds	r6, r2, r3
 8018ce0:	693b      	ldr	r3, [r7, #16]
 8018ce2:	607b      	str	r3, [r7, #4]
 8018ce4:	68b8      	ldr	r0, [r7, #8]
 8018ce6:	f000 fdc1 	bl	801986c <TimerLeftMS>
 8018cea:	4603      	mov	r3, r0
 8018cec:	687a      	ldr	r2, [r7, #4]
 8018cee:	4631      	mov	r1, r6
 8018cf0:	4628      	mov	r0, r5
 8018cf2:	47a0      	blx	r4
 8018cf4:	4602      	mov	r2, r0
 8018cf6:	693b      	ldr	r3, [r7, #16]
 8018cf8:	429a      	cmp	r2, r3
 8018cfa:	bf14      	ite	ne
 8018cfc:	2301      	movne	r3, #1
 8018cfe:	2300      	moveq	r3, #0
 8018d00:	b2db      	uxtb	r3, r3
 8018d02:	61fb      	str	r3, [r7, #28]
 8018d04:	69fb      	ldr	r3, [r7, #28]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d002      	beq.n	8018d10 <readPacket+0xca>
        rc = 0;
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	61fb      	str	r3, [r7, #28]
        goto exit;
 8018d0e:	e019      	b.n	8018d44 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	695b      	ldr	r3, [r3, #20]
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8018d18:	7d3b      	ldrb	r3, [r7, #20]
 8018d1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8018d1e:	b2db      	uxtb	r3, r3
 8018d20:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	699b      	ldr	r3, [r3, #24]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d00b      	beq.n	8018d42 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully received a packet
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	699b      	ldr	r3, [r3, #24]
 8018d34:	4619      	mov	r1, r3
 8018d36:	4610      	mov	r0, r2
 8018d38:	f000 fd80 	bl	801983c <TimerCountdown>
 8018d3c:	e002      	b.n	8018d44 <readPacket+0xfe>
        goto exit;
 8018d3e:	bf00      	nop
 8018d40:	e000      	b.n	8018d44 <readPacket+0xfe>
exit:
 8018d42:	bf00      	nop
    return rc;
 8018d44:	69fb      	ldr	r3, [r7, #28]
}
 8018d46:	4618      	mov	r0, r3
 8018d48:	3724      	adds	r7, #36	; 0x24
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018d4e <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8018d4e:	b480      	push	{r7}
 8018d50:	b087      	sub	sp, #28
 8018d52:	af00      	add	r7, sp, #0
 8018d54:	6078      	str	r0, [r7, #4]
 8018d56:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	689b      	ldr	r3, [r3, #8]
 8018d60:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8018d62:	683b      	ldr	r3, [r7, #0]
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	461a      	mov	r2, r3
 8018d68:	693b      	ldr	r3, [r7, #16]
 8018d6a:	4413      	add	r3, r2
 8018d6c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8018d6e:	e039      	b.n	8018de4 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8018d70:	693b      	ldr	r3, [r7, #16]
 8018d72:	781b      	ldrb	r3, [r3, #0]
 8018d74:	2b2f      	cmp	r3, #47	; 0x2f
 8018d76:	d103      	bne.n	8018d80 <isTopicMatched+0x32>
 8018d78:	697b      	ldr	r3, [r7, #20]
 8018d7a:	781b      	ldrb	r3, [r3, #0]
 8018d7c:	2b2f      	cmp	r3, #47	; 0x2f
 8018d7e:	d13a      	bne.n	8018df6 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	781b      	ldrb	r3, [r3, #0]
 8018d84:	2b2b      	cmp	r3, #43	; 0x2b
 8018d86:	d009      	beq.n	8018d9c <isTopicMatched+0x4e>
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	781b      	ldrb	r3, [r3, #0]
 8018d8c:	2b23      	cmp	r3, #35	; 0x23
 8018d8e:	d005      	beq.n	8018d9c <isTopicMatched+0x4e>
 8018d90:	697b      	ldr	r3, [r7, #20]
 8018d92:	781a      	ldrb	r2, [r3, #0]
 8018d94:	693b      	ldr	r3, [r7, #16]
 8018d96:	781b      	ldrb	r3, [r3, #0]
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	d12e      	bne.n	8018dfa <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	781b      	ldrb	r3, [r3, #0]
 8018da0:	2b2b      	cmp	r3, #43	; 0x2b
 8018da2:	d112      	bne.n	8018dca <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	3301      	adds	r3, #1
 8018da8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8018daa:	e005      	b.n	8018db8 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8018dac:	693b      	ldr	r3, [r7, #16]
 8018dae:	3301      	adds	r3, #1
 8018db0:	613b      	str	r3, [r7, #16]
 8018db2:	693b      	ldr	r3, [r7, #16]
 8018db4:	3301      	adds	r3, #1
 8018db6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8018db8:	68fa      	ldr	r2, [r7, #12]
 8018dba:	68bb      	ldr	r3, [r7, #8]
 8018dbc:	429a      	cmp	r2, r3
 8018dbe:	d20b      	bcs.n	8018dd8 <isTopicMatched+0x8a>
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	781b      	ldrb	r3, [r3, #0]
 8018dc4:	2b2f      	cmp	r3, #47	; 0x2f
 8018dc6:	d1f1      	bne.n	8018dac <isTopicMatched+0x5e>
 8018dc8:	e006      	b.n	8018dd8 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8018dca:	697b      	ldr	r3, [r7, #20]
 8018dcc:	781b      	ldrb	r3, [r3, #0]
 8018dce:	2b23      	cmp	r3, #35	; 0x23
 8018dd0:	d102      	bne.n	8018dd8 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8018dd2:	68bb      	ldr	r3, [r7, #8]
 8018dd4:	3b01      	subs	r3, #1
 8018dd6:	613b      	str	r3, [r7, #16]
        curf++;
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	3301      	adds	r3, #1
 8018ddc:	617b      	str	r3, [r7, #20]
        curn++;
 8018dde:	693b      	ldr	r3, [r7, #16]
 8018de0:	3301      	adds	r3, #1
 8018de2:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8018de4:	697b      	ldr	r3, [r7, #20]
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d007      	beq.n	8018dfc <isTopicMatched+0xae>
 8018dec:	693a      	ldr	r2, [r7, #16]
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	429a      	cmp	r2, r3
 8018df2:	d3bd      	bcc.n	8018d70 <isTopicMatched+0x22>
 8018df4:	e002      	b.n	8018dfc <isTopicMatched+0xae>
            break;
 8018df6:	bf00      	nop
 8018df8:	e000      	b.n	8018dfc <isTopicMatched+0xae>
            break;
 8018dfa:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8018dfc:	693a      	ldr	r2, [r7, #16]
 8018dfe:	68bb      	ldr	r3, [r7, #8]
 8018e00:	429a      	cmp	r2, r3
 8018e02:	d105      	bne.n	8018e10 <isTopicMatched+0xc2>
 8018e04:	697b      	ldr	r3, [r7, #20]
 8018e06:	781b      	ldrb	r3, [r3, #0]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d101      	bne.n	8018e10 <isTopicMatched+0xc2>
 8018e0c:	2301      	movs	r3, #1
 8018e0e:	e000      	b.n	8018e12 <isTopicMatched+0xc4>
 8018e10:	2300      	movs	r3, #0
 8018e12:	b2db      	uxtb	r3, r3
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	371c      	adds	r7, #28
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1e:	4770      	bx	lr

08018e20 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b08a      	sub	sp, #40	; 0x28
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	60f8      	str	r0, [r7, #12]
 8018e28:	60b9      	str	r1, [r7, #8]
 8018e2a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8018e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e30:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018e32:	2300      	movs	r3, #0
 8018e34:	627b      	str	r3, [r7, #36]	; 0x24
 8018e36:	e03c      	b.n	8018eb2 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e3c:	3205      	adds	r2, #5
 8018e3e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d032      	beq.n	8018eac <deliverMessage+0x8c>
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e4a:	3205      	adds	r2, #5
 8018e4c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018e50:	4619      	mov	r1, r3
 8018e52:	68b8      	ldr	r0, [r7, #8]
 8018e54:	f001 fa6a 	bl	801a32c <MQTTPacket_equals>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d10b      	bne.n	8018e76 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e62:	3205      	adds	r2, #5
 8018e64:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018e68:	68b9      	ldr	r1, [r7, #8]
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7ff ff6f 	bl	8018d4e <isTopicMatched>
 8018e70:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d01a      	beq.n	8018eac <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8018e76:	68fa      	ldr	r2, [r7, #12]
 8018e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e7a:	3305      	adds	r3, #5
 8018e7c:	00db      	lsls	r3, r3, #3
 8018e7e:	4413      	add	r3, r2
 8018e80:	685b      	ldr	r3, [r3, #4]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d012      	beq.n	8018eac <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8018e86:	f107 0318 	add.w	r3, r7, #24
 8018e8a:	687a      	ldr	r2, [r7, #4]
 8018e8c:	68b9      	ldr	r1, [r7, #8]
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7ff fddc 	bl	8018a4c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8018e94:	68fa      	ldr	r2, [r7, #12]
 8018e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e98:	3305      	adds	r3, #5
 8018e9a:	00db      	lsls	r3, r3, #3
 8018e9c:	4413      	add	r3, r2
 8018e9e:	685b      	ldr	r3, [r3, #4]
 8018ea0:	f107 0218 	add.w	r2, r7, #24
 8018ea4:	4610      	mov	r0, r2
 8018ea6:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eae:	3301      	adds	r3, #1
 8018eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8018eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eb4:	2b04      	cmp	r3, #4
 8018eb6:	ddbf      	ble.n	8018e38 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8018eb8:	6a3b      	ldr	r3, [r7, #32]
 8018eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ebe:	d112      	bne.n	8018ee6 <deliverMessage+0xc6>
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d00e      	beq.n	8018ee6 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8018ec8:	f107 0310 	add.w	r3, r7, #16
 8018ecc:	687a      	ldr	r2, [r7, #4]
 8018ece:	68b9      	ldr	r1, [r7, #8]
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f7ff fdbb 	bl	8018a4c <NewMessageData>
        c->defaultMessageHandler(&md);
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018eda:	f107 0210 	add.w	r2, r7, #16
 8018ede:	4610      	mov	r0, r2
 8018ee0:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8018ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8018ee8:	4618      	mov	r0, r3
 8018eea:	3728      	adds	r7, #40	; 0x28
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}

08018ef0 <keepalive>:


int keepalive(MQTTClient* c)
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b086      	sub	sp, #24
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8018ef8:	2300      	movs	r3, #0
 8018efa:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	699b      	ldr	r3, [r3, #24]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d03e      	beq.n	8018f82 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	3358      	adds	r3, #88	; 0x58
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f000 fc6d 	bl	80197e8 <TimerIsExpired>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d107      	bne.n	8018f24 <keepalive+0x34>
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	3360      	adds	r3, #96	; 0x60
 8018f18:	4618      	mov	r0, r3
 8018f1a:	f000 fc65 	bl	80197e8 <TimerIsExpired>
 8018f1e:	4603      	mov	r3, r0
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d030      	beq.n	8018f86 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	7f1b      	ldrb	r3, [r3, #28]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d003      	beq.n	8018f34 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8018f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f30:	617b      	str	r3, [r7, #20]
 8018f32:	e029      	b.n	8018f88 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8018f34:	f107 0308 	add.w	r3, r7, #8
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f000 fcad 	bl	8019898 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8018f3e:	f107 0308 	add.w	r3, r7, #8
 8018f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018f46:	4618      	mov	r0, r3
 8018f48:	f000 fc64 	bl	8019814 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	691a      	ldr	r2, [r3, #16]
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	689b      	ldr	r3, [r3, #8]
 8018f54:	4619      	mov	r1, r3
 8018f56:	4610      	mov	r0, r2
 8018f58:	f000 ff4d 	bl	8019df6 <MQTTSerialize_pingreq>
 8018f5c:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8018f5e:	693b      	ldr	r3, [r7, #16]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	dd11      	ble.n	8018f88 <keepalive+0x98>
 8018f64:	f107 0308 	add.w	r3, r7, #8
 8018f68:	461a      	mov	r2, r3
 8018f6a:	6939      	ldr	r1, [r7, #16]
 8018f6c:	6878      	ldr	r0, [r7, #4]
 8018f6e:	f7ff fd98 	bl	8018aa2 <sendPacket>
 8018f72:	6178      	str	r0, [r7, #20]
 8018f74:	697b      	ldr	r3, [r7, #20]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d106      	bne.n	8018f88 <keepalive+0x98>
                c->ping_outstanding = 1;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2201      	movs	r2, #1
 8018f7e:	771a      	strb	r2, [r3, #28]
 8018f80:	e002      	b.n	8018f88 <keepalive+0x98>
        goto exit;
 8018f82:	bf00      	nop
 8018f84:	e000      	b.n	8018f88 <keepalive+0x98>
        }
    }

exit:
 8018f86:	bf00      	nop
    return rc;
 8018f88:	697b      	ldr	r3, [r7, #20]
}
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	3718      	adds	r7, #24
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	bd80      	pop	{r7, pc}

08018f92 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 8018f92:	b480      	push	{r7}
 8018f94:	b085      	sub	sp, #20
 8018f96:	af00      	add	r7, sp, #0
 8018f98:	6078      	str	r0, [r7, #4]
    int i = 0;
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	60fb      	str	r3, [r7, #12]
 8018fa2:	e008      	b.n	8018fb6 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	68fa      	ldr	r2, [r7, #12]
 8018fa8:	3205      	adds	r2, #5
 8018faa:	2100      	movs	r1, #0
 8018fac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	3301      	adds	r3, #1
 8018fb4:	60fb      	str	r3, [r7, #12]
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	2b04      	cmp	r3, #4
 8018fba:	ddf3      	ble.n	8018fa4 <MQTTCleanSession+0x12>
}
 8018fbc:	bf00      	nop
 8018fbe:	3714      	adds	r7, #20
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc6:	4770      	bx	lr

08018fc8 <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b082      	sub	sp, #8
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	2200      	movs	r2, #0
 8018fda:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d002      	beq.n	8018fea <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f7ff ffd4 	bl	8018f92 <MQTTCleanSession>
}
 8018fea:	bf00      	nop
 8018fec:	3708      	adds	r7, #8
 8018fee:	46bd      	mov	sp, r7
 8018ff0:	bd80      	pop	{r7, pc}
	...

08018ff4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8018ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ff6:	b095      	sub	sp, #84	; 0x54
 8018ff8:	af06      	add	r7, sp, #24
 8018ffa:	6078      	str	r0, [r7, #4]
 8018ffc:	6039      	str	r1, [r7, #0]
    int len = 0,
 8018ffe:	2300      	movs	r3, #0
 8019000:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 8019002:	2300      	movs	r3, #0
 8019004:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8019006:	6839      	ldr	r1, [r7, #0]
 8019008:	6878      	ldr	r0, [r7, #4]
 801900a:	f7ff fe1c 	bl	8018c46 <readPacket>
 801900e:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 8019010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019012:	2b0d      	cmp	r3, #13
 8019014:	d81e      	bhi.n	8019054 <cycle+0x60>
 8019016:	a201      	add	r2, pc, #4	; (adr r2, 801901c <cycle+0x28>)
 8019018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801901c:	080191ad 	.word	0x080191ad
 8019020:	08019055 	.word	0x08019055
 8019024:	080191ad 	.word	0x080191ad
 8019028:	0801905b 	.word	0x0801905b
 801902c:	080191ad 	.word	0x080191ad
 8019030:	08019129 	.word	0x08019129
 8019034:	08019129 	.word	0x08019129
 8019038:	080191ad 	.word	0x080191ad
 801903c:	08019055 	.word	0x08019055
 8019040:	080191ad 	.word	0x080191ad
 8019044:	08019055 	.word	0x08019055
 8019048:	080191ad 	.word	0x080191ad
 801904c:	08019055 	.word	0x08019055
 8019050:	080191a5 	.word	0x080191a5
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8019054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019056:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 8019058:	e0ba      	b.n	80191d0 <cycle+0x1dc>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 801905a:	2300      	movs	r3, #0
 801905c:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8019066:	4616      	mov	r6, r2
 8019068:	f107 0210 	add.w	r2, r7, #16
 801906c:	1d15      	adds	r5, r2, #4
 801906e:	f107 0210 	add.w	r2, r7, #16
 8019072:	1c54      	adds	r4, r2, #1
 8019074:	f107 010c 	add.w	r1, r7, #12
 8019078:	f107 0210 	add.w	r2, r7, #16
 801907c:	1c90      	adds	r0, r2, #2
 801907e:	9604      	str	r6, [sp, #16]
 8019080:	9303      	str	r3, [sp, #12]
 8019082:	f107 0310 	add.w	r3, r7, #16
 8019086:	330c      	adds	r3, #12
 8019088:	9302      	str	r3, [sp, #8]
 801908a:	f107 0310 	add.w	r3, r7, #16
 801908e:	3308      	adds	r3, #8
 8019090:	9301      	str	r3, [sp, #4]
 8019092:	f107 0320 	add.w	r3, r7, #32
 8019096:	9300      	str	r3, [sp, #0]
 8019098:	462b      	mov	r3, r5
 801909a:	4622      	mov	r2, r4
 801909c:	f000 feba 	bl	8019e14 <MQTTDeserialize_publish>
 80190a0:	4603      	mov	r3, r0
 80190a2:	2b01      	cmp	r3, #1
 80190a4:	f040 8091 	bne.w	80191ca <cycle+0x1d6>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	b2db      	uxtb	r3, r3
 80190ac:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80190ae:	f107 0210 	add.w	r2, r7, #16
 80190b2:	f107 0320 	add.w	r3, r7, #32
 80190b6:	4619      	mov	r1, r3
 80190b8:	6878      	ldr	r0, [r7, #4]
 80190ba:	f7ff feb1 	bl	8018e20 <deliverMessage>
            if (msg.qos != QOS0)
 80190be:	7c3b      	ldrb	r3, [r7, #16]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d075      	beq.n	80191b0 <cycle+0x1bc>
            {
                if (msg.qos == QOS1)
 80190c4:	7c3b      	ldrb	r3, [r7, #16]
 80190c6:	2b01      	cmp	r3, #1
 80190c8:	d10c      	bne.n	80190e4 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	6918      	ldr	r0, [r3, #16]
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	689b      	ldr	r3, [r3, #8]
 80190d2:	4619      	mov	r1, r3
 80190d4:	8abb      	ldrh	r3, [r7, #20]
 80190d6:	9300      	str	r3, [sp, #0]
 80190d8:	2300      	movs	r3, #0
 80190da:	2204      	movs	r2, #4
 80190dc:	f001 f9f4 	bl	801a4c8 <MQTTSerialize_ack>
 80190e0:	6378      	str	r0, [r7, #52]	; 0x34
 80190e2:	e00e      	b.n	8019102 <cycle+0x10e>
                else if (msg.qos == QOS2)
 80190e4:	7c3b      	ldrb	r3, [r7, #16]
 80190e6:	2b02      	cmp	r3, #2
 80190e8:	d10b      	bne.n	8019102 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	6918      	ldr	r0, [r3, #16]
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	689b      	ldr	r3, [r3, #8]
 80190f2:	4619      	mov	r1, r3
 80190f4:	8abb      	ldrh	r3, [r7, #20]
 80190f6:	9300      	str	r3, [sp, #0]
 80190f8:	2300      	movs	r3, #0
 80190fa:	2205      	movs	r2, #5
 80190fc:	f001 f9e4 	bl	801a4c8 <MQTTSerialize_ack>
 8019100:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8019102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019104:	2b00      	cmp	r3, #0
 8019106:	dc03      	bgt.n	8019110 <cycle+0x11c>
                    rc = FAILURE;
 8019108:	f04f 33ff 	mov.w	r3, #4294967295
 801910c:	633b      	str	r3, [r7, #48]	; 0x30
 801910e:	e005      	b.n	801911c <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8019110:	683a      	ldr	r2, [r7, #0]
 8019112:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019114:	6878      	ldr	r0, [r7, #4]
 8019116:	f7ff fcc4 	bl	8018aa2 <sendPacket>
 801911a:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801911e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019122:	d145      	bne.n	80191b0 <cycle+0x1bc>
                    goto exit; // there was a problem
 8019124:	bf00      	nop
 8019126:	e053      	b.n	80191d0 <cycle+0x1dc>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	695c      	ldr	r4, [r3, #20]
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	68db      	ldr	r3, [r3, #12]
 8019130:	f107 020a 	add.w	r2, r7, #10
 8019134:	f107 0109 	add.w	r1, r7, #9
 8019138:	f107 0008 	add.w	r0, r7, #8
 801913c:	9300      	str	r3, [sp, #0]
 801913e:	4623      	mov	r3, r4
 8019140:	f000 feda 	bl	8019ef8 <MQTTDeserialize_ack>
 8019144:	4603      	mov	r3, r0
 8019146:	2b01      	cmp	r3, #1
 8019148:	d003      	beq.n	8019152 <cycle+0x15e>
                rc = FAILURE;
 801914a:	f04f 33ff 	mov.w	r3, #4294967295
 801914e:	633b      	str	r3, [r7, #48]	; 0x30
 8019150:	e023      	b.n	801919a <cycle+0x1a6>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	6918      	ldr	r0, [r3, #16]
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	689b      	ldr	r3, [r3, #8]
 801915a:	4619      	mov	r1, r3
 801915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801915e:	2b05      	cmp	r3, #5
 8019160:	d101      	bne.n	8019166 <cycle+0x172>
 8019162:	2206      	movs	r2, #6
 8019164:	e000      	b.n	8019168 <cycle+0x174>
 8019166:	2207      	movs	r2, #7
 8019168:	897b      	ldrh	r3, [r7, #10]
 801916a:	9300      	str	r3, [sp, #0]
 801916c:	2300      	movs	r3, #0
 801916e:	f001 f9ab 	bl	801a4c8 <MQTTSerialize_ack>
 8019172:	6378      	str	r0, [r7, #52]	; 0x34
 8019174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019176:	2b00      	cmp	r3, #0
 8019178:	dc03      	bgt.n	8019182 <cycle+0x18e>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 801917a:	f04f 33ff 	mov.w	r3, #4294967295
 801917e:	633b      	str	r3, [r7, #48]	; 0x30
 8019180:	e00b      	b.n	801919a <cycle+0x1a6>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8019182:	683a      	ldr	r2, [r7, #0]
 8019184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019186:	6878      	ldr	r0, [r7, #4]
 8019188:	f7ff fc8b 	bl	8018aa2 <sendPacket>
 801918c:	6338      	str	r0, [r7, #48]	; 0x30
 801918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019190:	2b00      	cmp	r3, #0
 8019192:	d002      	beq.n	801919a <cycle+0x1a6>
                rc = FAILURE; // there was a problem
 8019194:	f04f 33ff 	mov.w	r3, #4294967295
 8019198:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191a0:	d108      	bne.n	80191b4 <cycle+0x1c0>
                goto exit; // there was a problem
 80191a2:	e015      	b.n	80191d0 <cycle+0x1dc>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	2200      	movs	r2, #0
 80191a8:	771a      	strb	r2, [r3, #28]
            break;
 80191aa:	e004      	b.n	80191b6 <cycle+0x1c2>
            break;
 80191ac:	bf00      	nop
 80191ae:	e002      	b.n	80191b6 <cycle+0x1c2>
            break;
 80191b0:	bf00      	nop
 80191b2:	e000      	b.n	80191b6 <cycle+0x1c2>
            break;
 80191b4:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 80191b6:	6878      	ldr	r0, [r7, #4]
 80191b8:	f7ff fe9a 	bl	8018ef0 <keepalive>
 80191bc:	4603      	mov	r3, r0
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d005      	beq.n	80191ce <cycle+0x1da>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 80191c2:	f04f 33ff 	mov.w	r3, #4294967295
 80191c6:	633b      	str	r3, [r7, #48]	; 0x30
 80191c8:	e002      	b.n	80191d0 <cycle+0x1dc>
                goto exit;
 80191ca:	bf00      	nop
 80191cc:	e000      	b.n	80191d0 <cycle+0x1dc>
    }

exit:
 80191ce:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 80191d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d102      	bne.n	80191dc <cycle+0x1e8>
        rc = packet_type;
 80191d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d8:	633b      	str	r3, [r7, #48]	; 0x30
 80191da:	e006      	b.n	80191ea <cycle+0x1f6>
    else if (c->isconnected)
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	6a1b      	ldr	r3, [r3, #32]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d002      	beq.n	80191ea <cycle+0x1f6>
        MQTTCloseSession(c);
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f7ff feef 	bl	8018fc8 <MQTTCloseSession>
    return rc;
 80191ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80191ec:	4618      	mov	r0, r3
 80191ee:	373c      	adds	r7, #60	; 0x3c
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080191f4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b086      	sub	sp, #24
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
 80191fc:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 80191fe:	2300      	movs	r3, #0
 8019200:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8019202:	f107 030c 	add.w	r3, r7, #12
 8019206:	4618      	mov	r0, r3
 8019208:	f000 fb46 	bl	8019898 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 801920c:	683a      	ldr	r2, [r7, #0]
 801920e:	f107 030c 	add.w	r3, r7, #12
 8019212:	4611      	mov	r1, r2
 8019214:	4618      	mov	r0, r3
 8019216:	f000 fafd 	bl	8019814 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 801921a:	f107 030c 	add.w	r3, r7, #12
 801921e:	4619      	mov	r1, r3
 8019220:	6878      	ldr	r0, [r7, #4]
 8019222:	f7ff fee7 	bl	8018ff4 <cycle>
 8019226:	4603      	mov	r3, r0
 8019228:	2b00      	cmp	r3, #0
 801922a:	da03      	bge.n	8019234 <MQTTYield+0x40>
        {
            rc = FAILURE;
 801922c:	f04f 33ff 	mov.w	r3, #4294967295
 8019230:	617b      	str	r3, [r7, #20]
            break;
 8019232:	e007      	b.n	8019244 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8019234:	f107 030c 	add.w	r3, r7, #12
 8019238:	4618      	mov	r0, r3
 801923a:	f000 fad5 	bl	80197e8 <TimerIsExpired>
 801923e:	4603      	mov	r3, r0
 8019240:	2b00      	cmp	r3, #0
 8019242:	d0ea      	beq.n	801921a <MQTTYield+0x26>

    return rc;
 8019244:	697b      	ldr	r3, [r7, #20]
}
 8019246:	4618      	mov	r0, r3
 8019248:	3718      	adds	r7, #24
 801924a:	46bd      	mov	sp, r7
 801924c:	bd80      	pop	{r7, pc}

0801924e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801924e:	b580      	push	{r7, lr}
 8019250:	b086      	sub	sp, #24
 8019252:	af00      	add	r7, sp, #0
 8019254:	60f8      	str	r0, [r7, #12]
 8019256:	60b9      	str	r1, [r7, #8]
 8019258:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801925a:	f04f 33ff 	mov.w	r3, #4294967295
 801925e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f000 fac1 	bl	80197e8 <TimerIsExpired>
 8019266:	4603      	mov	r3, r0
 8019268:	2b00      	cmp	r3, #0
 801926a:	d10c      	bne.n	8019286 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 801926c:	6879      	ldr	r1, [r7, #4]
 801926e:	68f8      	ldr	r0, [r7, #12]
 8019270:	f7ff fec0 	bl	8018ff4 <cycle>
 8019274:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8019276:	697a      	ldr	r2, [r7, #20]
 8019278:	68bb      	ldr	r3, [r7, #8]
 801927a:	429a      	cmp	r2, r3
 801927c:	d004      	beq.n	8019288 <waitfor+0x3a>
 801927e:	697b      	ldr	r3, [r7, #20]
 8019280:	2b00      	cmp	r3, #0
 8019282:	daed      	bge.n	8019260 <waitfor+0x12>
 8019284:	e000      	b.n	8019288 <waitfor+0x3a>
            break; // we timed out
 8019286:	bf00      	nop

    return rc;
 8019288:	697b      	ldr	r3, [r7, #20]
}
 801928a:	4618      	mov	r0, r3
 801928c:	3718      	adds	r7, #24
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
	...

08019294 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b09e      	sub	sp, #120	; 0x78
 8019298:	af00      	add	r7, sp, #0
 801929a:	60f8      	str	r0, [r7, #12]
 801929c:	60b9      	str	r1, [r7, #8]
 801929e:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 80192a0:	f04f 33ff 	mov.w	r3, #4294967295
 80192a4:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 80192a6:	4a43      	ldr	r2, [pc, #268]	; (80193b4 <MQTTConnectWithResults+0x120>)
 80192a8:	f107 0310 	add.w	r3, r7, #16
 80192ac:	4611      	mov	r1, r2
 80192ae:	2258      	movs	r2, #88	; 0x58
 80192b0:	4618      	mov	r0, r3
 80192b2:	f002 fdc6 	bl	801be42 <memcpy>
    int len = 0;
 80192b6:	2300      	movs	r3, #0
 80192b8:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	6a1b      	ldr	r3, [r3, #32]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d164      	bne.n	801938c <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 80192c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80192c6:	4618      	mov	r0, r3
 80192c8:	f000 fae6 	bl	8019898 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	685a      	ldr	r2, [r3, #4]
 80192d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80192d4:	4611      	mov	r1, r2
 80192d6:	4618      	mov	r0, r3
 80192d8:	f000 fa9c 	bl	8019814 <TimerCountdownMS>

    if (options == 0)
 80192dc:	68bb      	ldr	r3, [r7, #8]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d102      	bne.n	80192e8 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 80192e2:	f107 0310 	add.w	r3, r7, #16
 80192e6:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 80192e8:	68bb      	ldr	r3, [r7, #8]
 80192ea:	8b1b      	ldrh	r3, [r3, #24]
 80192ec:	461a      	mov	r2, r3
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 80192f2:	68bb      	ldr	r3, [r7, #8]
 80192f4:	7e9b      	ldrb	r3, [r3, #26]
 80192f6:	461a      	mov	r2, r3
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	699b      	ldr	r3, [r3, #24]
 8019306:	4619      	mov	r1, r3
 8019308:	4610      	mov	r0, r2
 801930a:	f000 fa97 	bl	801983c <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	6918      	ldr	r0, [r3, #16]
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	689b      	ldr	r3, [r3, #8]
 8019316:	68ba      	ldr	r2, [r7, #8]
 8019318:	4619      	mov	r1, r3
 801931a:	f000 fbe1 	bl	8019ae0 <MQTTSerialize_connect>
 801931e:	6738      	str	r0, [r7, #112]	; 0x70
 8019320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019322:	2b00      	cmp	r3, #0
 8019324:	dd34      	ble.n	8019390 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8019326:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801932a:	461a      	mov	r2, r3
 801932c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801932e:	68f8      	ldr	r0, [r7, #12]
 8019330:	f7ff fbb7 	bl	8018aa2 <sendPacket>
 8019334:	6778      	str	r0, [r7, #116]	; 0x74
 8019336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019338:	2b00      	cmp	r3, #0
 801933a:	d12b      	bne.n	8019394 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801933c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8019340:	461a      	mov	r2, r3
 8019342:	2102      	movs	r1, #2
 8019344:	68f8      	ldr	r0, [r7, #12]
 8019346:	f7ff ff82 	bl	801924e <waitfor>
 801934a:	4603      	mov	r3, r0
 801934c:	2b02      	cmp	r3, #2
 801934e:	d119      	bne.n	8019384 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	2200      	movs	r2, #0
 8019354:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	2200      	movs	r2, #0
 801935a:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	1c58      	adds	r0, r3, #1
 8019360:	6879      	ldr	r1, [r7, #4]
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	695a      	ldr	r2, [r3, #20]
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	68db      	ldr	r3, [r3, #12]
 801936a:	f000 fca7 	bl	8019cbc <MQTTDeserialize_connack>
 801936e:	4603      	mov	r3, r0
 8019370:	2b01      	cmp	r3, #1
 8019372:	d103      	bne.n	801937c <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	781b      	ldrb	r3, [r3, #0]
 8019378:	677b      	str	r3, [r7, #116]	; 0x74
 801937a:	e00c      	b.n	8019396 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 801937c:	f04f 33ff 	mov.w	r3, #4294967295
 8019380:	677b      	str	r3, [r7, #116]	; 0x74
 8019382:	e008      	b.n	8019396 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8019384:	f04f 33ff 	mov.w	r3, #4294967295
 8019388:	677b      	str	r3, [r7, #116]	; 0x74
 801938a:	e004      	b.n	8019396 <MQTTConnectWithResults+0x102>
		  goto exit;
 801938c:	bf00      	nop
 801938e:	e002      	b.n	8019396 <MQTTConnectWithResults+0x102>
        goto exit;
 8019390:	bf00      	nop
 8019392:	e000      	b.n	8019396 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8019394:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8019396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019398:	2b00      	cmp	r3, #0
 801939a:	d105      	bne.n	80193a8 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	2201      	movs	r2, #1
 80193a0:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	2200      	movs	r2, #0
 80193a6:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 80193a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80193aa:	4618      	mov	r0, r3
 80193ac:	3778      	adds	r7, #120	; 0x78
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
 80193b2:	bf00      	nop
 80193b4:	08020afc 	.word	0x08020afc

080193b8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b084      	sub	sp, #16
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 80193c2:	f107 030c 	add.w	r3, r7, #12
 80193c6:	461a      	mov	r2, r3
 80193c8:	6839      	ldr	r1, [r7, #0]
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f7ff ff62 	bl	8019294 <MQTTConnectWithResults>
 80193d0:	4603      	mov	r3, r0
}
 80193d2:	4618      	mov	r0, r3
 80193d4:	3710      	adds	r7, #16
 80193d6:	46bd      	mov	sp, r7
 80193d8:	bd80      	pop	{r7, pc}

080193da <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 80193da:	b580      	push	{r7, lr}
 80193dc:	b086      	sub	sp, #24
 80193de:	af00      	add	r7, sp, #0
 80193e0:	60f8      	str	r0, [r7, #12]
 80193e2:	60b9      	str	r1, [r7, #8]
 80193e4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80193e6:	f04f 33ff 	mov.w	r3, #4294967295
 80193ea:	617b      	str	r3, [r7, #20]
    int i = -1;
 80193ec:	f04f 33ff 	mov.w	r3, #4294967295
 80193f0:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80193f2:	2300      	movs	r3, #0
 80193f4:	613b      	str	r3, [r7, #16]
 80193f6:	e028      	b.n	801944a <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	693a      	ldr	r2, [r7, #16]
 80193fc:	3205      	adds	r2, #5
 80193fe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d01e      	beq.n	8019444 <MQTTSetMessageHandler+0x6a>
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	693a      	ldr	r2, [r7, #16]
 801940a:	3205      	adds	r2, #5
 801940c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8019410:	68b9      	ldr	r1, [r7, #8]
 8019412:	4618      	mov	r0, r3
 8019414:	f7e6 feec 	bl	80001f0 <strcmp>
 8019418:	4603      	mov	r3, r0
 801941a:	2b00      	cmp	r3, #0
 801941c:	d112      	bne.n	8019444 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d10c      	bne.n	801943e <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	693a      	ldr	r2, [r7, #16]
 8019428:	3205      	adds	r2, #5
 801942a:	2100      	movs	r1, #0
 801942c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8019430:	68fa      	ldr	r2, [r7, #12]
 8019432:	693b      	ldr	r3, [r7, #16]
 8019434:	3305      	adds	r3, #5
 8019436:	00db      	lsls	r3, r3, #3
 8019438:	4413      	add	r3, r2
 801943a:	2200      	movs	r2, #0
 801943c:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 801943e:	2300      	movs	r3, #0
 8019440:	617b      	str	r3, [r7, #20]
            break;
 8019442:	e005      	b.n	8019450 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019444:	693b      	ldr	r3, [r7, #16]
 8019446:	3301      	adds	r3, #1
 8019448:	613b      	str	r3, [r7, #16]
 801944a:	693b      	ldr	r3, [r7, #16]
 801944c:	2b04      	cmp	r3, #4
 801944e:	ddd3      	ble.n	80193f8 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d026      	beq.n	80194a4 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8019456:	697b      	ldr	r3, [r7, #20]
 8019458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801945c:	d112      	bne.n	8019484 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801945e:	2300      	movs	r3, #0
 8019460:	613b      	str	r3, [r7, #16]
 8019462:	e00c      	b.n	801947e <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	693a      	ldr	r2, [r7, #16]
 8019468:	3205      	adds	r2, #5
 801946a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d102      	bne.n	8019478 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 8019472:	2300      	movs	r3, #0
 8019474:	617b      	str	r3, [r7, #20]
                    break;
 8019476:	e005      	b.n	8019484 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019478:	693b      	ldr	r3, [r7, #16]
 801947a:	3301      	adds	r3, #1
 801947c:	613b      	str	r3, [r7, #16]
 801947e:	693b      	ldr	r3, [r7, #16]
 8019480:	2b04      	cmp	r3, #4
 8019482:	ddef      	ble.n	8019464 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8019484:	693b      	ldr	r3, [r7, #16]
 8019486:	2b04      	cmp	r3, #4
 8019488:	dc0c      	bgt.n	80194a4 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	693a      	ldr	r2, [r7, #16]
 801948e:	3205      	adds	r2, #5
 8019490:	68b9      	ldr	r1, [r7, #8]
 8019492:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8019496:	68fa      	ldr	r2, [r7, #12]
 8019498:	693b      	ldr	r3, [r7, #16]
 801949a:	3305      	adds	r3, #5
 801949c:	00db      	lsls	r3, r3, #3
 801949e:	4413      	add	r3, r2
 80194a0:	687a      	ldr	r2, [r7, #4]
 80194a2:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 80194a4:	697b      	ldr	r3, [r7, #20]
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3718      	adds	r7, #24
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}

080194ae <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 80194ae:	b5b0      	push	{r4, r5, r7, lr}
 80194b0:	b092      	sub	sp, #72	; 0x48
 80194b2:	af04      	add	r7, sp, #16
 80194b4:	60f8      	str	r0, [r7, #12]
 80194b6:	60b9      	str	r1, [r7, #8]
 80194b8:	603b      	str	r3, [r7, #0]
 80194ba:	4613      	mov	r3, r2
 80194bc:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 80194be:	f04f 33ff 	mov.w	r3, #4294967295
 80194c2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 80194c4:	2300      	movs	r3, #0
 80194c6:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 80194c8:	2300      	movs	r3, #0
 80194ca:	61fb      	str	r3, [r7, #28]
 80194cc:	2300      	movs	r3, #0
 80194ce:	623b      	str	r3, [r7, #32]
 80194d0:	2300      	movs	r3, #0
 80194d2:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 80194d4:	68bb      	ldr	r3, [r7, #8]
 80194d6:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	6a1b      	ldr	r3, [r3, #32]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d063      	beq.n	80195a8 <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 80194e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80194e4:	4618      	mov	r0, r3
 80194e6:	f000 f9d7 	bl	8019898 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	685a      	ldr	r2, [r3, #4]
 80194ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80194f2:	4611      	mov	r1, r2
 80194f4:	4618      	mov	r0, r3
 80194f6:	f000 f98d 	bl	8019814 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	691c      	ldr	r4, [r3, #16]
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	689b      	ldr	r3, [r3, #8]
 8019502:	461d      	mov	r5, r3
 8019504:	68f8      	ldr	r0, [r7, #12]
 8019506:	f7ff fab3 	bl	8018a70 <getNextPacketId>
 801950a:	4603      	mov	r3, r0
 801950c:	b29a      	uxth	r2, r3
 801950e:	1dfb      	adds	r3, r7, #7
 8019510:	9302      	str	r3, [sp, #8]
 8019512:	f107 031c 	add.w	r3, r7, #28
 8019516:	9301      	str	r3, [sp, #4]
 8019518:	2301      	movs	r3, #1
 801951a:	9300      	str	r3, [sp, #0]
 801951c:	4613      	mov	r3, r2
 801951e:	2200      	movs	r2, #0
 8019520:	4629      	mov	r1, r5
 8019522:	4620      	mov	r0, r4
 8019524:	f001 f84d 	bl	801a5c2 <MQTTSerialize_subscribe>
 8019528:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801952c:	2b00      	cmp	r3, #0
 801952e:	dd3d      	ble.n	80195ac <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8019530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019534:	461a      	mov	r2, r3
 8019536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019538:	68f8      	ldr	r0, [r7, #12]
 801953a:	f7ff fab2 	bl	8018aa2 <sendPacket>
 801953e:	6378      	str	r0, [r7, #52]	; 0x34
 8019540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019542:	2b00      	cmp	r3, #0
 8019544:	d134      	bne.n	80195b0 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8019546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801954a:	461a      	mov	r2, r3
 801954c:	2109      	movs	r1, #9
 801954e:	68f8      	ldr	r0, [r7, #12]
 8019550:	f7ff fe7d 	bl	801924e <waitfor>
 8019554:	4603      	mov	r3, r0
 8019556:	2b09      	cmp	r3, #9
 8019558:	d122      	bne.n	80195a0 <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 801955a:	2300      	movs	r3, #0
 801955c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 801955e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019560:	2200      	movs	r2, #0
 8019562:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8019564:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	695b      	ldr	r3, [r3, #20]
 801956a:	68fa      	ldr	r2, [r7, #12]
 801956c:	68d2      	ldr	r2, [r2, #12]
 801956e:	4614      	mov	r4, r2
 8019570:	f107 0218 	add.w	r2, r7, #24
 8019574:	f107 0016 	add.w	r0, r7, #22
 8019578:	9401      	str	r4, [sp, #4]
 801957a:	9300      	str	r3, [sp, #0]
 801957c:	460b      	mov	r3, r1
 801957e:	2101      	movs	r1, #1
 8019580:	f001 f89c 	bl	801a6bc <MQTTDeserialize_suback>
 8019584:	4603      	mov	r3, r0
 8019586:	2b01      	cmp	r3, #1
 8019588:	d113      	bne.n	80195b2 <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 801958a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801958c:	781b      	ldrb	r3, [r3, #0]
 801958e:	2b80      	cmp	r3, #128	; 0x80
 8019590:	d00f      	beq.n	80195b2 <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 8019592:	683a      	ldr	r2, [r7, #0]
 8019594:	68b9      	ldr	r1, [r7, #8]
 8019596:	68f8      	ldr	r0, [r7, #12]
 8019598:	f7ff ff1f 	bl	80193da <MQTTSetMessageHandler>
 801959c:	6378      	str	r0, [r7, #52]	; 0x34
 801959e:	e008      	b.n	80195b2 <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 80195a0:	f04f 33ff 	mov.w	r3, #4294967295
 80195a4:	637b      	str	r3, [r7, #52]	; 0x34
 80195a6:	e004      	b.n	80195b2 <MQTTSubscribeWithResults+0x104>
		    goto exit;
 80195a8:	bf00      	nop
 80195aa:	e002      	b.n	80195b2 <MQTTSubscribeWithResults+0x104>
        goto exit;
 80195ac:	bf00      	nop
 80195ae:	e000      	b.n	80195b2 <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 80195b0:	bf00      	nop

exit:
    if (rc == FAILURE)
 80195b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195b8:	d102      	bne.n	80195c0 <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 80195ba:	68f8      	ldr	r0, [r7, #12]
 80195bc:	f7ff fd04 	bl	8018fc8 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 80195c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	3738      	adds	r7, #56	; 0x38
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bdb0      	pop	{r4, r5, r7, pc}

080195ca <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 80195ca:	b580      	push	{r7, lr}
 80195cc:	b088      	sub	sp, #32
 80195ce:	af02      	add	r7, sp, #8
 80195d0:	60f8      	str	r0, [r7, #12]
 80195d2:	60b9      	str	r1, [r7, #8]
 80195d4:	603b      	str	r3, [r7, #0]
 80195d6:	4613      	mov	r3, r2
 80195d8:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 80195da:	79fa      	ldrb	r2, [r7, #7]
 80195dc:	f107 0314 	add.w	r3, r7, #20
 80195e0:	9300      	str	r3, [sp, #0]
 80195e2:	683b      	ldr	r3, [r7, #0]
 80195e4:	68b9      	ldr	r1, [r7, #8]
 80195e6:	68f8      	ldr	r0, [r7, #12]
 80195e8:	f7ff ff61 	bl	80194ae <MQTTSubscribeWithResults>
 80195ec:	4603      	mov	r3, r0
}
 80195ee:	4618      	mov	r0, r3
 80195f0:	3718      	adds	r7, #24
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}

080195f6 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 80195f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195f8:	b097      	sub	sp, #92	; 0x5c
 80195fa:	af08      	add	r7, sp, #32
 80195fc:	60f8      	str	r0, [r7, #12]
 80195fe:	60b9      	str	r1, [r7, #8]
 8019600:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8019602:	f04f 33ff 	mov.w	r3, #4294967295
 8019606:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8019608:	2300      	movs	r3, #0
 801960a:	61fb      	str	r3, [r7, #28]
 801960c:	2300      	movs	r3, #0
 801960e:	623b      	str	r3, [r7, #32]
 8019610:	2300      	movs	r3, #0
 8019612:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8019614:	68bb      	ldr	r3, [r7, #8]
 8019616:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8019618:	2300      	movs	r3, #0
 801961a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	6a1b      	ldr	r3, [r3, #32]
 8019620:	2b00      	cmp	r3, #0
 8019622:	f000 809b 	beq.w	801975c <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8019626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801962a:	4618      	mov	r0, r3
 801962c:	f000 f934 	bl	8019898 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	685a      	ldr	r2, [r3, #4]
 8019634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019638:	4611      	mov	r1, r2
 801963a:	4618      	mov	r0, r3
 801963c:	f000 f8ea 	bl	8019814 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	781b      	ldrb	r3, [r3, #0]
 8019644:	2b01      	cmp	r3, #1
 8019646:	d003      	beq.n	8019650 <MQTTPublish+0x5a>
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	781b      	ldrb	r3, [r3, #0]
 801964c:	2b02      	cmp	r3, #2
 801964e:	d106      	bne.n	801965e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8019650:	68f8      	ldr	r0, [r7, #12]
 8019652:	f7ff fa0d 	bl	8018a70 <getNextPacketId>
 8019656:	4603      	mov	r3, r0
 8019658:	b29a      	uxth	r2, r3
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	691b      	ldr	r3, [r3, #16]
 8019662:	603b      	str	r3, [r7, #0]
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	689b      	ldr	r3, [r3, #8]
 8019668:	469c      	mov	ip, r3
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	781b      	ldrb	r3, [r3, #0]
 801966e:	469e      	mov	lr, r3
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	785d      	ldrb	r5, [r3, #1]
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	689b      	ldr	r3, [r3, #8]
 801967c:	687a      	ldr	r2, [r7, #4]
 801967e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8019680:	9206      	str	r2, [sp, #24]
 8019682:	9305      	str	r3, [sp, #20]
 8019684:	ac02      	add	r4, sp, #8
 8019686:	f107 031c 	add.w	r3, r7, #28
 801968a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801968e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019692:	9601      	str	r6, [sp, #4]
 8019694:	9500      	str	r5, [sp, #0]
 8019696:	4673      	mov	r3, lr
 8019698:	2200      	movs	r2, #0
 801969a:	4661      	mov	r1, ip
 801969c:	6838      	ldr	r0, [r7, #0]
 801969e:	f000 fe9c 	bl	801a3da <MQTTSerialize_publish>
 80196a2:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80196a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	dd5a      	ble.n	8019760 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 80196aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80196ae:	461a      	mov	r2, r3
 80196b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80196b2:	68f8      	ldr	r0, [r7, #12]
 80196b4:	f7ff f9f5 	bl	8018aa2 <sendPacket>
 80196b8:	6378      	str	r0, [r7, #52]	; 0x34
 80196ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d151      	bne.n	8019764 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	781b      	ldrb	r3, [r3, #0]
 80196c4:	2b01      	cmp	r3, #1
 80196c6:	d122      	bne.n	801970e <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80196c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80196cc:	461a      	mov	r2, r3
 80196ce:	2104      	movs	r1, #4
 80196d0:	68f8      	ldr	r0, [r7, #12]
 80196d2:	f7ff fdbc 	bl	801924e <waitfor>
 80196d6:	4603      	mov	r3, r0
 80196d8:	2b04      	cmp	r3, #4
 80196da:	d114      	bne.n	8019706 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	695c      	ldr	r4, [r3, #20]
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	68db      	ldr	r3, [r3, #12]
 80196e4:	f107 021a 	add.w	r2, r7, #26
 80196e8:	f107 0119 	add.w	r1, r7, #25
 80196ec:	f107 0018 	add.w	r0, r7, #24
 80196f0:	9300      	str	r3, [sp, #0]
 80196f2:	4623      	mov	r3, r4
 80196f4:	f000 fc00 	bl	8019ef8 <MQTTDeserialize_ack>
 80196f8:	4603      	mov	r3, r0
 80196fa:	2b01      	cmp	r3, #1
 80196fc:	d035      	beq.n	801976a <MQTTPublish+0x174>
                rc = FAILURE;
 80196fe:	f04f 33ff 	mov.w	r3, #4294967295
 8019702:	637b      	str	r3, [r7, #52]	; 0x34
 8019704:	e031      	b.n	801976a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8019706:	f04f 33ff 	mov.w	r3, #4294967295
 801970a:	637b      	str	r3, [r7, #52]	; 0x34
 801970c:	e02d      	b.n	801976a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	2b02      	cmp	r3, #2
 8019714:	d128      	bne.n	8019768 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8019716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801971a:	461a      	mov	r2, r3
 801971c:	2107      	movs	r1, #7
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	f7ff fd95 	bl	801924e <waitfor>
 8019724:	4603      	mov	r3, r0
 8019726:	2b07      	cmp	r3, #7
 8019728:	d114      	bne.n	8019754 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	695c      	ldr	r4, [r3, #20]
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	68db      	ldr	r3, [r3, #12]
 8019732:	f107 0216 	add.w	r2, r7, #22
 8019736:	f107 0115 	add.w	r1, r7, #21
 801973a:	f107 0014 	add.w	r0, r7, #20
 801973e:	9300      	str	r3, [sp, #0]
 8019740:	4623      	mov	r3, r4
 8019742:	f000 fbd9 	bl	8019ef8 <MQTTDeserialize_ack>
 8019746:	4603      	mov	r3, r0
 8019748:	2b01      	cmp	r3, #1
 801974a:	d00e      	beq.n	801976a <MQTTPublish+0x174>
                rc = FAILURE;
 801974c:	f04f 33ff 	mov.w	r3, #4294967295
 8019750:	637b      	str	r3, [r7, #52]	; 0x34
 8019752:	e00a      	b.n	801976a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8019754:	f04f 33ff 	mov.w	r3, #4294967295
 8019758:	637b      	str	r3, [r7, #52]	; 0x34
 801975a:	e006      	b.n	801976a <MQTTPublish+0x174>
		    goto exit;
 801975c:	bf00      	nop
 801975e:	e004      	b.n	801976a <MQTTPublish+0x174>
        goto exit;
 8019760:	bf00      	nop
 8019762:	e002      	b.n	801976a <MQTTPublish+0x174>
        goto exit; // there was a problem
 8019764:	bf00      	nop
 8019766:	e000      	b.n	801976a <MQTTPublish+0x174>
    }

exit:
 8019768:	bf00      	nop
    if (rc == FAILURE)
 801976a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801976c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019770:	d102      	bne.n	8019778 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8019772:	68f8      	ldr	r0, [r7, #12]
 8019774:	f7ff fc28 	bl	8018fc8 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8019778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801977a:	4618      	mov	r0, r3
 801977c:	373c      	adds	r7, #60	; 0x3c
 801977e:	46bd      	mov	sp, r7
 8019780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019782 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8019782:	b580      	push	{r7, lr}
 8019784:	b086      	sub	sp, #24
 8019786:	af00      	add	r7, sp, #0
 8019788:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801978a:	f04f 33ff 	mov.w	r3, #4294967295
 801978e:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 8019790:	2300      	movs	r3, #0
 8019792:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8019794:	f107 0308 	add.w	r3, r7, #8
 8019798:	4618      	mov	r0, r3
 801979a:	f000 f87d 	bl	8019898 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	685a      	ldr	r2, [r3, #4]
 80197a2:	f107 0308 	add.w	r3, r7, #8
 80197a6:	4611      	mov	r1, r2
 80197a8:	4618      	mov	r0, r3
 80197aa:	f000 f833 	bl	8019814 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	691a      	ldr	r2, [r3, #16]
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	689b      	ldr	r3, [r3, #8]
 80197b6:	4619      	mov	r1, r3
 80197b8:	4610      	mov	r0, r2
 80197ba:	f000 fb0d 	bl	8019dd8 <MQTTSerialize_disconnect>
 80197be:	6138      	str	r0, [r7, #16]
    if (len > 0)
 80197c0:	693b      	ldr	r3, [r7, #16]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	dd07      	ble.n	80197d6 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 80197c6:	f107 0308 	add.w	r3, r7, #8
 80197ca:	461a      	mov	r2, r3
 80197cc:	6939      	ldr	r1, [r7, #16]
 80197ce:	6878      	ldr	r0, [r7, #4]
 80197d0:	f7ff f967 	bl	8018aa2 <sendPacket>
 80197d4:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 80197d6:	6878      	ldr	r0, [r7, #4]
 80197d8:	f7ff fbf6 	bl	8018fc8 <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 80197dc:	697b      	ldr	r3, [r7, #20]
}
 80197de:	4618      	mov	r0, r3
 80197e0:	3718      	adds	r7, #24
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bd80      	pop	{r7, pc}
	...

080197e8 <TimerIsExpired>:
#define SERVER_IP4	227

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 80197e8:	b480      	push	{r7}
 80197ea:	b085      	sub	sp, #20
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	685a      	ldr	r2, [r3, #4]
 80197f4:	4b06      	ldr	r3, [pc, #24]	; (8019810 <TimerIsExpired+0x28>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	1ad3      	subs	r3, r2, r3
 80197fa:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	0fdb      	lsrs	r3, r3, #31
 8019800:	b2db      	uxtb	r3, r3
}
 8019802:	4618      	mov	r0, r3
 8019804:	3714      	adds	r7, #20
 8019806:	46bd      	mov	sp, r7
 8019808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980c:	4770      	bx	lr
 801980e:	bf00      	nop
 8019810:	2000c59c 	.word	0x2000c59c

08019814 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 8019814:	b480      	push	{r7}
 8019816:	b083      	sub	sp, #12
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
 801981c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801981e:	4b06      	ldr	r3, [pc, #24]	; (8019838 <TimerCountdownMS+0x24>)
 8019820:	681a      	ldr	r2, [r3, #0]
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	441a      	add	r2, r3
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	605a      	str	r2, [r3, #4]
}
 801982a:	bf00      	nop
 801982c:	370c      	adds	r7, #12
 801982e:	46bd      	mov	sp, r7
 8019830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019834:	4770      	bx	lr
 8019836:	bf00      	nop
 8019838:	2000c59c 	.word	0x2000c59c

0801983c <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 801983c:	b480      	push	{r7}
 801983e:	b083      	sub	sp, #12
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
 8019844:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8019846:	683b      	ldr	r3, [r7, #0]
 8019848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801984c:	fb02 f203 	mul.w	r2, r2, r3
 8019850:	4b05      	ldr	r3, [pc, #20]	; (8019868 <TimerCountdown+0x2c>)
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	441a      	add	r2, r3
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	605a      	str	r2, [r3, #4]
}
 801985a:	bf00      	nop
 801985c:	370c      	adds	r7, #12
 801985e:	46bd      	mov	sp, r7
 8019860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019864:	4770      	bx	lr
 8019866:	bf00      	nop
 8019868:	2000c59c 	.word	0x2000c59c

0801986c <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 801986c:	b480      	push	{r7}
 801986e:	b085      	sub	sp, #20
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	685a      	ldr	r2, [r3, #4]
 8019878:	4b06      	ldr	r3, [pc, #24]	; (8019894 <TimerLeftMS+0x28>)
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	1ad3      	subs	r3, r2, r3
 801987e:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8019886:	4618      	mov	r0, r3
 8019888:	3714      	adds	r7, #20
 801988a:	46bd      	mov	sp, r7
 801988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019890:	4770      	bx	lr
 8019892:	bf00      	nop
 8019894:	2000c59c 	.word	0x2000c59c

08019898 <TimerInit>:

void TimerInit(Timer *timer) {
 8019898:	b480      	push	{r7}
 801989a:	b083      	sub	sp, #12
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	2200      	movs	r2, #0
 80198a4:	605a      	str	r2, [r3, #4]
}
 80198a6:	bf00      	nop
 80198a8:	370c      	adds	r7, #12
 80198aa:	46bd      	mov	sp, r7
 80198ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b0:	4770      	bx	lr
	...

080198b4 <NewNetwork>:

#ifdef MQTT_LWIP_SOCKET
void NewNetwork(Network *n) {
 80198b4:	b480      	push	{r7}
 80198b6:	b083      	sub	sp, #12
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	6078      	str	r0, [r7, #4]
	n->socket = 0; //clear
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	2200      	movs	r2, #0
 80198c0:	601a      	str	r2, [r3, #0]
	n->mqttread = net_read; //receive function
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	4a06      	ldr	r2, [pc, #24]	; (80198e0 <NewNetwork+0x2c>)
 80198c6:	605a      	str	r2, [r3, #4]
	n->mqttwrite = net_write; //send function
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	4a06      	ldr	r2, [pc, #24]	; (80198e4 <NewNetwork+0x30>)
 80198cc:	609a      	str	r2, [r3, #8]
	n->disconnect = net_disconnect; //disconnection function
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	4a05      	ldr	r2, [pc, #20]	; (80198e8 <NewNetwork+0x34>)
 80198d2:	60da      	str	r2, [r3, #12]
}
 80198d4:	bf00      	nop
 80198d6:	370c      	adds	r7, #12
 80198d8:	46bd      	mov	sp, r7
 80198da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198de:	4770      	bx	lr
 80198e0:	08019989 	.word	0x08019989
 80198e4:	080199d9 	.word	0x080199d9
 80198e8:	080199ff 	.word	0x080199ff

080198ec <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b088      	sub	sp, #32
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	60f8      	str	r0, [r7, #12]
 80198f4:	60b9      	str	r1, [r7, #8]
 80198f6:	607a      	str	r2, [r7, #4]
	struct sockaddr_in server_addr;

	if(n->socket)
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d004      	beq.n	801990a <ConnectNetwork+0x1e>
	{
		close(n->socket);
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	4618      	mov	r0, r3
 8019906:	f7f0 fcf1 	bl	800a2ec <lwip_close>
	}

	n->socket = socket(PF_INET, SOCK_STREAM, 0); //create socket
 801990a:	2200      	movs	r2, #0
 801990c:	2101      	movs	r1, #1
 801990e:	2002      	movs	r0, #2
 8019910:	f7f1 fa00 	bl	800ad14 <lwip_socket>
 8019914:	4602      	mov	r2, r0
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	601a      	str	r2, [r3, #0]
	if(n->socket < 0)
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	2b00      	cmp	r3, #0
 8019920:	da05      	bge.n	801992e <ConnectNetwork+0x42>
	{
		n->socket = 0;
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	2200      	movs	r2, #0
 8019926:	601a      	str	r2, [r3, #0]
		return -1;
 8019928:	f04f 33ff 	mov.w	r3, #4294967295
 801992c:	e028      	b.n	8019980 <ConnectNetwork+0x94>
	}

	memset(&server_addr, 0, sizeof(struct sockaddr_in)); //broker address info
 801992e:	f107 0310 	add.w	r3, r7, #16
 8019932:	2210      	movs	r2, #16
 8019934:	2100      	movs	r1, #0
 8019936:	4618      	mov	r0, r3
 8019938:	f002 fa8e 	bl	801be58 <memset>
	server_addr.sin_family = AF_INET;
 801993c:	2302      	movs	r3, #2
 801993e:	747b      	strb	r3, [r7, #17]
	server_addr.sin_addr.s_addr = inet_addr(ip);
 8019940:	68b8      	ldr	r0, [r7, #8]
 8019942:	f7fd fe50 	bl	80175e6 <ipaddr_addr>
 8019946:	4603      	mov	r3, r0
 8019948:	617b      	str	r3, [r7, #20]
	server_addr.sin_port = htons(port);
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	b29b      	uxth	r3, r3
 801994e:	4618      	mov	r0, r3
 8019950:	f7f1 fe14 	bl	800b57c <lwip_htons>
 8019954:	4603      	mov	r3, r0
 8019956:	827b      	strh	r3, [r7, #18]

	if(connect(n->socket, (struct sockaddr*)&server_addr, sizeof(struct sockaddr_in)) < 0) //connect to the broker
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	f107 0110 	add.w	r1, r7, #16
 8019960:	2210      	movs	r2, #16
 8019962:	4618      	mov	r0, r3
 8019964:	f7f0 fd18 	bl	800a398 <lwip_connect>
 8019968:	4603      	mov	r3, r0
 801996a:	2b00      	cmp	r3, #0
 801996c:	da07      	bge.n	801997e <ConnectNetwork+0x92>
	{
		close(n->socket);
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	4618      	mov	r0, r3
 8019974:	f7f0 fcba 	bl	800a2ec <lwip_close>
		return -1;
 8019978:	f04f 33ff 	mov.w	r3, #4294967295
 801997c:	e000      	b.n	8019980 <ConnectNetwork+0x94>
	}
	return 0;
 801997e:	2300      	movs	r3, #0
}
 8019980:	4618      	mov	r0, r3
 8019982:	3720      	adds	r7, #32
 8019984:	46bd      	mov	sp, r7
 8019986:	bd80      	pop	{r7, pc}

08019988 <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8019988:	b580      	push	{r7, lr}
 801998a:	b086      	sub	sp, #24
 801998c:	af00      	add	r7, sp, #0
 801998e:	60f8      	str	r0, [r7, #12]
 8019990:	60b9      	str	r1, [r7, #8]
 8019992:	607a      	str	r2, [r7, #4]
 8019994:	603b      	str	r3, [r7, #0]
	int available;

	/* !!! LWIP_SO_RCVBUF must be enabled !!! */
	if(ioctl(n->socket, FIONREAD, &available) < 0) return -1; //check receive buffer
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	f107 0214 	add.w	r2, r7, #20
 801999e:	490d      	ldr	r1, [pc, #52]	; (80199d4 <net_read+0x4c>)
 80199a0:	4618      	mov	r0, r3
 80199a2:	f7f1 fb93 	bl	800b0cc <lwip_ioctl>
 80199a6:	4603      	mov	r3, r0
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	da02      	bge.n	80199b2 <net_read+0x2a>
 80199ac:	f04f 33ff 	mov.w	r3, #4294967295
 80199b0:	e00c      	b.n	80199cc <net_read+0x44>

	if(available > 0)
 80199b2:	697b      	ldr	r3, [r7, #20]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	dd08      	ble.n	80199ca <net_read+0x42>
	{
		return recv(n->socket, buffer, len, 0);
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	6818      	ldr	r0, [r3, #0]
 80199bc:	687a      	ldr	r2, [r7, #4]
 80199be:	2300      	movs	r3, #0
 80199c0:	68b9      	ldr	r1, [r7, #8]
 80199c2:	f7f1 f881 	bl	800aac8 <lwip_recv>
 80199c6:	4603      	mov	r3, r0
 80199c8:	e000      	b.n	80199cc <net_read+0x44>
	}

	return 0;
 80199ca:	2300      	movs	r3, #0
}
 80199cc:	4618      	mov	r0, r3
 80199ce:	3718      	adds	r7, #24
 80199d0:	46bd      	mov	sp, r7
 80199d2:	bd80      	pop	{r7, pc}
 80199d4:	4004667f 	.word	0x4004667f

080199d8 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 80199d8:	b580      	push	{r7, lr}
 80199da:	b084      	sub	sp, #16
 80199dc:	af00      	add	r7, sp, #0
 80199de:	60f8      	str	r0, [r7, #12]
 80199e0:	60b9      	str	r1, [r7, #8]
 80199e2:	607a      	str	r2, [r7, #4]
 80199e4:	603b      	str	r3, [r7, #0]
	return send(n->socket, buffer, len, 0);
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	6818      	ldr	r0, [r3, #0]
 80199ea:	687a      	ldr	r2, [r7, #4]
 80199ec:	2300      	movs	r3, #0
 80199ee:	68b9      	ldr	r1, [r7, #8]
 80199f0:	f7f1 f880 	bl	800aaf4 <lwip_send>
 80199f4:	4603      	mov	r3, r0
}
 80199f6:	4618      	mov	r0, r3
 80199f8:	3710      	adds	r7, #16
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}

080199fe <net_disconnect>:

void net_disconnect(Network *n) {
 80199fe:	b580      	push	{r7, lr}
 8019a00:	b082      	sub	sp, #8
 8019a02:	af00      	add	r7, sp, #0
 8019a04:	6078      	str	r0, [r7, #4]
	close(n->socket);
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7f0 fc6e 	bl	800a2ec <lwip_close>
	n->socket = 0;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	2200      	movs	r2, #0
 8019a14:	601a      	str	r2, [r3, #0]
}
 8019a16:	bf00      	nop
 8019a18:	3708      	adds	r7, #8
 8019a1a:	46bd      	mov	sp, r7
 8019a1c:	bd80      	pop	{r7, pc}

08019a1e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8019a1e:	b590      	push	{r4, r7, lr}
 8019a20:	b085      	sub	sp, #20
 8019a22:	af00      	add	r7, sp, #0
 8019a24:	6078      	str	r0, [r7, #4]
	int len = 0;
 8019a26:	2300      	movs	r3, #0
 8019a28:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	7a1b      	ldrb	r3, [r3, #8]
 8019a2e:	2b03      	cmp	r3, #3
 8019a30:	d102      	bne.n	8019a38 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8019a32:	230c      	movs	r3, #12
 8019a34:	60fb      	str	r3, [r7, #12]
 8019a36:	e005      	b.n	8019a44 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	7a1b      	ldrb	r3, [r3, #8]
 8019a3c:	2b04      	cmp	r3, #4
 8019a3e:	d101      	bne.n	8019a44 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8019a40:	230a      	movs	r3, #10
 8019a42:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	330c      	adds	r3, #12
 8019a48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a4c:	f000 fc55 	bl	801a2fa <MQTTstrlen>
 8019a50:	4603      	mov	r3, r0
 8019a52:	3302      	adds	r3, #2
 8019a54:	68fa      	ldr	r2, [r7, #12]
 8019a56:	4413      	add	r3, r2
 8019a58:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	7edb      	ldrb	r3, [r3, #27]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d013      	beq.n	8019a8a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	3324      	adds	r3, #36	; 0x24
 8019a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a6a:	f000 fc46 	bl	801a2fa <MQTTstrlen>
 8019a6e:	4603      	mov	r3, r0
 8019a70:	1c9c      	adds	r4, r3, #2
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	3330      	adds	r3, #48	; 0x30
 8019a76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a7a:	f000 fc3e 	bl	801a2fa <MQTTstrlen>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	4423      	add	r3, r4
 8019a82:	3302      	adds	r3, #2
 8019a84:	68fa      	ldr	r2, [r7, #12]
 8019a86:	4413      	add	r3, r2
 8019a88:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d103      	bne.n	8019a9a <MQTTSerialize_connectLength+0x7c>
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d00a      	beq.n	8019ab0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	3340      	adds	r3, #64	; 0x40
 8019a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019aa2:	f000 fc2a 	bl	801a2fa <MQTTstrlen>
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	3302      	adds	r3, #2
 8019aaa:	68fa      	ldr	r2, [r7, #12]
 8019aac:	4413      	add	r3, r2
 8019aae:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d103      	bne.n	8019ac0 <MQTTSerialize_connectLength+0xa2>
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d00a      	beq.n	8019ad6 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	334c      	adds	r3, #76	; 0x4c
 8019ac4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019ac8:	f000 fc17 	bl	801a2fa <MQTTstrlen>
 8019acc:	4603      	mov	r3, r0
 8019ace:	3302      	adds	r3, #2
 8019ad0:	68fa      	ldr	r2, [r7, #12]
 8019ad2:	4413      	add	r3, r2
 8019ad4:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8019ad6:	68fb      	ldr	r3, [r7, #12]
}
 8019ad8:	4618      	mov	r0, r3
 8019ada:	3714      	adds	r7, #20
 8019adc:	46bd      	mov	sp, r7
 8019ade:	bd90      	pop	{r4, r7, pc}

08019ae0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b08a      	sub	sp, #40	; 0x28
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	60f8      	str	r0, [r7, #12]
 8019ae8:	60b9      	str	r1, [r7, #8]
 8019aea:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8019af0:	2300      	movs	r3, #0
 8019af2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8019af4:	2300      	movs	r3, #0
 8019af6:	617b      	str	r3, [r7, #20]
	int len = 0;
 8019af8:	2300      	movs	r3, #0
 8019afa:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8019afc:	f04f 33ff 	mov.w	r3, #4294967295
 8019b00:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8019b02:	6878      	ldr	r0, [r7, #4]
 8019b04:	f7ff ff8b 	bl	8019a1e <MQTTSerialize_connectLength>
 8019b08:	6238      	str	r0, [r7, #32]
 8019b0a:	6a38      	ldr	r0, [r7, #32]
 8019b0c:	f000 faaa 	bl	801a064 <MQTTPacket_len>
 8019b10:	4602      	mov	r2, r0
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	4293      	cmp	r3, r2
 8019b16:	da03      	bge.n	8019b20 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019b18:	f06f 0301 	mvn.w	r3, #1
 8019b1c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8019b1e:	e0c3      	b.n	8019ca8 <MQTTSerialize_connect+0x1c8>
	}

	header.byte = 0;
 8019b20:	2300      	movs	r3, #0
 8019b22:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8019b24:	7e3b      	ldrb	r3, [r7, #24]
 8019b26:	2201      	movs	r2, #1
 8019b28:	f362 1307 	bfi	r3, r2, #4, #4
 8019b2c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8019b2e:	7e3a      	ldrb	r2, [r7, #24]
 8019b30:	f107 031c 	add.w	r3, r7, #28
 8019b34:	4611      	mov	r1, r2
 8019b36:	4618      	mov	r0, r3
 8019b38:	f000 fb23 	bl	801a182 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8019b3c:	69fb      	ldr	r3, [r7, #28]
 8019b3e:	6a39      	ldr	r1, [r7, #32]
 8019b40:	4618      	mov	r0, r3
 8019b42:	f000 fa24 	bl	8019f8e <MQTTPacket_encode>
 8019b46:	4602      	mov	r2, r0
 8019b48:	69fb      	ldr	r3, [r7, #28]
 8019b4a:	4413      	add	r3, r2
 8019b4c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	7a1b      	ldrb	r3, [r3, #8]
 8019b52:	2b04      	cmp	r3, #4
 8019b54:	d10c      	bne.n	8019b70 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8019b56:	f107 031c 	add.w	r3, r7, #28
 8019b5a:	4956      	ldr	r1, [pc, #344]	; (8019cb4 <MQTTSerialize_connect+0x1d4>)
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f000 fb4e 	bl	801a1fe <writeCString>
		writeChar(&ptr, (char) 4);
 8019b62:	f107 031c 	add.w	r3, r7, #28
 8019b66:	2104      	movs	r1, #4
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f000 fb0a 	bl	801a182 <writeChar>
 8019b6e:	e00b      	b.n	8019b88 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8019b70:	f107 031c 	add.w	r3, r7, #28
 8019b74:	4950      	ldr	r1, [pc, #320]	; (8019cb8 <MQTTSerialize_connect+0x1d8>)
 8019b76:	4618      	mov	r0, r3
 8019b78:	f000 fb41 	bl	801a1fe <writeCString>
		writeChar(&ptr, (char) 3);
 8019b7c:	f107 031c 	add.w	r3, r7, #28
 8019b80:	2103      	movs	r1, #3
 8019b82:	4618      	mov	r0, r3
 8019b84:	f000 fafd 	bl	801a182 <writeChar>
	}

	flags.all = 0;
 8019b88:	2300      	movs	r3, #0
 8019b8a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	7e9b      	ldrb	r3, [r3, #26]
 8019b90:	f003 0301 	and.w	r3, r3, #1
 8019b94:	b2da      	uxtb	r2, r3
 8019b96:	7d3b      	ldrb	r3, [r7, #20]
 8019b98:	f362 0341 	bfi	r3, r2, #1, #1
 8019b9c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	7edb      	ldrb	r3, [r3, #27]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	bf14      	ite	ne
 8019ba6:	2301      	movne	r3, #1
 8019ba8:	2300      	moveq	r3, #0
 8019baa:	b2da      	uxtb	r2, r3
 8019bac:	7d3b      	ldrb	r3, [r7, #20]
 8019bae:	f362 0382 	bfi	r3, r2, #2, #1
 8019bb2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8019bb4:	7d3b      	ldrb	r3, [r7, #20]
 8019bb6:	f003 0304 	and.w	r3, r3, #4
 8019bba:	b2db      	uxtb	r3, r3
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d013      	beq.n	8019be8 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019bc6:	f003 0303 	and.w	r3, r3, #3
 8019bca:	b2da      	uxtb	r2, r3
 8019bcc:	7d3b      	ldrb	r3, [r7, #20]
 8019bce:	f362 03c4 	bfi	r3, r2, #3, #2
 8019bd2:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019bda:	f003 0301 	and.w	r3, r3, #1
 8019bde:	b2da      	uxtb	r2, r3
 8019be0:	7d3b      	ldrb	r3, [r7, #20]
 8019be2:	f362 1345 	bfi	r3, r2, #5, #1
 8019be6:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d103      	bne.n	8019bf8 <MQTTSerialize_connect+0x118>
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d003      	beq.n	8019c00 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8019bf8:	7d3b      	ldrb	r3, [r7, #20]
 8019bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bfe:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d103      	bne.n	8019c10 <MQTTSerialize_connect+0x130>
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d003      	beq.n	8019c18 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8019c10:	7d3b      	ldrb	r3, [r7, #20]
 8019c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c16:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8019c18:	7d3a      	ldrb	r2, [r7, #20]
 8019c1a:	f107 031c 	add.w	r3, r7, #28
 8019c1e:	4611      	mov	r1, r2
 8019c20:	4618      	mov	r0, r3
 8019c22:	f000 faae 	bl	801a182 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	8b1b      	ldrh	r3, [r3, #24]
 8019c2a:	461a      	mov	r2, r3
 8019c2c:	f107 031c 	add.w	r3, r7, #28
 8019c30:	4611      	mov	r1, r2
 8019c32:	4618      	mov	r0, r3
 8019c34:	f000 faba 	bl	801a1ac <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f107 001c 	add.w	r0, r7, #28
 8019c3e:	330c      	adds	r3, #12
 8019c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019c42:	f000 fafb 	bl	801a23c <writeMQTTString>
	if (options->willFlag)
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	7edb      	ldrb	r3, [r3, #27]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d00d      	beq.n	8019c6a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	f107 001c 	add.w	r0, r7, #28
 8019c54:	3324      	adds	r3, #36	; 0x24
 8019c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019c58:	f000 faf0 	bl	801a23c <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	f107 001c 	add.w	r0, r7, #28
 8019c62:	3330      	adds	r3, #48	; 0x30
 8019c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019c66:	f000 fae9 	bl	801a23c <writeMQTTString>
	}
	if (flags.bits.username)
 8019c6a:	7d3b      	ldrb	r3, [r7, #20]
 8019c6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019c70:	b2db      	uxtb	r3, r3
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d006      	beq.n	8019c84 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	f107 001c 	add.w	r0, r7, #28
 8019c7c:	3340      	adds	r3, #64	; 0x40
 8019c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019c80:	f000 fadc 	bl	801a23c <writeMQTTString>
	if (flags.bits.password)
 8019c84:	7d3b      	ldrb	r3, [r7, #20]
 8019c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019c8a:	b2db      	uxtb	r3, r3
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d006      	beq.n	8019c9e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	f107 001c 	add.w	r0, r7, #28
 8019c96:	334c      	adds	r3, #76	; 0x4c
 8019c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019c9a:	f000 facf 	bl	801a23c <writeMQTTString>

	rc = ptr - buf;
 8019c9e:	69fb      	ldr	r3, [r7, #28]
 8019ca0:	461a      	mov	r2, r3
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	1ad3      	subs	r3, r2, r3
 8019ca6:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8019ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019caa:	4618      	mov	r0, r3
 8019cac:	3728      	adds	r7, #40	; 0x28
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
 8019cb2:	bf00      	nop
 8019cb4:	08020b54 	.word	0x08020b54
 8019cb8:	08020b5c 	.word	0x08020b5c

08019cbc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b08a      	sub	sp, #40	; 0x28
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	60f8      	str	r0, [r7, #12]
 8019cc4:	60b9      	str	r1, [r7, #8]
 8019cc6:	607a      	str	r2, [r7, #4]
 8019cc8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019cca:	2300      	movs	r3, #0
 8019ccc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8019cda:	2300      	movs	r3, #0
 8019cdc:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019cde:	f107 0318 	add.w	r3, r7, #24
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	f000 fa39 	bl	801a15a <readChar>
 8019ce8:	4603      	mov	r3, r0
 8019cea:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8019cec:	7f3b      	ldrb	r3, [r7, #28]
 8019cee:	f023 030f 	bic.w	r3, r3, #15
 8019cf2:	b2db      	uxtb	r3, r3
 8019cf4:	2b20      	cmp	r3, #32
 8019cf6:	d12e      	bne.n	8019d56 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019cf8:	69bb      	ldr	r3, [r7, #24]
 8019cfa:	f107 0214 	add.w	r2, r7, #20
 8019cfe:	4611      	mov	r1, r2
 8019d00:	4618      	mov	r0, r3
 8019d02:	f000 f9f9 	bl	801a0f8 <MQTTPacket_decodeBuf>
 8019d06:	6278      	str	r0, [r7, #36]	; 0x24
 8019d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d0a:	69bb      	ldr	r3, [r7, #24]
 8019d0c:	4413      	add	r3, r2
 8019d0e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019d10:	69bb      	ldr	r3, [r7, #24]
 8019d12:	697a      	ldr	r2, [r7, #20]
 8019d14:	4413      	add	r3, r2
 8019d16:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8019d18:	6a3b      	ldr	r3, [r7, #32]
 8019d1a:	69ba      	ldr	r2, [r7, #24]
 8019d1c:	1a9b      	subs	r3, r3, r2
 8019d1e:	2b01      	cmp	r3, #1
 8019d20:	dd1b      	ble.n	8019d5a <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8019d22:	f107 0318 	add.w	r3, r7, #24
 8019d26:	4618      	mov	r0, r3
 8019d28:	f000 fa17 	bl	801a15a <readChar>
 8019d2c:	4603      	mov	r3, r0
 8019d2e:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8019d30:	7c3b      	ldrb	r3, [r7, #16]
 8019d32:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019d36:	b2db      	uxtb	r3, r3
 8019d38:	461a      	mov	r2, r3
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8019d3e:	f107 0318 	add.w	r3, r7, #24
 8019d42:	4618      	mov	r0, r3
 8019d44:	f000 fa09 	bl	801a15a <readChar>
 8019d48:	4603      	mov	r3, r0
 8019d4a:	461a      	mov	r2, r3
 8019d4c:	68bb      	ldr	r3, [r7, #8]
 8019d4e:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8019d50:	2301      	movs	r3, #1
 8019d52:	627b      	str	r3, [r7, #36]	; 0x24
 8019d54:	e002      	b.n	8019d5c <MQTTDeserialize_connack+0xa0>
		goto exit;
 8019d56:	bf00      	nop
 8019d58:	e000      	b.n	8019d5c <MQTTDeserialize_connack+0xa0>
		goto exit;
 8019d5a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019d5e:	4618      	mov	r0, r3
 8019d60:	3728      	adds	r7, #40	; 0x28
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}

08019d66 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8019d66:	b580      	push	{r7, lr}
 8019d68:	b088      	sub	sp, #32
 8019d6a:	af00      	add	r7, sp, #0
 8019d6c:	60f8      	str	r0, [r7, #12]
 8019d6e:	60b9      	str	r1, [r7, #8]
 8019d70:	4613      	mov	r3, r2
 8019d72:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8019d74:	2300      	movs	r3, #0
 8019d76:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8019d78:	f04f 33ff 	mov.w	r3, #4294967295
 8019d7c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8019d82:	68bb      	ldr	r3, [r7, #8]
 8019d84:	2b01      	cmp	r3, #1
 8019d86:	dc03      	bgt.n	8019d90 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019d88:	f06f 0301 	mvn.w	r3, #1
 8019d8c:	61fb      	str	r3, [r7, #28]
		goto exit;
 8019d8e:	e01e      	b.n	8019dce <MQTTSerialize_zero+0x68>
	}
	header.byte = 0;
 8019d90:	2300      	movs	r3, #0
 8019d92:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8019d94:	79fb      	ldrb	r3, [r7, #7]
 8019d96:	f003 030f 	and.w	r3, r3, #15
 8019d9a:	b2da      	uxtb	r2, r3
 8019d9c:	7e3b      	ldrb	r3, [r7, #24]
 8019d9e:	f362 1307 	bfi	r3, r2, #4, #4
 8019da2:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8019da4:	7e3a      	ldrb	r2, [r7, #24]
 8019da6:	f107 0314 	add.w	r3, r7, #20
 8019daa:	4611      	mov	r1, r2
 8019dac:	4618      	mov	r0, r3
 8019dae:	f000 f9e8 	bl	801a182 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8019db2:	697b      	ldr	r3, [r7, #20]
 8019db4:	2100      	movs	r1, #0
 8019db6:	4618      	mov	r0, r3
 8019db8:	f000 f8e9 	bl	8019f8e <MQTTPacket_encode>
 8019dbc:	4602      	mov	r2, r0
 8019dbe:	697b      	ldr	r3, [r7, #20]
 8019dc0:	4413      	add	r3, r2
 8019dc2:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8019dc4:	697b      	ldr	r3, [r7, #20]
 8019dc6:	461a      	mov	r2, r3
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	1ad3      	subs	r3, r2, r3
 8019dcc:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019dce:	69fb      	ldr	r3, [r7, #28]
}
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3720      	adds	r7, #32
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}

08019dd8 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b082      	sub	sp, #8
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
 8019de0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8019de2:	220e      	movs	r2, #14
 8019de4:	6839      	ldr	r1, [r7, #0]
 8019de6:	6878      	ldr	r0, [r7, #4]
 8019de8:	f7ff ffbd 	bl	8019d66 <MQTTSerialize_zero>
 8019dec:	4603      	mov	r3, r0
}
 8019dee:	4618      	mov	r0, r3
 8019df0:	3708      	adds	r7, #8
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}

08019df6 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8019df6:	b580      	push	{r7, lr}
 8019df8:	b082      	sub	sp, #8
 8019dfa:	af00      	add	r7, sp, #0
 8019dfc:	6078      	str	r0, [r7, #4]
 8019dfe:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8019e00:	220c      	movs	r2, #12
 8019e02:	6839      	ldr	r1, [r7, #0]
 8019e04:	6878      	ldr	r0, [r7, #4]
 8019e06:	f7ff ffae 	bl	8019d66 <MQTTSerialize_zero>
 8019e0a:	4603      	mov	r3, r0
}
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	3708      	adds	r7, #8
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd80      	pop	{r7, pc}

08019e14 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b08a      	sub	sp, #40	; 0x28
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	60f8      	str	r0, [r7, #12]
 8019e1c:	60b9      	str	r1, [r7, #8]
 8019e1e:	607a      	str	r2, [r7, #4]
 8019e20:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019e22:	2300      	movs	r3, #0
 8019e24:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e28:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8019e32:	2300      	movs	r3, #0
 8019e34:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019e36:	f107 0318 	add.w	r3, r7, #24
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f000 f98d 	bl	801a15a <readChar>
 8019e40:	4603      	mov	r3, r0
 8019e42:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8019e44:	7f3b      	ldrb	r3, [r7, #28]
 8019e46:	f023 030f 	bic.w	r3, r3, #15
 8019e4a:	b2db      	uxtb	r3, r3
 8019e4c:	2b30      	cmp	r3, #48	; 0x30
 8019e4e:	d14b      	bne.n	8019ee8 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8019e50:	7f3b      	ldrb	r3, [r7, #28]
 8019e52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019e56:	b2db      	uxtb	r3, r3
 8019e58:	461a      	mov	r2, r3
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8019e5e:	7f3b      	ldrb	r3, [r7, #28]
 8019e60:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8019e64:	b2db      	uxtb	r3, r3
 8019e66:	461a      	mov	r2, r3
 8019e68:	68bb      	ldr	r3, [r7, #8]
 8019e6a:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8019e6c:	7f3b      	ldrb	r3, [r7, #28]
 8019e6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019e72:	b2db      	uxtb	r3, r3
 8019e74:	461a      	mov	r2, r3
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019e7a:	69bb      	ldr	r3, [r7, #24]
 8019e7c:	f107 0214 	add.w	r2, r7, #20
 8019e80:	4611      	mov	r1, r2
 8019e82:	4618      	mov	r0, r3
 8019e84:	f000 f938 	bl	801a0f8 <MQTTPacket_decodeBuf>
 8019e88:	6278      	str	r0, [r7, #36]	; 0x24
 8019e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e8c:	69bb      	ldr	r3, [r7, #24]
 8019e8e:	4413      	add	r3, r2
 8019e90:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019e92:	69bb      	ldr	r3, [r7, #24]
 8019e94:	697a      	ldr	r2, [r7, #20]
 8019e96:	4413      	add	r3, r2
 8019e98:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8019e9a:	f107 0318 	add.w	r3, r7, #24
 8019e9e:	6a3a      	ldr	r2, [r7, #32]
 8019ea0:	4619      	mov	r1, r3
 8019ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019ea4:	f000 f9f8 	bl	801a298 <readMQTTLenString>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d01e      	beq.n	8019eec <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8019eae:	6a3b      	ldr	r3, [r7, #32]
 8019eb0:	69ba      	ldr	r2, [r7, #24]
 8019eb2:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	db19      	blt.n	8019eec <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8019eb8:	68bb      	ldr	r3, [r7, #8]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	dd08      	ble.n	8019ed2 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8019ec0:	f107 0318 	add.w	r3, r7, #24
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f000 f92d 	bl	801a124 <readInt>
 8019eca:	4603      	mov	r3, r0
 8019ecc:	b29a      	uxth	r2, r3
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8019ed2:	6a3b      	ldr	r3, [r7, #32]
 8019ed4:	69ba      	ldr	r2, [r7, #24]
 8019ed6:	1a9a      	subs	r2, r3, r2
 8019ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eda:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8019edc:	69ba      	ldr	r2, [r7, #24]
 8019ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ee0:	601a      	str	r2, [r3, #0]
	rc = 1;
 8019ee2:	2301      	movs	r3, #1
 8019ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8019ee6:	e002      	b.n	8019eee <MQTTDeserialize_publish+0xda>
		goto exit;
 8019ee8:	bf00      	nop
 8019eea:	e000      	b.n	8019eee <MQTTDeserialize_publish+0xda>
exit:
 8019eec:	bf00      	nop
	FUNC_EXIT_RC(rc);
	return rc;
 8019eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	3728      	adds	r7, #40	; 0x28
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bd80      	pop	{r7, pc}

08019ef8 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8019ef8:	b580      	push	{r7, lr}
 8019efa:	b08a      	sub	sp, #40	; 0x28
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	60f8      	str	r0, [r7, #12]
 8019f00:	60b9      	str	r1, [r7, #8]
 8019f02:	607a      	str	r2, [r7, #4]
 8019f04:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019f06:	2300      	movs	r3, #0
 8019f08:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019f12:	2300      	movs	r3, #0
 8019f14:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019f16:	f107 0318 	add.w	r3, r7, #24
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f000 f91d 	bl	801a15a <readChar>
 8019f20:	4603      	mov	r3, r0
 8019f22:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8019f24:	7f3b      	ldrb	r3, [r7, #28]
 8019f26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019f2a:	b2db      	uxtb	r3, r3
 8019f2c:	461a      	mov	r2, r3
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8019f32:	7f3b      	ldrb	r3, [r7, #28]
 8019f34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8019f38:	b2db      	uxtb	r3, r3
 8019f3a:	461a      	mov	r2, r3
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019f40:	69bb      	ldr	r3, [r7, #24]
 8019f42:	f107 0214 	add.w	r2, r7, #20
 8019f46:	4611      	mov	r1, r2
 8019f48:	4618      	mov	r0, r3
 8019f4a:	f000 f8d5 	bl	801a0f8 <MQTTPacket_decodeBuf>
 8019f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8019f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f52:	69bb      	ldr	r3, [r7, #24]
 8019f54:	4413      	add	r3, r2
 8019f56:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019f58:	69bb      	ldr	r3, [r7, #24]
 8019f5a:	697a      	ldr	r2, [r7, #20]
 8019f5c:	4413      	add	r3, r2
 8019f5e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8019f60:	6a3b      	ldr	r3, [r7, #32]
 8019f62:	69ba      	ldr	r2, [r7, #24]
 8019f64:	1a9b      	subs	r3, r3, r2
 8019f66:	2b01      	cmp	r3, #1
 8019f68:	dd0b      	ble.n	8019f82 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8019f6a:	f107 0318 	add.w	r3, r7, #24
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f000 f8d8 	bl	801a124 <readInt>
 8019f74:	4603      	mov	r3, r0
 8019f76:	b29a      	uxth	r2, r3
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8019f7c:	2301      	movs	r3, #1
 8019f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8019f80:	e000      	b.n	8019f84 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8019f82:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3728      	adds	r7, #40	; 0x28
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}

08019f8e <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8019f8e:	b480      	push	{r7}
 8019f90:	b085      	sub	sp, #20
 8019f92:	af00      	add	r7, sp, #0
 8019f94:	6078      	str	r0, [r7, #4]
 8019f96:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8019f98:	2300      	movs	r3, #0
 8019f9a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	425a      	negs	r2, r3
 8019fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019fa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8019fa8:	bf58      	it	pl
 8019faa:	4253      	negpl	r3, r2
 8019fac:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	da00      	bge.n	8019fb6 <MQTTPacket_encode+0x28>
 8019fb4:	337f      	adds	r3, #127	; 0x7f
 8019fb6:	11db      	asrs	r3, r3, #7
 8019fb8:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8019fba:	683b      	ldr	r3, [r7, #0]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	dd03      	ble.n	8019fc8 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8019fc0:	7afb      	ldrb	r3, [r7, #11]
 8019fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019fc6:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	1c5a      	adds	r2, r3, #1
 8019fcc:	60fa      	str	r2, [r7, #12]
 8019fce:	461a      	mov	r2, r3
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	4413      	add	r3, r2
 8019fd4:	7afa      	ldrb	r2, [r7, #11]
 8019fd6:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8019fd8:	683b      	ldr	r3, [r7, #0]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	dcde      	bgt.n	8019f9c <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8019fde:	68fb      	ldr	r3, [r7, #12]
}
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	3714      	adds	r7, #20
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fea:	4770      	bx	lr

08019fec <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b086      	sub	sp, #24
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
 8019ff4:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	617b      	str	r3, [r7, #20]
	int len = 0;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	2200      	movs	r2, #0
 801a002:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801a004:	f04f 33ff 	mov.w	r3, #4294967295
 801a008:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801a00a:	693b      	ldr	r3, [r7, #16]
 801a00c:	3301      	adds	r3, #1
 801a00e:	613b      	str	r3, [r7, #16]
 801a010:	693b      	ldr	r3, [r7, #16]
 801a012:	2b04      	cmp	r3, #4
 801a014:	dd03      	ble.n	801a01e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801a016:	f04f 33ff 	mov.w	r3, #4294967295
 801a01a:	60fb      	str	r3, [r7, #12]
			goto exit;
 801a01c:	e01d      	b.n	801a05a <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801a01e:	f107 020b 	add.w	r2, r7, #11
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	2101      	movs	r1, #1
 801a026:	4610      	mov	r0, r2
 801a028:	4798      	blx	r3
 801a02a:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	2b01      	cmp	r3, #1
 801a030:	d112      	bne.n	801a058 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801a032:	683b      	ldr	r3, [r7, #0]
 801a034:	681a      	ldr	r2, [r3, #0]
 801a036:	7afb      	ldrb	r3, [r7, #11]
 801a038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a03c:	6979      	ldr	r1, [r7, #20]
 801a03e:	fb01 f303 	mul.w	r3, r1, r3
 801a042:	441a      	add	r2, r3
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801a048:	697b      	ldr	r3, [r7, #20]
 801a04a:	01db      	lsls	r3, r3, #7
 801a04c:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801a04e:	7afb      	ldrb	r3, [r7, #11]
 801a050:	b25b      	sxtb	r3, r3
 801a052:	2b00      	cmp	r3, #0
 801a054:	dbd6      	blt.n	801a004 <MQTTPacket_decode+0x18>
exit:
 801a056:	e000      	b.n	801a05a <MQTTPacket_decode+0x6e>
			goto exit;
 801a058:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801a05a:	693b      	ldr	r3, [r7, #16]
}
 801a05c:	4618      	mov	r0, r3
 801a05e:	3718      	adds	r7, #24
 801a060:	46bd      	mov	sp, r7
 801a062:	bd80      	pop	{r7, pc}

0801a064 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801a064:	b480      	push	{r7}
 801a066:	b083      	sub	sp, #12
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	3301      	adds	r3, #1
 801a070:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	2b7f      	cmp	r3, #127	; 0x7f
 801a076:	dc03      	bgt.n	801a080 <MQTTPacket_len+0x1c>
		rem_len += 1;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	3301      	adds	r3, #1
 801a07c:	607b      	str	r3, [r7, #4]
 801a07e:	e012      	b.n	801a0a6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a086:	da03      	bge.n	801a090 <MQTTPacket_len+0x2c>
		rem_len += 2;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	3302      	adds	r3, #2
 801a08c:	607b      	str	r3, [r7, #4]
 801a08e:	e00a      	b.n	801a0a6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	4a08      	ldr	r2, [pc, #32]	; (801a0b4 <MQTTPacket_len+0x50>)
 801a094:	4293      	cmp	r3, r2
 801a096:	dc03      	bgt.n	801a0a0 <MQTTPacket_len+0x3c>
		rem_len += 3;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	3303      	adds	r3, #3
 801a09c:	607b      	str	r3, [r7, #4]
 801a09e:	e002      	b.n	801a0a6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	3304      	adds	r3, #4
 801a0a4:	607b      	str	r3, [r7, #4]
	return rem_len;
 801a0a6:	687b      	ldr	r3, [r7, #4]
}
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	370c      	adds	r7, #12
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b2:	4770      	bx	lr
 801a0b4:	001ffffe 	.word	0x001ffffe

0801a0b8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801a0b8:	b480      	push	{r7}
 801a0ba:	b085      	sub	sp, #20
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	60fb      	str	r3, [r7, #12]
 801a0c6:	e00a      	b.n	801a0de <bufchar+0x26>
		*c = *bufptr++;
 801a0c8:	4b0a      	ldr	r3, [pc, #40]	; (801a0f4 <bufchar+0x3c>)
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	1c5a      	adds	r2, r3, #1
 801a0ce:	4909      	ldr	r1, [pc, #36]	; (801a0f4 <bufchar+0x3c>)
 801a0d0:	600a      	str	r2, [r1, #0]
 801a0d2:	781a      	ldrb	r2, [r3, #0]
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	3301      	adds	r3, #1
 801a0dc:	60fb      	str	r3, [r7, #12]
 801a0de:	68fa      	ldr	r2, [r7, #12]
 801a0e0:	683b      	ldr	r3, [r7, #0]
 801a0e2:	429a      	cmp	r2, r3
 801a0e4:	dbf0      	blt.n	801a0c8 <bufchar+0x10>
	return count;
 801a0e6:	683b      	ldr	r3, [r7, #0]
}
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	3714      	adds	r7, #20
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f2:	4770      	bx	lr
 801a0f4:	20008538 	.word	0x20008538

0801a0f8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b082      	sub	sp, #8
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
 801a100:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801a102:	4a06      	ldr	r2, [pc, #24]	; (801a11c <MQTTPacket_decodeBuf+0x24>)
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801a108:	6839      	ldr	r1, [r7, #0]
 801a10a:	4805      	ldr	r0, [pc, #20]	; (801a120 <MQTTPacket_decodeBuf+0x28>)
 801a10c:	f7ff ff6e 	bl	8019fec <MQTTPacket_decode>
 801a110:	4603      	mov	r3, r0
}
 801a112:	4618      	mov	r0, r3
 801a114:	3708      	adds	r7, #8
 801a116:	46bd      	mov	sp, r7
 801a118:	bd80      	pop	{r7, pc}
 801a11a:	bf00      	nop
 801a11c:	20008538 	.word	0x20008538
 801a120:	0801a0b9 	.word	0x0801a0b9

0801a124 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801a124:	b480      	push	{r7}
 801a126:	b085      	sub	sp, #20
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	781b      	ldrb	r3, [r3, #0]
 801a136:	021b      	lsls	r3, r3, #8
 801a138:	68fa      	ldr	r2, [r7, #12]
 801a13a:	3201      	adds	r2, #1
 801a13c:	7812      	ldrb	r2, [r2, #0]
 801a13e:	4413      	add	r3, r2
 801a140:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	1c9a      	adds	r2, r3, #2
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	601a      	str	r2, [r3, #0]
	return len;
 801a14c:	68bb      	ldr	r3, [r7, #8]
}
 801a14e:	4618      	mov	r0, r3
 801a150:	3714      	adds	r7, #20
 801a152:	46bd      	mov	sp, r7
 801a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a158:	4770      	bx	lr

0801a15a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801a15a:	b480      	push	{r7}
 801a15c:	b085      	sub	sp, #20
 801a15e:	af00      	add	r7, sp, #0
 801a160:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	781b      	ldrb	r3, [r3, #0]
 801a168:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	1c5a      	adds	r2, r3, #1
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	601a      	str	r2, [r3, #0]
	return c;
 801a174:	7bfb      	ldrb	r3, [r7, #15]
}
 801a176:	4618      	mov	r0, r3
 801a178:	3714      	adds	r7, #20
 801a17a:	46bd      	mov	sp, r7
 801a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a180:	4770      	bx	lr

0801a182 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801a182:	b480      	push	{r7}
 801a184:	b083      	sub	sp, #12
 801a186:	af00      	add	r7, sp, #0
 801a188:	6078      	str	r0, [r7, #4]
 801a18a:	460b      	mov	r3, r1
 801a18c:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	78fa      	ldrb	r2, [r7, #3]
 801a194:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	1c5a      	adds	r2, r3, #1
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	601a      	str	r2, [r3, #0]
}
 801a1a0:	bf00      	nop
 801a1a2:	370c      	adds	r7, #12
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1aa:	4770      	bx	lr

0801a1ac <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801a1ac:	b480      	push	{r7}
 801a1ae:	b083      	sub	sp, #12
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
 801a1b4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801a1b6:	683b      	ldr	r3, [r7, #0]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	da00      	bge.n	801a1be <writeInt+0x12>
 801a1bc:	33ff      	adds	r3, #255	; 0xff
 801a1be:	121b      	asrs	r3, r3, #8
 801a1c0:	461a      	mov	r2, r3
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	b2d2      	uxtb	r2, r2
 801a1c8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	1c5a      	adds	r2, r3, #1
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801a1d4:	683b      	ldr	r3, [r7, #0]
 801a1d6:	425a      	negs	r2, r3
 801a1d8:	b2db      	uxtb	r3, r3
 801a1da:	b2d2      	uxtb	r2, r2
 801a1dc:	bf58      	it	pl
 801a1de:	4253      	negpl	r3, r2
 801a1e0:	687a      	ldr	r2, [r7, #4]
 801a1e2:	6812      	ldr	r2, [r2, #0]
 801a1e4:	b2db      	uxtb	r3, r3
 801a1e6:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	1c5a      	adds	r2, r3, #1
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	601a      	str	r2, [r3, #0]
}
 801a1f2:	bf00      	nop
 801a1f4:	370c      	adds	r7, #12
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fc:	4770      	bx	lr

0801a1fe <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801a1fe:	b580      	push	{r7, lr}
 801a200:	b084      	sub	sp, #16
 801a202:	af00      	add	r7, sp, #0
 801a204:	6078      	str	r0, [r7, #4]
 801a206:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801a208:	6838      	ldr	r0, [r7, #0]
 801a20a:	f7e5 fffb 	bl	8000204 <strlen>
 801a20e:	4603      	mov	r3, r0
 801a210:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801a212:	68f9      	ldr	r1, [r7, #12]
 801a214:	6878      	ldr	r0, [r7, #4]
 801a216:	f7ff ffc9 	bl	801a1ac <writeInt>
	memcpy(*pptr, string, len);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	68fa      	ldr	r2, [r7, #12]
 801a220:	6839      	ldr	r1, [r7, #0]
 801a222:	4618      	mov	r0, r3
 801a224:	f001 fe0d 	bl	801be42 <memcpy>
	*pptr += len;
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681a      	ldr	r2, [r3, #0]
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	441a      	add	r2, r3
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	601a      	str	r2, [r3, #0]
}
 801a234:	bf00      	nop
 801a236:	3710      	adds	r7, #16
 801a238:	46bd      	mov	sp, r7
 801a23a:	bd80      	pop	{r7, pc}

0801a23c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b084      	sub	sp, #16
 801a240:	af00      	add	r7, sp, #0
 801a242:	60f8      	str	r0, [r7, #12]
 801a244:	4638      	mov	r0, r7
 801a246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	dd12      	ble.n	801a276 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	4619      	mov	r1, r3
 801a254:	68f8      	ldr	r0, [r7, #12]
 801a256:	f7ff ffa9 	bl	801a1ac <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	68b9      	ldr	r1, [r7, #8]
 801a260:	687a      	ldr	r2, [r7, #4]
 801a262:	4618      	mov	r0, r3
 801a264:	f001 fded 	bl	801be42 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	687a      	ldr	r2, [r7, #4]
 801a26e:	441a      	add	r2, r3
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801a274:	e00c      	b.n	801a290 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801a276:	683b      	ldr	r3, [r7, #0]
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d005      	beq.n	801a288 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801a27c:	683b      	ldr	r3, [r7, #0]
 801a27e:	4619      	mov	r1, r3
 801a280:	68f8      	ldr	r0, [r7, #12]
 801a282:	f7ff ffbc 	bl	801a1fe <writeCString>
}
 801a286:	e003      	b.n	801a290 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801a288:	2100      	movs	r1, #0
 801a28a:	68f8      	ldr	r0, [r7, #12]
 801a28c:	f7ff ff8e 	bl	801a1ac <writeInt>
}
 801a290:	bf00      	nop
 801a292:	3710      	adds	r7, #16
 801a294:	46bd      	mov	sp, r7
 801a296:	bd80      	pop	{r7, pc}

0801a298 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	b086      	sub	sp, #24
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	60f8      	str	r0, [r7, #12]
 801a2a0:	60b9      	str	r1, [r7, #8]
 801a2a2:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	68ba      	ldr	r2, [r7, #8]
 801a2ac:	6812      	ldr	r2, [r2, #0]
 801a2ae:	1a9b      	subs	r3, r3, r2
 801a2b0:	2b01      	cmp	r3, #1
 801a2b2:	dd1a      	ble.n	801a2ea <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801a2b4:	68b8      	ldr	r0, [r7, #8]
 801a2b6:	f7ff ff35 	bl	801a124 <readInt>
 801a2ba:	4602      	mov	r2, r0
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801a2c0:	68bb      	ldr	r3, [r7, #8]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	68fa      	ldr	r2, [r7, #12]
 801a2c6:	6852      	ldr	r2, [r2, #4]
 801a2c8:	4413      	add	r3, r2
 801a2ca:	687a      	ldr	r2, [r7, #4]
 801a2cc:	429a      	cmp	r2, r3
 801a2ce:	d30c      	bcc.n	801a2ea <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801a2d0:	68bb      	ldr	r3, [r7, #8]
 801a2d2:	681a      	ldr	r2, [r3, #0]
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801a2d8:	68bb      	ldr	r3, [r7, #8]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	68fa      	ldr	r2, [r7, #12]
 801a2de:	6852      	ldr	r2, [r2, #4]
 801a2e0:	441a      	add	r2, r3
 801a2e2:	68bb      	ldr	r3, [r7, #8]
 801a2e4:	601a      	str	r2, [r3, #0]
			rc = 1;
 801a2e6:	2301      	movs	r3, #1
 801a2e8:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801a2f0:	697b      	ldr	r3, [r7, #20]
}
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	3718      	adds	r7, #24
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	bd80      	pop	{r7, pc}

0801a2fa <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801a2fa:	b580      	push	{r7, lr}
 801a2fc:	b086      	sub	sp, #24
 801a2fe:	af00      	add	r7, sp, #0
 801a300:	1d3b      	adds	r3, r7, #4
 801a302:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801a306:	2300      	movs	r3, #0
 801a308:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d006      	beq.n	801a31e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	4618      	mov	r0, r3
 801a314:	f7e5 ff76 	bl	8000204 <strlen>
 801a318:	4603      	mov	r3, r0
 801a31a:	617b      	str	r3, [r7, #20]
 801a31c:	e001      	b.n	801a322 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801a31e:	68bb      	ldr	r3, [r7, #8]
 801a320:	617b      	str	r3, [r7, #20]
	return rc;
 801a322:	697b      	ldr	r3, [r7, #20]
}
 801a324:	4618      	mov	r0, r3
 801a326:	3718      	adds	r7, #24
 801a328:	46bd      	mov	sp, r7
 801a32a:	bd80      	pop	{r7, pc}

0801a32c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b086      	sub	sp, #24
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
 801a334:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801a336:	2300      	movs	r3, #0
 801a338:	617b      	str	r3, [r7, #20]
		blen = 0;
 801a33a:	2300      	movs	r3, #0
 801a33c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d00a      	beq.n	801a35c <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	4618      	mov	r0, r3
 801a352:	f7e5 ff57 	bl	8000204 <strlen>
 801a356:	4603      	mov	r3, r0
 801a358:	617b      	str	r3, [r7, #20]
 801a35a:	e005      	b.n	801a368 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	689b      	ldr	r3, [r3, #8]
 801a360:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	685b      	ldr	r3, [r3, #4]
 801a366:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801a368:	6838      	ldr	r0, [r7, #0]
 801a36a:	f7e5 ff4b 	bl	8000204 <strlen>
 801a36e:	4603      	mov	r3, r0
 801a370:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801a372:	697a      	ldr	r2, [r7, #20]
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	429a      	cmp	r2, r3
 801a378:	d10a      	bne.n	801a390 <MQTTPacket_equals+0x64>
 801a37a:	697b      	ldr	r3, [r7, #20]
 801a37c:	461a      	mov	r2, r3
 801a37e:	6839      	ldr	r1, [r7, #0]
 801a380:	6938      	ldr	r0, [r7, #16]
 801a382:	f001 fe21 	bl	801bfc8 <strncmp>
 801a386:	4603      	mov	r3, r0
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d101      	bne.n	801a390 <MQTTPacket_equals+0x64>
 801a38c:	2301      	movs	r3, #1
 801a38e:	e000      	b.n	801a392 <MQTTPacket_equals+0x66>
 801a390:	2300      	movs	r3, #0
}
 801a392:	4618      	mov	r0, r3
 801a394:	3718      	adds	r7, #24
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}

0801a39a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801a39a:	b580      	push	{r7, lr}
 801a39c:	b086      	sub	sp, #24
 801a39e:	af00      	add	r7, sp, #0
 801a3a0:	60f8      	str	r0, [r7, #12]
 801a3a2:	4638      	mov	r0, r7
 801a3a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801a3ac:	463b      	mov	r3, r7
 801a3ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a3b2:	f7ff ffa2 	bl	801a2fa <MQTTstrlen>
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	1c9a      	adds	r2, r3, #2
 801a3ba:	6a3b      	ldr	r3, [r7, #32]
 801a3bc:	4413      	add	r3, r2
 801a3be:	697a      	ldr	r2, [r7, #20]
 801a3c0:	4413      	add	r3, r2
 801a3c2:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	dd02      	ble.n	801a3d0 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801a3ca:	697b      	ldr	r3, [r7, #20]
 801a3cc:	3302      	adds	r3, #2
 801a3ce:	617b      	str	r3, [r7, #20]
	return len;
 801a3d0:	697b      	ldr	r3, [r7, #20]
}
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	3718      	adds	r7, #24
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bd80      	pop	{r7, pc}

0801a3da <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801a3da:	b580      	push	{r7, lr}
 801a3dc:	b08a      	sub	sp, #40	; 0x28
 801a3de:	af02      	add	r7, sp, #8
 801a3e0:	60f8      	str	r0, [r7, #12]
 801a3e2:	60b9      	str	r1, [r7, #8]
 801a3e4:	603b      	str	r3, [r7, #0]
 801a3e6:	4613      	mov	r3, r2
 801a3e8:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801a3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3fc:	9300      	str	r3, [sp, #0]
 801a3fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a402:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a404:	6838      	ldr	r0, [r7, #0]
 801a406:	f7ff ffc8 	bl	801a39a <MQTTSerialize_publishLength>
 801a40a:	61b8      	str	r0, [r7, #24]
 801a40c:	69b8      	ldr	r0, [r7, #24]
 801a40e:	f7ff fe29 	bl	801a064 <MQTTPacket_len>
 801a412:	4602      	mov	r2, r0
 801a414:	68bb      	ldr	r3, [r7, #8]
 801a416:	4293      	cmp	r3, r2
 801a418:	da03      	bge.n	801a422 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a41a:	f06f 0301 	mvn.w	r3, #1
 801a41e:	61fb      	str	r3, [r7, #28]
		goto exit;
 801a420:	e04d      	b.n	801a4be <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 801a422:	7c3b      	ldrb	r3, [r7, #16]
 801a424:	2203      	movs	r2, #3
 801a426:	f362 1307 	bfi	r3, r2, #4, #4
 801a42a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801a42c:	79fb      	ldrb	r3, [r7, #7]
 801a42e:	f003 0301 	and.w	r3, r3, #1
 801a432:	b2da      	uxtb	r2, r3
 801a434:	7c3b      	ldrb	r3, [r7, #16]
 801a436:	f362 03c3 	bfi	r3, r2, #3, #1
 801a43a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801a43c:	683b      	ldr	r3, [r7, #0]
 801a43e:	f003 0303 	and.w	r3, r3, #3
 801a442:	b2da      	uxtb	r2, r3
 801a444:	7c3b      	ldrb	r3, [r7, #16]
 801a446:	f362 0342 	bfi	r3, r2, #1, #2
 801a44a:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801a44c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a450:	f003 0301 	and.w	r3, r3, #1
 801a454:	b2da      	uxtb	r2, r3
 801a456:	7c3b      	ldrb	r3, [r7, #16]
 801a458:	f362 0300 	bfi	r3, r2, #0, #1
 801a45c:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801a45e:	7c3a      	ldrb	r2, [r7, #16]
 801a460:	f107 0314 	add.w	r3, r7, #20
 801a464:	4611      	mov	r1, r2
 801a466:	4618      	mov	r0, r3
 801a468:	f7ff fe8b 	bl	801a182 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801a46c:	697b      	ldr	r3, [r7, #20]
 801a46e:	69b9      	ldr	r1, [r7, #24]
 801a470:	4618      	mov	r0, r3
 801a472:	f7ff fd8c 	bl	8019f8e <MQTTPacket_encode>
 801a476:	4602      	mov	r2, r0
 801a478:	697b      	ldr	r3, [r7, #20]
 801a47a:	4413      	add	r3, r2
 801a47c:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801a47e:	f107 0014 	add.w	r0, r7, #20
 801a482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a486:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a488:	f7ff fed8 	bl	801a23c <writeMQTTString>

	if (qos > 0)
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	dd06      	ble.n	801a4a0 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801a492:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801a494:	f107 0314 	add.w	r3, r7, #20
 801a498:	4611      	mov	r1, r2
 801a49a:	4618      	mov	r0, r3
 801a49c:	f7ff fe86 	bl	801a1ac <writeInt>

	memcpy(ptr, payload, payloadlen);
 801a4a0:	697b      	ldr	r3, [r7, #20]
 801a4a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a4a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	f001 fccb 	bl	801be42 <memcpy>
	ptr += payloadlen;
 801a4ac:	697a      	ldr	r2, [r7, #20]
 801a4ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4b0:	4413      	add	r3, r2
 801a4b2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801a4b4:	697b      	ldr	r3, [r7, #20]
 801a4b6:	461a      	mov	r2, r3
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	1ad3      	subs	r3, r2, r3
 801a4bc:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a4be:	69fb      	ldr	r3, [r7, #28]
}
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	3720      	adds	r7, #32
 801a4c4:	46bd      	mov	sp, r7
 801a4c6:	bd80      	pop	{r7, pc}

0801a4c8 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b088      	sub	sp, #32
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	60f8      	str	r0, [r7, #12]
 801a4d0:	60b9      	str	r1, [r7, #8]
 801a4d2:	4611      	mov	r1, r2
 801a4d4:	461a      	mov	r2, r3
 801a4d6:	460b      	mov	r3, r1
 801a4d8:	71fb      	strb	r3, [r7, #7]
 801a4da:	4613      	mov	r3, r2
 801a4dc:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801a4de:	2300      	movs	r3, #0
 801a4e0:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801a4ea:	68bb      	ldr	r3, [r7, #8]
 801a4ec:	2b03      	cmp	r3, #3
 801a4ee:	dc03      	bgt.n	801a4f8 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a4f0:	f06f 0301 	mvn.w	r3, #1
 801a4f4:	61fb      	str	r3, [r7, #28]
		goto exit;
 801a4f6:	e038      	b.n	801a56a <MQTTSerialize_ack+0xa2>
	}
	header.bits.type = packettype;
 801a4f8:	79fb      	ldrb	r3, [r7, #7]
 801a4fa:	f003 030f 	and.w	r3, r3, #15
 801a4fe:	b2da      	uxtb	r2, r3
 801a500:	7e3b      	ldrb	r3, [r7, #24]
 801a502:	f362 1307 	bfi	r3, r2, #4, #4
 801a506:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801a508:	79bb      	ldrb	r3, [r7, #6]
 801a50a:	f003 0301 	and.w	r3, r3, #1
 801a50e:	b2da      	uxtb	r2, r3
 801a510:	7e3b      	ldrb	r3, [r7, #24]
 801a512:	f362 03c3 	bfi	r3, r2, #3, #1
 801a516:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801a518:	79fb      	ldrb	r3, [r7, #7]
 801a51a:	2b06      	cmp	r3, #6
 801a51c:	bf0c      	ite	eq
 801a51e:	2301      	moveq	r3, #1
 801a520:	2300      	movne	r3, #0
 801a522:	b2db      	uxtb	r3, r3
 801a524:	f003 0303 	and.w	r3, r3, #3
 801a528:	b2da      	uxtb	r2, r3
 801a52a:	7e3b      	ldrb	r3, [r7, #24]
 801a52c:	f362 0342 	bfi	r3, r2, #1, #2
 801a530:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801a532:	7e3a      	ldrb	r2, [r7, #24]
 801a534:	f107 0314 	add.w	r3, r7, #20
 801a538:	4611      	mov	r1, r2
 801a53a:	4618      	mov	r0, r3
 801a53c:	f7ff fe21 	bl	801a182 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801a540:	697b      	ldr	r3, [r7, #20]
 801a542:	2102      	movs	r1, #2
 801a544:	4618      	mov	r0, r3
 801a546:	f7ff fd22 	bl	8019f8e <MQTTPacket_encode>
 801a54a:	4602      	mov	r2, r0
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	4413      	add	r3, r2
 801a550:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801a552:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801a554:	f107 0314 	add.w	r3, r7, #20
 801a558:	4611      	mov	r1, r2
 801a55a:	4618      	mov	r0, r3
 801a55c:	f7ff fe26 	bl	801a1ac <writeInt>
	rc = ptr - buf;
 801a560:	697b      	ldr	r3, [r7, #20]
 801a562:	461a      	mov	r2, r3
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	1ad3      	subs	r3, r2, r3
 801a568:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a56a:	69fb      	ldr	r3, [r7, #28]
}
 801a56c:	4618      	mov	r0, r3
 801a56e:	3720      	adds	r7, #32
 801a570:	46bd      	mov	sp, r7
 801a572:	bd80      	pop	{r7, pc}

0801a574 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 801a574:	b580      	push	{r7, lr}
 801a576:	b084      	sub	sp, #16
 801a578:	af00      	add	r7, sp, #0
 801a57a:	6078      	str	r0, [r7, #4]
 801a57c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 801a57e:	2302      	movs	r3, #2
 801a580:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 801a582:	2300      	movs	r3, #0
 801a584:	60fb      	str	r3, [r7, #12]
 801a586:	e013      	b.n	801a5b0 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801a588:	68fa      	ldr	r2, [r7, #12]
 801a58a:	4613      	mov	r3, r2
 801a58c:	005b      	lsls	r3, r3, #1
 801a58e:	4413      	add	r3, r2
 801a590:	009b      	lsls	r3, r3, #2
 801a592:	461a      	mov	r2, r3
 801a594:	683b      	ldr	r3, [r7, #0]
 801a596:	4413      	add	r3, r2
 801a598:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a59c:	f7ff fead 	bl	801a2fa <MQTTstrlen>
 801a5a0:	4603      	mov	r3, r0
 801a5a2:	3303      	adds	r3, #3
 801a5a4:	68ba      	ldr	r2, [r7, #8]
 801a5a6:	4413      	add	r3, r2
 801a5a8:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	3301      	adds	r3, #1
 801a5ae:	60fb      	str	r3, [r7, #12]
 801a5b0:	68fa      	ldr	r2, [r7, #12]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	429a      	cmp	r2, r3
 801a5b6:	dbe7      	blt.n	801a588 <MQTTSerialize_subscribeLength+0x14>
	return len;
 801a5b8:	68bb      	ldr	r3, [r7, #8]
}
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	3710      	adds	r7, #16
 801a5be:	46bd      	mov	sp, r7
 801a5c0:	bd80      	pop	{r7, pc}

0801a5c2 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 801a5c2:	b580      	push	{r7, lr}
 801a5c4:	b08a      	sub	sp, #40	; 0x28
 801a5c6:	af00      	add	r7, sp, #0
 801a5c8:	60f8      	str	r0, [r7, #12]
 801a5ca:	60b9      	str	r1, [r7, #8]
 801a5cc:	4611      	mov	r1, r2
 801a5ce:	461a      	mov	r2, r3
 801a5d0:	460b      	mov	r3, r1
 801a5d2:	71fb      	strb	r3, [r7, #7]
 801a5d4:	4613      	mov	r3, r2
 801a5d6:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 801a5dc:	2300      	movs	r3, #0
 801a5de:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 801a5ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a5ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5f0:	f7ff ffc0 	bl	801a574 <MQTTSerialize_subscribeLength>
 801a5f4:	61f8      	str	r0, [r7, #28]
 801a5f6:	69f8      	ldr	r0, [r7, #28]
 801a5f8:	f7ff fd34 	bl	801a064 <MQTTPacket_len>
 801a5fc:	4602      	mov	r2, r0
 801a5fe:	68bb      	ldr	r3, [r7, #8]
 801a600:	4293      	cmp	r3, r2
 801a602:	da03      	bge.n	801a60c <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a604:	f06f 0301 	mvn.w	r3, #1
 801a608:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801a60a:	e052      	b.n	801a6b2 <MQTTSerialize_subscribe+0xf0>
	}

	header.byte = 0;
 801a60c:	2300      	movs	r3, #0
 801a60e:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 801a610:	7d3b      	ldrb	r3, [r7, #20]
 801a612:	2208      	movs	r2, #8
 801a614:	f362 1307 	bfi	r3, r2, #4, #4
 801a618:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 801a61a:	79fb      	ldrb	r3, [r7, #7]
 801a61c:	f003 0301 	and.w	r3, r3, #1
 801a620:	b2da      	uxtb	r2, r3
 801a622:	7d3b      	ldrb	r3, [r7, #20]
 801a624:	f362 03c3 	bfi	r3, r2, #3, #1
 801a628:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 801a62a:	7d3b      	ldrb	r3, [r7, #20]
 801a62c:	2201      	movs	r2, #1
 801a62e:	f362 0342 	bfi	r3, r2, #1, #2
 801a632:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 801a634:	7d3a      	ldrb	r2, [r7, #20]
 801a636:	f107 0318 	add.w	r3, r7, #24
 801a63a:	4611      	mov	r1, r2
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7ff fda0 	bl	801a182 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801a642:	69bb      	ldr	r3, [r7, #24]
 801a644:	69f9      	ldr	r1, [r7, #28]
 801a646:	4618      	mov	r0, r3
 801a648:	f7ff fca1 	bl	8019f8e <MQTTPacket_encode>
 801a64c:	4602      	mov	r2, r0
 801a64e:	69bb      	ldr	r3, [r7, #24]
 801a650:	4413      	add	r3, r2
 801a652:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 801a654:	88ba      	ldrh	r2, [r7, #4]
 801a656:	f107 0318 	add.w	r3, r7, #24
 801a65a:	4611      	mov	r1, r2
 801a65c:	4618      	mov	r0, r3
 801a65e:	f7ff fda5 	bl	801a1ac <writeInt>

	for (i = 0; i < count; ++i)
 801a662:	2300      	movs	r3, #0
 801a664:	623b      	str	r3, [r7, #32]
 801a666:	e01b      	b.n	801a6a0 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 801a668:	6a3a      	ldr	r2, [r7, #32]
 801a66a:	4613      	mov	r3, r2
 801a66c:	005b      	lsls	r3, r3, #1
 801a66e:	4413      	add	r3, r2
 801a670:	009b      	lsls	r3, r3, #2
 801a672:	461a      	mov	r2, r3
 801a674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a676:	4413      	add	r3, r2
 801a678:	f107 0018 	add.w	r0, r7, #24
 801a67c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a67e:	f7ff fddd 	bl	801a23c <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 801a682:	6a3b      	ldr	r3, [r7, #32]
 801a684:	009b      	lsls	r3, r3, #2
 801a686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a688:	4413      	add	r3, r2
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	b2da      	uxtb	r2, r3
 801a68e:	f107 0318 	add.w	r3, r7, #24
 801a692:	4611      	mov	r1, r2
 801a694:	4618      	mov	r0, r3
 801a696:	f7ff fd74 	bl	801a182 <writeChar>
	for (i = 0; i < count; ++i)
 801a69a:	6a3b      	ldr	r3, [r7, #32]
 801a69c:	3301      	adds	r3, #1
 801a69e:	623b      	str	r3, [r7, #32]
 801a6a0:	6a3a      	ldr	r2, [r7, #32]
 801a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6a4:	429a      	cmp	r2, r3
 801a6a6:	dbdf      	blt.n	801a668 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 801a6a8:	69bb      	ldr	r3, [r7, #24]
 801a6aa:	461a      	mov	r2, r3
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	1ad3      	subs	r3, r2, r3
 801a6b0:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	3728      	adds	r7, #40	; 0x28
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}

0801a6bc <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b08a      	sub	sp, #40	; 0x28
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	60f8      	str	r0, [r7, #12]
 801a6c4:	60b9      	str	r1, [r7, #8]
 801a6c6:	607a      	str	r2, [r7, #4]
 801a6c8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6d0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801a6da:	f107 0318 	add.w	r3, r7, #24
 801a6de:	4618      	mov	r0, r3
 801a6e0:	f7ff fd3b 	bl	801a15a <readChar>
 801a6e4:	4603      	mov	r3, r0
 801a6e6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 801a6e8:	7f3b      	ldrb	r3, [r7, #28]
 801a6ea:	f023 030f 	bic.w	r3, r3, #15
 801a6ee:	b2db      	uxtb	r3, r3
 801a6f0:	2b90      	cmp	r3, #144	; 0x90
 801a6f2:	d142      	bne.n	801a77a <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801a6f4:	69bb      	ldr	r3, [r7, #24]
 801a6f6:	f107 0214 	add.w	r2, r7, #20
 801a6fa:	4611      	mov	r1, r2
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f7ff fcfb 	bl	801a0f8 <MQTTPacket_decodeBuf>
 801a702:	6278      	str	r0, [r7, #36]	; 0x24
 801a704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a706:	69bb      	ldr	r3, [r7, #24]
 801a708:	4413      	add	r3, r2
 801a70a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801a70c:	69bb      	ldr	r3, [r7, #24]
 801a70e:	697a      	ldr	r2, [r7, #20]
 801a710:	4413      	add	r3, r2
 801a712:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801a714:	6a3b      	ldr	r3, [r7, #32]
 801a716:	69ba      	ldr	r2, [r7, #24]
 801a718:	1a9b      	subs	r3, r3, r2
 801a71a:	2b01      	cmp	r3, #1
 801a71c:	dd2f      	ble.n	801a77e <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 801a71e:	f107 0318 	add.w	r3, r7, #24
 801a722:	4618      	mov	r0, r3
 801a724:	f7ff fcfe 	bl	801a124 <readInt>
 801a728:	4603      	mov	r3, r0
 801a72a:	b29a      	uxth	r2, r3
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	801a      	strh	r2, [r3, #0]

	*count = 0;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	2200      	movs	r2, #0
 801a734:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801a736:	e019      	b.n	801a76c <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	68ba      	ldr	r2, [r7, #8]
 801a73e:	429a      	cmp	r2, r3
 801a740:	da03      	bge.n	801a74a <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 801a742:	f04f 33ff 	mov.w	r3, #4294967295
 801a746:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 801a748:	e01a      	b.n	801a780 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 801a74a:	f107 0318 	add.w	r3, r7, #24
 801a74e:	4618      	mov	r0, r3
 801a750:	f7ff fd03 	bl	801a15a <readChar>
 801a754:	4603      	mov	r3, r0
 801a756:	4618      	mov	r0, r3
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	1c59      	adds	r1, r3, #1
 801a75e:	687a      	ldr	r2, [r7, #4]
 801a760:	6011      	str	r1, [r2, #0]
 801a762:	009b      	lsls	r3, r3, #2
 801a764:	683a      	ldr	r2, [r7, #0]
 801a766:	4413      	add	r3, r2
 801a768:	4602      	mov	r2, r0
 801a76a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801a76c:	69bb      	ldr	r3, [r7, #24]
 801a76e:	6a3a      	ldr	r2, [r7, #32]
 801a770:	429a      	cmp	r2, r3
 801a772:	d8e1      	bhi.n	801a738 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 801a774:	2301      	movs	r3, #1
 801a776:	627b      	str	r3, [r7, #36]	; 0x24
 801a778:	e002      	b.n	801a780 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801a77a:	bf00      	nop
 801a77c:	e000      	b.n	801a780 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801a77e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a782:	4618      	mov	r0, r3
 801a784:	3728      	adds	r7, #40	; 0x28
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}
	...

0801a78c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 801a78c:	b580      	push	{r7, lr}
 801a78e:	b084      	sub	sp, #16
 801a790:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 801a792:	463b      	mov	r3, r7
 801a794:	2200      	movs	r2, #0
 801a796:	601a      	str	r2, [r3, #0]
 801a798:	605a      	str	r2, [r3, #4]
 801a79a:	609a      	str	r2, [r3, #8]
 801a79c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 801a79e:	4b21      	ldr	r3, [pc, #132]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7a0:	4a21      	ldr	r2, [pc, #132]	; (801a828 <MX_ADC1_Init+0x9c>)
 801a7a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 801a7a4:	4b1f      	ldr	r3, [pc, #124]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801a7aa:	4b1e      	ldr	r3, [pc, #120]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7ac:	2200      	movs	r2, #0
 801a7ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801a7b0:	4b1c      	ldr	r3, [pc, #112]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7b2:	2200      	movs	r2, #0
 801a7b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 801a7b6:	4b1b      	ldr	r3, [pc, #108]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7b8:	2200      	movs	r2, #0
 801a7ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801a7bc:	4b19      	ldr	r3, [pc, #100]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7be:	2200      	movs	r2, #0
 801a7c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801a7c4:	4b17      	ldr	r3, [pc, #92]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801a7ca:	4b16      	ldr	r3, [pc, #88]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7cc:	4a17      	ldr	r2, [pc, #92]	; (801a82c <MX_ADC1_Init+0xa0>)
 801a7ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801a7d0:	4b14      	ldr	r3, [pc, #80]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 801a7d6:	4b13      	ldr	r3, [pc, #76]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7d8:	2201      	movs	r2, #1
 801a7da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801a7dc:	4b11      	ldr	r3, [pc, #68]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7de:	2200      	movs	r2, #0
 801a7e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801a7e4:	4b0f      	ldr	r3, [pc, #60]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7e6:	2201      	movs	r2, #1
 801a7e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801a7ea:	480e      	ldr	r0, [pc, #56]	; (801a824 <MX_ADC1_Init+0x98>)
 801a7ec:	f7e6 fb3a 	bl	8000e64 <HAL_ADC_Init>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d001      	beq.n	801a7fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 801a7f6:	f001 f915 	bl	801ba24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 801a7fa:	2303      	movs	r3, #3
 801a7fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801a7fe:	2301      	movs	r3, #1
 801a800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801a802:	2300      	movs	r3, #0
 801a804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801a806:	463b      	mov	r3, r7
 801a808:	4619      	mov	r1, r3
 801a80a:	4806      	ldr	r0, [pc, #24]	; (801a824 <MX_ADC1_Init+0x98>)
 801a80c:	f7e6 fcc6 	bl	800119c <HAL_ADC_ConfigChannel>
 801a810:	4603      	mov	r3, r0
 801a812:	2b00      	cmp	r3, #0
 801a814:	d001      	beq.n	801a81a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 801a816:	f001 f905 	bl	801ba24 <Error_Handler>
  }

}
 801a81a:	bf00      	nop
 801a81c:	3710      	adds	r7, #16
 801a81e:	46bd      	mov	sp, r7
 801a820:	bd80      	pop	{r7, pc}
 801a822:	bf00      	nop
 801a824:	2000c5a0 	.word	0x2000c5a0
 801a828:	40012000 	.word	0x40012000
 801a82c:	0f000001 	.word	0x0f000001

0801a830 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b08a      	sub	sp, #40	; 0x28
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a838:	f107 0314 	add.w	r3, r7, #20
 801a83c:	2200      	movs	r2, #0
 801a83e:	601a      	str	r2, [r3, #0]
 801a840:	605a      	str	r2, [r3, #4]
 801a842:	609a      	str	r2, [r3, #8]
 801a844:	60da      	str	r2, [r3, #12]
 801a846:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	4a17      	ldr	r2, [pc, #92]	; (801a8ac <HAL_ADC_MspInit+0x7c>)
 801a84e:	4293      	cmp	r3, r2
 801a850:	d127      	bne.n	801a8a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801a852:	2300      	movs	r3, #0
 801a854:	613b      	str	r3, [r7, #16]
 801a856:	4b16      	ldr	r3, [pc, #88]	; (801a8b0 <HAL_ADC_MspInit+0x80>)
 801a858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a85a:	4a15      	ldr	r2, [pc, #84]	; (801a8b0 <HAL_ADC_MspInit+0x80>)
 801a85c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a860:	6453      	str	r3, [r2, #68]	; 0x44
 801a862:	4b13      	ldr	r3, [pc, #76]	; (801a8b0 <HAL_ADC_MspInit+0x80>)
 801a864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a86a:	613b      	str	r3, [r7, #16]
 801a86c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a86e:	2300      	movs	r3, #0
 801a870:	60fb      	str	r3, [r7, #12]
 801a872:	4b0f      	ldr	r3, [pc, #60]	; (801a8b0 <HAL_ADC_MspInit+0x80>)
 801a874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a876:	4a0e      	ldr	r2, [pc, #56]	; (801a8b0 <HAL_ADC_MspInit+0x80>)
 801a878:	f043 0301 	orr.w	r3, r3, #1
 801a87c:	6313      	str	r3, [r2, #48]	; 0x30
 801a87e:	4b0c      	ldr	r3, [pc, #48]	; (801a8b0 <HAL_ADC_MspInit+0x80>)
 801a880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a882:	f003 0301 	and.w	r3, r3, #1
 801a886:	60fb      	str	r3, [r7, #12]
 801a888:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801a88a:	2308      	movs	r3, #8
 801a88c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801a88e:	2303      	movs	r3, #3
 801a890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a892:	2300      	movs	r3, #0
 801a894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a896:	f107 0314 	add.w	r3, r7, #20
 801a89a:	4619      	mov	r1, r3
 801a89c:	4805      	ldr	r0, [pc, #20]	; (801a8b4 <HAL_ADC_MspInit+0x84>)
 801a89e:	f7e8 f933 	bl	8002b08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 801a8a2:	bf00      	nop
 801a8a4:	3728      	adds	r7, #40	; 0x28
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}
 801a8aa:	bf00      	nop
 801a8ac:	40012000 	.word	0x40012000
 801a8b0:	40023800 	.word	0x40023800
 801a8b4:	40020000 	.word	0x40020000

0801a8b8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b08e      	sub	sp, #56	; 0x38
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	601a      	str	r2, [r3, #0]
 801a8c8:	605a      	str	r2, [r3, #4]
 801a8ca:	609a      	str	r2, [r3, #8]
 801a8cc:	60da      	str	r2, [r3, #12]
 801a8ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	4a59      	ldr	r2, [pc, #356]	; (801aa3c <HAL_ETH_MspInit+0x184>)
 801a8d6:	4293      	cmp	r3, r2
 801a8d8:	f040 80ac 	bne.w	801aa34 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801a8dc:	2300      	movs	r3, #0
 801a8de:	623b      	str	r3, [r7, #32]
 801a8e0:	4b57      	ldr	r3, [pc, #348]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8e4:	4a56      	ldr	r2, [pc, #344]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a8e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a8ea:	6313      	str	r3, [r2, #48]	; 0x30
 801a8ec:	4b54      	ldr	r3, [pc, #336]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a8f4:	623b      	str	r3, [r7, #32]
 801a8f6:	6a3b      	ldr	r3, [r7, #32]
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	61fb      	str	r3, [r7, #28]
 801a8fc:	4b50      	ldr	r3, [pc, #320]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a900:	4a4f      	ldr	r2, [pc, #316]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a902:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801a906:	6313      	str	r3, [r2, #48]	; 0x30
 801a908:	4b4d      	ldr	r3, [pc, #308]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a90c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801a910:	61fb      	str	r3, [r7, #28]
 801a912:	69fb      	ldr	r3, [r7, #28]
 801a914:	2300      	movs	r3, #0
 801a916:	61bb      	str	r3, [r7, #24]
 801a918:	4b49      	ldr	r3, [pc, #292]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a91c:	4a48      	ldr	r2, [pc, #288]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a91e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a922:	6313      	str	r3, [r2, #48]	; 0x30
 801a924:	4b46      	ldr	r3, [pc, #280]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a92c:	61bb      	str	r3, [r7, #24]
 801a92e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801a930:	2300      	movs	r3, #0
 801a932:	617b      	str	r3, [r7, #20]
 801a934:	4b42      	ldr	r3, [pc, #264]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a938:	4a41      	ldr	r2, [pc, #260]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a93a:	f043 0304 	orr.w	r3, r3, #4
 801a93e:	6313      	str	r3, [r2, #48]	; 0x30
 801a940:	4b3f      	ldr	r3, [pc, #252]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a944:	f003 0304 	and.w	r3, r3, #4
 801a948:	617b      	str	r3, [r7, #20]
 801a94a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a94c:	2300      	movs	r3, #0
 801a94e:	613b      	str	r3, [r7, #16]
 801a950:	4b3b      	ldr	r3, [pc, #236]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a954:	4a3a      	ldr	r2, [pc, #232]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a956:	f043 0301 	orr.w	r3, r3, #1
 801a95a:	6313      	str	r3, [r2, #48]	; 0x30
 801a95c:	4b38      	ldr	r3, [pc, #224]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a960:	f003 0301 	and.w	r3, r3, #1
 801a964:	613b      	str	r3, [r7, #16]
 801a966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801a968:	2300      	movs	r3, #0
 801a96a:	60fb      	str	r3, [r7, #12]
 801a96c:	4b34      	ldr	r3, [pc, #208]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a970:	4a33      	ldr	r2, [pc, #204]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a972:	f043 0302 	orr.w	r3, r3, #2
 801a976:	6313      	str	r3, [r2, #48]	; 0x30
 801a978:	4b31      	ldr	r3, [pc, #196]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a97c:	f003 0302 	and.w	r3, r3, #2
 801a980:	60fb      	str	r3, [r7, #12]
 801a982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801a984:	2300      	movs	r3, #0
 801a986:	60bb      	str	r3, [r7, #8]
 801a988:	4b2d      	ldr	r3, [pc, #180]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a98c:	4a2c      	ldr	r2, [pc, #176]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a992:	6313      	str	r3, [r2, #48]	; 0x30
 801a994:	4b2a      	ldr	r3, [pc, #168]	; (801aa40 <HAL_ETH_MspInit+0x188>)
 801a996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a99c:	60bb      	str	r3, [r7, #8]
 801a99e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801a9a0:	2332      	movs	r3, #50	; 0x32
 801a9a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a9a4:	2302      	movs	r3, #2
 801a9a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a9ac:	2303      	movs	r3, #3
 801a9ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801a9b0:	230b      	movs	r3, #11
 801a9b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801a9b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a9b8:	4619      	mov	r1, r3
 801a9ba:	4822      	ldr	r0, [pc, #136]	; (801aa44 <HAL_ETH_MspInit+0x18c>)
 801a9bc:	f7e8 f8a4 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801a9c0:	2386      	movs	r3, #134	; 0x86
 801a9c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a9c4:	2302      	movs	r3, #2
 801a9c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a9cc:	2303      	movs	r3, #3
 801a9ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801a9d0:	230b      	movs	r3, #11
 801a9d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a9d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a9d8:	4619      	mov	r1, r3
 801a9da:	481b      	ldr	r0, [pc, #108]	; (801aa48 <HAL_ETH_MspInit+0x190>)
 801a9dc:	f7e8 f894 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 801a9e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a9e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a9e6:	2302      	movs	r3, #2
 801a9e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a9ee:	2303      	movs	r3, #3
 801a9f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801a9f2:	230b      	movs	r3, #11
 801a9f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801a9f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a9fa:	4619      	mov	r1, r3
 801a9fc:	4813      	ldr	r0, [pc, #76]	; (801aa4c <HAL_ETH_MspInit+0x194>)
 801a9fe:	f7e8 f883 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 801aa02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801aa06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801aa08:	2302      	movs	r3, #2
 801aa0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801aa10:	2303      	movs	r3, #3
 801aa12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801aa14:	230b      	movs	r3, #11
 801aa16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801aa18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	480c      	ldr	r0, [pc, #48]	; (801aa50 <HAL_ETH_MspInit+0x198>)
 801aa20:	f7e8 f872 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801aa24:	2200      	movs	r2, #0
 801aa26:	2105      	movs	r1, #5
 801aa28:	203d      	movs	r0, #61	; 0x3d
 801aa2a:	f7e6 fe9d 	bl	8001768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801aa2e:	203d      	movs	r0, #61	; 0x3d
 801aa30:	f7e6 feb6 	bl	80017a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801aa34:	bf00      	nop
 801aa36:	3738      	adds	r7, #56	; 0x38
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd80      	pop	{r7, pc}
 801aa3c:	40028000 	.word	0x40028000
 801aa40:	40023800 	.word	0x40023800
 801aa44:	40020800 	.word	0x40020800
 801aa48:	40020000 	.word	0x40020000
 801aa4c:	40020400 	.word	0x40020400
 801aa50:	40021800 	.word	0x40021800

0801aa54 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b082      	sub	sp, #8
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 801aa5c:	4b04      	ldr	r3, [pc, #16]	; (801aa70 <HAL_ETH_RxCpltCallback+0x1c>)
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	4618      	mov	r0, r3
 801aa62:	f7ea faaf 	bl	8004fc4 <osSemaphoreRelease>
}
 801aa66:	bf00      	nop
 801aa68:	3708      	adds	r7, #8
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	bd80      	pop	{r7, pc}
 801aa6e:	bf00      	nop
 801aa70:	2000853c 	.word	0x2000853c

0801aa74 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 801aa74:	b5b0      	push	{r4, r5, r7, lr}
 801aa76:	b090      	sub	sp, #64	; 0x40
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801aa80:	4b5c      	ldr	r3, [pc, #368]	; (801abf4 <low_level_init+0x180>)
 801aa82:	4a5d      	ldr	r2, [pc, #372]	; (801abf8 <low_level_init+0x184>)
 801aa84:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801aa86:	4b5b      	ldr	r3, [pc, #364]	; (801abf4 <low_level_init+0x180>)
 801aa88:	2201      	movs	r2, #1
 801aa8a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801aa8c:	4b59      	ldr	r3, [pc, #356]	; (801abf4 <low_level_init+0x180>)
 801aa8e:	2200      	movs	r2, #0
 801aa90:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 801aa92:	2300      	movs	r3, #0
 801aa94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 801aa98:	2380      	movs	r3, #128	; 0x80
 801aa9a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 801aa9e:	23e1      	movs	r3, #225	; 0xe1
 801aaa0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 801aaaa:	2300      	movs	r3, #0
 801aaac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 801aab0:	2300      	movs	r3, #0
 801aab2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 801aab6:	4a4f      	ldr	r2, [pc, #316]	; (801abf4 <low_level_init+0x180>)
 801aab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aabc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801aabe:	4b4d      	ldr	r3, [pc, #308]	; (801abf4 <low_level_init+0x180>)
 801aac0:	2201      	movs	r2, #1
 801aac2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801aac4:	4b4b      	ldr	r3, [pc, #300]	; (801abf4 <low_level_init+0x180>)
 801aac6:	2200      	movs	r2, #0
 801aac8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801aaca:	4b4a      	ldr	r3, [pc, #296]	; (801abf4 <low_level_init+0x180>)
 801aacc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801aad0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801aad2:	4848      	ldr	r0, [pc, #288]	; (801abf4 <low_level_init+0x180>)
 801aad4:	f7e6 fe72 	bl	80017bc <HAL_ETH_Init>
 801aad8:	4603      	mov	r3, r0
 801aada:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 801aade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d108      	bne.n	801aaf8 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801aaec:	f043 0304 	orr.w	r3, r3, #4
 801aaf0:	b2da      	uxtb	r2, r3
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801aaf8:	2304      	movs	r3, #4
 801aafa:	4a40      	ldr	r2, [pc, #256]	; (801abfc <low_level_init+0x188>)
 801aafc:	4940      	ldr	r1, [pc, #256]	; (801ac00 <low_level_init+0x18c>)
 801aafe:	483d      	ldr	r0, [pc, #244]	; (801abf4 <low_level_init+0x180>)
 801ab00:	f7e6 fffa 	bl	8001af8 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801ab04:	2304      	movs	r3, #4
 801ab06:	4a3f      	ldr	r2, [pc, #252]	; (801ac04 <low_level_init+0x190>)
 801ab08:	493f      	ldr	r1, [pc, #252]	; (801ac08 <low_level_init+0x194>)
 801ab0a:	483a      	ldr	r0, [pc, #232]	; (801abf4 <low_level_init+0x180>)
 801ab0c:	f7e7 f85d 	bl	8001bca <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	2206      	movs	r2, #6
 801ab14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801ab18:	4b36      	ldr	r3, [pc, #216]	; (801abf4 <low_level_init+0x180>)
 801ab1a:	695b      	ldr	r3, [r3, #20]
 801ab1c:	781a      	ldrb	r2, [r3, #0]
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801ab24:	4b33      	ldr	r3, [pc, #204]	; (801abf4 <low_level_init+0x180>)
 801ab26:	695b      	ldr	r3, [r3, #20]
 801ab28:	785a      	ldrb	r2, [r3, #1]
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801ab30:	4b30      	ldr	r3, [pc, #192]	; (801abf4 <low_level_init+0x180>)
 801ab32:	695b      	ldr	r3, [r3, #20]
 801ab34:	789a      	ldrb	r2, [r3, #2]
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801ab3c:	4b2d      	ldr	r3, [pc, #180]	; (801abf4 <low_level_init+0x180>)
 801ab3e:	695b      	ldr	r3, [r3, #20]
 801ab40:	78da      	ldrb	r2, [r3, #3]
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801ab48:	4b2a      	ldr	r3, [pc, #168]	; (801abf4 <low_level_init+0x180>)
 801ab4a:	695b      	ldr	r3, [r3, #20]
 801ab4c:	791a      	ldrb	r2, [r3, #4]
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801ab54:	4b27      	ldr	r3, [pc, #156]	; (801abf4 <low_level_init+0x180>)
 801ab56:	695b      	ldr	r3, [r3, #20]
 801ab58:	795a      	ldrb	r2, [r3, #5]
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801ab66:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ab6e:	f043 030a 	orr.w	r3, r3, #10
 801ab72:	b2da      	uxtb	r2, r3
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab7e:	2300      	movs	r3, #0
 801ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801ab82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ab86:	2101      	movs	r1, #1
 801ab88:	4618      	mov	r0, r3
 801ab8a:	f7ea f999 	bl	8004ec0 <osSemaphoreCreate>
 801ab8e:	4602      	mov	r2, r0
 801ab90:	4b1e      	ldr	r3, [pc, #120]	; (801ac0c <low_level_init+0x198>)
 801ab92:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801ab94:	4b1e      	ldr	r3, [pc, #120]	; (801ac10 <low_level_init+0x19c>)
 801ab96:	f107 040c 	add.w	r4, r7, #12
 801ab9a:	461d      	mov	r5, r3
 801ab9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ab9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aba0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801aba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 801aba8:	f107 030c 	add.w	r3, r7, #12
 801abac:	6879      	ldr	r1, [r7, #4]
 801abae:	4618      	mov	r0, r3
 801abb0:	f7ea f889 	bl	8004cc6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 801abb4:	480f      	ldr	r0, [pc, #60]	; (801abf4 <low_level_init+0x180>)
 801abb6:	f7e7 fb30 	bl	800221a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801abba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801abbe:	461a      	mov	r2, r3
 801abc0:	211d      	movs	r1, #29
 801abc2:	480c      	ldr	r0, [pc, #48]	; (801abf4 <low_level_init+0x180>)
 801abc4:	f7e7 fa5b 	bl	800207e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 801abc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abca:	f043 030b 	orr.w	r3, r3, #11
 801abce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abd2:	461a      	mov	r2, r3
 801abd4:	211d      	movs	r1, #29
 801abd6:	4807      	ldr	r0, [pc, #28]	; (801abf4 <low_level_init+0x180>)
 801abd8:	f7e7 fab9 	bl	800214e <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801abdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801abe0:	461a      	mov	r2, r3
 801abe2:	211d      	movs	r1, #29
 801abe4:	4803      	ldr	r0, [pc, #12]	; (801abf4 <low_level_init+0x180>)
 801abe6:	f7e7 fa4a 	bl	800207e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 801abea:	bf00      	nop
 801abec:	3740      	adds	r7, #64	; 0x40
 801abee:	46bd      	mov	sp, r7
 801abf0:	bdb0      	pop	{r4, r5, r7, pc}
 801abf2:	bf00      	nop
 801abf4:	2000deb8 	.word	0x2000deb8
 801abf8:	40028000 	.word	0x40028000
 801abfc:	2000df00 	.word	0x2000df00
 801ac00:	2000c5e8 	.word	0x2000c5e8
 801ac04:	2000c668 	.word	0x2000c668
 801ac08:	2000de38 	.word	0x2000de38
 801ac0c:	2000853c 	.word	0x2000853c
 801ac10:	08020b6c 	.word	0x08020b6c

0801ac14 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b08a      	sub	sp, #40	; 0x28
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
 801ac1c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801ac1e:	4b4b      	ldr	r3, [pc, #300]	; (801ad4c <low_level_output+0x138>)
 801ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac22:	689b      	ldr	r3, [r3, #8]
 801ac24:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 801ac26:	2300      	movs	r3, #0
 801ac28:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 801ac32:	2300      	movs	r3, #0
 801ac34:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 801ac36:	4b45      	ldr	r3, [pc, #276]	; (801ad4c <low_level_output+0x138>)
 801ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac3a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 801ac3c:	2300      	movs	r3, #0
 801ac3e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	623b      	str	r3, [r7, #32]
 801ac44:	e05a      	b.n	801acfc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801ac46:	69bb      	ldr	r3, [r7, #24]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	da03      	bge.n	801ac56 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801ac4e:	23f8      	movs	r3, #248	; 0xf8
 801ac50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 801ac54:	e05c      	b.n	801ad10 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 801ac56:	6a3b      	ldr	r3, [r7, #32]
 801ac58:	895b      	ldrh	r3, [r3, #10]
 801ac5a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801ac60:	e02f      	b.n	801acc2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801ac62:	69fa      	ldr	r2, [r7, #28]
 801ac64:	693b      	ldr	r3, [r7, #16]
 801ac66:	18d0      	adds	r0, r2, r3
 801ac68:	6a3b      	ldr	r3, [r7, #32]
 801ac6a:	685a      	ldr	r2, [r3, #4]
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	18d1      	adds	r1, r2, r3
 801ac70:	693b      	ldr	r3, [r7, #16]
 801ac72:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801ac76:	3304      	adds	r3, #4
 801ac78:	461a      	mov	r2, r3
 801ac7a:	f001 f8e2 	bl	801be42 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801ac7e:	69bb      	ldr	r3, [r7, #24]
 801ac80:	68db      	ldr	r3, [r3, #12]
 801ac82:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801ac84:	69bb      	ldr	r3, [r7, #24]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	da03      	bge.n	801ac94 <low_level_output+0x80>
        {
          errval = ERR_USE;
 801ac8c:	23f8      	movs	r3, #248	; 0xf8
 801ac8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801ac92:	e03d      	b.n	801ad10 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 801ac94:	69bb      	ldr	r3, [r7, #24]
 801ac96:	689b      	ldr	r3, [r3, #8]
 801ac98:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801ac9a:	693a      	ldr	r2, [r7, #16]
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	4413      	add	r3, r2
 801aca0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801aca4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801aca6:	68ba      	ldr	r2, [r7, #8]
 801aca8:	693b      	ldr	r3, [r7, #16]
 801acaa:	1ad3      	subs	r3, r2, r3
 801acac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801acb0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801acb2:	697a      	ldr	r2, [r7, #20]
 801acb4:	693b      	ldr	r3, [r7, #16]
 801acb6:	1ad3      	subs	r3, r2, r3
 801acb8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801acbc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 801acbe:	2300      	movs	r3, #0
 801acc0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801acc2:	68fa      	ldr	r2, [r7, #12]
 801acc4:	693b      	ldr	r3, [r7, #16]
 801acc6:	4413      	add	r3, r2
 801acc8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801accc:	4293      	cmp	r3, r2
 801acce:	d8c8      	bhi.n	801ac62 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801acd0:	69fa      	ldr	r2, [r7, #28]
 801acd2:	693b      	ldr	r3, [r7, #16]
 801acd4:	18d0      	adds	r0, r2, r3
 801acd6:	6a3b      	ldr	r3, [r7, #32]
 801acd8:	685a      	ldr	r2, [r3, #4]
 801acda:	68bb      	ldr	r3, [r7, #8]
 801acdc:	4413      	add	r3, r2
 801acde:	68fa      	ldr	r2, [r7, #12]
 801ace0:	4619      	mov	r1, r3
 801ace2:	f001 f8ae 	bl	801be42 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801ace6:	693a      	ldr	r2, [r7, #16]
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	4413      	add	r3, r2
 801acec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 801acee:	697a      	ldr	r2, [r7, #20]
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	4413      	add	r3, r2
 801acf4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 801acf6:	6a3b      	ldr	r3, [r7, #32]
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	623b      	str	r3, [r7, #32]
 801acfc:	6a3b      	ldr	r3, [r7, #32]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d1a1      	bne.n	801ac46 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 801ad02:	6979      	ldr	r1, [r7, #20]
 801ad04:	4811      	ldr	r0, [pc, #68]	; (801ad4c <low_level_output+0x138>)
 801ad06:	f7e6 ffcd 	bl	8001ca4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801ad10:	4b0e      	ldr	r3, [pc, #56]	; (801ad4c <low_level_output+0x138>)
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad18:	3314      	adds	r3, #20
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	f003 0320 	and.w	r3, r3, #32
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d00d      	beq.n	801ad40 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801ad24:	4b09      	ldr	r3, [pc, #36]	; (801ad4c <low_level_output+0x138>)
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad2c:	3314      	adds	r3, #20
 801ad2e:	2220      	movs	r2, #32
 801ad30:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 801ad32:	4b06      	ldr	r3, [pc, #24]	; (801ad4c <low_level_output+0x138>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad3a:	3304      	adds	r3, #4
 801ad3c:	2200      	movs	r2, #0
 801ad3e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 801ad40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801ad44:	4618      	mov	r0, r3
 801ad46:	3728      	adds	r7, #40	; 0x28
 801ad48:	46bd      	mov	sp, r7
 801ad4a:	bd80      	pop	{r7, pc}
 801ad4c:	2000deb8 	.word	0x2000deb8

0801ad50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b08c      	sub	sp, #48	; 0x30
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801ad58:	2300      	movs	r3, #0
 801ad5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 801ad60:	2300      	movs	r3, #0
 801ad62:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 801ad64:	2300      	movs	r3, #0
 801ad66:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 801ad68:	2300      	movs	r3, #0
 801ad6a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 801ad70:	2300      	movs	r3, #0
 801ad72:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801ad74:	484f      	ldr	r0, [pc, #316]	; (801aeb4 <low_level_input+0x164>)
 801ad76:	f7e7 f87f 	bl	8001e78 <HAL_ETH_GetReceivedFrame_IT>
 801ad7a:	4603      	mov	r3, r0
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d001      	beq.n	801ad84 <low_level_input+0x34>
  
    return NULL;
 801ad80:	2300      	movs	r3, #0
 801ad82:	e092      	b.n	801aeaa <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 801ad84:	4b4b      	ldr	r3, [pc, #300]	; (801aeb4 <low_level_input+0x164>)
 801ad86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad88:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801ad8a:	4b4a      	ldr	r3, [pc, #296]	; (801aeb4 <low_level_input+0x164>)
 801ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad8e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 801ad90:	89fb      	ldrh	r3, [r7, #14]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d007      	beq.n	801ada6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801ad96:	89fb      	ldrh	r3, [r7, #14]
 801ad98:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	2000      	movs	r0, #0
 801ada0:	f7f1 fcc0 	bl	800c724 <pbuf_alloc>
 801ada4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 801ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d04b      	beq.n	801ae44 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801adac:	4b41      	ldr	r3, [pc, #260]	; (801aeb4 <low_level_input+0x164>)
 801adae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801adb0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 801adb2:	2300      	movs	r3, #0
 801adb4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adb8:	62bb      	str	r3, [r7, #40]	; 0x28
 801adba:	e040      	b.n	801ae3e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 801adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adbe:	895b      	ldrh	r3, [r3, #10]
 801adc0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 801adc2:	2300      	movs	r3, #0
 801adc4:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801adc6:	e021      	b.n	801ae0c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adca:	685a      	ldr	r2, [r3, #4]
 801adcc:	69bb      	ldr	r3, [r7, #24]
 801adce:	18d0      	adds	r0, r2, r3
 801add0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801add2:	69fb      	ldr	r3, [r7, #28]
 801add4:	18d1      	adds	r1, r2, r3
 801add6:	69fb      	ldr	r3, [r7, #28]
 801add8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801addc:	3304      	adds	r3, #4
 801adde:	461a      	mov	r2, r3
 801ade0:	f001 f82f 	bl	801be42 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801ade4:	6a3b      	ldr	r3, [r7, #32]
 801ade6:	68db      	ldr	r3, [r3, #12]
 801ade8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801adea:	6a3b      	ldr	r3, [r7, #32]
 801adec:	689b      	ldr	r3, [r3, #8]
 801adee:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801adf0:	69fa      	ldr	r2, [r7, #28]
 801adf2:	697b      	ldr	r3, [r7, #20]
 801adf4:	4413      	add	r3, r2
 801adf6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801adfa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801adfc:	69ba      	ldr	r2, [r7, #24]
 801adfe:	69fb      	ldr	r3, [r7, #28]
 801ae00:	1ad3      	subs	r3, r2, r3
 801ae02:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801ae06:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 801ae08:	2300      	movs	r3, #0
 801ae0a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801ae0c:	697a      	ldr	r2, [r7, #20]
 801ae0e:	69fb      	ldr	r3, [r7, #28]
 801ae10:	4413      	add	r3, r2
 801ae12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801ae16:	4293      	cmp	r3, r2
 801ae18:	d8d6      	bhi.n	801adc8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae1c:	685a      	ldr	r2, [r3, #4]
 801ae1e:	69bb      	ldr	r3, [r7, #24]
 801ae20:	18d0      	adds	r0, r2, r3
 801ae22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae24:	69fb      	ldr	r3, [r7, #28]
 801ae26:	4413      	add	r3, r2
 801ae28:	697a      	ldr	r2, [r7, #20]
 801ae2a:	4619      	mov	r1, r3
 801ae2c:	f001 f809 	bl	801be42 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801ae30:	69fa      	ldr	r2, [r7, #28]
 801ae32:	697b      	ldr	r3, [r7, #20]
 801ae34:	4413      	add	r3, r2
 801ae36:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d1bb      	bne.n	801adbc <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801ae44:	4b1b      	ldr	r3, [pc, #108]	; (801aeb4 <low_level_input+0x164>)
 801ae46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae48:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	613b      	str	r3, [r7, #16]
 801ae4e:	e00b      	b.n	801ae68 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801ae50:	6a3b      	ldr	r3, [r7, #32]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801ae58:	6a3b      	ldr	r3, [r7, #32]
 801ae5a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801ae5c:	6a3b      	ldr	r3, [r7, #32]
 801ae5e:	68db      	ldr	r3, [r3, #12]
 801ae60:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801ae62:	693b      	ldr	r3, [r7, #16]
 801ae64:	3301      	adds	r3, #1
 801ae66:	613b      	str	r3, [r7, #16]
 801ae68:	4b12      	ldr	r3, [pc, #72]	; (801aeb4 <low_level_input+0x164>)
 801ae6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae6c:	693a      	ldr	r2, [r7, #16]
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	d3ee      	bcc.n	801ae50 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 801ae72:	4b10      	ldr	r3, [pc, #64]	; (801aeb4 <low_level_input+0x164>)
 801ae74:	2200      	movs	r2, #0
 801ae76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 801ae78:	4b0e      	ldr	r3, [pc, #56]	; (801aeb4 <low_level_input+0x164>)
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae80:	3314      	adds	r3, #20
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d00d      	beq.n	801aea8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801ae8c:	4b09      	ldr	r3, [pc, #36]	; (801aeb4 <low_level_input+0x164>)
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae94:	3314      	adds	r3, #20
 801ae96:	2280      	movs	r2, #128	; 0x80
 801ae98:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801ae9a:	4b06      	ldr	r3, [pc, #24]	; (801aeb4 <low_level_input+0x164>)
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aea2:	3308      	adds	r3, #8
 801aea4:	2200      	movs	r2, #0
 801aea6:	601a      	str	r2, [r3, #0]
  }
  return p;
 801aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801aeaa:	4618      	mov	r0, r3
 801aeac:	3730      	adds	r7, #48	; 0x30
 801aeae:	46bd      	mov	sp, r7
 801aeb0:	bd80      	pop	{r7, pc}
 801aeb2:	bf00      	nop
 801aeb4:	2000deb8 	.word	0x2000deb8

0801aeb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b084      	sub	sp, #16
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801aec4:	4b12      	ldr	r3, [pc, #72]	; (801af10 <ethernetif_input+0x58>)
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	f04f 31ff 	mov.w	r1, #4294967295
 801aecc:	4618      	mov	r0, r3
 801aece:	f7ea f82b 	bl	8004f28 <osSemaphoreWait>
 801aed2:	4603      	mov	r3, r0
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d1f5      	bne.n	801aec4 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 801aed8:	480e      	ldr	r0, [pc, #56]	; (801af14 <ethernetif_input+0x5c>)
 801aeda:	f7fd fd57 	bl	801898c <sys_mutex_lock>
        p = low_level_input( netif );
 801aede:	68f8      	ldr	r0, [r7, #12]
 801aee0:	f7ff ff36 	bl	801ad50 <low_level_input>
 801aee4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 801aee6:	68bb      	ldr	r3, [r7, #8]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d00a      	beq.n	801af02 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	691b      	ldr	r3, [r3, #16]
 801aef0:	68f9      	ldr	r1, [r7, #12]
 801aef2:	68b8      	ldr	r0, [r7, #8]
 801aef4:	4798      	blx	r3
 801aef6:	4603      	mov	r3, r0
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d002      	beq.n	801af02 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 801aefc:	68b8      	ldr	r0, [r7, #8]
 801aefe:	f7f1 ff23 	bl	800cd48 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 801af02:	4804      	ldr	r0, [pc, #16]	; (801af14 <ethernetif_input+0x5c>)
 801af04:	f7fd fd51 	bl	80189aa <sys_mutex_unlock>
      } while(p!=NULL);
 801af08:	68bb      	ldr	r3, [r7, #8]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d1e4      	bne.n	801aed8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801af0e:	e7d9      	b.n	801aec4 <ethernetif_input+0xc>
 801af10:	2000853c 	.word	0x2000853c
 801af14:	20008df8 	.word	0x20008df8

0801af18 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b082      	sub	sp, #8
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d106      	bne.n	801af34 <ethernetif_init+0x1c>
 801af26:	4b0e      	ldr	r3, [pc, #56]	; (801af60 <ethernetif_init+0x48>)
 801af28:	f240 2235 	movw	r2, #565	; 0x235
 801af2c:	490d      	ldr	r1, [pc, #52]	; (801af64 <ethernetif_init+0x4c>)
 801af2e:	480e      	ldr	r0, [pc, #56]	; (801af68 <ethernetif_init+0x50>)
 801af30:	f000 ff9a 	bl	801be68 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2273      	movs	r2, #115	; 0x73
 801af38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	2274      	movs	r2, #116	; 0x74
 801af40:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	4a09      	ldr	r2, [pc, #36]	; (801af6c <ethernetif_init+0x54>)
 801af48:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	4a08      	ldr	r2, [pc, #32]	; (801af70 <ethernetif_init+0x58>)
 801af4e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801af50:	6878      	ldr	r0, [r7, #4]
 801af52:	f7ff fd8f 	bl	801aa74 <low_level_init>

  return ERR_OK;
 801af56:	2300      	movs	r3, #0
}
 801af58:	4618      	mov	r0, r3
 801af5a:	3708      	adds	r7, #8
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd80      	pop	{r7, pc}
 801af60:	08020b88 	.word	0x08020b88
 801af64:	08020b9c 	.word	0x08020b9c
 801af68:	08020bac 	.word	0x08020bac
 801af6c:	080166e5 	.word	0x080166e5
 801af70:	0801ac15 	.word	0x0801ac15

0801af74 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801af78:	f7e5 ff46 	bl	8000e08 <HAL_GetTick>
 801af7c:	4603      	mov	r3, r0
}
 801af7e:	4618      	mov	r0, r3
 801af80:	bd80      	pop	{r7, pc}
	...

0801af84 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 801af84:	b580      	push	{r7, lr}
 801af86:	b084      	sub	sp, #16
 801af88:	af00      	add	r7, sp, #0
 801af8a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 801af8c:	2300      	movs	r3, #0
 801af8e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	60fb      	str	r3, [r7, #12]
  
  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801af94:	f107 0308 	add.w	r3, r7, #8
 801af98:	461a      	mov	r2, r3
 801af9a:	2101      	movs	r1, #1
 801af9c:	4816      	ldr	r0, [pc, #88]	; (801aff8 <ethernetif_set_link+0x74>)
 801af9e:	f7e7 f86e 	bl	800207e <HAL_ETH_ReadPHYRegister>
    
    regvalue &= PHY_LINKED_STATUS;
 801afa2:	68bb      	ldr	r3, [r7, #8]
 801afa4:	f003 0304 	and.w	r3, r3, #4
 801afa8:	60bb      	str	r3, [r7, #8]
    
    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801afb2:	f003 0304 	and.w	r3, r3, #4
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d108      	bne.n	801afcc <ethernetif_set_link+0x48>
 801afba:	68bb      	ldr	r3, [r7, #8]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d005      	beq.n	801afcc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */ 
      netif_set_link_up(link_arg->netif);        
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	4618      	mov	r0, r3
 801afc6:	f7f1 fa7b 	bl	800c4c0 <netif_set_link_up>
 801afca:	e011      	b.n	801aff0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801afd4:	089b      	lsrs	r3, r3, #2
 801afd6:	f003 0301 	and.w	r3, r3, #1
 801afda:	b2db      	uxtb	r3, r3
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d007      	beq.n	801aff0 <ethernetif_set_link+0x6c>
 801afe0:	68bb      	ldr	r3, [r7, #8]
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d104      	bne.n	801aff0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	4618      	mov	r0, r3
 801afec:	f7f1 faa0 	bl	800c530 <netif_set_link_down>
    }
    
    /* Suspend thread for 200 ms */
    osDelay(200);
 801aff0:	20c8      	movs	r0, #200	; 0xc8
 801aff2:	f7e9 feb4 	bl	8004d5e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801aff6:	e7cd      	b.n	801af94 <ethernetif_set_link+0x10>
 801aff8:	2000deb8 	.word	0x2000deb8

0801affc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 801affc:	b580      	push	{r7, lr}
 801affe:	b084      	sub	sp, #16
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 801b004:	2300      	movs	r3, #0
 801b006:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 801b008:	2300      	movs	r3, #0
 801b00a:	60bb      	str	r3, [r7, #8]
  
  if(netif_is_link_up(netif))
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b012:	089b      	lsrs	r3, r3, #2
 801b014:	f003 0301 	and.w	r3, r3, #1
 801b018:	b2db      	uxtb	r3, r3
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d05d      	beq.n	801b0da <ethernetif_update_config+0xde>
  { 
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 801b01e:	4b34      	ldr	r3, [pc, #208]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b020:	685b      	ldr	r3, [r3, #4]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d03f      	beq.n	801b0a6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 801b026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b02a:	2100      	movs	r1, #0
 801b02c:	4830      	ldr	r0, [pc, #192]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b02e:	f7e7 f88e 	bl	800214e <HAL_ETH_WritePHYRegister>
      
      /* Get tick */
      tickstart = HAL_GetTick();
 801b032:	f7e5 fee9 	bl	8000e08 <HAL_GetTick>
 801b036:	4603      	mov	r3, r0
 801b038:	60fb      	str	r3, [r7, #12]
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801b03a:	f107 0308 	add.w	r3, r7, #8
 801b03e:	461a      	mov	r2, r3
 801b040:	2101      	movs	r1, #1
 801b042:	482b      	ldr	r0, [pc, #172]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b044:	f7e7 f81b 	bl	800207e <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 801b048:	f7e5 fede 	bl	8000e08 <HAL_GetTick>
 801b04c:	4602      	mov	r2, r0
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	1ad3      	subs	r3, r2, r3
 801b052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b056:	d828      	bhi.n	801b0aa <ethernetif_update_config+0xae>
        {     
          /* In case of timeout */ 
          goto error;
        }   
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801b058:	68bb      	ldr	r3, [r7, #8]
 801b05a:	f003 0320 	and.w	r3, r3, #32
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d0eb      	beq.n	801b03a <ethernetif_update_config+0x3e>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 801b062:	f107 0308 	add.w	r3, r7, #8
 801b066:	461a      	mov	r2, r3
 801b068:	211f      	movs	r1, #31
 801b06a:	4821      	ldr	r0, [pc, #132]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b06c:	f7e7 f807 	bl	800207e <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 801b070:	68bb      	ldr	r3, [r7, #8]
 801b072:	f003 0310 	and.w	r3, r3, #16
 801b076:	2b00      	cmp	r3, #0
 801b078:	d004      	beq.n	801b084 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 801b07a:	4b1d      	ldr	r3, [pc, #116]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b07c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b080:	60da      	str	r2, [r3, #12]
 801b082:	e002      	b.n	801b08a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 801b084:	4b1a      	ldr	r3, [pc, #104]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b086:	2200      	movs	r2, #0
 801b088:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 801b08a:	68bb      	ldr	r3, [r7, #8]
 801b08c:	f003 0304 	and.w	r3, r3, #4
 801b090:	2b00      	cmp	r3, #0
 801b092:	d003      	beq.n	801b09c <ethernetif_update_config+0xa0>
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M; 
 801b094:	4b16      	ldr	r3, [pc, #88]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b096:	2200      	movs	r2, #0
 801b098:	609a      	str	r2, [r3, #8]
 801b09a:	e016      	b.n	801b0ca <ethernetif_update_config+0xce>
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        heth.Init.Speed = ETH_SPEED_100M;
 801b09c:	4b14      	ldr	r3, [pc, #80]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b09e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801b0a2:	609a      	str	r2, [r3, #8]
 801b0a4:	e011      	b.n	801b0ca <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 801b0a6:	bf00      	nop
 801b0a8:	e000      	b.n	801b0ac <ethernetif_update_config+0xb0>
          goto error;
 801b0aa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
      
      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 801b0ac:	4b10      	ldr	r3, [pc, #64]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b0ae:	68db      	ldr	r3, [r3, #12]
 801b0b0:	08db      	lsrs	r3, r3, #3
 801b0b2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 801b0b4:	4b0e      	ldr	r3, [pc, #56]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b0b6:	689b      	ldr	r3, [r3, #8]
 801b0b8:	085b      	lsrs	r3, r3, #1
 801b0ba:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	b29b      	uxth	r3, r3
 801b0c0:	461a      	mov	r2, r3
 801b0c2:	2100      	movs	r1, #0
 801b0c4:	480a      	ldr	r0, [pc, #40]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b0c6:	f7e7 f842 	bl	800214e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 801b0ca:	2100      	movs	r1, #0
 801b0cc:	4808      	ldr	r0, [pc, #32]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b0ce:	f7e7 f903 	bl	80022d8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);   
 801b0d2:	4807      	ldr	r0, [pc, #28]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b0d4:	f7e7 f8a1 	bl	800221a <HAL_ETH_Start>
 801b0d8:	e002      	b.n	801b0e0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 801b0da:	4805      	ldr	r0, [pc, #20]	; (801b0f0 <ethernetif_update_config+0xf4>)
 801b0dc:	f7e7 f8cc 	bl	8002278 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 801b0e0:	6878      	ldr	r0, [r7, #4]
 801b0e2:	f000 f807 	bl	801b0f4 <ethernetif_notify_conn_changed>
}
 801b0e6:	bf00      	nop
 801b0e8:	3710      	adds	r7, #16
 801b0ea:	46bd      	mov	sp, r7
 801b0ec:	bd80      	pop	{r7, pc}
 801b0ee:	bf00      	nop
 801b0f0:	2000deb8 	.word	0x2000deb8

0801b0f4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b082      	sub	sp, #8
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */
	if (netif_is_link_up(netif) && !netif_is_up(netif))
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b102:	089b      	lsrs	r3, r3, #2
 801b104:	f003 0301 	and.w	r3, r3, #1
 801b108:	b2db      	uxtb	r3, r3
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d00c      	beq.n	801b128 <ethernetif_notify_conn_changed+0x34>
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b114:	f003 0301 	and.w	r3, r3, #1
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d105      	bne.n	801b128 <ethernetif_notify_conn_changed+0x34>
	{
		netif_set_up(netif);
 801b11c:	6878      	ldr	r0, [r7, #4]
 801b11e:	f7f1 f931 	bl	800c384 <netif_set_up>
		dhcp_start(netif);
 801b122:	6878      	ldr	r0, [r7, #4]
 801b124:	f7f9 fb68 	bl	80147f8 <dhcp_start>
	}

}
 801b128:	bf00      	nop
 801b12a:	3708      	adds	r7, #8
 801b12c:	46bd      	mov	sp, r7
 801b12e:	bd80      	pop	{r7, pc}

0801b130 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 801b130:	b580      	push	{r7, lr}
 801b132:	b082      	sub	sp, #8
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
 801b138:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET); //turn on red led when detects stack overflow
 801b13a:	2201      	movs	r2, #1
 801b13c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801b140:	4803      	ldr	r0, [pc, #12]	; (801b150 <vApplicationStackOverflowHook+0x20>)
 801b142:	f7e7 fe8b 	bl	8002e5c <HAL_GPIO_WritePin>

}
 801b146:	bf00      	nop
 801b148:	3708      	adds	r7, #8
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bd80      	pop	{r7, pc}
 801b14e:	bf00      	nop
 801b150:	40020400 	.word	0x40020400

0801b154 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 801b154:	b480      	push	{r7}
 801b156:	b085      	sub	sp, #20
 801b158:	af00      	add	r7, sp, #0
 801b15a:	60f8      	str	r0, [r7, #12]
 801b15c:	60b9      	str	r1, [r7, #8]
 801b15e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	4a07      	ldr	r2, [pc, #28]	; (801b180 <vApplicationGetIdleTaskMemory+0x2c>)
 801b164:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 801b166:	68bb      	ldr	r3, [r7, #8]
 801b168:	4a06      	ldr	r2, [pc, #24]	; (801b184 <vApplicationGetIdleTaskMemory+0x30>)
 801b16a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b172:	601a      	str	r2, [r3, #0]
	/* place for user code */
}                   
 801b174:	bf00      	nop
 801b176:	3714      	adds	r7, #20
 801b178:	46bd      	mov	sp, r7
 801b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b17e:	4770      	bx	lr
 801b180:	20008550 	.word	0x20008550
 801b184:	200085a4 	.word	0x200085a4

0801b188 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 801b188:	b5b0      	push	{r4, r5, r7, lr}
 801b18a:	b088      	sub	sp, #32
 801b18c:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 801b18e:	4b0a      	ldr	r3, [pc, #40]	; (801b1b8 <MX_FREERTOS_Init+0x30>)
 801b190:	1d3c      	adds	r4, r7, #4
 801b192:	461d      	mov	r5, r3
 801b194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b198:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b19c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801b1a0:	1d3b      	adds	r3, r7, #4
 801b1a2:	2100      	movs	r1, #0
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	f7e9 fd8e 	bl	8004cc6 <osThreadCreate>
 801b1aa:	4602      	mov	r2, r0
 801b1ac:	4b03      	ldr	r3, [pc, #12]	; (801b1bc <MX_FREERTOS_Init+0x34>)
 801b1ae:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 801b1b0:	bf00      	nop
 801b1b2:	3720      	adds	r7, #32
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bdb0      	pop	{r4, r5, r7, pc}
 801b1b8:	08020be0 	.word	0x08020be0
 801b1bc:	2000f6d0 	.word	0x2000f6d0

0801b1c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 801b1c0:	b5b0      	push	{r4, r5, r7, lr}
 801b1c2:	b090      	sub	sp, #64	; 0x40
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 801b1c8:	f000 fada 	bl	801b780 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
	osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //subscribe task
 801b1cc:	4b17      	ldr	r3, [pc, #92]	; (801b22c <StartDefaultTask+0x6c>)
 801b1ce:	f107 0424 	add.w	r4, r7, #36	; 0x24
 801b1d2:	461d      	mov	r5, r3
 801b1d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b1d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b1d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b1dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //publish task
 801b1e0:	4b13      	ldr	r3, [pc, #76]	; (801b230 <StartDefaultTask+0x70>)
 801b1e2:	f107 0408 	add.w	r4, r7, #8
 801b1e6:	461d      	mov	r5, r3
 801b1e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b1ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b1ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b1f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 801b1f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b1f8:	2100      	movs	r1, #0
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7e9 fd63 	bl	8004cc6 <osThreadCreate>
 801b200:	4602      	mov	r2, r0
 801b202:	4b0c      	ldr	r3, [pc, #48]	; (801b234 <StartDefaultTask+0x74>)
 801b204:	601a      	str	r2, [r3, #0]
	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 801b206:	f107 0308 	add.w	r3, r7, #8
 801b20a:	2100      	movs	r1, #0
 801b20c:	4618      	mov	r0, r3
 801b20e:	f7e9 fd5a 	bl	8004cc6 <osThreadCreate>
 801b212:	4602      	mov	r2, r0
 801b214:	4b08      	ldr	r3, [pc, #32]	; (801b238 <StartDefaultTask+0x78>)
 801b216:	601a      	str	r2, [r3, #0]

	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
 801b218:	2101      	movs	r1, #1
 801b21a:	4808      	ldr	r0, [pc, #32]	; (801b23c <StartDefaultTask+0x7c>)
 801b21c:	f7e7 fe37 	bl	8002e8e <HAL_GPIO_TogglePin>
		osDelay(500);
 801b220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801b224:	f7e9 fd9b 	bl	8004d5e <osDelay>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
 801b228:	e7f6      	b.n	801b218 <StartDefaultTask+0x58>
 801b22a:	bf00      	nop
 801b22c:	08020c10 	.word	0x08020c10
 801b230:	08020c40 	.word	0x08020c40
 801b234:	20010398 	.word	0x20010398
 801b238:	2000ff94 	.word	0x2000ff94
 801b23c:	40020400 	.word	0x40020400

0801b240 <MqttClientSubTask>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
/* reverse:  reverse string s in place */

void MqttClientSubTask(void const *argument)
{
 801b240:	b580      	push	{r7, lr}
 801b242:	b082      	sub	sp, #8
 801b244:	af00      	add	r7, sp, #0
 801b246:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 801b248:	4b15      	ldr	r3, [pc, #84]	; (801b2a0 <MqttClientSubTask+0x60>)
 801b24a:	685b      	ldr	r3, [r3, #4]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d007      	beq.n	801b260 <MqttClientSubTask+0x20>
 801b250:	4b13      	ldr	r3, [pc, #76]	; (801b2a0 <MqttClientSubTask+0x60>)
 801b252:	689b      	ldr	r3, [r3, #8]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d003      	beq.n	801b260 <MqttClientSubTask+0x20>
 801b258:	4b11      	ldr	r3, [pc, #68]	; (801b2a0 <MqttClientSubTask+0x60>)
 801b25a:	68db      	ldr	r3, [r3, #12]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d104      	bne.n	801b26a <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 801b260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b264:	f7e9 fd7b 	bl	8004d5e <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 801b268:	e7ee      	b.n	801b248 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 801b26a:	480e      	ldr	r0, [pc, #56]	; (801b2a4 <MqttClientSubTask+0x64>)
 801b26c:	f000 fe70 	bl	801bf50 <puts>
			break;
 801b270:	bf00      	nop
		}
	}

	while(1)
	{
		if(!mqttClient.isconnected)
 801b272:	4b0d      	ldr	r3, [pc, #52]	; (801b2a8 <MqttClientSubTask+0x68>)
 801b274:	6a1b      	ldr	r3, [r3, #32]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d109      	bne.n	801b28e <MqttClientSubTask+0x4e>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 801b27a:	480b      	ldr	r0, [pc, #44]	; (801b2a8 <MqttClientSubTask+0x68>)
 801b27c:	f7fe fa81 	bl	8019782 <MQTTDisconnect>
			MqttConnectBroker();
 801b280:	f000 f86c 	bl	801b35c <MqttConnectBroker>
			osDelay(1000);
 801b284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b288:	f7e9 fd69 	bl	8004d5e <osDelay>
 801b28c:	e7f1      	b.n	801b272 <MqttClientSubTask+0x32>
		}
		else
		{
			MQTTYield(&mqttClient, 1000); //handle timer
 801b28e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b292:	4805      	ldr	r0, [pc, #20]	; (801b2a8 <MqttClientSubTask+0x68>)
 801b294:	f7fd ffae 	bl	80191f4 <MQTTYield>
			osDelay(100);
 801b298:	2064      	movs	r0, #100	; 0x64
 801b29a:	f7e9 fd60 	bl	8004d5e <osDelay>
		if(!mqttClient.isconnected)
 801b29e:	e7e8      	b.n	801b272 <MqttClientSubTask+0x32>
 801b2a0:	200103fc 	.word	0x200103fc
 801b2a4:	08020c5c 	.word	0x08020c5c
 801b2a8:	2000f6d4 	.word	0x2000f6d4

0801b2ac <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b08a      	sub	sp, #40	; 0x28
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
	MQTTMessage message_hum;

	while(1)
	{
		 /* Get temperature from sensor */
		if (true == tc74_sensor_readTemperature(&hi2c1, &temperature))
 801b2b4:	4920      	ldr	r1, [pc, #128]	; (801b338 <MqttClientPubTask+0x8c>)
 801b2b6:	4821      	ldr	r0, [pc, #132]	; (801b33c <MqttClientPubTask+0x90>)
 801b2b8:	f000 fd06 	bl	801bcc8 <tc74_sensor_readTemperature>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d006      	beq.n	801b2d0 <MqttClientPubTask+0x24>
		{
			 itoa(temperature,str_T,10);
 801b2c2:	4b1d      	ldr	r3, [pc, #116]	; (801b338 <MqttClientPubTask+0x8c>)
 801b2c4:	781b      	ldrb	r3, [r3, #0]
 801b2c6:	220a      	movs	r2, #10
 801b2c8:	491d      	ldr	r1, [pc, #116]	; (801b340 <MqttClientPubTask+0x94>)
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	f000 fd88 	bl	801bde0 <itoa>
		}

		/* Get humidity from sensor */
		if (true == hih_5031_sensor_readHumidity(&hadc1, &humidity))
 801b2d0:	491c      	ldr	r1, [pc, #112]	; (801b344 <MqttClientPubTask+0x98>)
 801b2d2:	481d      	ldr	r0, [pc, #116]	; (801b348 <MqttClientPubTask+0x9c>)
 801b2d4:	f000 f968 	bl	801b5a8 <hih_5031_sensor_readHumidity>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d006      	beq.n	801b2ec <MqttClientPubTask+0x40>
		{
			itoa((int)humidity,str_H,10);
 801b2de:	4b19      	ldr	r3, [pc, #100]	; (801b344 <MqttClientPubTask+0x98>)
 801b2e0:	781b      	ldrb	r3, [r3, #0]
 801b2e2:	220a      	movs	r2, #10
 801b2e4:	4919      	ldr	r1, [pc, #100]	; (801b34c <MqttClientPubTask+0xa0>)
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	f000 fd7a 	bl	801bde0 <itoa>
		}

		if(mqttClient.isconnected)
 801b2ec:	4b18      	ldr	r3, [pc, #96]	; (801b350 <MqttClientPubTask+0xa4>)
 801b2ee:	6a1b      	ldr	r3, [r3, #32]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d01b      	beq.n	801b32c <MqttClientPubTask+0x80>
		{
			message_temp.payload =  (void*)str_T;
 801b2f4:	4b12      	ldr	r3, [pc, #72]	; (801b340 <MqttClientPubTask+0x94>)
 801b2f6:	623b      	str	r3, [r7, #32]
			message_temp.payloadlen = strlen(str_T);
 801b2f8:	4811      	ldr	r0, [pc, #68]	; (801b340 <MqttClientPubTask+0x94>)
 801b2fa:	f7e4 ff83 	bl	8000204 <strlen>
 801b2fe:	4603      	mov	r3, r0
 801b300:	627b      	str	r3, [r7, #36]	; 0x24

			MQTTPublish(&mqttClient, MQTT_TOPIC_TEMP, &message_temp); //publish a temperature message
 801b302:	f107 0318 	add.w	r3, r7, #24
 801b306:	461a      	mov	r2, r3
 801b308:	4912      	ldr	r1, [pc, #72]	; (801b354 <MqttClientPubTask+0xa8>)
 801b30a:	4811      	ldr	r0, [pc, #68]	; (801b350 <MqttClientPubTask+0xa4>)
 801b30c:	f7fe f973 	bl	80195f6 <MQTTPublish>

			message_hum.payload = (void*)str_H;
 801b310:	4b0e      	ldr	r3, [pc, #56]	; (801b34c <MqttClientPubTask+0xa0>)
 801b312:	613b      	str	r3, [r7, #16]
			message_hum.payloadlen = strlen(str_H);
 801b314:	480d      	ldr	r0, [pc, #52]	; (801b34c <MqttClientPubTask+0xa0>)
 801b316:	f7e4 ff75 	bl	8000204 <strlen>
 801b31a:	4603      	mov	r3, r0
 801b31c:	617b      	str	r3, [r7, #20]
			MQTTPublish(&mqttClient, MQTT_TOPIC_HUM, &message_hum); //publish a message
 801b31e:	f107 0308 	add.w	r3, r7, #8
 801b322:	461a      	mov	r2, r3
 801b324:	490c      	ldr	r1, [pc, #48]	; (801b358 <MqttClientPubTask+0xac>)
 801b326:	480a      	ldr	r0, [pc, #40]	; (801b350 <MqttClientPubTask+0xa4>)
 801b328:	f7fe f965 	bl	80195f6 <MQTTPublish>
		}

		osDelay(1000);
 801b32c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b330:	f7e9 fd15 	bl	8004d5e <osDelay>
		if (true == tc74_sensor_readTemperature(&hi2c1, &temperature))
 801b334:	e7be      	b.n	801b2b4 <MqttClientPubTask+0x8>
 801b336:	bf00      	nop
 801b338:	2000fb4c 	.word	0x2000fb4c
 801b33c:	200103a0 	.word	0x200103a0
 801b340:	20008540 	.word	0x20008540
 801b344:	2000ff90 	.word	0x2000ff90
 801b348:	2000c5a0 	.word	0x2000c5a0
 801b34c:	20008548 	.word	0x20008548
 801b350:	2000f6d4 	.word	0x2000f6d4
 801b354:	08020c70 	.word	0x08020c70
 801b358:	08020c88 	.word	0x08020c88

0801b35c <MqttConnectBroker>:
	}
}

int MqttConnectBroker()
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b09c      	sub	sp, #112	; 0x70
 801b360:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 801b362:	482e      	ldr	r0, [pc, #184]	; (801b41c <MqttConnectBroker+0xc0>)
 801b364:	f7fe faa6 	bl	80198b4 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 801b368:	f240 725b 	movw	r2, #1883	; 0x75b
 801b36c:	492c      	ldr	r1, [pc, #176]	; (801b420 <MqttConnectBroker+0xc4>)
 801b36e:	482b      	ldr	r0, [pc, #172]	; (801b41c <MqttConnectBroker+0xc0>)
 801b370:	f7fe fabc 	bl	80198ec <ConnectNetwork>
 801b374:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 801b376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d005      	beq.n	801b388 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 801b37c:	4829      	ldr	r0, [pc, #164]	; (801b424 <MqttConnectBroker+0xc8>)
 801b37e:	f000 fde7 	bl	801bf50 <puts>
		return -1;
 801b382:	f04f 33ff 	mov.w	r3, #4294967295
 801b386:	e044      	b.n	801b412 <MqttConnectBroker+0xb6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 801b388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b38c:	9302      	str	r3, [sp, #8]
 801b38e:	4b26      	ldr	r3, [pc, #152]	; (801b428 <MqttConnectBroker+0xcc>)
 801b390:	9301      	str	r3, [sp, #4]
 801b392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b396:	9300      	str	r3, [sp, #0]
 801b398:	4b24      	ldr	r3, [pc, #144]	; (801b42c <MqttConnectBroker+0xd0>)
 801b39a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b39e:	491f      	ldr	r1, [pc, #124]	; (801b41c <MqttConnectBroker+0xc0>)
 801b3a0:	4823      	ldr	r0, [pc, #140]	; (801b430 <MqttConnectBroker+0xd4>)
 801b3a2:	f7fd fbc7 	bl	8018b34 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 801b3a6:	4a23      	ldr	r2, [pc, #140]	; (801b434 <MqttConnectBroker+0xd8>)
 801b3a8:	1d3b      	adds	r3, r7, #4
 801b3aa:	4611      	mov	r1, r2
 801b3ac:	2258      	movs	r2, #88	; 0x58
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f000 fd47 	bl	801be42 <memcpy>
	data.willFlag = 0;
 801b3b4:	2300      	movs	r3, #0
 801b3b6:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 801b3b8:	2303      	movs	r3, #3
 801b3ba:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F4";
 801b3bc:	4b1e      	ldr	r3, [pc, #120]	; (801b438 <MqttConnectBroker+0xdc>)
 801b3be:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F4";
 801b3c0:	4b1d      	ldr	r3, [pc, #116]	; (801b438 <MqttConnectBroker+0xdc>)
 801b3c2:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 801b3c4:	4b1d      	ldr	r3, [pc, #116]	; (801b43c <MqttConnectBroker+0xe0>)
 801b3c6:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 801b3c8:	233c      	movs	r3, #60	; 0x3c
 801b3ca:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 801b3d0:	1d3b      	adds	r3, r7, #4
 801b3d2:	4619      	mov	r1, r3
 801b3d4:	4816      	ldr	r0, [pc, #88]	; (801b430 <MqttConnectBroker+0xd4>)
 801b3d6:	f7fd ffef 	bl	80193b8 <MQTTConnect>
 801b3da:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 801b3dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d004      	beq.n	801b3ec <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 801b3e2:	4817      	ldr	r0, [pc, #92]	; (801b440 <MqttConnectBroker+0xe4>)
 801b3e4:	f000 fdb4 	bl	801bf50 <puts>
		return ret;
 801b3e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b3ea:	e012      	b.n	801b412 <MqttConnectBroker+0xb6>
	}

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 801b3ec:	4b15      	ldr	r3, [pc, #84]	; (801b444 <MqttConnectBroker+0xe8>)
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	4915      	ldr	r1, [pc, #84]	; (801b448 <MqttConnectBroker+0xec>)
 801b3f2:	480f      	ldr	r0, [pc, #60]	; (801b430 <MqttConnectBroker+0xd4>)
 801b3f4:	f7fe f8e9 	bl	80195ca <MQTTSubscribe>
 801b3f8:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 801b3fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d004      	beq.n	801b40a <MqttConnectBroker+0xae>
	{
		printf("MQTTSubscribe failed.\n");
 801b400:	4812      	ldr	r0, [pc, #72]	; (801b44c <MqttConnectBroker+0xf0>)
 801b402:	f000 fda5 	bl	801bf50 <puts>
		return ret;
 801b406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b408:	e003      	b.n	801b412 <MqttConnectBroker+0xb6>
	}

	printf("MQTT_ConnectBroker O.K.\n");
 801b40a:	4811      	ldr	r0, [pc, #68]	; (801b450 <MqttConnectBroker+0xf4>)
 801b40c:	f000 fda0 	bl	801bf50 <puts>
	return MQTT_SUCCESS;
 801b410:	2300      	movs	r3, #0
}
 801b412:	4618      	mov	r0, r3
 801b414:	3760      	adds	r7, #96	; 0x60
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}
 801b41a:	bf00      	nop
 801b41c:	2000f73c 	.word	0x2000f73c
 801b420:	08020ca0 	.word	0x08020ca0
 801b424:	08020cb0 	.word	0x08020cb0
 801b428:	2000ff98 	.word	0x2000ff98
 801b42c:	2000fb90 	.word	0x2000fb90
 801b430:	2000f6d4 	.word	0x2000f6d4
 801b434:	08020d20 	.word	0x08020d20
 801b438:	08020cc8 	.word	0x08020cc8
 801b43c:	08020cd0 	.word	0x08020cd0
 801b440:	08020cd4 	.word	0x08020cd4
 801b444:	0801b455 	.word	0x0801b455
 801b448:	08020ce8 	.word	0x08020ce8
 801b44c:	08020cf0 	.word	0x08020cf0
 801b450:	08020d08 	.word	0x08020d08

0801b454 <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 801b454:	b580      	push	{r7, lr}
 801b456:	b084      	sub	sp, #16
 801b458:	af00      	add	r7, sp, #0
 801b45a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //toggle pin when new message arrived
 801b45c:	2180      	movs	r1, #128	; 0x80
 801b45e:	480f      	ldr	r0, [pc, #60]	; (801b49c <MqttMessageArrived+0x48>)
 801b460:	f7e7 fd15 	bl	8002e8e <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	60fb      	str	r3, [r7, #12]
	memset(msgBuffer, 0, sizeof(msgBuffer));
 801b46a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b46e:	2100      	movs	r1, #0
 801b470:	480b      	ldr	r0, [pc, #44]	; (801b4a0 <MqttMessageArrived+0x4c>)
 801b472:	f000 fcf1 	bl	801be58 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	6899      	ldr	r1, [r3, #8]
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	68db      	ldr	r3, [r3, #12]
 801b47e:	461a      	mov	r2, r3
 801b480:	4807      	ldr	r0, [pc, #28]	; (801b4a0 <MqttMessageArrived+0x4c>)
 801b482:	f000 fcde 	bl	801be42 <memcpy>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	68db      	ldr	r3, [r3, #12]
 801b48a:	4a05      	ldr	r2, [pc, #20]	; (801b4a0 <MqttMessageArrived+0x4c>)
 801b48c:	4619      	mov	r1, r3
 801b48e:	4805      	ldr	r0, [pc, #20]	; (801b4a4 <MqttMessageArrived+0x50>)
 801b490:	f000 fcea 	bl	801be68 <iprintf>
}
 801b494:	bf00      	nop
 801b496:	3710      	adds	r7, #16
 801b498:	46bd      	mov	sp, r7
 801b49a:	bd80      	pop	{r7, pc}
 801b49c:	40020400 	.word	0x40020400
 801b4a0:	2000f74c 	.word	0x2000f74c
 801b4a4:	08020d78 	.word	0x08020d78

0801b4a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801b4a8:	b580      	push	{r7, lr}
 801b4aa:	b08a      	sub	sp, #40	; 0x28
 801b4ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b4ae:	f107 0314 	add.w	r3, r7, #20
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	601a      	str	r2, [r3, #0]
 801b4b6:	605a      	str	r2, [r3, #4]
 801b4b8:	609a      	str	r2, [r3, #8]
 801b4ba:	60da      	str	r2, [r3, #12]
 801b4bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801b4be:	2300      	movs	r3, #0
 801b4c0:	613b      	str	r3, [r7, #16]
 801b4c2:	4b35      	ldr	r3, [pc, #212]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4c6:	4a34      	ldr	r2, [pc, #208]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b4c8:	f043 0304 	orr.w	r3, r3, #4
 801b4cc:	6313      	str	r3, [r2, #48]	; 0x30
 801b4ce:	4b32      	ldr	r3, [pc, #200]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4d2:	f003 0304 	and.w	r3, r3, #4
 801b4d6:	613b      	str	r3, [r7, #16]
 801b4d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801b4da:	2300      	movs	r3, #0
 801b4dc:	60fb      	str	r3, [r7, #12]
 801b4de:	4b2e      	ldr	r3, [pc, #184]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4e2:	4a2d      	ldr	r2, [pc, #180]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4e8:	6313      	str	r3, [r2, #48]	; 0x30
 801b4ea:	4b2b      	ldr	r3, [pc, #172]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4f2:	60fb      	str	r3, [r7, #12]
 801b4f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	60bb      	str	r3, [r7, #8]
 801b4fa:	4b27      	ldr	r3, [pc, #156]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4fe:	4a26      	ldr	r2, [pc, #152]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b500:	f043 0301 	orr.w	r3, r3, #1
 801b504:	6313      	str	r3, [r2, #48]	; 0x30
 801b506:	4b24      	ldr	r3, [pc, #144]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b50a:	f003 0301 	and.w	r3, r3, #1
 801b50e:	60bb      	str	r3, [r7, #8]
 801b510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801b512:	2300      	movs	r3, #0
 801b514:	607b      	str	r3, [r7, #4]
 801b516:	4b20      	ldr	r3, [pc, #128]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b51a:	4a1f      	ldr	r2, [pc, #124]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b51c:	f043 0302 	orr.w	r3, r3, #2
 801b520:	6313      	str	r3, [r2, #48]	; 0x30
 801b522:	4b1d      	ldr	r3, [pc, #116]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b526:	f003 0302 	and.w	r3, r3, #2
 801b52a:	607b      	str	r3, [r7, #4]
 801b52c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801b52e:	2300      	movs	r3, #0
 801b530:	603b      	str	r3, [r7, #0]
 801b532:	4b19      	ldr	r3, [pc, #100]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b536:	4a18      	ldr	r2, [pc, #96]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b53c:	6313      	str	r3, [r2, #48]	; 0x30
 801b53e:	4b16      	ldr	r3, [pc, #88]	; (801b598 <MX_GPIO_Init+0xf0>)
 801b540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b546:	603b      	str	r3, [r7, #0]
 801b548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 801b54a:	2200      	movs	r2, #0
 801b54c:	f244 0181 	movw	r1, #16513	; 0x4081
 801b550:	4812      	ldr	r0, [pc, #72]	; (801b59c <MX_GPIO_Init+0xf4>)
 801b552:	f7e7 fc83 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 801b556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801b55a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801b55c:	2300      	movs	r3, #0
 801b55e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b560:	2300      	movs	r3, #0
 801b562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 801b564:	f107 0314 	add.w	r3, r7, #20
 801b568:	4619      	mov	r1, r3
 801b56a:	480d      	ldr	r0, [pc, #52]	; (801b5a0 <MX_GPIO_Init+0xf8>)
 801b56c:	f7e7 facc 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 801b570:	f244 0381 	movw	r3, #16513	; 0x4081
 801b574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b576:	2301      	movs	r3, #1
 801b578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b57a:	2300      	movs	r3, #0
 801b57c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b57e:	2300      	movs	r3, #0
 801b580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b582:	f107 0314 	add.w	r3, r7, #20
 801b586:	4619      	mov	r1, r3
 801b588:	4804      	ldr	r0, [pc, #16]	; (801b59c <MX_GPIO_Init+0xf4>)
 801b58a:	f7e7 fabd 	bl	8002b08 <HAL_GPIO_Init>

}
 801b58e:	bf00      	nop
 801b590:	3728      	adds	r7, #40	; 0x28
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}
 801b596:	bf00      	nop
 801b598:	40023800 	.word	0x40023800
 801b59c:	40020400 	.word	0x40020400
 801b5a0:	40020800 	.word	0x40020800
 801b5a4:	00000000 	.word	0x00000000

0801b5a8 <hih_5031_sensor_readHumidity>:
/* ---------------------------- Global functions --------------------------- */

uint8_t  vOutRH, trueRH ;

bool hih_5031_sensor_readHumidity(ADC_HandleTypeDef *pHandle, uint8_t *humidity)
{
 801b5a8:	b590      	push	{r4, r7, lr}
 801b5aa:	b087      	sub	sp, #28
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	60f8      	str	r0, [r7, #12]
 801b5b0:	60b9      	str	r1, [r7, #8]
  uint32_t counts;

  if (HAL_OK == HAL_ADC_Start(pHandle))
 801b5b2:	68f8      	ldr	r0, [r7, #12]
 801b5b4:	f7e5 fc9a 	bl	8000eec <HAL_ADC_Start>
 801b5b8:	4603      	mov	r3, r0
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d144      	bne.n	801b648 <hih_5031_sensor_readHumidity+0xa0>
  {
    if (HAL_OK == HAL_ADC_PollForConversion(pHandle, 10))
 801b5be:	210a      	movs	r1, #10
 801b5c0:	68f8      	ldr	r0, [r7, #12]
 801b5c2:	f7e5 fd59 	bl	8001078 <HAL_ADC_PollForConversion>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d13b      	bne.n	801b644 <hih_5031_sensor_readHumidity+0x9c>
    {
      counts = HAL_ADC_GetValue(pHandle);
 801b5cc:	68f8      	ldr	r0, [r7, #12]
 801b5ce:	f7e5 fdd7 	bl	8001180 <HAL_ADC_GetValue>
 801b5d2:	6178      	str	r0, [r7, #20]


      vOutRH=counts/(1.0546-(0.00216*21))*2.0/4095;
 801b5d4:	6978      	ldr	r0, [r7, #20]
 801b5d6:	f7e4 ffb5 	bl	8000544 <__aeabi_ui2d>
 801b5da:	a321      	add	r3, pc, #132	; (adr r3, 801b660 <hih_5031_sensor_readHumidity+0xb8>)
 801b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e0:	f7e5 f954 	bl	800088c <__aeabi_ddiv>
 801b5e4:	4603      	mov	r3, r0
 801b5e6:	460c      	mov	r4, r1
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	4621      	mov	r1, r4
 801b5ec:	4602      	mov	r2, r0
 801b5ee:	460b      	mov	r3, r1
 801b5f0:	f7e4 fe6c 	bl	80002cc <__adddf3>
 801b5f4:	4603      	mov	r3, r0
 801b5f6:	460c      	mov	r4, r1
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	4621      	mov	r1, r4
 801b5fc:	a31a      	add	r3, pc, #104	; (adr r3, 801b668 <hih_5031_sensor_readHumidity+0xc0>)
 801b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b602:	f7e5 f943 	bl	800088c <__aeabi_ddiv>
 801b606:	4603      	mov	r3, r0
 801b608:	460c      	mov	r4, r1
 801b60a:	4618      	mov	r0, r3
 801b60c:	4621      	mov	r1, r4
 801b60e:	f7e5 fa25 	bl	8000a5c <__aeabi_d2uiz>
 801b612:	4603      	mov	r3, r0
 801b614:	b2da      	uxtb	r2, r3
 801b616:	4b10      	ldr	r3, [pc, #64]	; (801b658 <hih_5031_sensor_readHumidity+0xb0>)
 801b618:	701a      	strb	r2, [r3, #0]
      *humidity=  (int)(((vOutRH-0.5f)/0.02f));
 801b61a:	4b0f      	ldr	r3, [pc, #60]	; (801b658 <hih_5031_sensor_readHumidity+0xb0>)
 801b61c:	781b      	ldrb	r3, [r3, #0]
 801b61e:	ee07 3a90 	vmov	s15, r3
 801b622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b626:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b62a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801b62e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 801b65c <hih_5031_sensor_readHumidity+0xb4>
 801b632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801b636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b63a:	edc7 7a01 	vstr	s15, [r7, #4]
 801b63e:	793a      	ldrb	r2, [r7, #4]
 801b640:	68bb      	ldr	r3, [r7, #8]
 801b642:	701a      	strb	r2, [r3, #0]
    }

      return true;
 801b644:	2301      	movs	r3, #1
 801b646:	e000      	b.n	801b64a <hih_5031_sensor_readHumidity+0xa2>
    }


  return false;
 801b648:	2300      	movs	r3, #0
}
 801b64a:	4618      	mov	r0, r3
 801b64c:	371c      	adds	r7, #28
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd90      	pop	{r4, r7, pc}
 801b652:	bf00      	nop
 801b654:	f3af 8000 	nop.w
 801b658:	2001039d 	.word	0x2001039d
 801b65c:	3ca3d70a 	.word	0x3ca3d70a
 801b660:	d79d0a67 	.word	0xd79d0a67
 801b664:	3ff025d8 	.word	0x3ff025d8
 801b668:	00000000 	.word	0x00000000
 801b66c:	40affe00 	.word	0x40affe00

0801b670 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 801b670:	b580      	push	{r7, lr}
 801b672:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 801b674:	4b1c      	ldr	r3, [pc, #112]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b676:	4a1d      	ldr	r2, [pc, #116]	; (801b6ec <MX_I2C1_Init+0x7c>)
 801b678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 801b67a:	4b1b      	ldr	r3, [pc, #108]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b67c:	f242 7210 	movw	r2, #10000	; 0x2710
 801b680:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801b682:	4b19      	ldr	r3, [pc, #100]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b684:	2200      	movs	r2, #0
 801b686:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801b688:	4b17      	ldr	r3, [pc, #92]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b68a:	2200      	movs	r2, #0
 801b68c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801b68e:	4b16      	ldr	r3, [pc, #88]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801b694:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801b696:	4b14      	ldr	r3, [pc, #80]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b698:	2200      	movs	r2, #0
 801b69a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801b69c:	4b12      	ldr	r3, [pc, #72]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b69e:	2200      	movs	r2, #0
 801b6a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801b6a2:	4b11      	ldr	r3, [pc, #68]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801b6a8:	4b0f      	ldr	r3, [pc, #60]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801b6ae:	480e      	ldr	r0, [pc, #56]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b6b0:	f7e7 fc08 	bl	8002ec4 <HAL_I2C_Init>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d001      	beq.n	801b6be <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 801b6ba:	f000 f9b3 	bl	801ba24 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801b6be:	2100      	movs	r1, #0
 801b6c0:	4809      	ldr	r0, [pc, #36]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b6c2:	f7e8 fb86 	bl	8003dd2 <HAL_I2CEx_ConfigAnalogFilter>
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d001      	beq.n	801b6d0 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 801b6cc:	f000 f9aa 	bl	801ba24 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801b6d0:	2100      	movs	r1, #0
 801b6d2:	4805      	ldr	r0, [pc, #20]	; (801b6e8 <MX_I2C1_Init+0x78>)
 801b6d4:	f7e8 fbb9 	bl	8003e4a <HAL_I2CEx_ConfigDigitalFilter>
 801b6d8:	4603      	mov	r3, r0
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d001      	beq.n	801b6e2 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 801b6de:	f000 f9a1 	bl	801ba24 <Error_Handler>
  }

}
 801b6e2:	bf00      	nop
 801b6e4:	bd80      	pop	{r7, pc}
 801b6e6:	bf00      	nop
 801b6e8:	200103a0 	.word	0x200103a0
 801b6ec:	40005400 	.word	0x40005400

0801b6f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801b6f0:	b580      	push	{r7, lr}
 801b6f2:	b08a      	sub	sp, #40	; 0x28
 801b6f4:	af00      	add	r7, sp, #0
 801b6f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b6f8:	f107 0314 	add.w	r3, r7, #20
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	601a      	str	r2, [r3, #0]
 801b700:	605a      	str	r2, [r3, #4]
 801b702:	609a      	str	r2, [r3, #8]
 801b704:	60da      	str	r2, [r3, #12]
 801b706:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	4a19      	ldr	r2, [pc, #100]	; (801b774 <HAL_I2C_MspInit+0x84>)
 801b70e:	4293      	cmp	r3, r2
 801b710:	d12c      	bne.n	801b76c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b712:	2300      	movs	r3, #0
 801b714:	613b      	str	r3, [r7, #16]
 801b716:	4b18      	ldr	r3, [pc, #96]	; (801b778 <HAL_I2C_MspInit+0x88>)
 801b718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b71a:	4a17      	ldr	r2, [pc, #92]	; (801b778 <HAL_I2C_MspInit+0x88>)
 801b71c:	f043 0302 	orr.w	r3, r3, #2
 801b720:	6313      	str	r3, [r2, #48]	; 0x30
 801b722:	4b15      	ldr	r3, [pc, #84]	; (801b778 <HAL_I2C_MspInit+0x88>)
 801b724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b726:	f003 0302 	and.w	r3, r3, #2
 801b72a:	613b      	str	r3, [r7, #16]
 801b72c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801b72e:	f44f 7340 	mov.w	r3, #768	; 0x300
 801b732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801b734:	2312      	movs	r3, #18
 801b736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801b738:	2301      	movs	r3, #1
 801b73a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b73c:	2303      	movs	r3, #3
 801b73e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801b740:	2304      	movs	r3, #4
 801b742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b744:	f107 0314 	add.w	r3, r7, #20
 801b748:	4619      	mov	r1, r3
 801b74a:	480c      	ldr	r0, [pc, #48]	; (801b77c <HAL_I2C_MspInit+0x8c>)
 801b74c:	f7e7 f9dc 	bl	8002b08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801b750:	2300      	movs	r3, #0
 801b752:	60fb      	str	r3, [r7, #12]
 801b754:	4b08      	ldr	r3, [pc, #32]	; (801b778 <HAL_I2C_MspInit+0x88>)
 801b756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b758:	4a07      	ldr	r2, [pc, #28]	; (801b778 <HAL_I2C_MspInit+0x88>)
 801b75a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801b75e:	6413      	str	r3, [r2, #64]	; 0x40
 801b760:	4b05      	ldr	r3, [pc, #20]	; (801b778 <HAL_I2C_MspInit+0x88>)
 801b762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b768:	60fb      	str	r3, [r7, #12]
 801b76a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801b76c:	bf00      	nop
 801b76e:	3728      	adds	r7, #40	; 0x28
 801b770:	46bd      	mov	sp, r7
 801b772:	bd80      	pop	{r7, pc}
 801b774:	40005400 	.word	0x40005400
 801b778:	40023800 	.word	0x40023800
 801b77c:	40020400 	.word	0x40020400

0801b780 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801b780:	b5b0      	push	{r4, r5, r7, lr}
 801b782:	b08e      	sub	sp, #56	; 0x38
 801b784:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801b786:	2100      	movs	r1, #0
 801b788:	2000      	movs	r0, #0
 801b78a:	f7ef fead 	bl	800b4e8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 801b78e:	4b2a      	ldr	r3, [pc, #168]	; (801b838 <MX_LWIP_Init+0xb8>)
 801b790:	2200      	movs	r2, #0
 801b792:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 801b794:	4b29      	ldr	r3, [pc, #164]	; (801b83c <MX_LWIP_Init+0xbc>)
 801b796:	2200      	movs	r2, #0
 801b798:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 801b79a:	4b29      	ldr	r3, [pc, #164]	; (801b840 <MX_LWIP_Init+0xc0>)
 801b79c:	2200      	movs	r2, #0
 801b79e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801b7a0:	4b28      	ldr	r3, [pc, #160]	; (801b844 <MX_LWIP_Init+0xc4>)
 801b7a2:	9302      	str	r3, [sp, #8]
 801b7a4:	4b28      	ldr	r3, [pc, #160]	; (801b848 <MX_LWIP_Init+0xc8>)
 801b7a6:	9301      	str	r3, [sp, #4]
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	9300      	str	r3, [sp, #0]
 801b7ac:	4b24      	ldr	r3, [pc, #144]	; (801b840 <MX_LWIP_Init+0xc0>)
 801b7ae:	4a23      	ldr	r2, [pc, #140]	; (801b83c <MX_LWIP_Init+0xbc>)
 801b7b0:	4921      	ldr	r1, [pc, #132]	; (801b838 <MX_LWIP_Init+0xb8>)
 801b7b2:	4826      	ldr	r0, [pc, #152]	; (801b84c <MX_LWIP_Init+0xcc>)
 801b7b4:	f7f0 fc1c 	bl	800bff0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801b7b8:	4824      	ldr	r0, [pc, #144]	; (801b84c <MX_LWIP_Init+0xcc>)
 801b7ba:	f7f0 fdd3 	bl	800c364 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801b7be:	4b23      	ldr	r3, [pc, #140]	; (801b84c <MX_LWIP_Init+0xcc>)
 801b7c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b7c4:	089b      	lsrs	r3, r3, #2
 801b7c6:	f003 0301 	and.w	r3, r3, #1
 801b7ca:	b2db      	uxtb	r3, r3
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d003      	beq.n	801b7d8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801b7d0:	481e      	ldr	r0, [pc, #120]	; (801b84c <MX_LWIP_Init+0xcc>)
 801b7d2:	f7f0 fdd7 	bl	800c384 <netif_set_up>
 801b7d6:	e002      	b.n	801b7de <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801b7d8:	481c      	ldr	r0, [pc, #112]	; (801b84c <MX_LWIP_Init+0xcc>)
 801b7da:	f7f0 fe3f 	bl	800c45c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 801b7de:	491c      	ldr	r1, [pc, #112]	; (801b850 <MX_LWIP_Init+0xd0>)
 801b7e0:	481a      	ldr	r0, [pc, #104]	; (801b84c <MX_LWIP_Init+0xcc>)
 801b7e2:	f7f0 fed5 	bl	800c590 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 801b7e6:	2300      	movs	r3, #0
 801b7e8:	623b      	str	r3, [r7, #32]
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801b7ee:	f107 0320 	add.w	r3, r7, #32
 801b7f2:	2101      	movs	r1, #1
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	f7e9 fb63 	bl	8004ec0 <osSemaphoreCreate>
 801b7fa:	4602      	mov	r2, r0
 801b7fc:	4b15      	ldr	r3, [pc, #84]	; (801b854 <MX_LWIP_Init+0xd4>)
 801b7fe:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 801b800:	4b15      	ldr	r3, [pc, #84]	; (801b858 <MX_LWIP_Init+0xd8>)
 801b802:	4a12      	ldr	r2, [pc, #72]	; (801b84c <MX_LWIP_Init+0xcc>)
 801b804:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 801b806:	4b13      	ldr	r3, [pc, #76]	; (801b854 <MX_LWIP_Init+0xd4>)
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	4a13      	ldr	r2, [pc, #76]	; (801b858 <MX_LWIP_Init+0xd8>)
 801b80c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 801b80e:	4b13      	ldr	r3, [pc, #76]	; (801b85c <MX_LWIP_Init+0xdc>)
 801b810:	1d3c      	adds	r4, r7, #4
 801b812:	461d      	mov	r5, r3
 801b814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b818:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b81c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 801b820:	1d3b      	adds	r3, r7, #4
 801b822:	490d      	ldr	r1, [pc, #52]	; (801b858 <MX_LWIP_Init+0xd8>)
 801b824:	4618      	mov	r0, r3
 801b826:	f7e9 fa4e 	bl	8004cc6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 801b82a:	4808      	ldr	r0, [pc, #32]	; (801b84c <MX_LWIP_Init+0xcc>)
 801b82c:	f7f8 ffe4 	bl	80147f8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801b830:	bf00      	nop
 801b832:	3728      	adds	r7, #40	; 0x28
 801b834:	46bd      	mov	sp, r7
 801b836:	bdb0      	pop	{r4, r5, r7, pc}
 801b838:	20010434 	.word	0x20010434
 801b83c:	20010438 	.word	0x20010438
 801b840:	2001043c 	.word	0x2001043c
 801b844:	0800b3f9 	.word	0x0800b3f9
 801b848:	0801af19 	.word	0x0801af19
 801b84c:	200103fc 	.word	0x200103fc
 801b850:	0801affd 	.word	0x0801affd
 801b854:	20008da4 	.word	0x20008da4
 801b858:	200103f4 	.word	0x200103f4
 801b85c:	08020d94 	.word	0x08020d94

0801b860 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 801b860:	b480      	push	{r7}
 801b862:	b083      	sub	sp, #12
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801b868:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801b86c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 801b870:	f003 0301 	and.w	r3, r3, #1
 801b874:	2b00      	cmp	r3, #0
 801b876:	d013      	beq.n	801b8a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801b878:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801b87c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 801b880:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801b884:	2b00      	cmp	r3, #0
 801b886:	d00b      	beq.n	801b8a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801b888:	e000      	b.n	801b88c <ITM_SendChar+0x2c>
    {
      __NOP();
 801b88a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 801b88c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	2b00      	cmp	r3, #0
 801b894:	d0f9      	beq.n	801b88a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801b896:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801b89a:	687a      	ldr	r2, [r7, #4]
 801b89c:	b2d2      	uxtb	r2, r2
 801b89e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 801b8a0:	687b      	ldr	r3, [r7, #4]
}
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	370c      	adds	r7, #12
 801b8a6:	46bd      	mov	sp, r7
 801b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ac:	4770      	bx	lr

0801b8ae <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 801b8ae:	b580      	push	{r7, lr}
 801b8b0:	b086      	sub	sp, #24
 801b8b2:	af00      	add	r7, sp, #0
 801b8b4:	60f8      	str	r0, [r7, #12]
 801b8b6:	60b9      	str	r1, [r7, #8]
 801b8b8:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	617b      	str	r3, [r7, #20]
 801b8be:	e009      	b.n	801b8d4 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 801b8c0:	68bb      	ldr	r3, [r7, #8]
 801b8c2:	1c5a      	adds	r2, r3, #1
 801b8c4:	60ba      	str	r2, [r7, #8]
 801b8c6:	781b      	ldrb	r3, [r3, #0]
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7ff ffc9 	bl	801b860 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801b8ce:	697b      	ldr	r3, [r7, #20]
 801b8d0:	3301      	adds	r3, #1
 801b8d2:	617b      	str	r3, [r7, #20]
 801b8d4:	697a      	ldr	r2, [r7, #20]
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	429a      	cmp	r2, r3
 801b8da:	dbf1      	blt.n	801b8c0 <_write+0x12>
  }
  return len;
 801b8dc:	687b      	ldr	r3, [r7, #4]
}
 801b8de:	4618      	mov	r0, r3
 801b8e0:	3718      	adds	r7, #24
 801b8e2:	46bd      	mov	sp, r7
 801b8e4:	bd80      	pop	{r7, pc}
	...

0801b8e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801b8e8:	b580      	push	{r7, lr}
 801b8ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801b8ec:	f7e5 fa56 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801b8f0:	f000 f810 	bl	801b914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801b8f4:	f7ff fdd8 	bl	801b4a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 801b8f8:	f7ff feba 	bl	801b670 <MX_I2C1_Init>
  MX_ADC1_Init();
 801b8fc:	f7fe ff46 	bl	801a78c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("Don't remove this printf to prevent hard fault.\r\n");
 801b900:	4803      	ldr	r0, [pc, #12]	; (801b910 <main+0x28>)
 801b902:	f000 fb25 	bl	801bf50 <puts>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 801b906:	f7ff fc3f 	bl	801b188 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 801b90a:	f7e9 f9c5 	bl	8004c98 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801b90e:	e7fe      	b.n	801b90e <main+0x26>
 801b910:	08020db0 	.word	0x08020db0

0801b914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b094      	sub	sp, #80	; 0x50
 801b918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801b91a:	f107 0320 	add.w	r3, r7, #32
 801b91e:	2230      	movs	r2, #48	; 0x30
 801b920:	2100      	movs	r1, #0
 801b922:	4618      	mov	r0, r3
 801b924:	f000 fa98 	bl	801be58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801b928:	f107 030c 	add.w	r3, r7, #12
 801b92c:	2200      	movs	r2, #0
 801b92e:	601a      	str	r2, [r3, #0]
 801b930:	605a      	str	r2, [r3, #4]
 801b932:	609a      	str	r2, [r3, #8]
 801b934:	60da      	str	r2, [r3, #12]
 801b936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801b938:	2300      	movs	r3, #0
 801b93a:	60bb      	str	r3, [r7, #8]
 801b93c:	4b28      	ldr	r3, [pc, #160]	; (801b9e0 <SystemClock_Config+0xcc>)
 801b93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b940:	4a27      	ldr	r2, [pc, #156]	; (801b9e0 <SystemClock_Config+0xcc>)
 801b942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b946:	6413      	str	r3, [r2, #64]	; 0x40
 801b948:	4b25      	ldr	r3, [pc, #148]	; (801b9e0 <SystemClock_Config+0xcc>)
 801b94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b94c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b950:	60bb      	str	r3, [r7, #8]
 801b952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801b954:	2300      	movs	r3, #0
 801b956:	607b      	str	r3, [r7, #4]
 801b958:	4b22      	ldr	r3, [pc, #136]	; (801b9e4 <SystemClock_Config+0xd0>)
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	4a21      	ldr	r2, [pc, #132]	; (801b9e4 <SystemClock_Config+0xd0>)
 801b95e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801b962:	6013      	str	r3, [r2, #0]
 801b964:	4b1f      	ldr	r3, [pc, #124]	; (801b9e4 <SystemClock_Config+0xd0>)
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801b96c:	607b      	str	r3, [r7, #4]
 801b96e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801b970:	2301      	movs	r3, #1
 801b972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 801b974:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801b978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801b97a:	2302      	movs	r3, #2
 801b97c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801b97e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 801b984:	2304      	movs	r3, #4
 801b986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 801b988:	23a8      	movs	r3, #168	; 0xa8
 801b98a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801b98c:	2302      	movs	r3, #2
 801b98e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801b990:	2307      	movs	r3, #7
 801b992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801b994:	f107 0320 	add.w	r3, r7, #32
 801b998:	4618      	mov	r0, r3
 801b99a:	f7e8 fa95 	bl	8003ec8 <HAL_RCC_OscConfig>
 801b99e:	4603      	mov	r3, r0
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d001      	beq.n	801b9a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 801b9a4:	f000 f83e 	bl	801ba24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801b9a8:	230f      	movs	r3, #15
 801b9aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801b9ac:	2302      	movs	r3, #2
 801b9ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801b9b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801b9b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801b9ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b9be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801b9c0:	f107 030c 	add.w	r3, r7, #12
 801b9c4:	2105      	movs	r1, #5
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	f7e8 fcee 	bl	80043a8 <HAL_RCC_ClockConfig>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d001      	beq.n	801b9d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 801b9d2:	f000 f827 	bl	801ba24 <Error_Handler>
  }
}
 801b9d6:	bf00      	nop
 801b9d8:	3750      	adds	r7, #80	; 0x50
 801b9da:	46bd      	mov	sp, r7
 801b9dc:	bd80      	pop	{r7, pc}
 801b9de:	bf00      	nop
 801b9e0:	40023800 	.word	0x40023800
 801b9e4:	40007000 	.word	0x40007000

0801b9e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b082      	sub	sp, #8
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	4a09      	ldr	r2, [pc, #36]	; (801ba1c <HAL_TIM_PeriodElapsedCallback+0x34>)
 801b9f6:	4293      	cmp	r3, r2
 801b9f8:	d101      	bne.n	801b9fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801b9fa:	f7e5 f9f1 	bl	8000de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	4a06      	ldr	r2, [pc, #24]	; (801ba1c <HAL_TIM_PeriodElapsedCallback+0x34>)
 801ba04:	4293      	cmp	r3, r2
 801ba06:	d104      	bne.n	801ba12 <HAL_TIM_PeriodElapsedCallback+0x2a>
    MilliTimer++;
 801ba08:	4b05      	ldr	r3, [pc, #20]	; (801ba20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	3301      	adds	r3, #1
 801ba0e:	4a04      	ldr	r2, [pc, #16]	; (801ba20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 801ba10:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END Callback 1 */
}
 801ba12:	bf00      	nop
 801ba14:	3708      	adds	r7, #8
 801ba16:	46bd      	mov	sp, r7
 801ba18:	bd80      	pop	{r7, pc}
 801ba1a:	bf00      	nop
 801ba1c:	40001000 	.word	0x40001000
 801ba20:	2000c59c 	.word	0x2000c59c

0801ba24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801ba24:	b480      	push	{r7}
 801ba26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801ba28:	bf00      	nop
 801ba2a:	46bd      	mov	sp, r7
 801ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba30:	4770      	bx	lr
	...

0801ba34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801ba34:	b580      	push	{r7, lr}
 801ba36:	b082      	sub	sp, #8
 801ba38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	607b      	str	r3, [r7, #4]
 801ba3e:	4b12      	ldr	r3, [pc, #72]	; (801ba88 <HAL_MspInit+0x54>)
 801ba40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba42:	4a11      	ldr	r2, [pc, #68]	; (801ba88 <HAL_MspInit+0x54>)
 801ba44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ba48:	6453      	str	r3, [r2, #68]	; 0x44
 801ba4a:	4b0f      	ldr	r3, [pc, #60]	; (801ba88 <HAL_MspInit+0x54>)
 801ba4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ba52:	607b      	str	r3, [r7, #4]
 801ba54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801ba56:	2300      	movs	r3, #0
 801ba58:	603b      	str	r3, [r7, #0]
 801ba5a:	4b0b      	ldr	r3, [pc, #44]	; (801ba88 <HAL_MspInit+0x54>)
 801ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba5e:	4a0a      	ldr	r2, [pc, #40]	; (801ba88 <HAL_MspInit+0x54>)
 801ba60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba64:	6413      	str	r3, [r2, #64]	; 0x40
 801ba66:	4b08      	ldr	r3, [pc, #32]	; (801ba88 <HAL_MspInit+0x54>)
 801ba68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ba6e:	603b      	str	r3, [r7, #0]
 801ba70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801ba72:	2200      	movs	r2, #0
 801ba74:	210f      	movs	r1, #15
 801ba76:	f06f 0001 	mvn.w	r0, #1
 801ba7a:	f7e5 fe75 	bl	8001768 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ba7e:	bf00      	nop
 801ba80:	3708      	adds	r7, #8
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd80      	pop	{r7, pc}
 801ba86:	bf00      	nop
 801ba88:	40023800 	.word	0x40023800

0801ba8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ba8c:	b580      	push	{r7, lr}
 801ba8e:	b08c      	sub	sp, #48	; 0x30
 801ba90:	af00      	add	r7, sp, #0
 801ba92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801ba94:	2300      	movs	r3, #0
 801ba96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 801ba98:	2300      	movs	r3, #0
 801ba9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	6879      	ldr	r1, [r7, #4]
 801baa0:	2036      	movs	r0, #54	; 0x36
 801baa2:	f7e5 fe61 	bl	8001768 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 801baa6:	2036      	movs	r0, #54	; 0x36
 801baa8:	f7e5 fe7a 	bl	80017a0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801baac:	2300      	movs	r3, #0
 801baae:	60fb      	str	r3, [r7, #12]
 801bab0:	4b1f      	ldr	r3, [pc, #124]	; (801bb30 <HAL_InitTick+0xa4>)
 801bab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bab4:	4a1e      	ldr	r2, [pc, #120]	; (801bb30 <HAL_InitTick+0xa4>)
 801bab6:	f043 0310 	orr.w	r3, r3, #16
 801baba:	6413      	str	r3, [r2, #64]	; 0x40
 801babc:	4b1c      	ldr	r3, [pc, #112]	; (801bb30 <HAL_InitTick+0xa4>)
 801babe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bac0:	f003 0310 	and.w	r3, r3, #16
 801bac4:	60fb      	str	r3, [r7, #12]
 801bac6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801bac8:	f107 0210 	add.w	r2, r7, #16
 801bacc:	f107 0314 	add.w	r3, r7, #20
 801bad0:	4611      	mov	r1, r2
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7e8 fe46 	bl	8004764 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 801bad8:	f7e8 fe30 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 801badc:	4603      	mov	r3, r0
 801bade:	005b      	lsls	r3, r3, #1
 801bae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801bae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bae4:	4a13      	ldr	r2, [pc, #76]	; (801bb34 <HAL_InitTick+0xa8>)
 801bae6:	fba2 2303 	umull	r2, r3, r2, r3
 801baea:	0c9b      	lsrs	r3, r3, #18
 801baec:	3b01      	subs	r3, #1
 801baee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801baf0:	4b11      	ldr	r3, [pc, #68]	; (801bb38 <HAL_InitTick+0xac>)
 801baf2:	4a12      	ldr	r2, [pc, #72]	; (801bb3c <HAL_InitTick+0xb0>)
 801baf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 801baf6:	4b10      	ldr	r3, [pc, #64]	; (801bb38 <HAL_InitTick+0xac>)
 801baf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 801bafc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801bafe:	4a0e      	ldr	r2, [pc, #56]	; (801bb38 <HAL_InitTick+0xac>)
 801bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801bb04:	4b0c      	ldr	r3, [pc, #48]	; (801bb38 <HAL_InitTick+0xac>)
 801bb06:	2200      	movs	r2, #0
 801bb08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801bb0a:	4b0b      	ldr	r3, [pc, #44]	; (801bb38 <HAL_InitTick+0xac>)
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801bb10:	4809      	ldr	r0, [pc, #36]	; (801bb38 <HAL_InitTick+0xac>)
 801bb12:	f7e8 fe59 	bl	80047c8 <HAL_TIM_Base_Init>
 801bb16:	4603      	mov	r3, r0
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d104      	bne.n	801bb26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801bb1c:	4806      	ldr	r0, [pc, #24]	; (801bb38 <HAL_InitTick+0xac>)
 801bb1e:	f7e8 fe88 	bl	8004832 <HAL_TIM_Base_Start_IT>
 801bb22:	4603      	mov	r3, r0
 801bb24:	e000      	b.n	801bb28 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801bb26:	2301      	movs	r3, #1
}
 801bb28:	4618      	mov	r0, r3
 801bb2a:	3730      	adds	r7, #48	; 0x30
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}
 801bb30:	40023800 	.word	0x40023800
 801bb34:	431bde83 	.word	0x431bde83
 801bb38:	20010440 	.word	0x20010440
 801bb3c:	40001000 	.word	0x40001000

0801bb40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801bb40:	b480      	push	{r7}
 801bb42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801bb44:	bf00      	nop
 801bb46:	46bd      	mov	sp, r7
 801bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb4c:	4770      	bx	lr

0801bb4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801bb4e:	b480      	push	{r7}
 801bb50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801bb52:	e7fe      	b.n	801bb52 <HardFault_Handler+0x4>

0801bb54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801bb54:	b480      	push	{r7}
 801bb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801bb58:	e7fe      	b.n	801bb58 <MemManage_Handler+0x4>

0801bb5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801bb5a:	b480      	push	{r7}
 801bb5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801bb5e:	e7fe      	b.n	801bb5e <BusFault_Handler+0x4>

0801bb60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801bb60:	b480      	push	{r7}
 801bb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801bb64:	e7fe      	b.n	801bb64 <UsageFault_Handler+0x4>

0801bb66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801bb66:	b480      	push	{r7}
 801bb68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801bb6a:	bf00      	nop
 801bb6c:	46bd      	mov	sp, r7
 801bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb72:	4770      	bx	lr

0801bb74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801bb74:	b580      	push	{r7, lr}
 801bb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801bb78:	4802      	ldr	r0, [pc, #8]	; (801bb84 <TIM6_DAC_IRQHandler+0x10>)
 801bb7a:	f7e8 fe7e 	bl	800487a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801bb7e:	bf00      	nop
 801bb80:	bd80      	pop	{r7, pc}
 801bb82:	bf00      	nop
 801bb84:	20010440 	.word	0x20010440

0801bb88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801bb8c:	4802      	ldr	r0, [pc, #8]	; (801bb98 <ETH_IRQHandler+0x10>)
 801bb8e:	f7e6 f9fb 	bl	8001f88 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801bb92:	bf00      	nop
 801bb94:	bd80      	pop	{r7, pc}
 801bb96:	bf00      	nop
 801bb98:	2000deb8 	.word	0x2000deb8

0801bb9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b086      	sub	sp, #24
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	60f8      	str	r0, [r7, #12]
 801bba4:	60b9      	str	r1, [r7, #8]
 801bba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801bba8:	2300      	movs	r3, #0
 801bbaa:	617b      	str	r3, [r7, #20]
 801bbac:	e00a      	b.n	801bbc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801bbae:	f3af 8000 	nop.w
 801bbb2:	4601      	mov	r1, r0
 801bbb4:	68bb      	ldr	r3, [r7, #8]
 801bbb6:	1c5a      	adds	r2, r3, #1
 801bbb8:	60ba      	str	r2, [r7, #8]
 801bbba:	b2ca      	uxtb	r2, r1
 801bbbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801bbbe:	697b      	ldr	r3, [r7, #20]
 801bbc0:	3301      	adds	r3, #1
 801bbc2:	617b      	str	r3, [r7, #20]
 801bbc4:	697a      	ldr	r2, [r7, #20]
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	429a      	cmp	r2, r3
 801bbca:	dbf0      	blt.n	801bbae <_read+0x12>
	}

return len;
 801bbcc:	687b      	ldr	r3, [r7, #4]
}
 801bbce:	4618      	mov	r0, r3
 801bbd0:	3718      	adds	r7, #24
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	bd80      	pop	{r7, pc}

0801bbd6 <_close>:
	}
	return len;
}

int _close(int file)
{
 801bbd6:	b480      	push	{r7}
 801bbd8:	b083      	sub	sp, #12
 801bbda:	af00      	add	r7, sp, #0
 801bbdc:	6078      	str	r0, [r7, #4]
	return -1;
 801bbde:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bbe2:	4618      	mov	r0, r3
 801bbe4:	370c      	adds	r7, #12
 801bbe6:	46bd      	mov	sp, r7
 801bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbec:	4770      	bx	lr

0801bbee <_fstat>:


int _fstat(int file, struct stat *st)
{
 801bbee:	b480      	push	{r7}
 801bbf0:	b083      	sub	sp, #12
 801bbf2:	af00      	add	r7, sp, #0
 801bbf4:	6078      	str	r0, [r7, #4]
 801bbf6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801bbf8:	683b      	ldr	r3, [r7, #0]
 801bbfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801bbfe:	605a      	str	r2, [r3, #4]
	return 0;
 801bc00:	2300      	movs	r3, #0
}
 801bc02:	4618      	mov	r0, r3
 801bc04:	370c      	adds	r7, #12
 801bc06:	46bd      	mov	sp, r7
 801bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc0c:	4770      	bx	lr

0801bc0e <_isatty>:

int _isatty(int file)
{
 801bc0e:	b480      	push	{r7}
 801bc10:	b083      	sub	sp, #12
 801bc12:	af00      	add	r7, sp, #0
 801bc14:	6078      	str	r0, [r7, #4]
	return 1;
 801bc16:	2301      	movs	r3, #1
}
 801bc18:	4618      	mov	r0, r3
 801bc1a:	370c      	adds	r7, #12
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc22:	4770      	bx	lr

0801bc24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801bc24:	b480      	push	{r7}
 801bc26:	b085      	sub	sp, #20
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	60f8      	str	r0, [r7, #12]
 801bc2c:	60b9      	str	r1, [r7, #8]
 801bc2e:	607a      	str	r2, [r7, #4]
	return 0;
 801bc30:	2300      	movs	r3, #0
}
 801bc32:	4618      	mov	r0, r3
 801bc34:	3714      	adds	r7, #20
 801bc36:	46bd      	mov	sp, r7
 801bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc3c:	4770      	bx	lr
	...

0801bc40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801bc40:	b480      	push	{r7}
 801bc42:	b085      	sub	sp, #20
 801bc44:	af00      	add	r7, sp, #0
 801bc46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801bc48:	4b11      	ldr	r3, [pc, #68]	; (801bc90 <_sbrk+0x50>)
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d102      	bne.n	801bc56 <_sbrk+0x16>
		heap_end = &end;
 801bc50:	4b0f      	ldr	r3, [pc, #60]	; (801bc90 <_sbrk+0x50>)
 801bc52:	4a10      	ldr	r2, [pc, #64]	; (801bc94 <_sbrk+0x54>)
 801bc54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801bc56:	4b0e      	ldr	r3, [pc, #56]	; (801bc90 <_sbrk+0x50>)
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801bc5c:	4b0c      	ldr	r3, [pc, #48]	; (801bc90 <_sbrk+0x50>)
 801bc5e:	681a      	ldr	r2, [r3, #0]
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	4413      	add	r3, r2
 801bc64:	466a      	mov	r2, sp
 801bc66:	4293      	cmp	r3, r2
 801bc68:	d905      	bls.n	801bc76 <_sbrk+0x36>
	{
		errno = ENOMEM;
 801bc6a:	4b0b      	ldr	r3, [pc, #44]	; (801bc98 <_sbrk+0x58>)
 801bc6c:	220c      	movs	r2, #12
 801bc6e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801bc70:	f04f 33ff 	mov.w	r3, #4294967295
 801bc74:	e006      	b.n	801bc84 <_sbrk+0x44>
	}

	heap_end += incr;
 801bc76:	4b06      	ldr	r3, [pc, #24]	; (801bc90 <_sbrk+0x50>)
 801bc78:	681a      	ldr	r2, [r3, #0]
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	4413      	add	r3, r2
 801bc7e:	4a04      	ldr	r2, [pc, #16]	; (801bc90 <_sbrk+0x50>)
 801bc80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801bc82:	68fb      	ldr	r3, [r7, #12]
}
 801bc84:	4618      	mov	r0, r3
 801bc86:	3714      	adds	r7, #20
 801bc88:	46bd      	mov	sp, r7
 801bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc8e:	4770      	bx	lr
 801bc90:	20008da8 	.word	0x20008da8
 801bc94:	20010480 	.word	0x20010480
 801bc98:	2000c594 	.word	0x2000c594

0801bc9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801bc9c:	b480      	push	{r7}
 801bc9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801bca0:	4b08      	ldr	r3, [pc, #32]	; (801bcc4 <SystemInit+0x28>)
 801bca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bca6:	4a07      	ldr	r2, [pc, #28]	; (801bcc4 <SystemInit+0x28>)
 801bca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801bcac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801bcb0:	4b04      	ldr	r3, [pc, #16]	; (801bcc4 <SystemInit+0x28>)
 801bcb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801bcb6:	609a      	str	r2, [r3, #8]
#endif
}
 801bcb8:	bf00      	nop
 801bcba:	46bd      	mov	sp, r7
 801bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcc0:	4770      	bx	lr
 801bcc2:	bf00      	nop
 801bcc4:	e000ed00 	.word	0xe000ed00

0801bcc8 <tc74_sensor_readTemperature>:
/* ----------------------- Local function prototypes ----------------------- */
/* -------------------------- Callback functions --------------------------- */
/* ---------------------------- Local functions ---------------------------- */
/* ---------------------------- Global functions --------------------------- */
bool tc74_sensor_readTemperature(I2C_HandleTypeDef *pHandle, uint8_t *temperature)
{
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b086      	sub	sp, #24
 801bccc:	af02      	add	r7, sp, #8
 801bcce:	6078      	str	r0, [r7, #4]
 801bcd0:	6039      	str	r1, [r7, #0]
	uint8_t cmd = 0x00;
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK == HAL_I2C_Master_Transmit(pHandle, TC74_ADDRESS, (uint8_t *) &cmd, sizeof(cmd), 10))
 801bcd6:	f107 020f 	add.w	r2, r7, #15
 801bcda:	230a      	movs	r3, #10
 801bcdc:	9300      	str	r3, [sp, #0]
 801bcde:	2301      	movs	r3, #1
 801bce0:	219a      	movs	r1, #154	; 0x9a
 801bce2:	6878      	ldr	r0, [r7, #4]
 801bce4:	f7e7 fa26 	bl	8003134 <HAL_I2C_Master_Transmit>
 801bce8:	4603      	mov	r3, r0
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d10c      	bne.n	801bd08 <tc74_sensor_readTemperature+0x40>
  {
    if (HAL_OK == HAL_I2C_Master_Receive(pHandle, TC74_ADDRESS, (uint8_t *) temperature, sizeof(*temperature), 10))
 801bcee:	230a      	movs	r3, #10
 801bcf0:	9300      	str	r3, [sp, #0]
 801bcf2:	2301      	movs	r3, #1
 801bcf4:	683a      	ldr	r2, [r7, #0]
 801bcf6:	219a      	movs	r1, #154	; 0x9a
 801bcf8:	6878      	ldr	r0, [r7, #4]
 801bcfa:	f7e7 fb19 	bl	8003330 <HAL_I2C_Master_Receive>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d101      	bne.n	801bd08 <tc74_sensor_readTemperature+0x40>
    {
      return true;
 801bd04:	2301      	movs	r3, #1
 801bd06:	e000      	b.n	801bd0a <tc74_sensor_readTemperature+0x42>
    }
  }

  return false;
 801bd08:	2300      	movs	r3, #0
}
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	3710      	adds	r7, #16
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	bd80      	pop	{r7, pc}
	...

0801bd14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 801bd14:	f8df d034 	ldr.w	sp, [pc, #52]	; 801bd4c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801bd18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801bd1a:	e003      	b.n	801bd24 <LoopCopyDataInit>

0801bd1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801bd1c:	4b0c      	ldr	r3, [pc, #48]	; (801bd50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801bd1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801bd20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801bd22:	3104      	adds	r1, #4

0801bd24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801bd24:	480b      	ldr	r0, [pc, #44]	; (801bd54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801bd26:	4b0c      	ldr	r3, [pc, #48]	; (801bd58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801bd28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801bd2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801bd2c:	d3f6      	bcc.n	801bd1c <CopyDataInit>
  ldr  r2, =_sbss
 801bd2e:	4a0b      	ldr	r2, [pc, #44]	; (801bd5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801bd30:	e002      	b.n	801bd38 <LoopFillZerobss>

0801bd32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801bd32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801bd34:	f842 3b04 	str.w	r3, [r2], #4

0801bd38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801bd38:	4b09      	ldr	r3, [pc, #36]	; (801bd60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801bd3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801bd3c:	d3f9      	bcc.n	801bd32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801bd3e:	f7ff ffad 	bl	801bc9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801bd42:	f000 f811 	bl	801bd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801bd46:	f7ff fdcf 	bl	801b8e8 <main>
  bx  lr    
 801bd4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 801bd4c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 801bd50:	08021158 	.word	0x08021158
  ldr  r0, =_sdata
 801bd54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801bd58:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 801bd5c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 801bd60:	20010480 	.word	0x20010480

0801bd64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801bd64:	e7fe      	b.n	801bd64 <ADC_IRQHandler>
	...

0801bd68 <__libc_init_array>:
 801bd68:	b570      	push	{r4, r5, r6, lr}
 801bd6a:	4e0d      	ldr	r6, [pc, #52]	; (801bda0 <__libc_init_array+0x38>)
 801bd6c:	4c0d      	ldr	r4, [pc, #52]	; (801bda4 <__libc_init_array+0x3c>)
 801bd6e:	1ba4      	subs	r4, r4, r6
 801bd70:	10a4      	asrs	r4, r4, #2
 801bd72:	2500      	movs	r5, #0
 801bd74:	42a5      	cmp	r5, r4
 801bd76:	d109      	bne.n	801bd8c <__libc_init_array+0x24>
 801bd78:	4e0b      	ldr	r6, [pc, #44]	; (801bda8 <__libc_init_array+0x40>)
 801bd7a:	4c0c      	ldr	r4, [pc, #48]	; (801bdac <__libc_init_array+0x44>)
 801bd7c:	f001 f856 	bl	801ce2c <_init>
 801bd80:	1ba4      	subs	r4, r4, r6
 801bd82:	10a4      	asrs	r4, r4, #2
 801bd84:	2500      	movs	r5, #0
 801bd86:	42a5      	cmp	r5, r4
 801bd88:	d105      	bne.n	801bd96 <__libc_init_array+0x2e>
 801bd8a:	bd70      	pop	{r4, r5, r6, pc}
 801bd8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801bd90:	4798      	blx	r3
 801bd92:	3501      	adds	r5, #1
 801bd94:	e7ee      	b.n	801bd74 <__libc_init_array+0xc>
 801bd96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801bd9a:	4798      	blx	r3
 801bd9c:	3501      	adds	r5, #1
 801bd9e:	e7f2      	b.n	801bd86 <__libc_init_array+0x1e>
 801bda0:	08021150 	.word	0x08021150
 801bda4:	08021150 	.word	0x08021150
 801bda8:	08021150 	.word	0x08021150
 801bdac:	08021154 	.word	0x08021154

0801bdb0 <__itoa>:
 801bdb0:	1e93      	subs	r3, r2, #2
 801bdb2:	2b22      	cmp	r3, #34	; 0x22
 801bdb4:	b510      	push	{r4, lr}
 801bdb6:	460c      	mov	r4, r1
 801bdb8:	d904      	bls.n	801bdc4 <__itoa+0x14>
 801bdba:	2300      	movs	r3, #0
 801bdbc:	700b      	strb	r3, [r1, #0]
 801bdbe:	461c      	mov	r4, r3
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	bd10      	pop	{r4, pc}
 801bdc4:	2a0a      	cmp	r2, #10
 801bdc6:	d109      	bne.n	801bddc <__itoa+0x2c>
 801bdc8:	2800      	cmp	r0, #0
 801bdca:	da07      	bge.n	801bddc <__itoa+0x2c>
 801bdcc:	232d      	movs	r3, #45	; 0x2d
 801bdce:	700b      	strb	r3, [r1, #0]
 801bdd0:	4240      	negs	r0, r0
 801bdd2:	2101      	movs	r1, #1
 801bdd4:	4421      	add	r1, r4
 801bdd6:	f000 f909 	bl	801bfec <__utoa>
 801bdda:	e7f1      	b.n	801bdc0 <__itoa+0x10>
 801bddc:	2100      	movs	r1, #0
 801bdde:	e7f9      	b.n	801bdd4 <__itoa+0x24>

0801bde0 <itoa>:
 801bde0:	f7ff bfe6 	b.w	801bdb0 <__itoa>

0801bde4 <__locale_ctype_ptr>:
 801bde4:	4b04      	ldr	r3, [pc, #16]	; (801bdf8 <__locale_ctype_ptr+0x14>)
 801bde6:	4a05      	ldr	r2, [pc, #20]	; (801bdfc <__locale_ctype_ptr+0x18>)
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	6a1b      	ldr	r3, [r3, #32]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	bf08      	it	eq
 801bdf0:	4613      	moveq	r3, r2
 801bdf2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801bdf6:	4770      	bx	lr
 801bdf8:	20000020 	.word	0x20000020
 801bdfc:	20000084 	.word	0x20000084

0801be00 <__ascii_mbtowc>:
 801be00:	b082      	sub	sp, #8
 801be02:	b901      	cbnz	r1, 801be06 <__ascii_mbtowc+0x6>
 801be04:	a901      	add	r1, sp, #4
 801be06:	b142      	cbz	r2, 801be1a <__ascii_mbtowc+0x1a>
 801be08:	b14b      	cbz	r3, 801be1e <__ascii_mbtowc+0x1e>
 801be0a:	7813      	ldrb	r3, [r2, #0]
 801be0c:	600b      	str	r3, [r1, #0]
 801be0e:	7812      	ldrb	r2, [r2, #0]
 801be10:	1c10      	adds	r0, r2, #0
 801be12:	bf18      	it	ne
 801be14:	2001      	movne	r0, #1
 801be16:	b002      	add	sp, #8
 801be18:	4770      	bx	lr
 801be1a:	4610      	mov	r0, r2
 801be1c:	e7fb      	b.n	801be16 <__ascii_mbtowc+0x16>
 801be1e:	f06f 0001 	mvn.w	r0, #1
 801be22:	e7f8      	b.n	801be16 <__ascii_mbtowc+0x16>

0801be24 <memcmp>:
 801be24:	b530      	push	{r4, r5, lr}
 801be26:	2400      	movs	r4, #0
 801be28:	42a2      	cmp	r2, r4
 801be2a:	d101      	bne.n	801be30 <memcmp+0xc>
 801be2c:	2000      	movs	r0, #0
 801be2e:	e007      	b.n	801be40 <memcmp+0x1c>
 801be30:	5d03      	ldrb	r3, [r0, r4]
 801be32:	3401      	adds	r4, #1
 801be34:	190d      	adds	r5, r1, r4
 801be36:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801be3a:	42ab      	cmp	r3, r5
 801be3c:	d0f4      	beq.n	801be28 <memcmp+0x4>
 801be3e:	1b58      	subs	r0, r3, r5
 801be40:	bd30      	pop	{r4, r5, pc}

0801be42 <memcpy>:
 801be42:	b510      	push	{r4, lr}
 801be44:	1e43      	subs	r3, r0, #1
 801be46:	440a      	add	r2, r1
 801be48:	4291      	cmp	r1, r2
 801be4a:	d100      	bne.n	801be4e <memcpy+0xc>
 801be4c:	bd10      	pop	{r4, pc}
 801be4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801be52:	f803 4f01 	strb.w	r4, [r3, #1]!
 801be56:	e7f7      	b.n	801be48 <memcpy+0x6>

0801be58 <memset>:
 801be58:	4402      	add	r2, r0
 801be5a:	4603      	mov	r3, r0
 801be5c:	4293      	cmp	r3, r2
 801be5e:	d100      	bne.n	801be62 <memset+0xa>
 801be60:	4770      	bx	lr
 801be62:	f803 1b01 	strb.w	r1, [r3], #1
 801be66:	e7f9      	b.n	801be5c <memset+0x4>

0801be68 <iprintf>:
 801be68:	b40f      	push	{r0, r1, r2, r3}
 801be6a:	4b0a      	ldr	r3, [pc, #40]	; (801be94 <iprintf+0x2c>)
 801be6c:	b513      	push	{r0, r1, r4, lr}
 801be6e:	681c      	ldr	r4, [r3, #0]
 801be70:	b124      	cbz	r4, 801be7c <iprintf+0x14>
 801be72:	69a3      	ldr	r3, [r4, #24]
 801be74:	b913      	cbnz	r3, 801be7c <iprintf+0x14>
 801be76:	4620      	mov	r0, r4
 801be78:	f000 fab4 	bl	801c3e4 <__sinit>
 801be7c:	ab05      	add	r3, sp, #20
 801be7e:	9a04      	ldr	r2, [sp, #16]
 801be80:	68a1      	ldr	r1, [r4, #8]
 801be82:	9301      	str	r3, [sp, #4]
 801be84:	4620      	mov	r0, r4
 801be86:	f000 fc75 	bl	801c774 <_vfiprintf_r>
 801be8a:	b002      	add	sp, #8
 801be8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be90:	b004      	add	sp, #16
 801be92:	4770      	bx	lr
 801be94:	20000020 	.word	0x20000020

0801be98 <_puts_r>:
 801be98:	b570      	push	{r4, r5, r6, lr}
 801be9a:	460e      	mov	r6, r1
 801be9c:	4605      	mov	r5, r0
 801be9e:	b118      	cbz	r0, 801bea8 <_puts_r+0x10>
 801bea0:	6983      	ldr	r3, [r0, #24]
 801bea2:	b90b      	cbnz	r3, 801bea8 <_puts_r+0x10>
 801bea4:	f000 fa9e 	bl	801c3e4 <__sinit>
 801bea8:	69ab      	ldr	r3, [r5, #24]
 801beaa:	68ac      	ldr	r4, [r5, #8]
 801beac:	b913      	cbnz	r3, 801beb4 <_puts_r+0x1c>
 801beae:	4628      	mov	r0, r5
 801beb0:	f000 fa98 	bl	801c3e4 <__sinit>
 801beb4:	4b23      	ldr	r3, [pc, #140]	; (801bf44 <_puts_r+0xac>)
 801beb6:	429c      	cmp	r4, r3
 801beb8:	d117      	bne.n	801beea <_puts_r+0x52>
 801beba:	686c      	ldr	r4, [r5, #4]
 801bebc:	89a3      	ldrh	r3, [r4, #12]
 801bebe:	071b      	lsls	r3, r3, #28
 801bec0:	d51d      	bpl.n	801befe <_puts_r+0x66>
 801bec2:	6923      	ldr	r3, [r4, #16]
 801bec4:	b1db      	cbz	r3, 801befe <_puts_r+0x66>
 801bec6:	3e01      	subs	r6, #1
 801bec8:	68a3      	ldr	r3, [r4, #8]
 801beca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bece:	3b01      	subs	r3, #1
 801bed0:	60a3      	str	r3, [r4, #8]
 801bed2:	b9e9      	cbnz	r1, 801bf10 <_puts_r+0x78>
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	da2e      	bge.n	801bf36 <_puts_r+0x9e>
 801bed8:	4622      	mov	r2, r4
 801beda:	210a      	movs	r1, #10
 801bedc:	4628      	mov	r0, r5
 801bede:	f000 f8c3 	bl	801c068 <__swbuf_r>
 801bee2:	3001      	adds	r0, #1
 801bee4:	d011      	beq.n	801bf0a <_puts_r+0x72>
 801bee6:	200a      	movs	r0, #10
 801bee8:	e011      	b.n	801bf0e <_puts_r+0x76>
 801beea:	4b17      	ldr	r3, [pc, #92]	; (801bf48 <_puts_r+0xb0>)
 801beec:	429c      	cmp	r4, r3
 801beee:	d101      	bne.n	801bef4 <_puts_r+0x5c>
 801bef0:	68ac      	ldr	r4, [r5, #8]
 801bef2:	e7e3      	b.n	801bebc <_puts_r+0x24>
 801bef4:	4b15      	ldr	r3, [pc, #84]	; (801bf4c <_puts_r+0xb4>)
 801bef6:	429c      	cmp	r4, r3
 801bef8:	bf08      	it	eq
 801befa:	68ec      	ldreq	r4, [r5, #12]
 801befc:	e7de      	b.n	801bebc <_puts_r+0x24>
 801befe:	4621      	mov	r1, r4
 801bf00:	4628      	mov	r0, r5
 801bf02:	f000 f911 	bl	801c128 <__swsetup_r>
 801bf06:	2800      	cmp	r0, #0
 801bf08:	d0dd      	beq.n	801bec6 <_puts_r+0x2e>
 801bf0a:	f04f 30ff 	mov.w	r0, #4294967295
 801bf0e:	bd70      	pop	{r4, r5, r6, pc}
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	da04      	bge.n	801bf1e <_puts_r+0x86>
 801bf14:	69a2      	ldr	r2, [r4, #24]
 801bf16:	429a      	cmp	r2, r3
 801bf18:	dc06      	bgt.n	801bf28 <_puts_r+0x90>
 801bf1a:	290a      	cmp	r1, #10
 801bf1c:	d004      	beq.n	801bf28 <_puts_r+0x90>
 801bf1e:	6823      	ldr	r3, [r4, #0]
 801bf20:	1c5a      	adds	r2, r3, #1
 801bf22:	6022      	str	r2, [r4, #0]
 801bf24:	7019      	strb	r1, [r3, #0]
 801bf26:	e7cf      	b.n	801bec8 <_puts_r+0x30>
 801bf28:	4622      	mov	r2, r4
 801bf2a:	4628      	mov	r0, r5
 801bf2c:	f000 f89c 	bl	801c068 <__swbuf_r>
 801bf30:	3001      	adds	r0, #1
 801bf32:	d1c9      	bne.n	801bec8 <_puts_r+0x30>
 801bf34:	e7e9      	b.n	801bf0a <_puts_r+0x72>
 801bf36:	6823      	ldr	r3, [r4, #0]
 801bf38:	200a      	movs	r0, #10
 801bf3a:	1c5a      	adds	r2, r3, #1
 801bf3c:	6022      	str	r2, [r4, #0]
 801bf3e:	7018      	strb	r0, [r3, #0]
 801bf40:	e7e5      	b.n	801bf0e <_puts_r+0x76>
 801bf42:	bf00      	nop
 801bf44:	080210d4 	.word	0x080210d4
 801bf48:	080210f4 	.word	0x080210f4
 801bf4c:	080210b4 	.word	0x080210b4

0801bf50 <puts>:
 801bf50:	4b02      	ldr	r3, [pc, #8]	; (801bf5c <puts+0xc>)
 801bf52:	4601      	mov	r1, r0
 801bf54:	6818      	ldr	r0, [r3, #0]
 801bf56:	f7ff bf9f 	b.w	801be98 <_puts_r>
 801bf5a:	bf00      	nop
 801bf5c:	20000020 	.word	0x20000020

0801bf60 <rand>:
 801bf60:	b538      	push	{r3, r4, r5, lr}
 801bf62:	4b13      	ldr	r3, [pc, #76]	; (801bfb0 <rand+0x50>)
 801bf64:	681c      	ldr	r4, [r3, #0]
 801bf66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bf68:	b97b      	cbnz	r3, 801bf8a <rand+0x2a>
 801bf6a:	2018      	movs	r0, #24
 801bf6c:	f000 fb28 	bl	801c5c0 <malloc>
 801bf70:	4a10      	ldr	r2, [pc, #64]	; (801bfb4 <rand+0x54>)
 801bf72:	4b11      	ldr	r3, [pc, #68]	; (801bfb8 <rand+0x58>)
 801bf74:	63a0      	str	r0, [r4, #56]	; 0x38
 801bf76:	e9c0 2300 	strd	r2, r3, [r0]
 801bf7a:	4b10      	ldr	r3, [pc, #64]	; (801bfbc <rand+0x5c>)
 801bf7c:	6083      	str	r3, [r0, #8]
 801bf7e:	230b      	movs	r3, #11
 801bf80:	8183      	strh	r3, [r0, #12]
 801bf82:	2201      	movs	r2, #1
 801bf84:	2300      	movs	r3, #0
 801bf86:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801bf8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bf8c:	480c      	ldr	r0, [pc, #48]	; (801bfc0 <rand+0x60>)
 801bf8e:	690a      	ldr	r2, [r1, #16]
 801bf90:	694b      	ldr	r3, [r1, #20]
 801bf92:	4c0c      	ldr	r4, [pc, #48]	; (801bfc4 <rand+0x64>)
 801bf94:	4350      	muls	r0, r2
 801bf96:	fb04 0003 	mla	r0, r4, r3, r0
 801bf9a:	fba2 2304 	umull	r2, r3, r2, r4
 801bf9e:	4403      	add	r3, r0
 801bfa0:	1c54      	adds	r4, r2, #1
 801bfa2:	f143 0500 	adc.w	r5, r3, #0
 801bfa6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801bfaa:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801bfae:	bd38      	pop	{r3, r4, r5, pc}
 801bfb0:	20000020 	.word	0x20000020
 801bfb4:	abcd330e 	.word	0xabcd330e
 801bfb8:	e66d1234 	.word	0xe66d1234
 801bfbc:	0005deec 	.word	0x0005deec
 801bfc0:	5851f42d 	.word	0x5851f42d
 801bfc4:	4c957f2d 	.word	0x4c957f2d

0801bfc8 <strncmp>:
 801bfc8:	b510      	push	{r4, lr}
 801bfca:	b16a      	cbz	r2, 801bfe8 <strncmp+0x20>
 801bfcc:	3901      	subs	r1, #1
 801bfce:	1884      	adds	r4, r0, r2
 801bfd0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bfd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bfd8:	4293      	cmp	r3, r2
 801bfda:	d103      	bne.n	801bfe4 <strncmp+0x1c>
 801bfdc:	42a0      	cmp	r0, r4
 801bfde:	d001      	beq.n	801bfe4 <strncmp+0x1c>
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d1f5      	bne.n	801bfd0 <strncmp+0x8>
 801bfe4:	1a98      	subs	r0, r3, r2
 801bfe6:	bd10      	pop	{r4, pc}
 801bfe8:	4610      	mov	r0, r2
 801bfea:	e7fc      	b.n	801bfe6 <strncmp+0x1e>

0801bfec <__utoa>:
 801bfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfee:	4b1d      	ldr	r3, [pc, #116]	; (801c064 <__utoa+0x78>)
 801bff0:	b08b      	sub	sp, #44	; 0x2c
 801bff2:	4605      	mov	r5, r0
 801bff4:	460c      	mov	r4, r1
 801bff6:	466e      	mov	r6, sp
 801bff8:	f103 0c20 	add.w	ip, r3, #32
 801bffc:	6818      	ldr	r0, [r3, #0]
 801bffe:	6859      	ldr	r1, [r3, #4]
 801c000:	4637      	mov	r7, r6
 801c002:	c703      	stmia	r7!, {r0, r1}
 801c004:	3308      	adds	r3, #8
 801c006:	4563      	cmp	r3, ip
 801c008:	463e      	mov	r6, r7
 801c00a:	d1f7      	bne.n	801bffc <__utoa+0x10>
 801c00c:	6818      	ldr	r0, [r3, #0]
 801c00e:	791b      	ldrb	r3, [r3, #4]
 801c010:	713b      	strb	r3, [r7, #4]
 801c012:	1e93      	subs	r3, r2, #2
 801c014:	2b22      	cmp	r3, #34	; 0x22
 801c016:	6038      	str	r0, [r7, #0]
 801c018:	f04f 0300 	mov.w	r3, #0
 801c01c:	d904      	bls.n	801c028 <__utoa+0x3c>
 801c01e:	7023      	strb	r3, [r4, #0]
 801c020:	461c      	mov	r4, r3
 801c022:	4620      	mov	r0, r4
 801c024:	b00b      	add	sp, #44	; 0x2c
 801c026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c028:	1e66      	subs	r6, r4, #1
 801c02a:	fbb5 f0f2 	udiv	r0, r5, r2
 801c02e:	af0a      	add	r7, sp, #40	; 0x28
 801c030:	fb02 5510 	mls	r5, r2, r0, r5
 801c034:	443d      	add	r5, r7
 801c036:	1c59      	adds	r1, r3, #1
 801c038:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 801c03c:	f806 5f01 	strb.w	r5, [r6, #1]!
 801c040:	4605      	mov	r5, r0
 801c042:	b968      	cbnz	r0, 801c060 <__utoa+0x74>
 801c044:	5460      	strb	r0, [r4, r1]
 801c046:	4423      	add	r3, r4
 801c048:	4622      	mov	r2, r4
 801c04a:	1b19      	subs	r1, r3, r4
 801c04c:	1b10      	subs	r0, r2, r4
 801c04e:	4281      	cmp	r1, r0
 801c050:	dde7      	ble.n	801c022 <__utoa+0x36>
 801c052:	7811      	ldrb	r1, [r2, #0]
 801c054:	7818      	ldrb	r0, [r3, #0]
 801c056:	f802 0b01 	strb.w	r0, [r2], #1
 801c05a:	f803 1901 	strb.w	r1, [r3], #-1
 801c05e:	e7f4      	b.n	801c04a <__utoa+0x5e>
 801c060:	460b      	mov	r3, r1
 801c062:	e7e2      	b.n	801c02a <__utoa+0x3e>
 801c064:	08020f8e 	.word	0x08020f8e

0801c068 <__swbuf_r>:
 801c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c06a:	460e      	mov	r6, r1
 801c06c:	4614      	mov	r4, r2
 801c06e:	4605      	mov	r5, r0
 801c070:	b118      	cbz	r0, 801c07a <__swbuf_r+0x12>
 801c072:	6983      	ldr	r3, [r0, #24]
 801c074:	b90b      	cbnz	r3, 801c07a <__swbuf_r+0x12>
 801c076:	f000 f9b5 	bl	801c3e4 <__sinit>
 801c07a:	4b21      	ldr	r3, [pc, #132]	; (801c100 <__swbuf_r+0x98>)
 801c07c:	429c      	cmp	r4, r3
 801c07e:	d12a      	bne.n	801c0d6 <__swbuf_r+0x6e>
 801c080:	686c      	ldr	r4, [r5, #4]
 801c082:	69a3      	ldr	r3, [r4, #24]
 801c084:	60a3      	str	r3, [r4, #8]
 801c086:	89a3      	ldrh	r3, [r4, #12]
 801c088:	071a      	lsls	r2, r3, #28
 801c08a:	d52e      	bpl.n	801c0ea <__swbuf_r+0x82>
 801c08c:	6923      	ldr	r3, [r4, #16]
 801c08e:	b363      	cbz	r3, 801c0ea <__swbuf_r+0x82>
 801c090:	6923      	ldr	r3, [r4, #16]
 801c092:	6820      	ldr	r0, [r4, #0]
 801c094:	1ac0      	subs	r0, r0, r3
 801c096:	6963      	ldr	r3, [r4, #20]
 801c098:	b2f6      	uxtb	r6, r6
 801c09a:	4283      	cmp	r3, r0
 801c09c:	4637      	mov	r7, r6
 801c09e:	dc04      	bgt.n	801c0aa <__swbuf_r+0x42>
 801c0a0:	4621      	mov	r1, r4
 801c0a2:	4628      	mov	r0, r5
 801c0a4:	f000 f934 	bl	801c310 <_fflush_r>
 801c0a8:	bb28      	cbnz	r0, 801c0f6 <__swbuf_r+0x8e>
 801c0aa:	68a3      	ldr	r3, [r4, #8]
 801c0ac:	3b01      	subs	r3, #1
 801c0ae:	60a3      	str	r3, [r4, #8]
 801c0b0:	6823      	ldr	r3, [r4, #0]
 801c0b2:	1c5a      	adds	r2, r3, #1
 801c0b4:	6022      	str	r2, [r4, #0]
 801c0b6:	701e      	strb	r6, [r3, #0]
 801c0b8:	6963      	ldr	r3, [r4, #20]
 801c0ba:	3001      	adds	r0, #1
 801c0bc:	4283      	cmp	r3, r0
 801c0be:	d004      	beq.n	801c0ca <__swbuf_r+0x62>
 801c0c0:	89a3      	ldrh	r3, [r4, #12]
 801c0c2:	07db      	lsls	r3, r3, #31
 801c0c4:	d519      	bpl.n	801c0fa <__swbuf_r+0x92>
 801c0c6:	2e0a      	cmp	r6, #10
 801c0c8:	d117      	bne.n	801c0fa <__swbuf_r+0x92>
 801c0ca:	4621      	mov	r1, r4
 801c0cc:	4628      	mov	r0, r5
 801c0ce:	f000 f91f 	bl	801c310 <_fflush_r>
 801c0d2:	b190      	cbz	r0, 801c0fa <__swbuf_r+0x92>
 801c0d4:	e00f      	b.n	801c0f6 <__swbuf_r+0x8e>
 801c0d6:	4b0b      	ldr	r3, [pc, #44]	; (801c104 <__swbuf_r+0x9c>)
 801c0d8:	429c      	cmp	r4, r3
 801c0da:	d101      	bne.n	801c0e0 <__swbuf_r+0x78>
 801c0dc:	68ac      	ldr	r4, [r5, #8]
 801c0de:	e7d0      	b.n	801c082 <__swbuf_r+0x1a>
 801c0e0:	4b09      	ldr	r3, [pc, #36]	; (801c108 <__swbuf_r+0xa0>)
 801c0e2:	429c      	cmp	r4, r3
 801c0e4:	bf08      	it	eq
 801c0e6:	68ec      	ldreq	r4, [r5, #12]
 801c0e8:	e7cb      	b.n	801c082 <__swbuf_r+0x1a>
 801c0ea:	4621      	mov	r1, r4
 801c0ec:	4628      	mov	r0, r5
 801c0ee:	f000 f81b 	bl	801c128 <__swsetup_r>
 801c0f2:	2800      	cmp	r0, #0
 801c0f4:	d0cc      	beq.n	801c090 <__swbuf_r+0x28>
 801c0f6:	f04f 37ff 	mov.w	r7, #4294967295
 801c0fa:	4638      	mov	r0, r7
 801c0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0fe:	bf00      	nop
 801c100:	080210d4 	.word	0x080210d4
 801c104:	080210f4 	.word	0x080210f4
 801c108:	080210b4 	.word	0x080210b4

0801c10c <__ascii_wctomb>:
 801c10c:	b149      	cbz	r1, 801c122 <__ascii_wctomb+0x16>
 801c10e:	2aff      	cmp	r2, #255	; 0xff
 801c110:	bf85      	ittet	hi
 801c112:	238a      	movhi	r3, #138	; 0x8a
 801c114:	6003      	strhi	r3, [r0, #0]
 801c116:	700a      	strbls	r2, [r1, #0]
 801c118:	f04f 30ff 	movhi.w	r0, #4294967295
 801c11c:	bf98      	it	ls
 801c11e:	2001      	movls	r0, #1
 801c120:	4770      	bx	lr
 801c122:	4608      	mov	r0, r1
 801c124:	4770      	bx	lr
	...

0801c128 <__swsetup_r>:
 801c128:	4b32      	ldr	r3, [pc, #200]	; (801c1f4 <__swsetup_r+0xcc>)
 801c12a:	b570      	push	{r4, r5, r6, lr}
 801c12c:	681d      	ldr	r5, [r3, #0]
 801c12e:	4606      	mov	r6, r0
 801c130:	460c      	mov	r4, r1
 801c132:	b125      	cbz	r5, 801c13e <__swsetup_r+0x16>
 801c134:	69ab      	ldr	r3, [r5, #24]
 801c136:	b913      	cbnz	r3, 801c13e <__swsetup_r+0x16>
 801c138:	4628      	mov	r0, r5
 801c13a:	f000 f953 	bl	801c3e4 <__sinit>
 801c13e:	4b2e      	ldr	r3, [pc, #184]	; (801c1f8 <__swsetup_r+0xd0>)
 801c140:	429c      	cmp	r4, r3
 801c142:	d10f      	bne.n	801c164 <__swsetup_r+0x3c>
 801c144:	686c      	ldr	r4, [r5, #4]
 801c146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c14a:	b29a      	uxth	r2, r3
 801c14c:	0715      	lsls	r5, r2, #28
 801c14e:	d42c      	bmi.n	801c1aa <__swsetup_r+0x82>
 801c150:	06d0      	lsls	r0, r2, #27
 801c152:	d411      	bmi.n	801c178 <__swsetup_r+0x50>
 801c154:	2209      	movs	r2, #9
 801c156:	6032      	str	r2, [r6, #0]
 801c158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c15c:	81a3      	strh	r3, [r4, #12]
 801c15e:	f04f 30ff 	mov.w	r0, #4294967295
 801c162:	e03e      	b.n	801c1e2 <__swsetup_r+0xba>
 801c164:	4b25      	ldr	r3, [pc, #148]	; (801c1fc <__swsetup_r+0xd4>)
 801c166:	429c      	cmp	r4, r3
 801c168:	d101      	bne.n	801c16e <__swsetup_r+0x46>
 801c16a:	68ac      	ldr	r4, [r5, #8]
 801c16c:	e7eb      	b.n	801c146 <__swsetup_r+0x1e>
 801c16e:	4b24      	ldr	r3, [pc, #144]	; (801c200 <__swsetup_r+0xd8>)
 801c170:	429c      	cmp	r4, r3
 801c172:	bf08      	it	eq
 801c174:	68ec      	ldreq	r4, [r5, #12]
 801c176:	e7e6      	b.n	801c146 <__swsetup_r+0x1e>
 801c178:	0751      	lsls	r1, r2, #29
 801c17a:	d512      	bpl.n	801c1a2 <__swsetup_r+0x7a>
 801c17c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c17e:	b141      	cbz	r1, 801c192 <__swsetup_r+0x6a>
 801c180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c184:	4299      	cmp	r1, r3
 801c186:	d002      	beq.n	801c18e <__swsetup_r+0x66>
 801c188:	4630      	mov	r0, r6
 801c18a:	f000 fa21 	bl	801c5d0 <_free_r>
 801c18e:	2300      	movs	r3, #0
 801c190:	6363      	str	r3, [r4, #52]	; 0x34
 801c192:	89a3      	ldrh	r3, [r4, #12]
 801c194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c198:	81a3      	strh	r3, [r4, #12]
 801c19a:	2300      	movs	r3, #0
 801c19c:	6063      	str	r3, [r4, #4]
 801c19e:	6923      	ldr	r3, [r4, #16]
 801c1a0:	6023      	str	r3, [r4, #0]
 801c1a2:	89a3      	ldrh	r3, [r4, #12]
 801c1a4:	f043 0308 	orr.w	r3, r3, #8
 801c1a8:	81a3      	strh	r3, [r4, #12]
 801c1aa:	6923      	ldr	r3, [r4, #16]
 801c1ac:	b94b      	cbnz	r3, 801c1c2 <__swsetup_r+0x9a>
 801c1ae:	89a3      	ldrh	r3, [r4, #12]
 801c1b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c1b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c1b8:	d003      	beq.n	801c1c2 <__swsetup_r+0x9a>
 801c1ba:	4621      	mov	r1, r4
 801c1bc:	4630      	mov	r0, r6
 801c1be:	f000 f9bf 	bl	801c540 <__smakebuf_r>
 801c1c2:	89a2      	ldrh	r2, [r4, #12]
 801c1c4:	f012 0301 	ands.w	r3, r2, #1
 801c1c8:	d00c      	beq.n	801c1e4 <__swsetup_r+0xbc>
 801c1ca:	2300      	movs	r3, #0
 801c1cc:	60a3      	str	r3, [r4, #8]
 801c1ce:	6963      	ldr	r3, [r4, #20]
 801c1d0:	425b      	negs	r3, r3
 801c1d2:	61a3      	str	r3, [r4, #24]
 801c1d4:	6923      	ldr	r3, [r4, #16]
 801c1d6:	b953      	cbnz	r3, 801c1ee <__swsetup_r+0xc6>
 801c1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c1e0:	d1ba      	bne.n	801c158 <__swsetup_r+0x30>
 801c1e2:	bd70      	pop	{r4, r5, r6, pc}
 801c1e4:	0792      	lsls	r2, r2, #30
 801c1e6:	bf58      	it	pl
 801c1e8:	6963      	ldrpl	r3, [r4, #20]
 801c1ea:	60a3      	str	r3, [r4, #8]
 801c1ec:	e7f2      	b.n	801c1d4 <__swsetup_r+0xac>
 801c1ee:	2000      	movs	r0, #0
 801c1f0:	e7f7      	b.n	801c1e2 <__swsetup_r+0xba>
 801c1f2:	bf00      	nop
 801c1f4:	20000020 	.word	0x20000020
 801c1f8:	080210d4 	.word	0x080210d4
 801c1fc:	080210f4 	.word	0x080210f4
 801c200:	080210b4 	.word	0x080210b4

0801c204 <__sflush_r>:
 801c204:	898a      	ldrh	r2, [r1, #12]
 801c206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c20a:	4605      	mov	r5, r0
 801c20c:	0710      	lsls	r0, r2, #28
 801c20e:	460c      	mov	r4, r1
 801c210:	d458      	bmi.n	801c2c4 <__sflush_r+0xc0>
 801c212:	684b      	ldr	r3, [r1, #4]
 801c214:	2b00      	cmp	r3, #0
 801c216:	dc05      	bgt.n	801c224 <__sflush_r+0x20>
 801c218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	dc02      	bgt.n	801c224 <__sflush_r+0x20>
 801c21e:	2000      	movs	r0, #0
 801c220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c226:	2e00      	cmp	r6, #0
 801c228:	d0f9      	beq.n	801c21e <__sflush_r+0x1a>
 801c22a:	2300      	movs	r3, #0
 801c22c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c230:	682f      	ldr	r7, [r5, #0]
 801c232:	6a21      	ldr	r1, [r4, #32]
 801c234:	602b      	str	r3, [r5, #0]
 801c236:	d032      	beq.n	801c29e <__sflush_r+0x9a>
 801c238:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c23a:	89a3      	ldrh	r3, [r4, #12]
 801c23c:	075a      	lsls	r2, r3, #29
 801c23e:	d505      	bpl.n	801c24c <__sflush_r+0x48>
 801c240:	6863      	ldr	r3, [r4, #4]
 801c242:	1ac0      	subs	r0, r0, r3
 801c244:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c246:	b10b      	cbz	r3, 801c24c <__sflush_r+0x48>
 801c248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c24a:	1ac0      	subs	r0, r0, r3
 801c24c:	2300      	movs	r3, #0
 801c24e:	4602      	mov	r2, r0
 801c250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c252:	6a21      	ldr	r1, [r4, #32]
 801c254:	4628      	mov	r0, r5
 801c256:	47b0      	blx	r6
 801c258:	1c43      	adds	r3, r0, #1
 801c25a:	89a3      	ldrh	r3, [r4, #12]
 801c25c:	d106      	bne.n	801c26c <__sflush_r+0x68>
 801c25e:	6829      	ldr	r1, [r5, #0]
 801c260:	291d      	cmp	r1, #29
 801c262:	d848      	bhi.n	801c2f6 <__sflush_r+0xf2>
 801c264:	4a29      	ldr	r2, [pc, #164]	; (801c30c <__sflush_r+0x108>)
 801c266:	40ca      	lsrs	r2, r1
 801c268:	07d6      	lsls	r6, r2, #31
 801c26a:	d544      	bpl.n	801c2f6 <__sflush_r+0xf2>
 801c26c:	2200      	movs	r2, #0
 801c26e:	6062      	str	r2, [r4, #4]
 801c270:	04d9      	lsls	r1, r3, #19
 801c272:	6922      	ldr	r2, [r4, #16]
 801c274:	6022      	str	r2, [r4, #0]
 801c276:	d504      	bpl.n	801c282 <__sflush_r+0x7e>
 801c278:	1c42      	adds	r2, r0, #1
 801c27a:	d101      	bne.n	801c280 <__sflush_r+0x7c>
 801c27c:	682b      	ldr	r3, [r5, #0]
 801c27e:	b903      	cbnz	r3, 801c282 <__sflush_r+0x7e>
 801c280:	6560      	str	r0, [r4, #84]	; 0x54
 801c282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c284:	602f      	str	r7, [r5, #0]
 801c286:	2900      	cmp	r1, #0
 801c288:	d0c9      	beq.n	801c21e <__sflush_r+0x1a>
 801c28a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c28e:	4299      	cmp	r1, r3
 801c290:	d002      	beq.n	801c298 <__sflush_r+0x94>
 801c292:	4628      	mov	r0, r5
 801c294:	f000 f99c 	bl	801c5d0 <_free_r>
 801c298:	2000      	movs	r0, #0
 801c29a:	6360      	str	r0, [r4, #52]	; 0x34
 801c29c:	e7c0      	b.n	801c220 <__sflush_r+0x1c>
 801c29e:	2301      	movs	r3, #1
 801c2a0:	4628      	mov	r0, r5
 801c2a2:	47b0      	blx	r6
 801c2a4:	1c41      	adds	r1, r0, #1
 801c2a6:	d1c8      	bne.n	801c23a <__sflush_r+0x36>
 801c2a8:	682b      	ldr	r3, [r5, #0]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d0c5      	beq.n	801c23a <__sflush_r+0x36>
 801c2ae:	2b1d      	cmp	r3, #29
 801c2b0:	d001      	beq.n	801c2b6 <__sflush_r+0xb2>
 801c2b2:	2b16      	cmp	r3, #22
 801c2b4:	d101      	bne.n	801c2ba <__sflush_r+0xb6>
 801c2b6:	602f      	str	r7, [r5, #0]
 801c2b8:	e7b1      	b.n	801c21e <__sflush_r+0x1a>
 801c2ba:	89a3      	ldrh	r3, [r4, #12]
 801c2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2c0:	81a3      	strh	r3, [r4, #12]
 801c2c2:	e7ad      	b.n	801c220 <__sflush_r+0x1c>
 801c2c4:	690f      	ldr	r7, [r1, #16]
 801c2c6:	2f00      	cmp	r7, #0
 801c2c8:	d0a9      	beq.n	801c21e <__sflush_r+0x1a>
 801c2ca:	0793      	lsls	r3, r2, #30
 801c2cc:	680e      	ldr	r6, [r1, #0]
 801c2ce:	bf08      	it	eq
 801c2d0:	694b      	ldreq	r3, [r1, #20]
 801c2d2:	600f      	str	r7, [r1, #0]
 801c2d4:	bf18      	it	ne
 801c2d6:	2300      	movne	r3, #0
 801c2d8:	eba6 0807 	sub.w	r8, r6, r7
 801c2dc:	608b      	str	r3, [r1, #8]
 801c2de:	f1b8 0f00 	cmp.w	r8, #0
 801c2e2:	dd9c      	ble.n	801c21e <__sflush_r+0x1a>
 801c2e4:	4643      	mov	r3, r8
 801c2e6:	463a      	mov	r2, r7
 801c2e8:	6a21      	ldr	r1, [r4, #32]
 801c2ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c2ec:	4628      	mov	r0, r5
 801c2ee:	47b0      	blx	r6
 801c2f0:	2800      	cmp	r0, #0
 801c2f2:	dc06      	bgt.n	801c302 <__sflush_r+0xfe>
 801c2f4:	89a3      	ldrh	r3, [r4, #12]
 801c2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2fa:	81a3      	strh	r3, [r4, #12]
 801c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 801c300:	e78e      	b.n	801c220 <__sflush_r+0x1c>
 801c302:	4407      	add	r7, r0
 801c304:	eba8 0800 	sub.w	r8, r8, r0
 801c308:	e7e9      	b.n	801c2de <__sflush_r+0xda>
 801c30a:	bf00      	nop
 801c30c:	20400001 	.word	0x20400001

0801c310 <_fflush_r>:
 801c310:	b538      	push	{r3, r4, r5, lr}
 801c312:	690b      	ldr	r3, [r1, #16]
 801c314:	4605      	mov	r5, r0
 801c316:	460c      	mov	r4, r1
 801c318:	b1db      	cbz	r3, 801c352 <_fflush_r+0x42>
 801c31a:	b118      	cbz	r0, 801c324 <_fflush_r+0x14>
 801c31c:	6983      	ldr	r3, [r0, #24]
 801c31e:	b90b      	cbnz	r3, 801c324 <_fflush_r+0x14>
 801c320:	f000 f860 	bl	801c3e4 <__sinit>
 801c324:	4b0c      	ldr	r3, [pc, #48]	; (801c358 <_fflush_r+0x48>)
 801c326:	429c      	cmp	r4, r3
 801c328:	d109      	bne.n	801c33e <_fflush_r+0x2e>
 801c32a:	686c      	ldr	r4, [r5, #4]
 801c32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c330:	b17b      	cbz	r3, 801c352 <_fflush_r+0x42>
 801c332:	4621      	mov	r1, r4
 801c334:	4628      	mov	r0, r5
 801c336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c33a:	f7ff bf63 	b.w	801c204 <__sflush_r>
 801c33e:	4b07      	ldr	r3, [pc, #28]	; (801c35c <_fflush_r+0x4c>)
 801c340:	429c      	cmp	r4, r3
 801c342:	d101      	bne.n	801c348 <_fflush_r+0x38>
 801c344:	68ac      	ldr	r4, [r5, #8]
 801c346:	e7f1      	b.n	801c32c <_fflush_r+0x1c>
 801c348:	4b05      	ldr	r3, [pc, #20]	; (801c360 <_fflush_r+0x50>)
 801c34a:	429c      	cmp	r4, r3
 801c34c:	bf08      	it	eq
 801c34e:	68ec      	ldreq	r4, [r5, #12]
 801c350:	e7ec      	b.n	801c32c <_fflush_r+0x1c>
 801c352:	2000      	movs	r0, #0
 801c354:	bd38      	pop	{r3, r4, r5, pc}
 801c356:	bf00      	nop
 801c358:	080210d4 	.word	0x080210d4
 801c35c:	080210f4 	.word	0x080210f4
 801c360:	080210b4 	.word	0x080210b4

0801c364 <std>:
 801c364:	2300      	movs	r3, #0
 801c366:	b510      	push	{r4, lr}
 801c368:	4604      	mov	r4, r0
 801c36a:	e9c0 3300 	strd	r3, r3, [r0]
 801c36e:	6083      	str	r3, [r0, #8]
 801c370:	8181      	strh	r1, [r0, #12]
 801c372:	6643      	str	r3, [r0, #100]	; 0x64
 801c374:	81c2      	strh	r2, [r0, #14]
 801c376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c37a:	6183      	str	r3, [r0, #24]
 801c37c:	4619      	mov	r1, r3
 801c37e:	2208      	movs	r2, #8
 801c380:	305c      	adds	r0, #92	; 0x5c
 801c382:	f7ff fd69 	bl	801be58 <memset>
 801c386:	4b05      	ldr	r3, [pc, #20]	; (801c39c <std+0x38>)
 801c388:	6263      	str	r3, [r4, #36]	; 0x24
 801c38a:	4b05      	ldr	r3, [pc, #20]	; (801c3a0 <std+0x3c>)
 801c38c:	62a3      	str	r3, [r4, #40]	; 0x28
 801c38e:	4b05      	ldr	r3, [pc, #20]	; (801c3a4 <std+0x40>)
 801c390:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c392:	4b05      	ldr	r3, [pc, #20]	; (801c3a8 <std+0x44>)
 801c394:	6224      	str	r4, [r4, #32]
 801c396:	6323      	str	r3, [r4, #48]	; 0x30
 801c398:	bd10      	pop	{r4, pc}
 801c39a:	bf00      	nop
 801c39c:	0801ccd1 	.word	0x0801ccd1
 801c3a0:	0801ccf3 	.word	0x0801ccf3
 801c3a4:	0801cd2b 	.word	0x0801cd2b
 801c3a8:	0801cd4f 	.word	0x0801cd4f

0801c3ac <_cleanup_r>:
 801c3ac:	4901      	ldr	r1, [pc, #4]	; (801c3b4 <_cleanup_r+0x8>)
 801c3ae:	f000 b885 	b.w	801c4bc <_fwalk_reent>
 801c3b2:	bf00      	nop
 801c3b4:	0801c311 	.word	0x0801c311

0801c3b8 <__sfmoreglue>:
 801c3b8:	b570      	push	{r4, r5, r6, lr}
 801c3ba:	1e4a      	subs	r2, r1, #1
 801c3bc:	2568      	movs	r5, #104	; 0x68
 801c3be:	4355      	muls	r5, r2
 801c3c0:	460e      	mov	r6, r1
 801c3c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c3c6:	f000 f951 	bl	801c66c <_malloc_r>
 801c3ca:	4604      	mov	r4, r0
 801c3cc:	b140      	cbz	r0, 801c3e0 <__sfmoreglue+0x28>
 801c3ce:	2100      	movs	r1, #0
 801c3d0:	e9c0 1600 	strd	r1, r6, [r0]
 801c3d4:	300c      	adds	r0, #12
 801c3d6:	60a0      	str	r0, [r4, #8]
 801c3d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c3dc:	f7ff fd3c 	bl	801be58 <memset>
 801c3e0:	4620      	mov	r0, r4
 801c3e2:	bd70      	pop	{r4, r5, r6, pc}

0801c3e4 <__sinit>:
 801c3e4:	6983      	ldr	r3, [r0, #24]
 801c3e6:	b510      	push	{r4, lr}
 801c3e8:	4604      	mov	r4, r0
 801c3ea:	bb33      	cbnz	r3, 801c43a <__sinit+0x56>
 801c3ec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c3f0:	6503      	str	r3, [r0, #80]	; 0x50
 801c3f2:	4b12      	ldr	r3, [pc, #72]	; (801c43c <__sinit+0x58>)
 801c3f4:	4a12      	ldr	r2, [pc, #72]	; (801c440 <__sinit+0x5c>)
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	6282      	str	r2, [r0, #40]	; 0x28
 801c3fa:	4298      	cmp	r0, r3
 801c3fc:	bf04      	itt	eq
 801c3fe:	2301      	moveq	r3, #1
 801c400:	6183      	streq	r3, [r0, #24]
 801c402:	f000 f81f 	bl	801c444 <__sfp>
 801c406:	6060      	str	r0, [r4, #4]
 801c408:	4620      	mov	r0, r4
 801c40a:	f000 f81b 	bl	801c444 <__sfp>
 801c40e:	60a0      	str	r0, [r4, #8]
 801c410:	4620      	mov	r0, r4
 801c412:	f000 f817 	bl	801c444 <__sfp>
 801c416:	2200      	movs	r2, #0
 801c418:	60e0      	str	r0, [r4, #12]
 801c41a:	2104      	movs	r1, #4
 801c41c:	6860      	ldr	r0, [r4, #4]
 801c41e:	f7ff ffa1 	bl	801c364 <std>
 801c422:	2201      	movs	r2, #1
 801c424:	2109      	movs	r1, #9
 801c426:	68a0      	ldr	r0, [r4, #8]
 801c428:	f7ff ff9c 	bl	801c364 <std>
 801c42c:	2202      	movs	r2, #2
 801c42e:	2112      	movs	r1, #18
 801c430:	68e0      	ldr	r0, [r4, #12]
 801c432:	f7ff ff97 	bl	801c364 <std>
 801c436:	2301      	movs	r3, #1
 801c438:	61a3      	str	r3, [r4, #24]
 801c43a:	bd10      	pop	{r4, pc}
 801c43c:	08020f80 	.word	0x08020f80
 801c440:	0801c3ad 	.word	0x0801c3ad

0801c444 <__sfp>:
 801c444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c446:	4b1b      	ldr	r3, [pc, #108]	; (801c4b4 <__sfp+0x70>)
 801c448:	681e      	ldr	r6, [r3, #0]
 801c44a:	69b3      	ldr	r3, [r6, #24]
 801c44c:	4607      	mov	r7, r0
 801c44e:	b913      	cbnz	r3, 801c456 <__sfp+0x12>
 801c450:	4630      	mov	r0, r6
 801c452:	f7ff ffc7 	bl	801c3e4 <__sinit>
 801c456:	3648      	adds	r6, #72	; 0x48
 801c458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c45c:	3b01      	subs	r3, #1
 801c45e:	d503      	bpl.n	801c468 <__sfp+0x24>
 801c460:	6833      	ldr	r3, [r6, #0]
 801c462:	b133      	cbz	r3, 801c472 <__sfp+0x2e>
 801c464:	6836      	ldr	r6, [r6, #0]
 801c466:	e7f7      	b.n	801c458 <__sfp+0x14>
 801c468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c46c:	b16d      	cbz	r5, 801c48a <__sfp+0x46>
 801c46e:	3468      	adds	r4, #104	; 0x68
 801c470:	e7f4      	b.n	801c45c <__sfp+0x18>
 801c472:	2104      	movs	r1, #4
 801c474:	4638      	mov	r0, r7
 801c476:	f7ff ff9f 	bl	801c3b8 <__sfmoreglue>
 801c47a:	6030      	str	r0, [r6, #0]
 801c47c:	2800      	cmp	r0, #0
 801c47e:	d1f1      	bne.n	801c464 <__sfp+0x20>
 801c480:	230c      	movs	r3, #12
 801c482:	603b      	str	r3, [r7, #0]
 801c484:	4604      	mov	r4, r0
 801c486:	4620      	mov	r0, r4
 801c488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c48a:	4b0b      	ldr	r3, [pc, #44]	; (801c4b8 <__sfp+0x74>)
 801c48c:	6665      	str	r5, [r4, #100]	; 0x64
 801c48e:	e9c4 5500 	strd	r5, r5, [r4]
 801c492:	60a5      	str	r5, [r4, #8]
 801c494:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c498:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c49c:	2208      	movs	r2, #8
 801c49e:	4629      	mov	r1, r5
 801c4a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c4a4:	f7ff fcd8 	bl	801be58 <memset>
 801c4a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c4ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c4b0:	e7e9      	b.n	801c486 <__sfp+0x42>
 801c4b2:	bf00      	nop
 801c4b4:	08020f80 	.word	0x08020f80
 801c4b8:	ffff0001 	.word	0xffff0001

0801c4bc <_fwalk_reent>:
 801c4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4c0:	4680      	mov	r8, r0
 801c4c2:	4689      	mov	r9, r1
 801c4c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c4c8:	2600      	movs	r6, #0
 801c4ca:	b914      	cbnz	r4, 801c4d2 <_fwalk_reent+0x16>
 801c4cc:	4630      	mov	r0, r6
 801c4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c4d6:	3f01      	subs	r7, #1
 801c4d8:	d501      	bpl.n	801c4de <_fwalk_reent+0x22>
 801c4da:	6824      	ldr	r4, [r4, #0]
 801c4dc:	e7f5      	b.n	801c4ca <_fwalk_reent+0xe>
 801c4de:	89ab      	ldrh	r3, [r5, #12]
 801c4e0:	2b01      	cmp	r3, #1
 801c4e2:	d907      	bls.n	801c4f4 <_fwalk_reent+0x38>
 801c4e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c4e8:	3301      	adds	r3, #1
 801c4ea:	d003      	beq.n	801c4f4 <_fwalk_reent+0x38>
 801c4ec:	4629      	mov	r1, r5
 801c4ee:	4640      	mov	r0, r8
 801c4f0:	47c8      	blx	r9
 801c4f2:	4306      	orrs	r6, r0
 801c4f4:	3568      	adds	r5, #104	; 0x68
 801c4f6:	e7ee      	b.n	801c4d6 <_fwalk_reent+0x1a>

0801c4f8 <__swhatbuf_r>:
 801c4f8:	b570      	push	{r4, r5, r6, lr}
 801c4fa:	460e      	mov	r6, r1
 801c4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c500:	2900      	cmp	r1, #0
 801c502:	b096      	sub	sp, #88	; 0x58
 801c504:	4614      	mov	r4, r2
 801c506:	461d      	mov	r5, r3
 801c508:	da07      	bge.n	801c51a <__swhatbuf_r+0x22>
 801c50a:	2300      	movs	r3, #0
 801c50c:	602b      	str	r3, [r5, #0]
 801c50e:	89b3      	ldrh	r3, [r6, #12]
 801c510:	061a      	lsls	r2, r3, #24
 801c512:	d410      	bmi.n	801c536 <__swhatbuf_r+0x3e>
 801c514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c518:	e00e      	b.n	801c538 <__swhatbuf_r+0x40>
 801c51a:	466a      	mov	r2, sp
 801c51c:	f000 fc3e 	bl	801cd9c <_fstat_r>
 801c520:	2800      	cmp	r0, #0
 801c522:	dbf2      	blt.n	801c50a <__swhatbuf_r+0x12>
 801c524:	9a01      	ldr	r2, [sp, #4]
 801c526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c52a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c52e:	425a      	negs	r2, r3
 801c530:	415a      	adcs	r2, r3
 801c532:	602a      	str	r2, [r5, #0]
 801c534:	e7ee      	b.n	801c514 <__swhatbuf_r+0x1c>
 801c536:	2340      	movs	r3, #64	; 0x40
 801c538:	2000      	movs	r0, #0
 801c53a:	6023      	str	r3, [r4, #0]
 801c53c:	b016      	add	sp, #88	; 0x58
 801c53e:	bd70      	pop	{r4, r5, r6, pc}

0801c540 <__smakebuf_r>:
 801c540:	898b      	ldrh	r3, [r1, #12]
 801c542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c544:	079d      	lsls	r5, r3, #30
 801c546:	4606      	mov	r6, r0
 801c548:	460c      	mov	r4, r1
 801c54a:	d507      	bpl.n	801c55c <__smakebuf_r+0x1c>
 801c54c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c550:	6023      	str	r3, [r4, #0]
 801c552:	6123      	str	r3, [r4, #16]
 801c554:	2301      	movs	r3, #1
 801c556:	6163      	str	r3, [r4, #20]
 801c558:	b002      	add	sp, #8
 801c55a:	bd70      	pop	{r4, r5, r6, pc}
 801c55c:	ab01      	add	r3, sp, #4
 801c55e:	466a      	mov	r2, sp
 801c560:	f7ff ffca 	bl	801c4f8 <__swhatbuf_r>
 801c564:	9900      	ldr	r1, [sp, #0]
 801c566:	4605      	mov	r5, r0
 801c568:	4630      	mov	r0, r6
 801c56a:	f000 f87f 	bl	801c66c <_malloc_r>
 801c56e:	b948      	cbnz	r0, 801c584 <__smakebuf_r+0x44>
 801c570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c574:	059a      	lsls	r2, r3, #22
 801c576:	d4ef      	bmi.n	801c558 <__smakebuf_r+0x18>
 801c578:	f023 0303 	bic.w	r3, r3, #3
 801c57c:	f043 0302 	orr.w	r3, r3, #2
 801c580:	81a3      	strh	r3, [r4, #12]
 801c582:	e7e3      	b.n	801c54c <__smakebuf_r+0xc>
 801c584:	4b0d      	ldr	r3, [pc, #52]	; (801c5bc <__smakebuf_r+0x7c>)
 801c586:	62b3      	str	r3, [r6, #40]	; 0x28
 801c588:	89a3      	ldrh	r3, [r4, #12]
 801c58a:	6020      	str	r0, [r4, #0]
 801c58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c590:	81a3      	strh	r3, [r4, #12]
 801c592:	9b00      	ldr	r3, [sp, #0]
 801c594:	6163      	str	r3, [r4, #20]
 801c596:	9b01      	ldr	r3, [sp, #4]
 801c598:	6120      	str	r0, [r4, #16]
 801c59a:	b15b      	cbz	r3, 801c5b4 <__smakebuf_r+0x74>
 801c59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c5a0:	4630      	mov	r0, r6
 801c5a2:	f000 fc0d 	bl	801cdc0 <_isatty_r>
 801c5a6:	b128      	cbz	r0, 801c5b4 <__smakebuf_r+0x74>
 801c5a8:	89a3      	ldrh	r3, [r4, #12]
 801c5aa:	f023 0303 	bic.w	r3, r3, #3
 801c5ae:	f043 0301 	orr.w	r3, r3, #1
 801c5b2:	81a3      	strh	r3, [r4, #12]
 801c5b4:	89a3      	ldrh	r3, [r4, #12]
 801c5b6:	431d      	orrs	r5, r3
 801c5b8:	81a5      	strh	r5, [r4, #12]
 801c5ba:	e7cd      	b.n	801c558 <__smakebuf_r+0x18>
 801c5bc:	0801c3ad 	.word	0x0801c3ad

0801c5c0 <malloc>:
 801c5c0:	4b02      	ldr	r3, [pc, #8]	; (801c5cc <malloc+0xc>)
 801c5c2:	4601      	mov	r1, r0
 801c5c4:	6818      	ldr	r0, [r3, #0]
 801c5c6:	f000 b851 	b.w	801c66c <_malloc_r>
 801c5ca:	bf00      	nop
 801c5cc:	20000020 	.word	0x20000020

0801c5d0 <_free_r>:
 801c5d0:	b538      	push	{r3, r4, r5, lr}
 801c5d2:	4605      	mov	r5, r0
 801c5d4:	2900      	cmp	r1, #0
 801c5d6:	d045      	beq.n	801c664 <_free_r+0x94>
 801c5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c5dc:	1f0c      	subs	r4, r1, #4
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	bfb8      	it	lt
 801c5e2:	18e4      	addlt	r4, r4, r3
 801c5e4:	f000 fc0e 	bl	801ce04 <__malloc_lock>
 801c5e8:	4a1f      	ldr	r2, [pc, #124]	; (801c668 <_free_r+0x98>)
 801c5ea:	6813      	ldr	r3, [r2, #0]
 801c5ec:	4610      	mov	r0, r2
 801c5ee:	b933      	cbnz	r3, 801c5fe <_free_r+0x2e>
 801c5f0:	6063      	str	r3, [r4, #4]
 801c5f2:	6014      	str	r4, [r2, #0]
 801c5f4:	4628      	mov	r0, r5
 801c5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c5fa:	f000 bc04 	b.w	801ce06 <__malloc_unlock>
 801c5fe:	42a3      	cmp	r3, r4
 801c600:	d90c      	bls.n	801c61c <_free_r+0x4c>
 801c602:	6821      	ldr	r1, [r4, #0]
 801c604:	1862      	adds	r2, r4, r1
 801c606:	4293      	cmp	r3, r2
 801c608:	bf04      	itt	eq
 801c60a:	681a      	ldreq	r2, [r3, #0]
 801c60c:	685b      	ldreq	r3, [r3, #4]
 801c60e:	6063      	str	r3, [r4, #4]
 801c610:	bf04      	itt	eq
 801c612:	1852      	addeq	r2, r2, r1
 801c614:	6022      	streq	r2, [r4, #0]
 801c616:	6004      	str	r4, [r0, #0]
 801c618:	e7ec      	b.n	801c5f4 <_free_r+0x24>
 801c61a:	4613      	mov	r3, r2
 801c61c:	685a      	ldr	r2, [r3, #4]
 801c61e:	b10a      	cbz	r2, 801c624 <_free_r+0x54>
 801c620:	42a2      	cmp	r2, r4
 801c622:	d9fa      	bls.n	801c61a <_free_r+0x4a>
 801c624:	6819      	ldr	r1, [r3, #0]
 801c626:	1858      	adds	r0, r3, r1
 801c628:	42a0      	cmp	r0, r4
 801c62a:	d10b      	bne.n	801c644 <_free_r+0x74>
 801c62c:	6820      	ldr	r0, [r4, #0]
 801c62e:	4401      	add	r1, r0
 801c630:	1858      	adds	r0, r3, r1
 801c632:	4282      	cmp	r2, r0
 801c634:	6019      	str	r1, [r3, #0]
 801c636:	d1dd      	bne.n	801c5f4 <_free_r+0x24>
 801c638:	6810      	ldr	r0, [r2, #0]
 801c63a:	6852      	ldr	r2, [r2, #4]
 801c63c:	605a      	str	r2, [r3, #4]
 801c63e:	4401      	add	r1, r0
 801c640:	6019      	str	r1, [r3, #0]
 801c642:	e7d7      	b.n	801c5f4 <_free_r+0x24>
 801c644:	d902      	bls.n	801c64c <_free_r+0x7c>
 801c646:	230c      	movs	r3, #12
 801c648:	602b      	str	r3, [r5, #0]
 801c64a:	e7d3      	b.n	801c5f4 <_free_r+0x24>
 801c64c:	6820      	ldr	r0, [r4, #0]
 801c64e:	1821      	adds	r1, r4, r0
 801c650:	428a      	cmp	r2, r1
 801c652:	bf04      	itt	eq
 801c654:	6811      	ldreq	r1, [r2, #0]
 801c656:	6852      	ldreq	r2, [r2, #4]
 801c658:	6062      	str	r2, [r4, #4]
 801c65a:	bf04      	itt	eq
 801c65c:	1809      	addeq	r1, r1, r0
 801c65e:	6021      	streq	r1, [r4, #0]
 801c660:	605c      	str	r4, [r3, #4]
 801c662:	e7c7      	b.n	801c5f4 <_free_r+0x24>
 801c664:	bd38      	pop	{r3, r4, r5, pc}
 801c666:	bf00      	nop
 801c668:	20008dac 	.word	0x20008dac

0801c66c <_malloc_r>:
 801c66c:	b570      	push	{r4, r5, r6, lr}
 801c66e:	1ccd      	adds	r5, r1, #3
 801c670:	f025 0503 	bic.w	r5, r5, #3
 801c674:	3508      	adds	r5, #8
 801c676:	2d0c      	cmp	r5, #12
 801c678:	bf38      	it	cc
 801c67a:	250c      	movcc	r5, #12
 801c67c:	2d00      	cmp	r5, #0
 801c67e:	4606      	mov	r6, r0
 801c680:	db01      	blt.n	801c686 <_malloc_r+0x1a>
 801c682:	42a9      	cmp	r1, r5
 801c684:	d903      	bls.n	801c68e <_malloc_r+0x22>
 801c686:	230c      	movs	r3, #12
 801c688:	6033      	str	r3, [r6, #0]
 801c68a:	2000      	movs	r0, #0
 801c68c:	bd70      	pop	{r4, r5, r6, pc}
 801c68e:	f000 fbb9 	bl	801ce04 <__malloc_lock>
 801c692:	4a21      	ldr	r2, [pc, #132]	; (801c718 <_malloc_r+0xac>)
 801c694:	6814      	ldr	r4, [r2, #0]
 801c696:	4621      	mov	r1, r4
 801c698:	b991      	cbnz	r1, 801c6c0 <_malloc_r+0x54>
 801c69a:	4c20      	ldr	r4, [pc, #128]	; (801c71c <_malloc_r+0xb0>)
 801c69c:	6823      	ldr	r3, [r4, #0]
 801c69e:	b91b      	cbnz	r3, 801c6a8 <_malloc_r+0x3c>
 801c6a0:	4630      	mov	r0, r6
 801c6a2:	f000 fb05 	bl	801ccb0 <_sbrk_r>
 801c6a6:	6020      	str	r0, [r4, #0]
 801c6a8:	4629      	mov	r1, r5
 801c6aa:	4630      	mov	r0, r6
 801c6ac:	f000 fb00 	bl	801ccb0 <_sbrk_r>
 801c6b0:	1c43      	adds	r3, r0, #1
 801c6b2:	d124      	bne.n	801c6fe <_malloc_r+0x92>
 801c6b4:	230c      	movs	r3, #12
 801c6b6:	6033      	str	r3, [r6, #0]
 801c6b8:	4630      	mov	r0, r6
 801c6ba:	f000 fba4 	bl	801ce06 <__malloc_unlock>
 801c6be:	e7e4      	b.n	801c68a <_malloc_r+0x1e>
 801c6c0:	680b      	ldr	r3, [r1, #0]
 801c6c2:	1b5b      	subs	r3, r3, r5
 801c6c4:	d418      	bmi.n	801c6f8 <_malloc_r+0x8c>
 801c6c6:	2b0b      	cmp	r3, #11
 801c6c8:	d90f      	bls.n	801c6ea <_malloc_r+0x7e>
 801c6ca:	600b      	str	r3, [r1, #0]
 801c6cc:	50cd      	str	r5, [r1, r3]
 801c6ce:	18cc      	adds	r4, r1, r3
 801c6d0:	4630      	mov	r0, r6
 801c6d2:	f000 fb98 	bl	801ce06 <__malloc_unlock>
 801c6d6:	f104 000b 	add.w	r0, r4, #11
 801c6da:	1d23      	adds	r3, r4, #4
 801c6dc:	f020 0007 	bic.w	r0, r0, #7
 801c6e0:	1ac3      	subs	r3, r0, r3
 801c6e2:	d0d3      	beq.n	801c68c <_malloc_r+0x20>
 801c6e4:	425a      	negs	r2, r3
 801c6e6:	50e2      	str	r2, [r4, r3]
 801c6e8:	e7d0      	b.n	801c68c <_malloc_r+0x20>
 801c6ea:	428c      	cmp	r4, r1
 801c6ec:	684b      	ldr	r3, [r1, #4]
 801c6ee:	bf16      	itet	ne
 801c6f0:	6063      	strne	r3, [r4, #4]
 801c6f2:	6013      	streq	r3, [r2, #0]
 801c6f4:	460c      	movne	r4, r1
 801c6f6:	e7eb      	b.n	801c6d0 <_malloc_r+0x64>
 801c6f8:	460c      	mov	r4, r1
 801c6fa:	6849      	ldr	r1, [r1, #4]
 801c6fc:	e7cc      	b.n	801c698 <_malloc_r+0x2c>
 801c6fe:	1cc4      	adds	r4, r0, #3
 801c700:	f024 0403 	bic.w	r4, r4, #3
 801c704:	42a0      	cmp	r0, r4
 801c706:	d005      	beq.n	801c714 <_malloc_r+0xa8>
 801c708:	1a21      	subs	r1, r4, r0
 801c70a:	4630      	mov	r0, r6
 801c70c:	f000 fad0 	bl	801ccb0 <_sbrk_r>
 801c710:	3001      	adds	r0, #1
 801c712:	d0cf      	beq.n	801c6b4 <_malloc_r+0x48>
 801c714:	6025      	str	r5, [r4, #0]
 801c716:	e7db      	b.n	801c6d0 <_malloc_r+0x64>
 801c718:	20008dac 	.word	0x20008dac
 801c71c:	20008db0 	.word	0x20008db0

0801c720 <__sfputc_r>:
 801c720:	6893      	ldr	r3, [r2, #8]
 801c722:	3b01      	subs	r3, #1
 801c724:	2b00      	cmp	r3, #0
 801c726:	b410      	push	{r4}
 801c728:	6093      	str	r3, [r2, #8]
 801c72a:	da08      	bge.n	801c73e <__sfputc_r+0x1e>
 801c72c:	6994      	ldr	r4, [r2, #24]
 801c72e:	42a3      	cmp	r3, r4
 801c730:	db01      	blt.n	801c736 <__sfputc_r+0x16>
 801c732:	290a      	cmp	r1, #10
 801c734:	d103      	bne.n	801c73e <__sfputc_r+0x1e>
 801c736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c73a:	f7ff bc95 	b.w	801c068 <__swbuf_r>
 801c73e:	6813      	ldr	r3, [r2, #0]
 801c740:	1c58      	adds	r0, r3, #1
 801c742:	6010      	str	r0, [r2, #0]
 801c744:	7019      	strb	r1, [r3, #0]
 801c746:	4608      	mov	r0, r1
 801c748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c74c:	4770      	bx	lr

0801c74e <__sfputs_r>:
 801c74e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c750:	4606      	mov	r6, r0
 801c752:	460f      	mov	r7, r1
 801c754:	4614      	mov	r4, r2
 801c756:	18d5      	adds	r5, r2, r3
 801c758:	42ac      	cmp	r4, r5
 801c75a:	d101      	bne.n	801c760 <__sfputs_r+0x12>
 801c75c:	2000      	movs	r0, #0
 801c75e:	e007      	b.n	801c770 <__sfputs_r+0x22>
 801c760:	463a      	mov	r2, r7
 801c762:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c766:	4630      	mov	r0, r6
 801c768:	f7ff ffda 	bl	801c720 <__sfputc_r>
 801c76c:	1c43      	adds	r3, r0, #1
 801c76e:	d1f3      	bne.n	801c758 <__sfputs_r+0xa>
 801c770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c774 <_vfiprintf_r>:
 801c774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c778:	460c      	mov	r4, r1
 801c77a:	b09d      	sub	sp, #116	; 0x74
 801c77c:	4617      	mov	r7, r2
 801c77e:	461d      	mov	r5, r3
 801c780:	4606      	mov	r6, r0
 801c782:	b118      	cbz	r0, 801c78c <_vfiprintf_r+0x18>
 801c784:	6983      	ldr	r3, [r0, #24]
 801c786:	b90b      	cbnz	r3, 801c78c <_vfiprintf_r+0x18>
 801c788:	f7ff fe2c 	bl	801c3e4 <__sinit>
 801c78c:	4b7c      	ldr	r3, [pc, #496]	; (801c980 <_vfiprintf_r+0x20c>)
 801c78e:	429c      	cmp	r4, r3
 801c790:	d158      	bne.n	801c844 <_vfiprintf_r+0xd0>
 801c792:	6874      	ldr	r4, [r6, #4]
 801c794:	89a3      	ldrh	r3, [r4, #12]
 801c796:	0718      	lsls	r0, r3, #28
 801c798:	d55e      	bpl.n	801c858 <_vfiprintf_r+0xe4>
 801c79a:	6923      	ldr	r3, [r4, #16]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d05b      	beq.n	801c858 <_vfiprintf_r+0xe4>
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	9309      	str	r3, [sp, #36]	; 0x24
 801c7a4:	2320      	movs	r3, #32
 801c7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c7aa:	2330      	movs	r3, #48	; 0x30
 801c7ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c7b0:	9503      	str	r5, [sp, #12]
 801c7b2:	f04f 0b01 	mov.w	fp, #1
 801c7b6:	46b8      	mov	r8, r7
 801c7b8:	4645      	mov	r5, r8
 801c7ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c7be:	b10b      	cbz	r3, 801c7c4 <_vfiprintf_r+0x50>
 801c7c0:	2b25      	cmp	r3, #37	; 0x25
 801c7c2:	d154      	bne.n	801c86e <_vfiprintf_r+0xfa>
 801c7c4:	ebb8 0a07 	subs.w	sl, r8, r7
 801c7c8:	d00b      	beq.n	801c7e2 <_vfiprintf_r+0x6e>
 801c7ca:	4653      	mov	r3, sl
 801c7cc:	463a      	mov	r2, r7
 801c7ce:	4621      	mov	r1, r4
 801c7d0:	4630      	mov	r0, r6
 801c7d2:	f7ff ffbc 	bl	801c74e <__sfputs_r>
 801c7d6:	3001      	adds	r0, #1
 801c7d8:	f000 80c2 	beq.w	801c960 <_vfiprintf_r+0x1ec>
 801c7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7de:	4453      	add	r3, sl
 801c7e0:	9309      	str	r3, [sp, #36]	; 0x24
 801c7e2:	f898 3000 	ldrb.w	r3, [r8]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	f000 80ba 	beq.w	801c960 <_vfiprintf_r+0x1ec>
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	f04f 32ff 	mov.w	r2, #4294967295
 801c7f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c7f6:	9304      	str	r3, [sp, #16]
 801c7f8:	9307      	str	r3, [sp, #28]
 801c7fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c7fe:	931a      	str	r3, [sp, #104]	; 0x68
 801c800:	46a8      	mov	r8, r5
 801c802:	2205      	movs	r2, #5
 801c804:	f818 1b01 	ldrb.w	r1, [r8], #1
 801c808:	485e      	ldr	r0, [pc, #376]	; (801c984 <_vfiprintf_r+0x210>)
 801c80a:	f7e3 fd09 	bl	8000220 <memchr>
 801c80e:	9b04      	ldr	r3, [sp, #16]
 801c810:	bb78      	cbnz	r0, 801c872 <_vfiprintf_r+0xfe>
 801c812:	06d9      	lsls	r1, r3, #27
 801c814:	bf44      	itt	mi
 801c816:	2220      	movmi	r2, #32
 801c818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c81c:	071a      	lsls	r2, r3, #28
 801c81e:	bf44      	itt	mi
 801c820:	222b      	movmi	r2, #43	; 0x2b
 801c822:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c826:	782a      	ldrb	r2, [r5, #0]
 801c828:	2a2a      	cmp	r2, #42	; 0x2a
 801c82a:	d02a      	beq.n	801c882 <_vfiprintf_r+0x10e>
 801c82c:	9a07      	ldr	r2, [sp, #28]
 801c82e:	46a8      	mov	r8, r5
 801c830:	2000      	movs	r0, #0
 801c832:	250a      	movs	r5, #10
 801c834:	4641      	mov	r1, r8
 801c836:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c83a:	3b30      	subs	r3, #48	; 0x30
 801c83c:	2b09      	cmp	r3, #9
 801c83e:	d969      	bls.n	801c914 <_vfiprintf_r+0x1a0>
 801c840:	b360      	cbz	r0, 801c89c <_vfiprintf_r+0x128>
 801c842:	e024      	b.n	801c88e <_vfiprintf_r+0x11a>
 801c844:	4b50      	ldr	r3, [pc, #320]	; (801c988 <_vfiprintf_r+0x214>)
 801c846:	429c      	cmp	r4, r3
 801c848:	d101      	bne.n	801c84e <_vfiprintf_r+0xda>
 801c84a:	68b4      	ldr	r4, [r6, #8]
 801c84c:	e7a2      	b.n	801c794 <_vfiprintf_r+0x20>
 801c84e:	4b4f      	ldr	r3, [pc, #316]	; (801c98c <_vfiprintf_r+0x218>)
 801c850:	429c      	cmp	r4, r3
 801c852:	bf08      	it	eq
 801c854:	68f4      	ldreq	r4, [r6, #12]
 801c856:	e79d      	b.n	801c794 <_vfiprintf_r+0x20>
 801c858:	4621      	mov	r1, r4
 801c85a:	4630      	mov	r0, r6
 801c85c:	f7ff fc64 	bl	801c128 <__swsetup_r>
 801c860:	2800      	cmp	r0, #0
 801c862:	d09d      	beq.n	801c7a0 <_vfiprintf_r+0x2c>
 801c864:	f04f 30ff 	mov.w	r0, #4294967295
 801c868:	b01d      	add	sp, #116	; 0x74
 801c86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c86e:	46a8      	mov	r8, r5
 801c870:	e7a2      	b.n	801c7b8 <_vfiprintf_r+0x44>
 801c872:	4a44      	ldr	r2, [pc, #272]	; (801c984 <_vfiprintf_r+0x210>)
 801c874:	1a80      	subs	r0, r0, r2
 801c876:	fa0b f000 	lsl.w	r0, fp, r0
 801c87a:	4318      	orrs	r0, r3
 801c87c:	9004      	str	r0, [sp, #16]
 801c87e:	4645      	mov	r5, r8
 801c880:	e7be      	b.n	801c800 <_vfiprintf_r+0x8c>
 801c882:	9a03      	ldr	r2, [sp, #12]
 801c884:	1d11      	adds	r1, r2, #4
 801c886:	6812      	ldr	r2, [r2, #0]
 801c888:	9103      	str	r1, [sp, #12]
 801c88a:	2a00      	cmp	r2, #0
 801c88c:	db01      	blt.n	801c892 <_vfiprintf_r+0x11e>
 801c88e:	9207      	str	r2, [sp, #28]
 801c890:	e004      	b.n	801c89c <_vfiprintf_r+0x128>
 801c892:	4252      	negs	r2, r2
 801c894:	f043 0302 	orr.w	r3, r3, #2
 801c898:	9207      	str	r2, [sp, #28]
 801c89a:	9304      	str	r3, [sp, #16]
 801c89c:	f898 3000 	ldrb.w	r3, [r8]
 801c8a0:	2b2e      	cmp	r3, #46	; 0x2e
 801c8a2:	d10e      	bne.n	801c8c2 <_vfiprintf_r+0x14e>
 801c8a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c8a8:	2b2a      	cmp	r3, #42	; 0x2a
 801c8aa:	d138      	bne.n	801c91e <_vfiprintf_r+0x1aa>
 801c8ac:	9b03      	ldr	r3, [sp, #12]
 801c8ae:	1d1a      	adds	r2, r3, #4
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	9203      	str	r2, [sp, #12]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	bfb8      	it	lt
 801c8b8:	f04f 33ff 	movlt.w	r3, #4294967295
 801c8bc:	f108 0802 	add.w	r8, r8, #2
 801c8c0:	9305      	str	r3, [sp, #20]
 801c8c2:	4d33      	ldr	r5, [pc, #204]	; (801c990 <_vfiprintf_r+0x21c>)
 801c8c4:	f898 1000 	ldrb.w	r1, [r8]
 801c8c8:	2203      	movs	r2, #3
 801c8ca:	4628      	mov	r0, r5
 801c8cc:	f7e3 fca8 	bl	8000220 <memchr>
 801c8d0:	b140      	cbz	r0, 801c8e4 <_vfiprintf_r+0x170>
 801c8d2:	2340      	movs	r3, #64	; 0x40
 801c8d4:	1b40      	subs	r0, r0, r5
 801c8d6:	fa03 f000 	lsl.w	r0, r3, r0
 801c8da:	9b04      	ldr	r3, [sp, #16]
 801c8dc:	4303      	orrs	r3, r0
 801c8de:	f108 0801 	add.w	r8, r8, #1
 801c8e2:	9304      	str	r3, [sp, #16]
 801c8e4:	f898 1000 	ldrb.w	r1, [r8]
 801c8e8:	482a      	ldr	r0, [pc, #168]	; (801c994 <_vfiprintf_r+0x220>)
 801c8ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c8ee:	2206      	movs	r2, #6
 801c8f0:	f108 0701 	add.w	r7, r8, #1
 801c8f4:	f7e3 fc94 	bl	8000220 <memchr>
 801c8f8:	2800      	cmp	r0, #0
 801c8fa:	d037      	beq.n	801c96c <_vfiprintf_r+0x1f8>
 801c8fc:	4b26      	ldr	r3, [pc, #152]	; (801c998 <_vfiprintf_r+0x224>)
 801c8fe:	bb1b      	cbnz	r3, 801c948 <_vfiprintf_r+0x1d4>
 801c900:	9b03      	ldr	r3, [sp, #12]
 801c902:	3307      	adds	r3, #7
 801c904:	f023 0307 	bic.w	r3, r3, #7
 801c908:	3308      	adds	r3, #8
 801c90a:	9303      	str	r3, [sp, #12]
 801c90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c90e:	444b      	add	r3, r9
 801c910:	9309      	str	r3, [sp, #36]	; 0x24
 801c912:	e750      	b.n	801c7b6 <_vfiprintf_r+0x42>
 801c914:	fb05 3202 	mla	r2, r5, r2, r3
 801c918:	2001      	movs	r0, #1
 801c91a:	4688      	mov	r8, r1
 801c91c:	e78a      	b.n	801c834 <_vfiprintf_r+0xc0>
 801c91e:	2300      	movs	r3, #0
 801c920:	f108 0801 	add.w	r8, r8, #1
 801c924:	9305      	str	r3, [sp, #20]
 801c926:	4619      	mov	r1, r3
 801c928:	250a      	movs	r5, #10
 801c92a:	4640      	mov	r0, r8
 801c92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c930:	3a30      	subs	r2, #48	; 0x30
 801c932:	2a09      	cmp	r2, #9
 801c934:	d903      	bls.n	801c93e <_vfiprintf_r+0x1ca>
 801c936:	2b00      	cmp	r3, #0
 801c938:	d0c3      	beq.n	801c8c2 <_vfiprintf_r+0x14e>
 801c93a:	9105      	str	r1, [sp, #20]
 801c93c:	e7c1      	b.n	801c8c2 <_vfiprintf_r+0x14e>
 801c93e:	fb05 2101 	mla	r1, r5, r1, r2
 801c942:	2301      	movs	r3, #1
 801c944:	4680      	mov	r8, r0
 801c946:	e7f0      	b.n	801c92a <_vfiprintf_r+0x1b6>
 801c948:	ab03      	add	r3, sp, #12
 801c94a:	9300      	str	r3, [sp, #0]
 801c94c:	4622      	mov	r2, r4
 801c94e:	4b13      	ldr	r3, [pc, #76]	; (801c99c <_vfiprintf_r+0x228>)
 801c950:	a904      	add	r1, sp, #16
 801c952:	4630      	mov	r0, r6
 801c954:	f3af 8000 	nop.w
 801c958:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c95c:	4681      	mov	r9, r0
 801c95e:	d1d5      	bne.n	801c90c <_vfiprintf_r+0x198>
 801c960:	89a3      	ldrh	r3, [r4, #12]
 801c962:	065b      	lsls	r3, r3, #25
 801c964:	f53f af7e 	bmi.w	801c864 <_vfiprintf_r+0xf0>
 801c968:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c96a:	e77d      	b.n	801c868 <_vfiprintf_r+0xf4>
 801c96c:	ab03      	add	r3, sp, #12
 801c96e:	9300      	str	r3, [sp, #0]
 801c970:	4622      	mov	r2, r4
 801c972:	4b0a      	ldr	r3, [pc, #40]	; (801c99c <_vfiprintf_r+0x228>)
 801c974:	a904      	add	r1, sp, #16
 801c976:	4630      	mov	r0, r6
 801c978:	f000 f888 	bl	801ca8c <_printf_i>
 801c97c:	e7ec      	b.n	801c958 <_vfiprintf_r+0x1e4>
 801c97e:	bf00      	nop
 801c980:	080210d4 	.word	0x080210d4
 801c984:	08021114 	.word	0x08021114
 801c988:	080210f4 	.word	0x080210f4
 801c98c:	080210b4 	.word	0x080210b4
 801c990:	0802111a 	.word	0x0802111a
 801c994:	0802111e 	.word	0x0802111e
 801c998:	00000000 	.word	0x00000000
 801c99c:	0801c74f 	.word	0x0801c74f

0801c9a0 <_printf_common>:
 801c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9a4:	4691      	mov	r9, r2
 801c9a6:	461f      	mov	r7, r3
 801c9a8:	688a      	ldr	r2, [r1, #8]
 801c9aa:	690b      	ldr	r3, [r1, #16]
 801c9ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c9b0:	4293      	cmp	r3, r2
 801c9b2:	bfb8      	it	lt
 801c9b4:	4613      	movlt	r3, r2
 801c9b6:	f8c9 3000 	str.w	r3, [r9]
 801c9ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c9be:	4606      	mov	r6, r0
 801c9c0:	460c      	mov	r4, r1
 801c9c2:	b112      	cbz	r2, 801c9ca <_printf_common+0x2a>
 801c9c4:	3301      	adds	r3, #1
 801c9c6:	f8c9 3000 	str.w	r3, [r9]
 801c9ca:	6823      	ldr	r3, [r4, #0]
 801c9cc:	0699      	lsls	r1, r3, #26
 801c9ce:	bf42      	ittt	mi
 801c9d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 801c9d4:	3302      	addmi	r3, #2
 801c9d6:	f8c9 3000 	strmi.w	r3, [r9]
 801c9da:	6825      	ldr	r5, [r4, #0]
 801c9dc:	f015 0506 	ands.w	r5, r5, #6
 801c9e0:	d107      	bne.n	801c9f2 <_printf_common+0x52>
 801c9e2:	f104 0a19 	add.w	sl, r4, #25
 801c9e6:	68e3      	ldr	r3, [r4, #12]
 801c9e8:	f8d9 2000 	ldr.w	r2, [r9]
 801c9ec:	1a9b      	subs	r3, r3, r2
 801c9ee:	42ab      	cmp	r3, r5
 801c9f0:	dc28      	bgt.n	801ca44 <_printf_common+0xa4>
 801c9f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801c9f6:	6822      	ldr	r2, [r4, #0]
 801c9f8:	3300      	adds	r3, #0
 801c9fa:	bf18      	it	ne
 801c9fc:	2301      	movne	r3, #1
 801c9fe:	0692      	lsls	r2, r2, #26
 801ca00:	d42d      	bmi.n	801ca5e <_printf_common+0xbe>
 801ca02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ca06:	4639      	mov	r1, r7
 801ca08:	4630      	mov	r0, r6
 801ca0a:	47c0      	blx	r8
 801ca0c:	3001      	adds	r0, #1
 801ca0e:	d020      	beq.n	801ca52 <_printf_common+0xb2>
 801ca10:	6823      	ldr	r3, [r4, #0]
 801ca12:	68e5      	ldr	r5, [r4, #12]
 801ca14:	f8d9 2000 	ldr.w	r2, [r9]
 801ca18:	f003 0306 	and.w	r3, r3, #6
 801ca1c:	2b04      	cmp	r3, #4
 801ca1e:	bf08      	it	eq
 801ca20:	1aad      	subeq	r5, r5, r2
 801ca22:	68a3      	ldr	r3, [r4, #8]
 801ca24:	6922      	ldr	r2, [r4, #16]
 801ca26:	bf0c      	ite	eq
 801ca28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ca2c:	2500      	movne	r5, #0
 801ca2e:	4293      	cmp	r3, r2
 801ca30:	bfc4      	itt	gt
 801ca32:	1a9b      	subgt	r3, r3, r2
 801ca34:	18ed      	addgt	r5, r5, r3
 801ca36:	f04f 0900 	mov.w	r9, #0
 801ca3a:	341a      	adds	r4, #26
 801ca3c:	454d      	cmp	r5, r9
 801ca3e:	d11a      	bne.n	801ca76 <_printf_common+0xd6>
 801ca40:	2000      	movs	r0, #0
 801ca42:	e008      	b.n	801ca56 <_printf_common+0xb6>
 801ca44:	2301      	movs	r3, #1
 801ca46:	4652      	mov	r2, sl
 801ca48:	4639      	mov	r1, r7
 801ca4a:	4630      	mov	r0, r6
 801ca4c:	47c0      	blx	r8
 801ca4e:	3001      	adds	r0, #1
 801ca50:	d103      	bne.n	801ca5a <_printf_common+0xba>
 801ca52:	f04f 30ff 	mov.w	r0, #4294967295
 801ca56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca5a:	3501      	adds	r5, #1
 801ca5c:	e7c3      	b.n	801c9e6 <_printf_common+0x46>
 801ca5e:	18e1      	adds	r1, r4, r3
 801ca60:	1c5a      	adds	r2, r3, #1
 801ca62:	2030      	movs	r0, #48	; 0x30
 801ca64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ca68:	4422      	add	r2, r4
 801ca6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ca6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ca72:	3302      	adds	r3, #2
 801ca74:	e7c5      	b.n	801ca02 <_printf_common+0x62>
 801ca76:	2301      	movs	r3, #1
 801ca78:	4622      	mov	r2, r4
 801ca7a:	4639      	mov	r1, r7
 801ca7c:	4630      	mov	r0, r6
 801ca7e:	47c0      	blx	r8
 801ca80:	3001      	adds	r0, #1
 801ca82:	d0e6      	beq.n	801ca52 <_printf_common+0xb2>
 801ca84:	f109 0901 	add.w	r9, r9, #1
 801ca88:	e7d8      	b.n	801ca3c <_printf_common+0x9c>
	...

0801ca8c <_printf_i>:
 801ca8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ca94:	460c      	mov	r4, r1
 801ca96:	7e09      	ldrb	r1, [r1, #24]
 801ca98:	b085      	sub	sp, #20
 801ca9a:	296e      	cmp	r1, #110	; 0x6e
 801ca9c:	4617      	mov	r7, r2
 801ca9e:	4606      	mov	r6, r0
 801caa0:	4698      	mov	r8, r3
 801caa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801caa4:	f000 80b3 	beq.w	801cc0e <_printf_i+0x182>
 801caa8:	d822      	bhi.n	801caf0 <_printf_i+0x64>
 801caaa:	2963      	cmp	r1, #99	; 0x63
 801caac:	d036      	beq.n	801cb1c <_printf_i+0x90>
 801caae:	d80a      	bhi.n	801cac6 <_printf_i+0x3a>
 801cab0:	2900      	cmp	r1, #0
 801cab2:	f000 80b9 	beq.w	801cc28 <_printf_i+0x19c>
 801cab6:	2958      	cmp	r1, #88	; 0x58
 801cab8:	f000 8083 	beq.w	801cbc2 <_printf_i+0x136>
 801cabc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cac0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801cac4:	e032      	b.n	801cb2c <_printf_i+0xa0>
 801cac6:	2964      	cmp	r1, #100	; 0x64
 801cac8:	d001      	beq.n	801cace <_printf_i+0x42>
 801caca:	2969      	cmp	r1, #105	; 0x69
 801cacc:	d1f6      	bne.n	801cabc <_printf_i+0x30>
 801cace:	6820      	ldr	r0, [r4, #0]
 801cad0:	6813      	ldr	r3, [r2, #0]
 801cad2:	0605      	lsls	r5, r0, #24
 801cad4:	f103 0104 	add.w	r1, r3, #4
 801cad8:	d52a      	bpl.n	801cb30 <_printf_i+0xa4>
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	6011      	str	r1, [r2, #0]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	da03      	bge.n	801caea <_printf_i+0x5e>
 801cae2:	222d      	movs	r2, #45	; 0x2d
 801cae4:	425b      	negs	r3, r3
 801cae6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801caea:	486f      	ldr	r0, [pc, #444]	; (801cca8 <_printf_i+0x21c>)
 801caec:	220a      	movs	r2, #10
 801caee:	e039      	b.n	801cb64 <_printf_i+0xd8>
 801caf0:	2973      	cmp	r1, #115	; 0x73
 801caf2:	f000 809d 	beq.w	801cc30 <_printf_i+0x1a4>
 801caf6:	d808      	bhi.n	801cb0a <_printf_i+0x7e>
 801caf8:	296f      	cmp	r1, #111	; 0x6f
 801cafa:	d020      	beq.n	801cb3e <_printf_i+0xb2>
 801cafc:	2970      	cmp	r1, #112	; 0x70
 801cafe:	d1dd      	bne.n	801cabc <_printf_i+0x30>
 801cb00:	6823      	ldr	r3, [r4, #0]
 801cb02:	f043 0320 	orr.w	r3, r3, #32
 801cb06:	6023      	str	r3, [r4, #0]
 801cb08:	e003      	b.n	801cb12 <_printf_i+0x86>
 801cb0a:	2975      	cmp	r1, #117	; 0x75
 801cb0c:	d017      	beq.n	801cb3e <_printf_i+0xb2>
 801cb0e:	2978      	cmp	r1, #120	; 0x78
 801cb10:	d1d4      	bne.n	801cabc <_printf_i+0x30>
 801cb12:	2378      	movs	r3, #120	; 0x78
 801cb14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801cb18:	4864      	ldr	r0, [pc, #400]	; (801ccac <_printf_i+0x220>)
 801cb1a:	e055      	b.n	801cbc8 <_printf_i+0x13c>
 801cb1c:	6813      	ldr	r3, [r2, #0]
 801cb1e:	1d19      	adds	r1, r3, #4
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	6011      	str	r1, [r2, #0]
 801cb24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cb28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cb2c:	2301      	movs	r3, #1
 801cb2e:	e08c      	b.n	801cc4a <_printf_i+0x1be>
 801cb30:	681b      	ldr	r3, [r3, #0]
 801cb32:	6011      	str	r1, [r2, #0]
 801cb34:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cb38:	bf18      	it	ne
 801cb3a:	b21b      	sxthne	r3, r3
 801cb3c:	e7cf      	b.n	801cade <_printf_i+0x52>
 801cb3e:	6813      	ldr	r3, [r2, #0]
 801cb40:	6825      	ldr	r5, [r4, #0]
 801cb42:	1d18      	adds	r0, r3, #4
 801cb44:	6010      	str	r0, [r2, #0]
 801cb46:	0628      	lsls	r0, r5, #24
 801cb48:	d501      	bpl.n	801cb4e <_printf_i+0xc2>
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	e002      	b.n	801cb54 <_printf_i+0xc8>
 801cb4e:	0668      	lsls	r0, r5, #25
 801cb50:	d5fb      	bpl.n	801cb4a <_printf_i+0xbe>
 801cb52:	881b      	ldrh	r3, [r3, #0]
 801cb54:	4854      	ldr	r0, [pc, #336]	; (801cca8 <_printf_i+0x21c>)
 801cb56:	296f      	cmp	r1, #111	; 0x6f
 801cb58:	bf14      	ite	ne
 801cb5a:	220a      	movne	r2, #10
 801cb5c:	2208      	moveq	r2, #8
 801cb5e:	2100      	movs	r1, #0
 801cb60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cb64:	6865      	ldr	r5, [r4, #4]
 801cb66:	60a5      	str	r5, [r4, #8]
 801cb68:	2d00      	cmp	r5, #0
 801cb6a:	f2c0 8095 	blt.w	801cc98 <_printf_i+0x20c>
 801cb6e:	6821      	ldr	r1, [r4, #0]
 801cb70:	f021 0104 	bic.w	r1, r1, #4
 801cb74:	6021      	str	r1, [r4, #0]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d13d      	bne.n	801cbf6 <_printf_i+0x16a>
 801cb7a:	2d00      	cmp	r5, #0
 801cb7c:	f040 808e 	bne.w	801cc9c <_printf_i+0x210>
 801cb80:	4665      	mov	r5, ip
 801cb82:	2a08      	cmp	r2, #8
 801cb84:	d10b      	bne.n	801cb9e <_printf_i+0x112>
 801cb86:	6823      	ldr	r3, [r4, #0]
 801cb88:	07db      	lsls	r3, r3, #31
 801cb8a:	d508      	bpl.n	801cb9e <_printf_i+0x112>
 801cb8c:	6923      	ldr	r3, [r4, #16]
 801cb8e:	6862      	ldr	r2, [r4, #4]
 801cb90:	429a      	cmp	r2, r3
 801cb92:	bfde      	ittt	le
 801cb94:	2330      	movle	r3, #48	; 0x30
 801cb96:	f805 3c01 	strble.w	r3, [r5, #-1]
 801cb9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801cb9e:	ebac 0305 	sub.w	r3, ip, r5
 801cba2:	6123      	str	r3, [r4, #16]
 801cba4:	f8cd 8000 	str.w	r8, [sp]
 801cba8:	463b      	mov	r3, r7
 801cbaa:	aa03      	add	r2, sp, #12
 801cbac:	4621      	mov	r1, r4
 801cbae:	4630      	mov	r0, r6
 801cbb0:	f7ff fef6 	bl	801c9a0 <_printf_common>
 801cbb4:	3001      	adds	r0, #1
 801cbb6:	d14d      	bne.n	801cc54 <_printf_i+0x1c8>
 801cbb8:	f04f 30ff 	mov.w	r0, #4294967295
 801cbbc:	b005      	add	sp, #20
 801cbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cbc2:	4839      	ldr	r0, [pc, #228]	; (801cca8 <_printf_i+0x21c>)
 801cbc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801cbc8:	6813      	ldr	r3, [r2, #0]
 801cbca:	6821      	ldr	r1, [r4, #0]
 801cbcc:	1d1d      	adds	r5, r3, #4
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	6015      	str	r5, [r2, #0]
 801cbd2:	060a      	lsls	r2, r1, #24
 801cbd4:	d50b      	bpl.n	801cbee <_printf_i+0x162>
 801cbd6:	07ca      	lsls	r2, r1, #31
 801cbd8:	bf44      	itt	mi
 801cbda:	f041 0120 	orrmi.w	r1, r1, #32
 801cbde:	6021      	strmi	r1, [r4, #0]
 801cbe0:	b91b      	cbnz	r3, 801cbea <_printf_i+0x15e>
 801cbe2:	6822      	ldr	r2, [r4, #0]
 801cbe4:	f022 0220 	bic.w	r2, r2, #32
 801cbe8:	6022      	str	r2, [r4, #0]
 801cbea:	2210      	movs	r2, #16
 801cbec:	e7b7      	b.n	801cb5e <_printf_i+0xd2>
 801cbee:	064d      	lsls	r5, r1, #25
 801cbf0:	bf48      	it	mi
 801cbf2:	b29b      	uxthmi	r3, r3
 801cbf4:	e7ef      	b.n	801cbd6 <_printf_i+0x14a>
 801cbf6:	4665      	mov	r5, ip
 801cbf8:	fbb3 f1f2 	udiv	r1, r3, r2
 801cbfc:	fb02 3311 	mls	r3, r2, r1, r3
 801cc00:	5cc3      	ldrb	r3, [r0, r3]
 801cc02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801cc06:	460b      	mov	r3, r1
 801cc08:	2900      	cmp	r1, #0
 801cc0a:	d1f5      	bne.n	801cbf8 <_printf_i+0x16c>
 801cc0c:	e7b9      	b.n	801cb82 <_printf_i+0xf6>
 801cc0e:	6813      	ldr	r3, [r2, #0]
 801cc10:	6825      	ldr	r5, [r4, #0]
 801cc12:	6961      	ldr	r1, [r4, #20]
 801cc14:	1d18      	adds	r0, r3, #4
 801cc16:	6010      	str	r0, [r2, #0]
 801cc18:	0628      	lsls	r0, r5, #24
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	d501      	bpl.n	801cc22 <_printf_i+0x196>
 801cc1e:	6019      	str	r1, [r3, #0]
 801cc20:	e002      	b.n	801cc28 <_printf_i+0x19c>
 801cc22:	066a      	lsls	r2, r5, #25
 801cc24:	d5fb      	bpl.n	801cc1e <_printf_i+0x192>
 801cc26:	8019      	strh	r1, [r3, #0]
 801cc28:	2300      	movs	r3, #0
 801cc2a:	6123      	str	r3, [r4, #16]
 801cc2c:	4665      	mov	r5, ip
 801cc2e:	e7b9      	b.n	801cba4 <_printf_i+0x118>
 801cc30:	6813      	ldr	r3, [r2, #0]
 801cc32:	1d19      	adds	r1, r3, #4
 801cc34:	6011      	str	r1, [r2, #0]
 801cc36:	681d      	ldr	r5, [r3, #0]
 801cc38:	6862      	ldr	r2, [r4, #4]
 801cc3a:	2100      	movs	r1, #0
 801cc3c:	4628      	mov	r0, r5
 801cc3e:	f7e3 faef 	bl	8000220 <memchr>
 801cc42:	b108      	cbz	r0, 801cc48 <_printf_i+0x1bc>
 801cc44:	1b40      	subs	r0, r0, r5
 801cc46:	6060      	str	r0, [r4, #4]
 801cc48:	6863      	ldr	r3, [r4, #4]
 801cc4a:	6123      	str	r3, [r4, #16]
 801cc4c:	2300      	movs	r3, #0
 801cc4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cc52:	e7a7      	b.n	801cba4 <_printf_i+0x118>
 801cc54:	6923      	ldr	r3, [r4, #16]
 801cc56:	462a      	mov	r2, r5
 801cc58:	4639      	mov	r1, r7
 801cc5a:	4630      	mov	r0, r6
 801cc5c:	47c0      	blx	r8
 801cc5e:	3001      	adds	r0, #1
 801cc60:	d0aa      	beq.n	801cbb8 <_printf_i+0x12c>
 801cc62:	6823      	ldr	r3, [r4, #0]
 801cc64:	079b      	lsls	r3, r3, #30
 801cc66:	d413      	bmi.n	801cc90 <_printf_i+0x204>
 801cc68:	68e0      	ldr	r0, [r4, #12]
 801cc6a:	9b03      	ldr	r3, [sp, #12]
 801cc6c:	4298      	cmp	r0, r3
 801cc6e:	bfb8      	it	lt
 801cc70:	4618      	movlt	r0, r3
 801cc72:	e7a3      	b.n	801cbbc <_printf_i+0x130>
 801cc74:	2301      	movs	r3, #1
 801cc76:	464a      	mov	r2, r9
 801cc78:	4639      	mov	r1, r7
 801cc7a:	4630      	mov	r0, r6
 801cc7c:	47c0      	blx	r8
 801cc7e:	3001      	adds	r0, #1
 801cc80:	d09a      	beq.n	801cbb8 <_printf_i+0x12c>
 801cc82:	3501      	adds	r5, #1
 801cc84:	68e3      	ldr	r3, [r4, #12]
 801cc86:	9a03      	ldr	r2, [sp, #12]
 801cc88:	1a9b      	subs	r3, r3, r2
 801cc8a:	42ab      	cmp	r3, r5
 801cc8c:	dcf2      	bgt.n	801cc74 <_printf_i+0x1e8>
 801cc8e:	e7eb      	b.n	801cc68 <_printf_i+0x1dc>
 801cc90:	2500      	movs	r5, #0
 801cc92:	f104 0919 	add.w	r9, r4, #25
 801cc96:	e7f5      	b.n	801cc84 <_printf_i+0x1f8>
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d1ac      	bne.n	801cbf6 <_printf_i+0x16a>
 801cc9c:	7803      	ldrb	r3, [r0, #0]
 801cc9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cca2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cca6:	e76c      	b.n	801cb82 <_printf_i+0xf6>
 801cca8:	08021125 	.word	0x08021125
 801ccac:	08021136 	.word	0x08021136

0801ccb0 <_sbrk_r>:
 801ccb0:	b538      	push	{r3, r4, r5, lr}
 801ccb2:	4c06      	ldr	r4, [pc, #24]	; (801cccc <_sbrk_r+0x1c>)
 801ccb4:	2300      	movs	r3, #0
 801ccb6:	4605      	mov	r5, r0
 801ccb8:	4608      	mov	r0, r1
 801ccba:	6023      	str	r3, [r4, #0]
 801ccbc:	f7fe ffc0 	bl	801bc40 <_sbrk>
 801ccc0:	1c43      	adds	r3, r0, #1
 801ccc2:	d102      	bne.n	801ccca <_sbrk_r+0x1a>
 801ccc4:	6823      	ldr	r3, [r4, #0]
 801ccc6:	b103      	cbz	r3, 801ccca <_sbrk_r+0x1a>
 801ccc8:	602b      	str	r3, [r5, #0]
 801ccca:	bd38      	pop	{r3, r4, r5, pc}
 801cccc:	2000c594 	.word	0x2000c594

0801ccd0 <__sread>:
 801ccd0:	b510      	push	{r4, lr}
 801ccd2:	460c      	mov	r4, r1
 801ccd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccd8:	f000 f896 	bl	801ce08 <_read_r>
 801ccdc:	2800      	cmp	r0, #0
 801ccde:	bfab      	itete	ge
 801cce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cce2:	89a3      	ldrhlt	r3, [r4, #12]
 801cce4:	181b      	addge	r3, r3, r0
 801cce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ccea:	bfac      	ite	ge
 801ccec:	6563      	strge	r3, [r4, #84]	; 0x54
 801ccee:	81a3      	strhlt	r3, [r4, #12]
 801ccf0:	bd10      	pop	{r4, pc}

0801ccf2 <__swrite>:
 801ccf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf6:	461f      	mov	r7, r3
 801ccf8:	898b      	ldrh	r3, [r1, #12]
 801ccfa:	05db      	lsls	r3, r3, #23
 801ccfc:	4605      	mov	r5, r0
 801ccfe:	460c      	mov	r4, r1
 801cd00:	4616      	mov	r6, r2
 801cd02:	d505      	bpl.n	801cd10 <__swrite+0x1e>
 801cd04:	2302      	movs	r3, #2
 801cd06:	2200      	movs	r2, #0
 801cd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd0c:	f000 f868 	bl	801cde0 <_lseek_r>
 801cd10:	89a3      	ldrh	r3, [r4, #12]
 801cd12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cd1a:	81a3      	strh	r3, [r4, #12]
 801cd1c:	4632      	mov	r2, r6
 801cd1e:	463b      	mov	r3, r7
 801cd20:	4628      	mov	r0, r5
 801cd22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd26:	f000 b817 	b.w	801cd58 <_write_r>

0801cd2a <__sseek>:
 801cd2a:	b510      	push	{r4, lr}
 801cd2c:	460c      	mov	r4, r1
 801cd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd32:	f000 f855 	bl	801cde0 <_lseek_r>
 801cd36:	1c43      	adds	r3, r0, #1
 801cd38:	89a3      	ldrh	r3, [r4, #12]
 801cd3a:	bf15      	itete	ne
 801cd3c:	6560      	strne	r0, [r4, #84]	; 0x54
 801cd3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cd42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cd46:	81a3      	strheq	r3, [r4, #12]
 801cd48:	bf18      	it	ne
 801cd4a:	81a3      	strhne	r3, [r4, #12]
 801cd4c:	bd10      	pop	{r4, pc}

0801cd4e <__sclose>:
 801cd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd52:	f000 b813 	b.w	801cd7c <_close_r>
	...

0801cd58 <_write_r>:
 801cd58:	b538      	push	{r3, r4, r5, lr}
 801cd5a:	4c07      	ldr	r4, [pc, #28]	; (801cd78 <_write_r+0x20>)
 801cd5c:	4605      	mov	r5, r0
 801cd5e:	4608      	mov	r0, r1
 801cd60:	4611      	mov	r1, r2
 801cd62:	2200      	movs	r2, #0
 801cd64:	6022      	str	r2, [r4, #0]
 801cd66:	461a      	mov	r2, r3
 801cd68:	f7fe fda1 	bl	801b8ae <_write>
 801cd6c:	1c43      	adds	r3, r0, #1
 801cd6e:	d102      	bne.n	801cd76 <_write_r+0x1e>
 801cd70:	6823      	ldr	r3, [r4, #0]
 801cd72:	b103      	cbz	r3, 801cd76 <_write_r+0x1e>
 801cd74:	602b      	str	r3, [r5, #0]
 801cd76:	bd38      	pop	{r3, r4, r5, pc}
 801cd78:	2000c594 	.word	0x2000c594

0801cd7c <_close_r>:
 801cd7c:	b538      	push	{r3, r4, r5, lr}
 801cd7e:	4c06      	ldr	r4, [pc, #24]	; (801cd98 <_close_r+0x1c>)
 801cd80:	2300      	movs	r3, #0
 801cd82:	4605      	mov	r5, r0
 801cd84:	4608      	mov	r0, r1
 801cd86:	6023      	str	r3, [r4, #0]
 801cd88:	f7fe ff25 	bl	801bbd6 <_close>
 801cd8c:	1c43      	adds	r3, r0, #1
 801cd8e:	d102      	bne.n	801cd96 <_close_r+0x1a>
 801cd90:	6823      	ldr	r3, [r4, #0]
 801cd92:	b103      	cbz	r3, 801cd96 <_close_r+0x1a>
 801cd94:	602b      	str	r3, [r5, #0]
 801cd96:	bd38      	pop	{r3, r4, r5, pc}
 801cd98:	2000c594 	.word	0x2000c594

0801cd9c <_fstat_r>:
 801cd9c:	b538      	push	{r3, r4, r5, lr}
 801cd9e:	4c07      	ldr	r4, [pc, #28]	; (801cdbc <_fstat_r+0x20>)
 801cda0:	2300      	movs	r3, #0
 801cda2:	4605      	mov	r5, r0
 801cda4:	4608      	mov	r0, r1
 801cda6:	4611      	mov	r1, r2
 801cda8:	6023      	str	r3, [r4, #0]
 801cdaa:	f7fe ff20 	bl	801bbee <_fstat>
 801cdae:	1c43      	adds	r3, r0, #1
 801cdb0:	d102      	bne.n	801cdb8 <_fstat_r+0x1c>
 801cdb2:	6823      	ldr	r3, [r4, #0]
 801cdb4:	b103      	cbz	r3, 801cdb8 <_fstat_r+0x1c>
 801cdb6:	602b      	str	r3, [r5, #0]
 801cdb8:	bd38      	pop	{r3, r4, r5, pc}
 801cdba:	bf00      	nop
 801cdbc:	2000c594 	.word	0x2000c594

0801cdc0 <_isatty_r>:
 801cdc0:	b538      	push	{r3, r4, r5, lr}
 801cdc2:	4c06      	ldr	r4, [pc, #24]	; (801cddc <_isatty_r+0x1c>)
 801cdc4:	2300      	movs	r3, #0
 801cdc6:	4605      	mov	r5, r0
 801cdc8:	4608      	mov	r0, r1
 801cdca:	6023      	str	r3, [r4, #0]
 801cdcc:	f7fe ff1f 	bl	801bc0e <_isatty>
 801cdd0:	1c43      	adds	r3, r0, #1
 801cdd2:	d102      	bne.n	801cdda <_isatty_r+0x1a>
 801cdd4:	6823      	ldr	r3, [r4, #0]
 801cdd6:	b103      	cbz	r3, 801cdda <_isatty_r+0x1a>
 801cdd8:	602b      	str	r3, [r5, #0]
 801cdda:	bd38      	pop	{r3, r4, r5, pc}
 801cddc:	2000c594 	.word	0x2000c594

0801cde0 <_lseek_r>:
 801cde0:	b538      	push	{r3, r4, r5, lr}
 801cde2:	4c07      	ldr	r4, [pc, #28]	; (801ce00 <_lseek_r+0x20>)
 801cde4:	4605      	mov	r5, r0
 801cde6:	4608      	mov	r0, r1
 801cde8:	4611      	mov	r1, r2
 801cdea:	2200      	movs	r2, #0
 801cdec:	6022      	str	r2, [r4, #0]
 801cdee:	461a      	mov	r2, r3
 801cdf0:	f7fe ff18 	bl	801bc24 <_lseek>
 801cdf4:	1c43      	adds	r3, r0, #1
 801cdf6:	d102      	bne.n	801cdfe <_lseek_r+0x1e>
 801cdf8:	6823      	ldr	r3, [r4, #0]
 801cdfa:	b103      	cbz	r3, 801cdfe <_lseek_r+0x1e>
 801cdfc:	602b      	str	r3, [r5, #0]
 801cdfe:	bd38      	pop	{r3, r4, r5, pc}
 801ce00:	2000c594 	.word	0x2000c594

0801ce04 <__malloc_lock>:
 801ce04:	4770      	bx	lr

0801ce06 <__malloc_unlock>:
 801ce06:	4770      	bx	lr

0801ce08 <_read_r>:
 801ce08:	b538      	push	{r3, r4, r5, lr}
 801ce0a:	4c07      	ldr	r4, [pc, #28]	; (801ce28 <_read_r+0x20>)
 801ce0c:	4605      	mov	r5, r0
 801ce0e:	4608      	mov	r0, r1
 801ce10:	4611      	mov	r1, r2
 801ce12:	2200      	movs	r2, #0
 801ce14:	6022      	str	r2, [r4, #0]
 801ce16:	461a      	mov	r2, r3
 801ce18:	f7fe fec0 	bl	801bb9c <_read>
 801ce1c:	1c43      	adds	r3, r0, #1
 801ce1e:	d102      	bne.n	801ce26 <_read_r+0x1e>
 801ce20:	6823      	ldr	r3, [r4, #0]
 801ce22:	b103      	cbz	r3, 801ce26 <_read_r+0x1e>
 801ce24:	602b      	str	r3, [r5, #0]
 801ce26:	bd38      	pop	{r3, r4, r5, pc}
 801ce28:	2000c594 	.word	0x2000c594

0801ce2c <_init>:
 801ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce2e:	bf00      	nop
 801ce30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce32:	bc08      	pop	{r3}
 801ce34:	469e      	mov	lr, r3
 801ce36:	4770      	bx	lr

0801ce38 <_fini>:
 801ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce3a:	bf00      	nop
 801ce3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce3e:	bc08      	pop	{r3}
 801ce40:	469e      	mov	lr, r3
 801ce42:	4770      	bx	lr
